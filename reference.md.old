# Welcome to Python Bible

For full documentation visit [mkdocs.org](https://www.mkdocs.org).


## Code Examples

A Plain code bloks:

```
import yaml

# in some circumstances, the yaml module we imoprted may be from a different version, so we need
# to tread carefully when poking at it here (it may not have the attributes we expect)
if not getattr(yaml, '__with_libyaml__', False):
    from sys import version_info

    exc = ModuleNotFoundError if version_info >= (3, 6) else ImportError
    raise exc("No module named '_yaml'")
else:
    from yaml._yaml import *
    import warnings
```

### Python Code Blocks
``` py title="example.py" linenums="1" hl_lines="2-3"
import yaml

# in some circumstances, the yaml module we imoprted may be from a different version, so we need
# to tread carefully when poking at it here (it may not have the attributes we expect)
if not getattr(yaml, '__with_libyaml__', False):
    from sys import version_info

    exc = ModuleNotFoundError if version_info >= (3, 6) else ImportError
    raise exc("No module named '_yaml'")
else:
    from yaml._yaml import *
    import warnings
```

### Emojis
:smile:

## Commands

* `mkdocs new [dir-name]` - Create a new project.
* `mkdocs serve` - Start the live-reloading docs server.
* `mkdocs build` - Build the documentation site.
* `mkdocs -h` - Print help message and exit.

## Project layout

    mkdocs.yml    # The configuration file.
    docs/
        index.md  # The documentation homepage.
        ...       # Other markdown pages, images and other files.


## Include markdown

{%
   include-markdown "../expresiones-sentencias-bloques/sentencias-de-un-programa.md"
   start="<!--sentencias-de-seleccion-start-->"
   end="<!--sentencias-de-seleccion-end-->"
%}



print(1+2+3+4+5+6+7+8+9+10)

print(int(10*(10+1)/2))

!!! warning "¡Atención! Alcance y Limitación"
    Asumimos que el usuario siempre va a ingresar una edad válida.
    Para cualquier otro caso, se desestimará el resultado obtenido.


print (matriz)

print() # Imprimo un salto de linea
for elemento in matriz:
    print(elemento, end="")


print() # Imprimo un salto de linea
for elemento in matriz:
    for subelemento in elemento:
        print(subelemento, end=" ")



...



#### Ejemplo de paradigma imperativo vs. paradigma declarativo

Como dijimos, el paradigma imperativo consiste en explicar muy bien cómo funciona un algoritmo. Las instrucciones de nuestro programa deben ser bastante explícitas. El "cómo" se realiza cada paso del algoritmo debe ser muy claro.

Por ejemplo, si queremos crear imperativamente una lista de números del 1 al 10, podemos declarar una lista vacía y una variable contadora y, luego, agregar el valor de la variable contadora como un elemento más a la lista en cada repetición de una estructura iterativa (cíclica), mientras se va incrementando de uno en uno el valor de la variable contadora hasta llegar al 10, inclusive. 

La programación declarativa, contrariamente, prioriza la claridad del resultado por encima que la claridad del paso a paso.

Entonces, para crear una lista del 1 al 10, no definiríamos explícitamente el paso a paso de agregar un número a la lista en cada iteración del ciclo. Más bien, utilizaríamos una función que agregue la cantidad de números que necesitemos.

No te preocupes por tanta terminología, la iremos aprendiendo más adelante. Lo importante para resaltar es la diferencia en el código escrito en cada caso. Veamos:

``` py title="Programación imperativa"
int lista = []
int contador = 1
while contador <= 10:
    lista.append(contador)
    contador = contador + 1
```

``` py title="Programación declarativa"
lista = list(range(1, 11))
```

---.

Teoria de los lenguajes para POO


1.  **Clases**: una clase es una estructura que se utiliza para definir objetos. Actúa como un plano o una plantilla para crear objetos específicos con características y comportamientos comunes. Las clases definen su comportamiento a partir de los métodos, la herencia y el polimorfismo.

2.  **Objetos**: Los objetos son instancias de una clase, y se utilizan para modelar entidades del mundo real en un programa. Los objetos contienen propiedades y métodos que se utilizan para interactuar con ellos.

3.  **Métodos**: los métodos son funciones que se definen en una clase y se utilizan para realizar acciones en los objetos de esa clase.

---

Visión general de los lenguajes de Programación

# - Lenguajes de programación de scripting: Estos lenguajes se utilizan principalmente para automatizar tareas y realizar scripts rápidos.
#   Ejemplos: Python, Ruby, Perl.

# - Lenguajes de programación de bases de datos: Estos lenguajes se utilizan para interactuar con bases de datos y realizar consultas.
#   Ejemplos: SQL, PL/SQL, T-SQL.

# - Lenguajes de programación web: Estos lenguajes se utilizan para desarrollar aplicaciones web y sitios web interactivos.
#   Ejemplos: HTML, CSS, JavaScript.

# - Lenguajes de programación de sistemas: Estos lenguajes se utilizan para desarrollar sistemas operativos y software de bajo nivel.
#   Ejemplos: C, C++, Rust.

# - Lenguajes de programación de inteligencia artificial: Estos lenguajes se utilizan para desarrollar algoritmos de inteligencia artificial y aprendizaje automático.
#   Ejemplos: Python, R, MATLAB.

# - Lenguajes de programación de scripting de videojuegos: Estos lenguajes se utilizan para desarrollar videojuegos y simulaciones.
#   Ejemplos: C#, Lua, Python.

# - Lenguajes de programación de aplicaciones móviles: Estos lenguajes se utilizan para desarrollar aplicaciones móviles.
#   Ejemplos: Swift, Kotlin, Java.

# - Lenguajes de programación de sistemas embebidos: Estos lenguajes se utilizan para desarrollar software para sistemas embebidos.
#   Ejemplos: C, C++, Assembly.

# - Lenguajes de programación de controladores de dispositivos: Estos lenguajes se utilizan para desarrollar controladores de dispositivos.
#   Ejemplos: C, C++.

# - Lenguajes de programación de scripting de automatización: Estos lenguajes se utilizan para automatizar tareas y procesos.
#   Ejemplos: Python, PowerShell, Bash.

# - Lenguajes de programación de redes: Estos lenguajes se utilizan para desarrollar aplicaciones de red y protocolos de comunicación.
#   Ejemplos: C, C++, Python.

# - Lenguajes de programación de sistemas distribuidos: Estos lenguajes se utilizan para desarrollar sistemas distribuidos y aplicaciones en la nube.
#   Ejemplos: Java, Python, Go.

# - Lenguajes de programación de tiempo real: Estos lenguajes se utilizan para desarrollar sistemas de tiempo real y aplicaciones críticas.
#   Ejemplos: C, Ada.

# - Lenguajes de programación de seguridad: Estos lenguajes se utilizan para desarrollar software seguro y proteger contra vulnerabilidades.
#   Ejemplos: Rust, Ada, Java.

# - Lenguajes de programación de simulación: Estos lenguajes se utilizan para desarrollar simulaciones y modelos matemáticos.
#   Ejemplos: MATLAB, Simulink, R.

# - Lenguajes de programación de análisis de datos: Estos lenguajes se utilizan para el análisis y procesamiento de datos.
#   Ejemplos: Python, R, Julia.

# - Lenguajes de programación de control de versiones: Estos lenguajes se utilizan para controlar y gestionar versiones de código fuente.
#   Ejemplos: Git, Mercurial, Subversion.

# - Lenguajes de programación de automatización de pruebas: Estos lenguajes se utilizan para automatizar pruebas de software.
#   Ejemplos: Python, Java, C#.

# - Lenguajes de programación de macros: Estos lenguajes se utilizan para automatizar tareas y personalizar aplicaciones.
#   Ejemplos: VBA, AutoHotkey, Lisp.

# - Lenguajes de programación de realidad virtual y aumentada: Estos lenguajes se utilizan para desarrollar aplicaciones de realidad virtual y aumentada.
#   Ejemplos: C#, C++, Unity.

# - Lenguajes de programación de control de robots: Estos lenguajes se utilizan para controlar robots y sistemas de automatización.
#   Ejemplos: Python, C++, MATLAB.

# - Lenguajes de programación de criptografía: Estos lenguajes se utilizan para desarrollar algoritmos de criptografía y seguridad.
#   Ejemplos: Python, Java, C++.

# - Lenguajes de programación de compiladores: Estos lenguajes se utilizan para desarrollar compiladores y analizadores de código.
#   Ejemplos: C, C++, Java.

# - Lenguajes de programación de interfaces de usuario: Estos lenguajes se utilizan para desarrollar interfaces de usuario y aplicaciones gráficas.
#   Ejemplos: HTML, CSS, JavaScript.

# - Lenguajes de programación de control de calidad: Estos lenguajes se utilizan para realizar pruebas de calidad y asegurar la fiabilidad del software.
#   Ejemplos: Python, Java, C#.

# - Lenguajes de programación de automatización de procesos de negocio: Estos lenguajes se utilizan para automatizar procesos de negocio.
#   Ejemplos: Python, Java, JavaScript.

# - Lenguajes de programación de análisis de imágenes: Estos lenguajes se utilizan para el análisis y procesamiento de imágenes.
#   Ejemplos: Python, MATLAB, OpenCV.

# - Lenguajes de programación de análisis de texto: Estos lenguajes se utilizan para el análisis y procesamiento de texto.
#   Ejemplos: Python, R, Java.

# - Lenguajes de programación de sistemas expertos: Estos lenguajes se utilizan para desarrollar sistemas expertos y sistemas basados en reglas.
#   Ejemplos: Prolog, CLIPS, Drools.

# - Lenguajes de programación de sistemas de gestión de bases de datos: Estos lenguajes se utilizan para desarrollar sistemas de gestión de bases de datos.
#   Ejemplos: SQL, PL/SQL, T-SQL.

# - Lenguajes de programación de sistemas de control de versiones: Estos lenguajes se utilizan para desarrollar sistemas de control de versiones.
#   Ejemplos: Git, Mercurial, Subversion.

# - Lenguajes de programación de sistemas de gestión de proyectos: Estos lenguajes se utilizan para desarrollar sistemas de gestión de proyectos.
#   Ejemplos: Python, Java, C#.

---





Por ejemplo:

    ``` title="Terminal (Entrada/Salida)"
    
    ```

    ??? example "Ver solución propuesta"
        ``` py title="Python"
        # Importación de los módulos necesarios para la ejecución del programa
        
        # Definición de funciones
        
        # Bloque principal del programa
        
        ```

        En esta solución propuesta ...

⋮

…

; o podrías consultar el tema ahora, si quisieras, haciendo clic [aquí](../alcance-de-variable/){:target="_blank"}.