{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"La biblia del programador","text":""},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/","title":"Introducci\u00f3n a la abstracci\u00f3n","text":""},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#introduccion","title":"Introducci\u00f3n","text":"<p>El objetivo de la abstracci\u00f3n es simplificar la programaci\u00f3n y promover la reutilizaci\u00f3n de c\u00f3digo.</p> <p>Al dividir un programa en tareas m\u00e1s simples, se maneja la complejidad de manera m\u00e1s eficiente, se organiza el c\u00f3digo de forma modular y escalable y permite cambios sin afectar otras partes del programa.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#definicion","title":"Definici\u00f3n","text":"abstracci\u00f3n<pre><code>Acci\u00f3n y efecto de abstraer o abstraerse.\n</code></pre> abstraer<pre><code>Apartar, separar por medio de una operaci\u00f3n intelectual un rasgo o una cualidad de algo para analizarlos aisladamente o considerarlos en su pura esencia o noci\u00f3n.\nHacer caso omiso de algo, o dejarlo a un lado.\n</code></pre> <p>El objetivo de la abstracci\u00f3n es simplificar la programaci\u00f3n y promover la reutilizaci\u00f3n de c\u00f3digo, ya que, en t\u00e9rminos generales, se refiere al proceso de separar o distanciar los aspectos esenciales de un problema de sus detalles concretos y particulares. </p> <p>En esencia, la abstracci\u00f3n implica centrarse en los elementos fundamentales y generales, ignorando o dejando de lado los detalles espec\u00edficos y menos relevantes.</p> <p>Es un proceso de simplificaci\u00f3n y generalizaci\u00f3n que permite comprender, comunicar y trabajar con ideas y elementos complejos de manera m\u00e1s eficiente.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#abstraccion-en-el-contexto-de-la-programacion-y-la-informatica","title":"Abstracci\u00f3n en el contexto de la programaci\u00f3n y la inform\u00e1tica","text":"<p>La abstracci\u00f3n es un concepto fundamental en la programaci\u00f3n y se encuentra en varios t\u00f3picos, pero es m\u00e1s prominente en los siguientes:</p> <ol> <li> <p>Programaci\u00f3n Orientada a Objetos (POO): La abstracci\u00f3n es un pilar de la POO. Se utiliza para ocultar la complejidad de los detalles y mostrar solo la funcionalidad al usuario. Por ejemplo, cuando se crea una clase (que es una abstracci\u00f3n de un objeto del mundo real), no necesitamos entender c\u00f3mo funciona internamente para poder usarla.</p> </li> <li> <p>Dise\u00f1o de Software y Arquitectura: La abstracci\u00f3n ayuda a separar las preocupaciones y a crear componentes de software m\u00e1s manejables. Por ejemplo, en el dise\u00f1o de sistemas, se pueden crear capas de abstracci\u00f3n para separar la l\u00f3gica de negocio de la l\u00f3gica de acceso a datos.</p> </li> <li> <p>Algoritmos y Estructuras de Datos: Al dise\u00f1ar algoritmos y estructuras de datos, a menudo se utiliza la abstracci\u00f3n para simplificar el problema y concentrarse en lo que realmente importa.</p> </li> </ol> <p>Por lo tanto, la abstracci\u00f3n puede entrar en varios t\u00f3picos de programaci\u00f3n dependiendo del contexto.</p> <p>\u00a1Para recordar!</p> <p>En el contexto de la programaci\u00f3n y la inform\u00e1tica, la abstracci\u00f3n se refiere proceso que tiene la capacidad de representar un conjunto de datos, conceptos y elementos complejos del mundo real de manera simplificada, concisa y generalizada, a trav\u00e9s de modelos o estructuras que permiten trabajar con ellos de manera m\u00e1s eficiente y comprensible en un programa.</p> <p>La abstracci\u00f3n busca capturar los aspectos esenciales y relevantes de una entidad o problema, omitiendo los detalles innecesarios.</p> <p>En la programaci\u00f3n, se utilizan t\u00e9cnicas de abstracci\u00f3n, como la encapsulaci\u00f3n y la creaci\u00f3n de interfaces, para ocultar los detalles internos y complejos de un componente o sistema, y proporcionar una forma m\u00e1s f\u00e1cil de interactuar con \u00e9l. Puede manifestarse en diferentes niveles y paradigmas:</p> <ul> <li>En un nivel m\u00e1s alto, puede implicar la creaci\u00f3n de interfaces, clases o m\u00f3dulos que encapsulan la funcionalidad y ocultan los detalles de implementaci\u00f3n subyacentes. Esto permite que los usuarios o programadores interact\u00faen con estas abstracciones sin tener que preocuparse por los detalles internos.</li> <li>En un nivel m\u00e1s bajo, la abstracci\u00f3n puede involucrar la creaci\u00f3n de funciones, procedimientos o bloques de c\u00f3digo que agrupan instrucciones relacionadas y se utilizan para resolver tareas espec\u00edficas. Estas abstracciones ayudan a modularizar y organizar el c\u00f3digo, facilitando su mantenimiento y reutilizaci\u00f3n.</li> </ul>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#abstraccion-en-programacion-imperativa-funciones-y-procedimientos","title":"Abstracci\u00f3n en programaci\u00f3n imperativa: funciones y procedimientos","text":"<p>En programaci\u00f3n imperativa, la abstracci\u00f3n se refiere a la capacidad de agrupar un conjunto de instrucciones en una sola unidad l\u00f3gica y tratarla como una entidad \u00fanica. La idea es simplificar y organizar el c\u00f3digo para facilitar su comprensi\u00f3n y mantenimiento.</p> <p>En este paradigma, la abstracci\u00f3n se logra mediante el uso de funciones o procedimientos (tambi\u00e9n conocidos como subrutinas):</p> <ul> <li>Una funci\u00f3n es un bloque de c\u00f3digo que toma ciertos valores de entrada, realiza una serie de operaciones y devuelve un resultado. </li> <li>Un procedimiento es similar a una funci\u00f3n, pero no devuelve un valor espec\u00edfico, sino que realiza una serie de acciones.</li> </ul> <p>Al utilizar funciones y procedimientos, se pueden agrupar instrucciones relacionadas en una \u00fanica entidad abstracta. Esto permite separar la l\u00f3gica del programa en m\u00f3dulos m\u00e1s peque\u00f1os y manejables, lo que facilita la comprensi\u00f3n del c\u00f3digo y su reutilizaci\u00f3n en diferentes partes del programa.</p> <p>La abstracci\u00f3n en programaci\u00f3n imperativa tambi\u00e9n puede lograrse mediante el uso de estructuras abstractas de datos. Estas son estructuras que definen un conjunto de operaciones y reglas de acceso, pero ocultan los detalles internos de implementaci\u00f3n. </p> <p>Al utilizar estructuras de datos abstractas, se puede trabajar con datos de manera m\u00e1s abstracta y enfocarse en la forma en que se manipulan y acceden, en lugar de preocuparse por los detalles espec\u00edficos de almacenamiento y organizaci\u00f3n.</p> <p>Por ahora no te preocupes. Suena complejo, pero lo entender\u00e1s muy bien cuando veamos el tema en profundidad, m\u00e1s adelante.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#introduccion-a-la-abstraccion-en-el-contexto-de-la-programacion-visual","title":"Introducci\u00f3n a la abstracci\u00f3n en el contexto de la programaci\u00f3n visual","text":"<p>Al igual que con la plataforma de Pilas Bloques, Scatch es una excelente manera de ingresar a la programaci\u00f3n de computadoras porque te permite jugar con bloques de construcci\u00f3n de una manera visual, sin tener que preocuparte por la sintaxis de llaves, puntos y comas, par\u00e9ntesis y similares.</p> <p>Scratch es un lenguaje de programaci\u00f3n visual desarrollado por el MIT. Y utiliza bloques de construcci\u00f3n de codificaci\u00f3n esenciales similares a los vistos en Pilas Bloques. Posee un IDE (entorno de desarrollo integrado) muy amigable que te permitir\u00e1 resolver una gran variedad de problemas computacionales, aunque no es tema para esta bibliograf\u00eda. Solo te contaremos que Scratch posee un gato estrella que nos ayudar\u00e1 a comprender el concepto de abstracci\u00f3n.</p> <p></p> <p>Te interesar\u00eda saber:</p> <p>Al gato, por cierto, podemos llamarlo sprite: un t\u00e9rmino general utilizado en la programaci\u00f3n de juegos para un objeto o personaje en la pantalla con el que el jugador interactuar\u00e1.</p> <p>Si quieres echarle un vistazo, puedes ingresar en https://scratch.mit.edu/</p> <p>Junto con la pseudocodificaci\u00f3n, la abstracci\u00f3n es una habilidad y un concepto esencial dentro de la programaci\u00f3n inform\u00e1tica.</p> <p>Definici\u00f3n</p> <p>Dijimos que la abstracci\u00f3n es el acto de simplificar un problema en problemas cada vez m\u00e1s peque\u00f1os.</p> <p>Por ejemplo, si estuviera organizando una gran cena para sus amigos, \u00a1el problema de tener que cocinar toda la comida podr\u00eda ser bastante abrumador! Sin embargo, si divide la tarea de cocinar la comida en tareas (o problemas) cada vez m\u00e1s peque\u00f1os, la gran tarea de crear esta deliciosa comida puede parecer menos desafiante.</p> <p>En programaci\u00f3n, e incluso dentro de Scratch, podemos ver la abstracci\u00f3n en acci\u00f3n. Realicemos un programa que haga que el gato haga 3 maullidos:</p> <p></p> <p>Date cuenta de que estamos haciendo lo mismo, repitiendo bloques una y otra vez. De hecho, si te ves codificando repetidamente las mismas declaraciones, es probable que puedas programar de manera m\u00e1s ingeniosa, abstrayendo el c\u00f3digo repetitivo.</p> <p>Puedes modificar tu c\u00f3digo de la siguiente manera, usando un bucle, ciclo o bloque de repetici\u00f3n:</p> <p></p> <p>Ahora nuestro programa logra los mismos resultados, pero con menos bloques. </p> <p>Podemos considerar que tiene un mejor dise\u00f1o: si hay algo que quisi\u00e9ramos cambiar, solo tendr\u00edamos que cambiarlo en un solo lugar en lugar de tres.</p> <p>Observe que el ciclo hace exactamente lo que hizo el programa anterior. Sin embargo, el problema se simplifica abstrayendo la repetici\u00f3n a un bloque que repite el c\u00f3digo para nosotros.</p> <p>Podemos usar la idea de abstracci\u00f3n para combinar varias acciones como si fuera una sola, para que podamos usarlas y pensar en ellas m\u00e1s f\u00e1cilmente. Para ello, debemos implementar un procedimiento. Este concepto lo veremos m\u00e1s adelante, pero por el momento hay que entenderlo como un bloque de c\u00f3digo independiente que realizar una tarea espec\u00edfica, y tienen un identificador \u00fanico para ser llamado:</p> <p></p> <p>Nota que estamos definiendo nuestro propio procedimiento (bloque de c\u00f3digo aislado) llamado meow. La funci\u00f3n reproduce el sonido meow, y luego espera un segundo. As\u00ed, la l\u00f3gica del procedimiento queda aislada de su implementaci\u00f3n.</p> <p>Ahora, nuestro bloque principal del programa solo puede usar el procedimiento meow, y podremos leer este c\u00f3digo m\u00e1s tarde y entender lo que hace m\u00e1s f\u00e1cilmente.</p> <p>Aqu\u00ed puedes ver que cuando se hace clic en la bandera verde, la llamada al procedimiento meow se repite tres veces.</p> <p>Incluso, el procedimiento puede tener un par\u00e1metro n, y recibir un valor como argumento que le indique que debe repetir el bloque de c\u00f3digo varias veces:</p> <p></p> <p>Nota como n toma el valor pasado desde la llamada meow 3 times.</p> <p>Ahora, el procedimiento meow consigue el mismo efecto, pero podemos reutilizarlo f\u00e1cilmente o cambiar el n\u00famero de veces que nuestro gato dice miau.</p> <p>\u00a1Para recordar!</p> <p>Una buena estrategia cuando se programa es dividir un problema m\u00e1s grande en problemas m\u00e1s peque\u00f1os y resolverlos primero.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#ejemplo-de-abstraccion-en-programacion-imperativa","title":"Ejemplo de abstracci\u00f3n en programaci\u00f3n imperativa","text":"<p>Un ejemplo de abstracci\u00f3n en programaci\u00f3n imperativa se puede ver en el uso de funciones o procedimientos para encapsular un conjunto de instrucciones relacionadas y reutilizables. Estas abstracciones permiten simplificar y modularizar el c\u00f3digo, evitando la repetici\u00f3n y mejorando la legibilidad.</p> <p>Supongamos que tenemos un programa que necesita calcular el \u00e1rea de diferentes figuras geom\u00e9tricas, como cuadrados, c\u00edrculos y tri\u00e1ngulos. </p> <p>Podemos utilizar funciones para abstraer la l\u00f3gica de c\u00e1lculo del \u00e1rea para cada una de estas figuras. </p> <p>Aqu\u00ed hay un ejemplo en Python:</p> Python<pre><code>def calcular_area_cuadrado(lado):\n  return lado * lado\n\ndef calcular_area_circulo(radio):\n  PI = 3.14159265359 \n  return PI * radio * radio\n\ndef calcular_area_triangulo(base, altura):\n  return base * altura / 2\n\nlado = 5\narea_cuadrado = calcular_area_cuadrado(lado)\nprint(\"El \u00e1rea del cuadrado de lado\", lado, \"es:\", area_cuadrado)\n\nradio = 3\narea_circulo = calcular_area_circulo(radio)\nprint(\"El \u00e1rea del c\u00edrculo de radio\", radio, \"es:\", area_circulo)\n\nbase = 4\naltura = 6\narea_triangulo = calcular_area_triangulo(base, altura)\nprint(\"El \u00e1rea del tri\u00e1ngulo de base\", base, \"y altura\", altura, \"es:\", area_triangulo)\n</code></pre> <p>En este ejemplo, hemos creado tres funciones: * calcular_area_cuadrado * calcular_area_circulo * calcular_area_triangulo</p> <p>Cada una de estas funciones recibe los par\u00e1metros necesarios para realizar el c\u00e1lculo del \u00e1rea y devuelve el resultado correspondiente.</p> Python<pre><code>def calcular_area_cuadrado(lado):\n  return lado * lado\n\ndef calcular_area_circulo(radio):\n  PI = 3.14159265359 \n  return PI * radio * radio\n\ndef calcular_area_triangulo(base, altura):\n  return base * altura / 2\n</code></pre> <p>Gracias a estas abstracciones, podemos utilizar estas funciones en diferentes partes de nuestro programa para calcular el \u00e1rea de las diferentes figuras geom\u00e9tricas sin tener que repetir el c\u00f3digo de c\u00e1lculo en cada instancia. </p> <p>En este caso, las funciones abstractas nos permiten calcular el \u00e1rea de diferentes figuras geom\u00e9tricas sin preocuparnos por los detalles espec\u00edficos de cada c\u00e1lculo. Esto simplifica y organiza el c\u00f3digo, y facilita su reutilizaci\u00f3n en diferentes partes del programa donde sea necesario calcular \u00e1reas.</p> Python<pre><code>lado = 5\narea_cuadrado = calcular_area_cuadrado(lado)\nprint(\"El \u00e1rea del cuadrado de lado\", lado, \"es:\", area_cuadrado)\n\nradio = 3\narea_circulo = calcular_area_circulo(radio)\nprint(\"El \u00e1rea del c\u00edrculo de radio\", radio, \"es:\", area_circulo)\n\nbase = 4\naltura = 6\narea_triangulo = calcular_area_triangulo(base, altura)\nprint(\"El \u00e1rea del tri\u00e1ngulo de base\", base, \"y altura\", altura, \"es:\", area_triangulo)\n</code></pre>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#abstraccion-en-programacion-orientada-a-objetos-clases-interfaces-y-objetos","title":"Abstracci\u00f3n en programaci\u00f3n orientada a objetos: clases, interfaces y objetos","text":"<p>Como dijimos, la abstracci\u00f3n se refiere proceso que tiene la capacidad de representar un conjunto de datos, conceptos y elementos complejos del mundo real de manera simplificada, concisa y generalizada, a trav\u00e9s de modelos o estructuras que permiten trabajar con ellos de manera m\u00e1s eficiente y comprensible en un programa.</p> <p>Es una t\u00e9cnica que permite aislar ciertos aspectos relevantes de un problema y enfocarse \u00fanicamente en ellos, ignorando los detalles innecesarios.</p> <p>\u00a1Para recordar!</p> <p>En la programaci\u00f3n orientada a objetos, la abstracci\u00f3n se logra mediante la creaci\u00f3n de clases, que son plantillas o moldes para crear objetos. Una clase define las propiedades y comportamientos que los objetos de ese tipo pueden tener. Los objetos, a su vez, son instancias concretas de esas clases. </p> <p>Por el momento, es todo lo que debes saber. Este paradigma de programaci\u00f3n se estudiar\u00e1 en profundidad mucho m\u00e1s adelante. Un paradigma es una manera o estilo de programaci\u00f3n de software</p> <p>La abstracci\u00f3n permite ocultar los detalles internos de una clase u objeto y proporcionar una interfaz clara y bien definida para interactuar con ellos. Esto significa que un usuario o programador puede utilizar un objeto sin necesidad de conocer c\u00f3mo est\u00e1 implementado internamente. Solo necesita saber qu\u00e9 m\u00e9todos o funciones est\u00e1n disponibles y c\u00f3mo usarlos.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#ejemplo-de-abstraccion-en-programacion-orientada-a-objetos","title":"Ejemplo de abstracci\u00f3n en programaci\u00f3n orientada a objetos","text":"<p>Un ejemplo de abstracci\u00f3n en programaci\u00f3n orientada a objetos se puede ver en el uso de una clase en lenguajes de programaci\u00f3n como Java o Python. Una clase es una abstracci\u00f3n que encapsula datos y comportamientos relacionados en un solo objeto. No te preocupes, lo veremos mucho m\u00e1s adelante.</p> <p>Supongamos que estamos desarrollando un sistema para una biblioteca y necesitamos representar los libros. Podemos crear una clase llamada Libro que abstraiga las propiedades y acciones asociadas a un libro. </p> <p>Aqu\u00ed hay un ejemplo en Python:</p> Python<pre><code>class Libro:\n\n   def __init__(self, titulo, autor):\n     self.titulo = titulo\n     self.autor = autor\n\n   def mostrar_informacion(self):\n     print(\"T\u00edtulo:\", self.titulo, \" | \", \"Autor:\", self.autor)\n\n   def prestar(self):\n     print(\"El libro\", self.titulo, \"ha sido prestado.\")\n\n   def devolver(self):\n     print(\"El libro\", self.titulo, \"ha sido devuelto.\")\n\nmi_libro = Libro(\"El Gran Gatsby\", \"F. Scott Fitzgerald\") # Crear un objeto Libro\nmi_libro.mostrar_informacion() # Mostrar informaci\u00f3n del libro\nmi_libro.prestar() # Prestar el libro\nmi_libro.devolver() # Devolver el libro\n</code></pre> <p>En este ejemplo, la clase Libro abstrae las propiedades o atributos de un libro, como el t\u00edtulo y el autor; y las acciones o m\u00e9todos asociados, como mostrar la informaci\u00f3n del libro, prestarlo y devolverlo.</p> <p>Gracias a esta abstracci\u00f3n, podemos crear objetos individuales basados en esta clase y utilizar sus m\u00e9todos para interactuar con los libros de manera m\u00e1s sencilla.</p> Python<pre><code>class Libro:\n\n   def __init__(self, titulo, autor):\n     self.titulo = titulo\n     self.autor = autor\n\n   def mostrar_informacion(self):\n     print(\"T\u00edtulo:\", self.titulo, \" | \", \"Autor:\", self.autor)\n\n   def prestar(self):\n     print(\"El libro\", self.titulo, \"ha sido prestado.\")\n\n   def devolver(self):\n     print(\"El libro\", self.titulo, \"ha sido devuelto.\")\n</code></pre> <p>En este caso, la clase Libro nos permite abstraer los detalles espec\u00edficos de cada libro y proporcionar una interfaz clara y coherente para interactuar con ellos. </p> <p>Esta abstracci\u00f3n simplifica el manejo y la manipulaci\u00f3n de los libros en nuestro sistema de biblioteca.</p> Python<pre><code>mi_libro = Libro(\"El Gran Gatsby\", \"F. Scott Fitzgerald\") # Crear un objeto Libro\nmi_libro.mostrar_informacion() # Mostrar informaci\u00f3n del libro\nmi_libro.prestar() # Prestar el libro\nmi_libro.devolver() # Devolver el libro\n</code></pre>"},{"location":"unidades/abstraccion/resumen-sobre-abstraccion/","title":"Abstracci\u00f3n: resumen","text":""},{"location":"unidades/abstraccion/resumen-sobre-abstraccion/#resumen","title":"Resumen","text":"<p>En el contexto de la programaci\u00f3n y la inform\u00e1tica, la abstracci\u00f3n se refiere proceso que tiene la capacidad de representar un conjunto de datos, conceptos y elementos complejos del mundo real de manera simplificada, concisa y generalizada, a trav\u00e9s de modelos o estructuras que permiten trabajar con ellos de manera m\u00e1s eficiente y comprensible en un programa.</p> <p>Se aplica a diferentes niveles y paradigmas, como la encapsulaci\u00f3n de funcionalidades, la modularizaci\u00f3n del c\u00f3digo y la representaci\u00f3n abstracta de datos. </p> <p>En la programaci\u00f3n imperativa, la abstracci\u00f3n se logra mediante el uso de funciones, procedimientos y estructuras de datos abstractas. Estas t\u00e9cnicas permiten agrupar instrucciones relacionadas en unidades l\u00f3gicas, simplificar el c\u00f3digo y promover la reutilizaci\u00f3n y modularidad.</p> <p>En la programaci\u00f3n orientada a objetos, la abstracci\u00f3n se logra mediante la creaci\u00f3n de clases, que son plantillas o moldes para crear objetos. Una clase define las propiedades y comportamientos que los objetos de ese tipo pueden tener. Los objetos, a su vez, son instancias concretas de esas clases. </p> <p>Por lo tanto, el objetivo de la abstracci\u00f3n es simplificar la programaci\u00f3n y promover la reutilizaci\u00f3n de c\u00f3digo. Al dividir un problema complejo en elementos abstra\u00eddos m\u00e1s simples, se puede manejar la complejidad de manera m\u00e1s eficiente, organizar el c\u00f3digo de forma modular y permitir cambios sin afectar otras partes de la resoluci\u00f3n de dicho problema.</p> <p>Es un proceso de simplificaci\u00f3n y generalizaci\u00f3n que permite comprender, comunicar y trabajar con ideas y elementos complejos de manera m\u00e1s eficiente</p> <p>La abstracci\u00f3n tiene como objetivo facilitar la comprensi\u00f3n, el mantenimiento y la reutilizaci\u00f3n del c\u00f3digo.</p>"},{"location":"unidades/algoritmos/algoritmos-y-estructura-de-datos/","title":"Algoritmos y estructuras de datos","text":""},{"location":"unidades/algoritmos/algoritmos-y-estructura-de-datos/#como-se-complementan-los-algoritmos-y-las-estructuras-de-datos","title":"\u00bfC\u00f3mo se complementan los algoritmos y las estructuras de datos?","text":"<p>Aprender sobre algoritmos va de la mano con las estructuras de datos. Ambos temas son complementarios y es importante entender c\u00f3mo se relacionan.</p> <p>Info</p> <p>Los algoritmos y las estructuras de datos son conceptos fundamentales en la inform\u00e1tica y la programaci\u00f3n:</p> <pre><code>* Los algoritmos son un conjunto de pasos utilizados para resolver un problema o realizar una tarea espec\u00edfica.\n* Las estructuras de datos se refieren a la forma en que los datos se organizan y almacenan en la memoria.\n</code></pre> <p>Los algoritmos son un conjunto de instrucciones o pasos que un programa sigue para realizar una tarea. </p> <p>Los algoritmos se pueden utilizar para realizar una amplia gama de tareas, desde ordenar datos hasta buscar informaci\u00f3n y realizar c\u00e1lculos complejos. </p> <p>Algunos algoritmos comunes incluyen algoritmos de ordenamiento como bubble sort, quicksort y merge sort, y algoritmos de b\u00fasqueda como la b\u00fasqueda binaria y la b\u00fasqueda lineal.</p> <p>Por otro lado, las estructuras de datos son importantes porque permiten a los programadores almacenar y manipular datos de manera eficiente. </p> <p>Algunas estructuras de datos comunes incluyen matrices, listas enlazadas, pilas, colas, \u00e1rboles y grafos. </p> <p>Cada estructura de datos tiene sus propias ventajas y desventajas, y elegir la adecuada para una tarea en particular puede tener un impacto significativo en la eficiencia y efectividad de un programa.</p> <p>Los algoritmos y las estructuras de datos se utilizan a menudo juntos en la programaci\u00f3n para crear programas eficientes y efectivos. Por ejemplo, un programador </p> <ul> <li>podr\u00eda utilizar un algoritmo de b\u00fasqueda binaria para buscar a trav\u00e9s de una matriz de datos ordenada, o</li> <li>podr\u00eda utilizar una estructura de datos de lista enlazada para almacenar y manipular datos.</li> </ul> <p>Comprender las estructuras de datos y los algoritmos es esencial para cualquier persona interesada en la programaci\u00f3n, ya que se utilizan en una amplia gama de aplicaciones e industrias, desde el desarrollo de software hasta la inteligencia artificial y las finanzas. </p> <p>Info</p> <p>Hay muchos recursos disponibles para aprender sobre las estructuras de datos y los algoritmos, incluyendo libros, cursos en l\u00ednea y comunidades de programaci\u00f3n.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/","title":"Introducci\u00f3n a los algoritmos","text":""},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#introduccion","title":"Introducci\u00f3n","text":"<p>Un algoritmo es una serie de instrucciones o secuencia de pasos bien definidos y ordenados que resuelve un problema o realiza una tarea espec\u00edfica.</p> <p>La aplicaci\u00f3n de algoritmos se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#resolucion-de-un-problema","title":"Resoluci\u00f3n de un problema","text":"<p>Recordemos que la programaci\u00f3n de computadoras equivale a pensar en\u00a0la resoluci\u00f3n de un problema\u00a0como el proceso de tomar alguna entrada (un problema que queremos resolver) y generar alguna salida (la soluci\u00f3n a nuestro problema), resolviendo as\u00ed dicho problema.</p> <p>Ahora que podemos representar entradas y salidas, podemos trabajar en la resoluci\u00f3n de problemas. La caja negra que transforma las entradas en salidas contiene algoritmos, instrucciones paso a paso para resolver problemas:</p> <p></p> <p>\u00a1Para recordar!</p> <p>La resoluci\u00f3n de problemas es fundamental para las ciencias de la computaci\u00f3n y la programaci\u00f3n de computadoras.</p> <p>Imagina el problema b\u00e1sico de tratar de localizar un solo nombre en una gu\u00eda telef\u00f3nica impresa. El viejo equivalente a una aplicaci\u00f3n en nuestros tel\u00e9fonos que almacene nuestros contactos, con sus nombres y n\u00fameros de tel\u00e9fono ordenados alfab\u00e9ticamente. \u00bfC\u00f3mo podr\u00edas hacer esto?</p> <p>Un enfoque podr\u00eda ser abrir la gu\u00eda y comenzar desde la primera p\u00e1gina, buscando el nombre una p\u00e1gina a la vez hasta otra p\u00e1gina, hasta llegar a la \u00faltima p\u00e1gina. Este enfoque ser\u00eda correcto, ya que eventualmente encontrar\u00edamos el nombre si est\u00e1 en el libro.</p> <p>Otro enfoque podr\u00eda ser buscar el nombre hojeando la gu\u00eda de a dos p\u00e1ginas a la vez, aunque este enfoque no ser\u00e1 correcto ya que podr\u00edamos saltarnos la p\u00e1gina que tiene el nombre buscado.</p> <p>El enfoque final, y quiz\u00e1s mejor, podr\u00eda ser abrir la gu\u00eda telef\u00f3nica por la mitad y preguntar:</p> <ol> <li> <p>\u201c\u00bfEl nombre que estoy buscando est\u00e1 a la izquierda o a la derecha?\u201d </p> </li> <li> <p>Decidir si el nombre estar\u00e1 en la mitad izquierda o derecha del libro (porque el libro est\u00e1 alfabetizado) y reducir el tama\u00f1o de nuestro problema a la mitad. </p> </li> <li> <p>Luego, repetir este proceso hasta encontrar nuestro nombre, dividiendo el problema por la mitad cada vez.</p> </li> </ol> <p>Info</p> <p>Cada uno de estos enfoques podr\u00eda definirse como algoritmo.\u00a0</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#que-es-un-algoritmo","title":"\u00bfQu\u00e9 es un algoritmo?","text":"<p>D\u00eda a d\u00eda empleamos, de manera frecuente, distintos algoritmos que nos permiten resolver un sinf\u00edn de problemas en todos y cada uno de los aspectos de nuestras vidas. </p> <p>Por ejemplo, un manual de usuario es, en cierta manera, un algoritmo que nos ense\u00f1a c\u00f3mo usar un aparato. Las instrucciones que recibimos para realizar una tarea espec\u00edfica constituyen un algoritmo tambi\u00e9n.</p> <p>Definici\u00f3n</p> <p>Un algoritmo es una secuencia finita de instrucciones l\u00f3gicas, precisas y sin posibilidad de ambig\u00fcedad, ordenadas paso a paso, que permite resolver un problema o realizar una tarea espec\u00edfica de manera eficiente y sistem\u00e1tica. </p> <p>En t\u00e9rminos simples, es una serie de instrucciones que se utilizan en programaci\u00f3n, matem\u00e1ticas, ciencias de la computaci\u00f3n y muchas otras \u00e1reas para resolver un problema de manera eficiente.</p> <p>Est\u00e1n compuestos por una serie finita de instrucciones que procesan los datos de entrada de un problema convirti\u00e9ndolos en informaci\u00f3n de salida como soluci\u00f3n a este. </p> <p>\u00a1Para recordar!</p> <p>A trav\u00e9s de un lenguaje de programaci\u00f3n, podemos escribir un programa que represente a un algoritmo determinado, de manera tal que pueda ser ejecutado por una computadora. Pero esto lo veremos m\u00e1s adelante.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#para-que-sirve-un-algoritmo","title":"\u00bfPara qu\u00e9 sirve un algoritmo?","text":"<p>Los algoritmos sirven para resolver problemas o realizar tareas espec\u00edficas de manera eficiente y sistem\u00e1tica. Aqu\u00ed hay algunas \u00e1reas en las que los algoritmos desempe\u00f1an un papel fundamental:</p> <ul> <li> <p>Programaci\u00f3n: en el desarrollo de software, son la base para escribir c\u00f3digo eficiente y solucionar problemas.  Permiten realizar tareas de b\u00fasqueda, ordenaci\u00f3n, filtrado y procesamiento de datos entre otras operaciones computacionales.</p> </li> <li> <p>Ciencias de la computaci\u00f3n: son fundamentales para dise\u00f1ar y analizar estructuras de datos eficientes y algoritmos  avanzados. Ayudan a resolver problemas complejos como la optimizaci\u00f3n, la inteligencia artificial, la criptograf\u00eda, la visi\u00f3n por computadora y el procesamiento de lenguaje natural.</p> </li> <li> <p>Matem\u00e1ticas: juegan un papel importante en la resoluci\u00f3n de problemas matem\u00e1ticos, como encontrar la ra\u00edz de una  ecuaci\u00f3n, calcular el factorial de un n\u00famero, resolver sistemas de ecuaciones lineales, entre otros.</p> </li> <li> <p>Optimizaci\u00f3n: los algoritmos de optimizaci\u00f3n se utilizan para encontrar la mejor soluci\u00f3n posible dentro de un  conjunto de posibles soluciones. Estos algoritmos se aplican en la planificaci\u00f3n de rutas, la asignaci\u00f3n de recursos, la programaci\u00f3n de tareas y otras situaciones en las que se busca maximizar o minimizar un objetivo determinado.</p> </li> <li> <p>B\u00fasqueda de informaci\u00f3n: los algoritmos de b\u00fasqueda se utilizan para encontrar informaci\u00f3n relevante en grandes  conjuntos de datos, como motores de b\u00fasqueda en internet o sistemas de recomendaci\u00f3n en aplicaciones y plataformas.</p> </li> <li> <p>Automatizaci\u00f3n: permiten automatizar tareas repetitivas y realizar c\u00e1lculos complejos de manera r\u00e1pida y precisa.  Se usan en sistemas de control, rob\u00f3tica, procesamiento de se\u00f1ales, an\u00e1lisis de datos, entre otras \u00e1reas de automatizaci\u00f3n.</p> </li> </ul>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#refinamiento-de-un-algoritmo","title":"Refinamiento de un algoritmo","text":"<p>\u00bfC\u00f3mo ser\u00eda el algoritmo para determinar el mayor de tres n\u00fameros enteros?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    Comparar el primer n\u00famero con el segundo, deduciendo cu\u00e1l es el mayor n\u00famero.\n    Comparar el mayor n\u00famero anterior con el tercer n\u00famero y deducir cu\u00e1l es el mayor n\u00famero. \n    Este \u00faltimo mayor n\u00famero ser\u00e1 el mayor n\u00famero de los tres.\nFin\n</code></pre> <p>As\u00ed como est\u00e1 planteado, este algoritmo es muy dif\u00edcil de implementar como programa, puesto que las instrucciones son muy generales y seguramente no existan comandos en ning\u00fan lenguaje que las representen.</p> <p>Por lo tanto, ser\u00e1 necesario descomponer el algoritmo en instrucciones m\u00e1s simples. Este procedimiento se denomina refinamiento del algoritmo.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#atomicidad-de-las-instrucciones-indivisibles-o-de-un-conjunto-de-instrucciones-como-un-todo","title":"Atomicidad de las instrucciones indivisibles o de un conjunto de instrucciones como un todo","text":"<p>En inform\u00e1tica, se denomina instrucci\u00f3n at\u00f3mica o instrucci\u00f3n particular \u00fanica a un conjunto de instrucciones que al ser ejecutadas son vistas por el resto del sistema como una sola instrucci\u00f3n indivisible.</p> <p>Para cumplir esto, se requieren dos condiciones:</p> <ol> <li> <p>Ning\u00fan otro proceso puede tomar conocimiento de los cambios realizados hasta que se completen todas las instrucciones del conjunto</p> </li> <li> <p>Si no puede realizarse al menos una de las instrucciones del conjunto, el estado del sistema debe retrotraerse al inicio de las operaciones, tal como si ninguna hubiese sido ejecutada</p> </li> </ol> <p>Para el resto del sistema no es accesible ning\u00fan estado intermedio durante la ejecuci\u00f3n del conjunto de operaciones.</p> <p>Teniendo esto en mente, deberemos seguir refinando nuestro algoritmo hasta cumplir con estas dos condiciones.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#que-es-la-eficiencia-de-un-algoritmo","title":"\u00bfQu\u00e9 es la eficiencia de un algoritmo?","text":"<p>La eficiencia de un algoritmo se refiere a la cantidad de recursos (tiempo y espacio) que requiere para ejecutarse. Se utilizan medidas como la complejidad temporal (cu\u00e1nto tiempo tarda en ejecutarse) y la complejidad espacial (cu\u00e1nta memoria utiliza) para analizar la eficiencia de un algoritmo. La teor\u00eda de la complejidad computacional clasifica los algoritmos en funci\u00f3n de su eficiencia relativa.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#eficiencia-de-resolucion-y-velocidad-notacion-de-o-grande-big-o","title":"Eficiencia de resoluci\u00f3n y velocidad: notaci\u00f3n de O grande (Big-O)","text":"<p>Podemos representar la eficiencia y velocidad de resoluci\u00f3n de cada uno de estos algoritmos de la siguiente manera en lo que se denomina\u00a0notaci\u00f3n de O grande (Big-O):</p> <p></p> <p>El primer algoritmo, que busca una p\u00e1gina a la vez, y representado con la l\u00ednea roja, tiene una Big-O de n: el tiempo para resolver aumenta linealmente a medida que aumenta el tama\u00f1o del problema. n es un n\u00famero que representa el tama\u00f1o del problema, por lo que con n p\u00e1ginas en nuestra gu\u00eda telef\u00f3nica, tenemos que dar hasta n pasos para encontrar un nombre. Por ejemplo, si hay 100 nombres en la gu\u00eda telef\u00f3nica, podr\u00eda tomar hasta 100 intentos para encontrar el nombre correcto. </p> <p>El segundo algoritmo, que busca dos p\u00e1ginas a la vez, y representado con la l\u00ednea amarilla, tiene una Big-O de n/2: la pendiente es menos pronunciada, pero sigue siendo lineal. Ahora, solo necesitamos (aproximadamente) n / 2 pasos, ya que pasamos dos p\u00e1ginas a la vez (el doble de r\u00e1pido).</p> <p>El algoritmo final, que divide la gu\u00eda telef\u00f3nica por la mitad cada vez, y representado con la l\u00ednea verde, tiene una Big-O de log<sub>2</sub> n: con una relaci\u00f3n fundamentalmente diferente entre el tama\u00f1o del problema y el tiempo para resolverlo, si la gu\u00eda telef\u00f3nica duplicara su tama\u00f1o de (por ejemplo, de 1000 a 2000 p\u00e1ginas), solo necesitar\u00edamos un paso m\u00e1s para encontrar el nombre y resolver el problema.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#complejidad-algoritmica-analisis-de-la-eficiencia-de-los-algoritmos","title":"Complejidad algor\u00edtmica: An\u00e1lisis de la eficiencia de los algoritmos","text":"<p>La complejidad algor\u00edtmica se refiere al estudio de cu\u00e1ntos recursos computacionales, como tiempo y espacio, requiere un algoritmo para resolver un problema. Es decir que se refiere al crecimiento de sus requisitos de tiempo y espacio a medida que el tama\u00f1o del problema aumenta. Los an\u00e1lisis de complejidad permiten comparar y clasificar algoritmos seg\u00fan su eficiencia.</p> <p>Por lo tanto, es importante evaluar la eficiencia de un algoritmo para determinar cu\u00e1nto tiempo y recursos requerir\u00e1 su ejecuci\u00f3n. Dos aspectos clave son:</p> <ol> <li> <p>Complejidad temporal: determina c\u00f3mo aumenta el tiempo de ejecuci\u00f3n a medida que crece el tama\u00f1o de la entrada.</p> </li> <li> <p>Complejidad espacial: estima la cantidad de memoria requerida por el algoritmo en funci\u00f3n del tama\u00f1o de la entrada.</p> </li> </ol> <p>Otras clases de complejidad son la complejidad constante, la complejidad logar\u00edtmica, la complejidad lineal, la complejidad polin\u00f3mica y la complejidad exponencial, entre otras. El an\u00e1lisis de complejidad permite evaluar el rendimiento de un algoritmo en diferentes escenarios.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#caracteristicas-de-un-buen-algoritmo","title":"Caracter\u00edsticas de un buen algoritmo","text":"<ul> <li> <p>Precisi\u00f3n: Debe ser claro y no ambiguo, indicando el orden de realizaci\u00f3n de cada instrucci\u00f3n. Si se ejecuta m\u00e1s de una vez de exacta manera, el resultado obtenido debe ser siempre el mismo.</p> </li> <li> <p>Eficiencia: Debe resolver el problema de manera efectiva, utilizando el menor n\u00famero de pasos y la menor cantidad de recursos posibles, como tiempo y memoria.</p> </li> <li> <p>Finitud: Debe tener un n\u00famero finito de pasos, lo que significa que debe iniciar y terminar en un momento determinado.</p> </li> <li> <p>Generalidad: Debe ser aplicable a diferentes situaciones o problemas similares.</p> </li> </ul>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#que-es-la-correccion-de-un-algoritmo","title":"\u00bfQu\u00e9 es la correcci\u00f3n de un algoritmo?","text":"<p>Un algoritmo se considera correcto si produce el resultado esperado para todos los casos de entrada v\u00e1lidos.  La teor\u00eda de la verificaci\u00f3n y validaci\u00f3n de algoritmos se ocupa de demostrar la correcci\u00f3n de los algoritmos mediante t\u00e9cnicas formales, como demostraciones matem\u00e1ticas y pruebas exhaustivas.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/","title":"Resoluci\u00f3n de algoritmos cotidianos","text":""},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-ordenar-una-lista-de-numeros","title":"C\u00f3mo ordenar una lista de n\u00fameros","text":"<p>Supongamos que tenemos una lista de n\u00fameros y queremos ordenarla de forma ascendente utilizando el algoritmo de burbuja. Aqu\u00ed est\u00e1 el pseudoc\u00f3digo del algoritmo:</p> Pseudoc\u00f3digo<pre><code>Inicio\n    1. Leer la lista de n\u00fameros.\n    2. Establecer una variable \"cambio\" en verdadero.\n    3. Mientras cambio sea verdadero, hacer:\n    4. Establecer cambio en falso.\n    5. Para cada par de elementos adyacentes en la lista, hacer:\n        6. Si los elementos est\u00e1n en el orden incorrecto, intercambiarlos.\n        7. Establecer cambio en verdadero.\n    8. Imprimir la lista ordenada.\nFin\n</code></pre> <p>Este algoritmo recorre repetidamente la lista de n\u00fameros, comparando los elementos adyacentes y realizando intercambios si es necesario. Contin\u00faa haciendo esto hasta que no se realicen m\u00e1s intercambios, lo que indica que la lista est\u00e1 ordenada.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-cambiar-la-rueda-de-un-auto","title":"C\u00f3mo cambiar la rueda de un auto","text":"<p>Existen algoritmos, que los ejecutamos casi sin darnos cuenta, que nos ayudan a resolver problemas diarios.  Por ejemplo, el algoritmo para cambiar la rueda de un choche:</p> Pseudoc\u00f3digo<pre><code>Inicio\n    1. Agarrar el gato del auto\n    2. Levantar el coche con el gato\n    3. Aflojar tornillos de la rueda\n    4. Sacar los tornillos de la rueda\n    5. Quitar la rueda\n    6. Agarrar la rueda de auxilio\n    7. Poner la rueda de auxilio\n    8. Poner los tornillos en la rueda de auxilio\n    9. Ajustar los tornillos en la rueda de auxilio \n    10. Bajar el coche con el gato\n    11. Sacar el gato\n    12. Guardar el gato \n    13. Guardar la rueda sacada\nFin\n</code></pre> <p>Para resolver</p> <p>\u00bfDe qu\u00e9 manera podemos mejorar este algoritmo en t\u00e9rminos de precisi\u00f3n, eficiencia y generalidad?</p> <p>Asumimos que, as\u00ed como est\u00e1 planteado, ya cumple con la caracter\u00edstica de ser finito.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-aceptar-o-rechazar-el-pedido-de-compra-de-un-cliente","title":"C\u00f3mo aceptar o rechazar el pedido de compra de un cliente","text":"<p>Veamos otro ejemplo: \u00bfqu\u00e9 pasa cuando un cliente realiza un pedido de compra a una f\u00e1brica? </p> <p>La f\u00e1brica examina en su banco de datos la cuenta del cliente. Si el cliente tiene cr\u00e9dito entonces la f\u00e1brica acepta el pedido, en caso contrario rechaza el pedido.</p> Pseudoc\u00f3digo<pre><code>Inicio\n    1. Recibir el pedido\n    2. Examinar la cuenta del cliente\n    3. Si el cliente tiene cr\u00e9dito entonces\n        4. Aceptar el pedido\n    5. Si no\n        6. Rechazar el pedido\n    7. Fin Si\nFin\n</code></pre> <p>Para resolver</p> <p>\u00bfDe qu\u00e9 manera podemos mejorar este algoritmo en t\u00e9rminos de precisi\u00f3n, eficiencia y generalidad?</p> <p>Asumimos que, as\u00ed como est\u00e1 planteado, ya cumple con la caracter\u00edstica de ser finito.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-lavarse-los-dientes","title":"C\u00f3mo lavarse los dientes","text":"<p>Para resolver</p> <p>\u00bfC\u00f3mo ser\u00eda el algoritmo que ejecutamos cada vez que nos lavamos los dientes?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    ...\n    lavar los dientes\n    ...\nFin\n</code></pre>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-tomar-un-cafe","title":"C\u00f3mo tomar un caf\u00e9","text":"<p>Para resolver</p> <p>\u00bfC\u00f3mo ser\u00eda el algoritmo que ejecutamos cada vez que queremos tomar un caf\u00e9?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    ...\n    tomar el caf\u00e9\n    ...\nFin\n</code></pre>"},{"location":"unidades/algoritmos/resumen-y-recursos-sobre-algoritmos/","title":"Resumen y recursos","text":""},{"location":"unidades/algoritmos/resumen-y-recursos-sobre-algoritmos/#resumen","title":"Resumen","text":"<p>En resumen, los algoritmos son herramientas esenciales para resolver problemas, optimizar procesos y realizar tareas computacionales de manera eficiente. Su aplicaci\u00f3n se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p> <p>\u00a1Para recordar!</p> <p>Un algoritmo es una secuencia o conjunto finito, preciso y ordenado paso a paso de instrucciones definidas que se utiliza para resolver un problema o realizar una tarea espec\u00edfica de manera eficiente y sistem\u00e1tica. </p> <p>Existen muchos algoritmos, desde los m\u00e1s simples hasta los m\u00e1s avanzados, que pueden emplearse para resolver diferentes problemas o realizar tareas espec\u00edficas.</p> <p>La mejor manera de aprender algoritmos es practicar. El aprendizaje de los algoritmos es un proceso continuo y gradual, por lo cual requiere tiempo y pr\u00e1ctica. Intenta resolver problemas algor\u00edtmicos por tu cuenta y trabaja en proyectos que requieran implementar algoritmos espec\u00edficos.</p> <p>No te desanimes si al principio encuentras los conceptos dif\u00edciles. Con el tiempo y la pr\u00e1ctica, podr\u00e1s mejorar tus habilidades algor\u00edtmicas A medida que adquieras m\u00e1s experiencia, podr\u00e1s resolver problemas m\u00e1s complejos y optimizar tus soluciones.</p> <p>\u00a1Buena suerte en tu camino de aprendizaje!</p>"},{"location":"unidades/algoritmos/resumen-y-recursos-sobre-algoritmos/#recursos-para-aprender-algoritmos","title":"Recursos para aprender algoritmos","text":"<ul> <li> <p>Libros de algoritmos: existe bibliograf\u00eda excelente sobre algoritmos que puedes utilizar para aprender m\u00e1s. Algunos libros populares incluyen \"Introduction to Algorithms\" de Cormen, Leiserson, Rivest y Stein, y \"Algorithms, Part I\" y \"Algorithms, Part II\" de Sedgewick y Wayne.</p> </li> <li> <p>Cursos en l\u00ednea: plataformas educativas como Coursera, edX y Udemy ofrecen cursos en l\u00ednea gratuitos y de pago sobre algoritmos y estructuras de datos. Algunos ejemplos son \"Algorithms, Part I\" de Princeton University en Coursera o \"Algorithms and Data Structures\" en edX.</p> </li> <li> <p>Sitios web y tutoriales en l\u00ednea: hay muchos recursos disponibles en l\u00ednea, como tutoriales, ejercicios y videos, que pueden ayudarte a aprender algoritmos paso a paso.</p> </li> <li> <p>Participaci\u00f3n en desaf\u00edos de programaci\u00f3n: Plataformas como HackerRank y LeetCode ofrecen desaf\u00edos de programaci\u00f3n en l\u00ednea donde puedes poner a prueba tus habilidades algor\u00edtmicas y resolver problemas de programaci\u00f3n.</p> </li> </ul>"},{"location":"unidades/algoritmos/tipos-de-algoritmos/","title":"Tipos de algoritmos","text":""},{"location":"unidades/algoritmos/tipos-de-algoritmos/#tipos-de-algoritmos","title":"Tipos de algoritmos","text":"<ol> <li>Algoritmos de ordenaci\u00f3n: ordenan elementos en una lista en funci\u00f3n de ciertos criterios, como el orden ascendente o descendente.<ul> <li>Ordenamiento por selecci\u00f3n: encuentra el elemento m\u00e1s peque\u00f1o en cada iteraci\u00f3n y lo coloca en la posici\u00f3n correcta.</li> <li>Ordenamiento por inserci\u00f3n: construye una sub lista ordenada, insertando elementos de la lista original en la posici\u00f3n adecuada.</li> <li>Ordenamiento por burbuja: compara elementos adyacentes y los intercambia si est\u00e1n en el orden incorrecto.</li> <li>Ordenamiento r\u00e1pido (Quicksort): divide la lista en subgrupos alrededor de un pivote y luego los ordena de forma recursiva.</li> <li>Ordenamiento por mezcla (Mergesort): divide la lista por la mitad, ordena cada mitad por separado y luego fusiona las mitades ordenadas.</li> </ul> </li> <li>Algoritmos de b\u00fasqueda: encuentran la posici\u00f3n de un elemento en una lista o determinan si est\u00e1 presente.<ul> <li>B\u00fasqueda secuencial: recorre secuencialmente una lista de elementos para encontrar uno en particular.</li> <li>B\u00fasqueda binaria: divide repetidamente una lista ordenada a la mitad hasta encontrar el elemento deseado.</li> </ul> </li> <li>Algoritmos recursivos: se llaman a s\u00ed mismos repetidamente para resolver un problema reduciendo su tama\u00f1o en cada llamada.<ul> <li>Factorial: calcula el factorial de un n\u00famero utilizando una funci\u00f3n que se llama a s\u00ed misma.</li> <li>Torres de Hanoi: resuelve el problema de mover una torre de discos de un poste a otro, utilizando la recursividad para encontrar el camino m\u00e1s corto.</li> </ul> </li> <li>Algoritmos de gr\u00e1ficos: resuelven problemas relacionados con estructuras de datos de gr\u00e1ficos, como encontrar el camino m\u00e1s corto entre dos nodos.<ul> <li>B\u00fasqueda en amplitud (BFS): explora los nodos en niveles, comenzando desde un nodo inicial.</li> <li>B\u00fasqueda en profundidad (DFS): explora los nodos tan lejos como sea posible antes de retroceder.</li> </ul> </li> <li>Algoritmos de backtracking: exploran todas las soluciones posibles mediante una b\u00fasqueda sistem\u00e1tica y retroceden cuando encuentran una soluci\u00f3n no v\u00e1lida.<ul> <li>Problema de las N reinas (N-Queens problem): encuentra todas las formas posibles de colocar N reinas en un tablero de ajedrez sin que se ataquen mutuamente.</li> </ul> </li> <li>Algoritmos de hashing: es una funci\u00f3n matem\u00e1tica que toma un \"clave\" y la transforma en un valor hash, que es una cadena de caracteres de longitud fija. Su prop\u00f3sito principal es generar un resumen \u00fanico y representativo de la entrada, de manera que cualquier cambio en la entrada resulte en un valor de hash completamente diferente.<ul> <li>Tablas hash: Utilizan una funci\u00f3n hash para asignar claves a posiciones de almacenamiento y permiten una b\u00fasqueda y recuperaci\u00f3n eficientes.</li> </ul> </li> <li>Algoritmos de programaci\u00f3n din\u00e1mica: dividen un problema en subproblemas m\u00e1s peque\u00f1os, resolviendo cada subproblema solo una vez y almacenando su resultado para su uso posterior.<ul> <li>Fibonacci: calcula los n\u00fameros de Fibonacci utilizando una tabla de memorizaci\u00f3n para evitar c\u00e1lculos repetitivos.</li> <li>Problema de la mochila (Knapsack problem): resuelve el problema de c\u00f3mo llenar una mochila con objetos de diferentes pesos y valores para maximizar el valor total.</li> </ul> </li> </ol>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/almacenamiento-de-datos-e-informacion/","title":"Almacenamiento de datos e informaci\u00f3n","text":"<p>Rev. 19/03/2024</p> <p>En los sistemas inform\u00e1ticos, la representaci\u00f3n y el almacenamiento de datos son procesos fundamentales para el funcionamiento de las computadoras.</p> <p>Los datos y la informaci\u00f3n se almacenan en diferentes tipos de memoria en un sistema inform\u00e1tico, como la memoria RAM (Random Access Memory), la memoria cach\u00e9, el disco duro u otros dispositivos de almacenamiento. Cada tipo de memoria tiene diferentes velocidades de acceso, capacidades y costos asociados.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/almacenamiento-de-datos-e-informacion/#dispositivos-de-almacenamiento","title":"Dispositivos de Almacenamiento","text":"<p>Para almacenar datos, se utilizan dispositivos de almacenamiento como discos duros, unidades flash, cintas magn\u00e9ticas, etc. Estos dispositivos registran y conservan informaci\u00f3n digital para operaciones presentes o futuras.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/almacenamiento-de-datos-e-informacion/#sistema-de-archivos","title":"Sistema de Archivos","text":"<p>Un sistema de archivos es un conjunto de estructuras y reglas definidas para organizar y acceder a los datos en un dispositivo de almacenamiento. Incluye la partici\u00f3n del disco duro, la jerarqu\u00eda de carpetas y los nombres de los archivos.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/almacenamiento-de-datos-e-informacion/#almacenamiento-en-archivos-bloques-y-objetos","title":"Almacenamiento en Archivos, Bloques y Objetos:","text":"<ul> <li> <p>Archivos: Los datos se organizan en archivos individuales. Cada archivo contiene informaci\u00f3n espec\u00edfica y se accede mediante su nombre y ubicaci\u00f3n en el sistema de archivos.</p> </li> <li> <p>Bloques: El almacenamiento a nivel de bloques divide los datos en bloques de tama\u00f1o fijo. Los discos duros utilizan este enfoque para almacenar y recuperar datos.</p> </li> <li> <p>Objetos: El almacenamiento basado en objetos es com\u00fan en la nube. Los datos se almacenan como objetos con metadatos y se acceden mediante una clave \u00fanica.</p> </li> </ul> <p>En resumen, la representaci\u00f3n y el almacenamiento de datos son esenciales para el funcionamiento de las computadoras. Los datos se guardan en dispositivos de almacenamiento y se organizan seg\u00fan reglas espec\u00edficas para su acceso eficiente y seguro.</p> <p>En resumen, los datos en los sistemas inform\u00e1ticos se representan y almacenan en forma binaria, utilizando bytes y estructuras de datos para diferentes tipos de informaci\u00f3n, y se organizan en diferentes tipos de memoria seg\u00fan las necesidades del sistema y los requisitos de velocidad, capacidad y persistencia de los datos.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/almacenamiento-de-datos-e-informacion/#memoria-volatil-ram","title":"Memoria Vol\u00e1til (RAM):","text":"<ul> <li>La memoria RAM se utiliza para almacenar datos temporales mientras se ejecutan programas en la computadora.</li> <li>Los datos en la RAM se representan en formato binario y est\u00e1n disponibles para la CPU y otros componentes del sistema en tiempo real.</li> <li>La velocidad de acceso a la RAM es alta pero los datos se pierden cuando se apaga la computadora, ya que la memoria es vol\u00e1til.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/almacenamiento-de-datos-e-informacion/#almacenamiento-no-volatil-disco-duro-ssd-etc","title":"Almacenamiento No Vol\u00e1til (Disco Duro, SSD, etc.):","text":"<ul> <li>Los datos se almacenan de forma permanente en dispositivos de almacenamiento no vol\u00e1til, como discos duros, SSD (Solid State Drives), unidades flash USB, etc.</li> <li>Los datos en estos dispositivos se guardan en archivos, y cada archivo se organiza en bloques de datos que se almacenan en sectores f\u00edsicos en el dispositivo de almacenamiento.</li> <li>Los archivos se guardan en sistemas de archivos que definen la estructura y la forma en que se accede a los datos almacenados.</li> <li>Los datos en dispositivos de almacenamiento no vol\u00e1til se mantienen incluso cuando se apaga la computadora, lo que permite que los programas y archivos persistan entre sesiones de uso.</li> </ul> <p>En resumen, la representaci\u00f3n y el almacenamiento de datos en sistemas inform\u00e1ticos involucran la codificaci\u00f3n de informaci\u00f3n en formato binario y su almacenamiento en dispositivos de almacenamiento vol\u00e1til y no vol\u00e1til, lo que permite su manipulaci\u00f3n y recuperaci\u00f3n por parte de las computadoras y otros dispositivos electr\u00f3nicos.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/diferencia-entre-datos-e-informacion/","title":"Diferencia entre datos e informaci\u00f3n","text":"<p>Rev. 16/03/2024</p> <p>La diferencia entre dato e informaci\u00f3n es fundamental en el \u00e1mbito inform\u00e1tico y computacional.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/diferencia-entre-datos-e-informacion/#dato","title":"Dato","text":"<ul> <li>Es una representaci\u00f3n simb\u00f3lica de una situaci\u00f3n o conocimiento.</li> <li>Carece de sentido sem\u00e1ntico y no transmite un mensaje espec\u00edfico por s\u00ed solo sino que proporciona un valor espec\u00edfico sin contexto adicional. </li> </ul> <p>Por ejemplo, puede ser un n\u00famero ( 5 ), una letra ( A ) o un hecho aislado ( 30\u00b0C ). O tambi\u00e9n la nota de un alumno, nombre de un docente, color de un auto, etc.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/diferencia-entre-datos-e-informacion/#informacion","title":"Informaci\u00f3n","text":"<ul> <li>Es un dato o un conjunto de datos que han sido adecuadamente procesados en un contexto espec\u00edfico adquiriendo significado.</li> <li>Provee un mensaje significativo y contribuye a la toma de decisiones.</li> <li>La informaci\u00f3n es \u00fatil para resolver problemas y aumentar el conocimiento.</li> </ul> <p>Por ejemplo, puede ser el promedio final de un alumno para un curso, el n\u00famero de aprobados en un examen, el nombre de los primeros alumnos de cada especialidad por cada ciclo. O tambi\u00e9n un informe meteorol\u00f3gico que combina datos como temperatura, humedad y viento para predecir el clima, etc.</p> <p>Recuerda</p> <p>La informaci\u00f3n es el resultado de procesar datos dentro de un contexto espec\u00edfico, otorg\u00e1ndoles un significado concreto que contribuye a la toma de decisiones.</p> <p></p> <p>El procesamiento de datos puede ser:</p> <ul> <li>Manual: realizado solamente por seres humanos</li> <li>Mecanizado: realizado mediante el uso de calculadora, sumadora, etc.</li> <li>Automatizado: realizado por el procesador de la computadora, el cual ejecuta una serie de pasos previamente definidos (algoritmo)</li> </ul> <p>Resumen</p> <p>Los datos son los ingredientes, y la informaci\u00f3n es el platillo completo. </p> <p>La informaci\u00f3n se crea al procesar y combinar datos de manera coherente y significativa. </p> <p>Por lo tanto, la unidad de estudio para comprender esta diferencia es la interpretaci\u00f3n y el contexto en el que se presentan los datos</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/diferencia-entre-datos-e-informacion/#importancia-de-los-datos-y-la-informacion-en-la-toma-de-decisiones","title":"Importancia de los datos y la informaci\u00f3n en la toma de decisiones","text":"<p>Los datos y la informaci\u00f3n son fundamentales para la toma de decisiones por varias razones:</p> <ol> <li> <p>Base objetiva: Los datos proporcionan una base objetiva y cuantificable sobre la cual tomar decisiones. En lugar de depender \u00fanicamente de intuiciones o suposiciones, los datos brindan hechos concretos que pueden respaldar o refutar una decisi\u00f3n.</p> </li> <li> <p>Identificaci\u00f3n de tendencias: Analizando datos hist\u00f3ricos y actuales, es posible identificar tendencias y patrones que pueden ser \u00fatiles para prever resultados futuros. Esto permite tomar decisiones m\u00e1s informadas y anticiparse a cambios en el entorno.</p> </li> <li> <p>Optimizaci\u00f3n de recursos: Al recopilar y analizar datos, se pueden identificar oportunidades para optimizar el uso de recursos, ya sea en t\u00e9rminos de tiempo, dinero, personal u otros activos. Esto puede conducir a una mayor eficiencia y rentabilidad en las operaciones.</p> </li> <li> <p>Reducci\u00f3n de riesgos: La informaci\u00f3n adecuada puede ayudar a reducir los riesgos asociados con la toma de decisiones. Al comprender mejor el contexto y las posibles implicaciones de una decisi\u00f3n, es posible minimizar los riesgos y tomar medidas preventivas para mitigarlos.</p> </li> <li> <p>Mejora del rendimiento: Utilizando datos para evaluar el rendimiento y los resultados de diferentes acciones, es posible identificar \u00e1reas de mejora y tomar decisiones que conduzcan a un mejor desempe\u00f1o en el futuro.</p> </li> <li> <p>Personalizaci\u00f3n y segmentaci\u00f3n: La informaci\u00f3n sobre los clientes, sus preferencias y comportamientos, permite personalizar productos, servicios y estrategias de marketing para satisfacer mejor sus necesidades individuales. Esto puede aumentar la satisfacci\u00f3n del cliente y la lealtad a la marca.</p> </li> <li> <p>Competitividad: En un entorno empresarial cada vez m\u00e1s competitivo, la capacidad de tomar decisiones informadas basadas en datos puede marcar la diferencia entre el \u00e9xito y el fracaso. Las organizaciones que utilizan datos de manera efectiva tienden a ser m\u00e1s \u00e1giles y adaptativas, lo que les permite mantenerse a la vanguardia de su industria.</p> </li> </ol> <p>En resumen, los datos y la informaci\u00f3n son esenciales para la toma de decisiones porque proporcionan una base objetiva, permiten identificar tendencias, optimizar recursos, reducir riesgos, mejorar el rendimiento, personalizar estrategias y mantener la competitividad.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/diferencia-entre-datos-e-informacion/#cual-es-el-rol-de-los-datos-y-la-informacion-en-la-solucion-de-un-problema-computacional","title":"\u00bfCu\u00e1l es el rol de los datos y la informaci\u00f3n en la soluci\u00f3n de un problema computacional?","text":"<p>El rol de los datos y la informaci\u00f3n en la soluci\u00f3n de un problema computacional es crucial y desempe\u00f1a varias funciones importantes:</p> <ol> <li> <p>Identificaci\u00f3n del problema: Los datos pueden ayudar a identificar la naturaleza y el alcance del problema. Al recopilar y analizar informaci\u00f3n relevante, podemos entender mejor la situaci\u00f3n y definir claramente el problema a resolver.</p> </li> <li> <p>An\u00e1lisis y comprensi\u00f3n: Los datos proporcionan informaci\u00f3n que nos permite comprender mejor el problema y sus posibles causas. Al analizar los datos, podemos identificar patrones, tendencias y relaciones que nos ayuden a entender la naturaleza del problema.</p> </li> <li> <p>Desarrollo de soluciones basadas en evidencia: La informaci\u00f3n derivada de los datos nos permite desarrollar soluciones basadas en evidencia. Al utilizar datos confiables y precisos, podemos tomar decisiones informadas sobre c\u00f3mo abordar el problema de manera efectiva.</p> </li> <li> <p>Optimizaci\u00f3n y mejora continua: Los datos nos permiten evaluar la efectividad de las soluciones implementadas y realizar ajustes seg\u00fan sea necesario. Al monitorear y analizar datos en tiempo real, podemos identificar \u00e1reas de mejora y optimizar continuamente nuestras soluciones.</p> </li> <li> <p>Toma de decisiones informadas: Los datos y la informaci\u00f3n proporcionan una base s\u00f3lida para la toma de decisiones. Al tener acceso a datos relevantes y actualizados, podemos tomar decisiones informadas que maximicen las posibilidades de \u00e9xito en la resoluci\u00f3n del problema.</p> </li> <li> <p>Evaluaci\u00f3n de resultados: Los datos nos permiten evaluar los resultados de las soluciones implementadas. Al comparar los datos antes y despu\u00e9s de la implementaci\u00f3n de una soluci\u00f3n, podemos determinar si se lograron los objetivos establecidos y si se requieren ajustes adicionales.</p> </li> </ol> <p>Resumen</p> <p>Los datos y la informaci\u00f3n desempe\u00f1an un papel fundamental en la soluci\u00f3n de problemas computacionales al proporcionar una base s\u00f3lida para la comprensi\u00f3n del problema, el desarrollo de soluciones efectivas, la toma de decisiones informadas y la mejora continua del proceso.</p> <p>Recuerda que la distinci\u00f3n entre datos e informaci\u00f3n radica en c\u00f3mo se presentan los hechos y si est\u00e1n procesados de manera significativa para brindar contexto y utilidad.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/diferencia-entre-datos-e-informacion/#ejercicio-identificacion-de-dato-o-informacion","title":"Ejercicio: Identificaci\u00f3n de dato o informaci\u00f3n","text":"<p>Dada una serie de afirmaciones, identifica si son datos o informaci\u00f3n y explica el por qu\u00e9 de tu decisi\u00f3n.</p> <p>Por ejemplo:</p> <p>\"La temperatura actual es de 25 grados cent\u00edgrados.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Proporciona un valor num\u00e9rico espec\u00edfico sin contexto adicional.</li> </ul> <p>\"La temperatura actual de 25 grados cent\u00edgrados es ideal para actividades al aire libre.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza la temperatura proporcionada para ofrecer una recomendaci\u00f3n sobre actividades adecuadas.</li> </ul> <p>\"El c\u00f3digo postal de la ciudad es 12345.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Presenta un n\u00famero de identificaci\u00f3n sin m\u00e1s informaci\u00f3n sobre su uso o significado.</li> </ul> <p>\"El c\u00f3digo postal 12345 corresponde al \u00e1rea residencial de la ciudad.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Asocia el c\u00f3digo postal con un \u00e1rea espec\u00edfica, brindando contexto adicional sobre su ubicaci\u00f3n.</li> </ul> <p>\"El n\u00famero de estudiantes en la clase es 30.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Ofrece un n\u00famero espec\u00edfico sin contexto adicional.</li> </ul> <p>\"Con 30 estudiantes en la clase, se necesitar\u00e1 una distribuci\u00f3n de asientos adicional.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza el n\u00famero de estudiantes para sugerir una acci\u00f3n necesaria, proporcionando contexto sobre la situaci\u00f3n en la clase.</li> </ul> <p>\"El peso del paquete es de 2 kilogramos.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Proporciona una medida espec\u00edfica sin m\u00e1s detalles sobre su contenido o prop\u00f3sito.</li> </ul> <p>\"El paquete que pesa 2 kilogramos es adecuado para el env\u00edo est\u00e1ndar.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza el peso del paquete para ofrecer una recomendaci\u00f3n sobre su m\u00e9todo de env\u00edo, brindando contexto sobre sus caracter\u00edsticas.</li> </ul> <p>\"La velocidad del veh\u00edculo es de 60 kil\u00f3metros por hora.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Indica una velocidad espec\u00edfica sin m\u00e1s informaci\u00f3n sobre el contexto o las implicaciones.</li> </ul> <p>\"Con una velocidad de 60 kil\u00f3metros por hora, el veh\u00edculo cumple con el l\u00edmite de velocidad establecido en la zona residencial.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza la velocidad del veh\u00edculo para evaluar su cumplimiento con el l\u00edmite de velocidad local, proporcionando contexto sobre la legalidad de su velocidad actual.</li> </ul> <p>\"El di\u00e1metro del c\u00edrculo es de 10 cent\u00edmetros.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Proporciona una medida espec\u00edfica sin m\u00e1s contexto sobre el c\u00edrculo en cuesti\u00f3n.</li> </ul> <p>\"El di\u00e1metro del c\u00edrculo de 10 cent\u00edmetros indica que su \u00e1rea es de aproximadamente 78.54 cent\u00edmetros cuadrados.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza el di\u00e1metro para calcular el \u00e1rea del c\u00edrculo, proporcionando contexto y significado adicionales.</li> </ul> <p>\"El n\u00famero de p\u00e1ginas en el libro es 200.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Indica un n\u00famero espec\u00edfico sin m\u00e1s detalles sobre el contenido o la extensi\u00f3n del libro.</li> </ul> <p>\"El libro con 200 p\u00e1ginas contiene una cantidad significativa de informaci\u00f3n sobre el tema.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza el n\u00famero de p\u00e1ginas para evaluar la extensi\u00f3n y la cantidad de informaci\u00f3n disponible en el libro.</li> </ul> <p>\"La altitud del monte Everest es de 8,848 metros.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Ofrece una medida espec\u00edfica de la altura del monte Everest sin m\u00e1s contexto sobre su importancia o caracter\u00edsticas.</li> </ul> <p>\"Con una altitud de 8,848 metros, el monte Everest es la monta\u00f1a m\u00e1s alta del mundo.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza la altitud para contextualizar la importancia y el estatus del monte Everest como la monta\u00f1a m\u00e1s alta del mundo.</li> </ul> <p>\"La velocidad del viento es de 30 kil\u00f3metros por hora.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Proporciona una medida espec\u00edfica de la velocidad del viento sin m\u00e1s informaci\u00f3n sobre su impacto o relevancia en un contexto particular.</li> </ul> <p>\"La velocidad del viento de 30 kil\u00f3metros por hora sugiere condiciones moderadas, ideales para actividades al aire libre.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza la velocidad del viento para proporcionar recomendaciones y contexto sobre las condiciones clim\u00e1ticas actuales.</li> </ul> <p>\"La edad del estudiante es de 18 a\u00f1os.\"</p> Ver soluci\u00f3n <ul> <li>Dato</li> <li>Indica la edad de un estudiante sin m\u00e1s detalles sobre su significado o implicaciones.</li> </ul> <p>\"A la edad de 18 a\u00f1os, el estudiante puede votar legalmente en muchas jurisdicciones y es considerado adulto en la mayor\u00eda de los pa\u00edses.\"</p> Ver soluci\u00f3n <ul> <li>Informaci\u00f3n</li> <li>Utiliza la edad del estudiante para explicar sus derechos y responsabilidades legales, proporcionando contexto y significado adicionales.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/diferencia-entre-datos-e-informacion/#ejercicio-transformacion-datos-en-informacion-a-partir-de-un-contexto-especifico","title":"Ejercicio: Transformaci\u00f3n datos en informaci\u00f3n a partir de un contexto espec\u00edfico","text":"<p>Estos ejercicios variados ofrecen oportunidades para practicar la transformaci\u00f3n de diferentes conjuntos de datos en informaci\u00f3n significativa, lo que permite un an\u00e1lisis m\u00e1s profundo y una toma de decisiones informada en una variedad de contextos.</p> <ol> <li> <p>Encuesta sobre preferencias de alimentos por edad: Crea una tabla de doble entrada que muestre las preferencias de alimentos seg\u00fan el grupo de edad. Luego elabora un an\u00e1lisis (informaci\u00f3n) sobre popularidad y aceptaci\u00f3n de comidas por grupo.</p> <p>Datos en bruto:</p> <p>Grupo 1 (Edades 18-30):</p> <ul> <li>Pizza: 25 personas</li> <li>Sushi: 20 personas</li> <li>Ensalada: 15 personas</li> </ul> <p>Grupo 2 (Edades 31-50):</p> <ul> <li>Pizza: 30 personas</li> <li>Sushi: 25 personas</li> <li>Ensalada: 10 personas</li> </ul> <p>Grupo 3 (Edades 51 y m\u00e1s):</p> <ul> <li>Pizza: 20 personas</li> <li>Sushi: 15 personas</li> <li>Ensalada: 5 personas</li> </ul> Ver soluci\u00f3n <p>Preferencias de Alimentos por Edades</p> Pizza Sushi Ensalada 18-30 a\u00f1os 25 20 15 31-50 a\u00f1os 30 25 10 51 y m\u00e1s a\u00f1os 20 15 5 <p>An\u00e1lisis</p> <ul> <li>La tabla muestra las preferencias de alimentos para cada grupo de edad.</li> <li>Se observa que la pizza es popular en todos los grupos de edad, pero es m\u00e1s popular entre las personas de 31 a 50 a\u00f1os.</li> <li>El sushi tiene una buena aceptaci\u00f3n en todos los grupos, con una ligera disminuci\u00f3n en las personas de 51 y m\u00e1s a\u00f1os.</li> <li>La ensalada es menos popular en comparaci\u00f3n con la pizza y el sushi en todos los grupos de edad, siendo menos preferida por las personas mayores de 51 a\u00f1os.</li> </ul> </li> <li> <p>Encuesta de Satisfacci\u00f3n: Crea una tabla de doble entrada que muestre los resultados de la encuesta seg\u00fan la satisfacci\u00f3n del producto y del servicio. Luego elabora un an\u00e1lisis (informaci\u00f3n) sobre el estado de satisfacci\u00f3n.</p> <p>Datos en bruto:</p> <p>Satisfacci\u00f3n del Producto:</p> <ul> <li>Satisfecho: 50 personas</li> <li>Neutral: 20 personas</li> <li>Insatisfecho: 10 personas</li> </ul> <p>Satisfacci\u00f3n del Servicio:</p> <ul> <li>Satisfecho: 45 personas</li> <li>Neutral: 25 personas</li> <li>Insatisfecho: 10 personas</li> </ul> Ver soluci\u00f3n <p>Resultados de Encuestas de Satisfacci\u00f3n</p> Satisfecho Neutral Insatisfecho Producto 50 20 10 Servicio 45 25 10 <p>An\u00e1lisis:</p> <ul> <li>La tabla muestra los resultados de la encuesta de satisfacci\u00f3n para el producto y el servicio.</li> <li>La mayor\u00eda de las personas est\u00e1n satisfechas tanto con el producto como con el servicio.</li> <li>Un n\u00famero menor de personas expresaron neutralidad en su satisfacci\u00f3n, mientras que una minor\u00eda expres\u00f3 insatisfacci\u00f3n con el producto y el servicio por igual.</li> </ul> </li> <li> <p>Tiempo de Carga de P\u00e1ginas Web: Proporciona un an\u00e1lisis sobre qu\u00e9 p\u00e1gina tiene el tiempo de carga m\u00e1s r\u00e1pido y cu\u00e1l es la m\u00e1s lenta.</p> <p>Datos en bruto:</p> <ul> <li>P\u00e1gina principal: 2.5 segundos</li> <li>P\u00e1gina de productos: 3.2 segundos</li> <li>P\u00e1gina de contacto: 2.8 segundos</li> </ul> Ver soluci\u00f3n <ul> <li>P\u00e1gina con tiempo de carga m\u00e1s r\u00e1pido: P\u00e1gina principal con 2.5 segundos.</li> <li>P\u00e1gina con tiempo de carga m\u00e1s lento: P\u00e1gina de productos con 3.2 segundos.</li> </ul> <p>An\u00e1lisis:</p> <ul> <li>La p\u00e1gina principal carga m\u00e1s r\u00e1pido en comparaci\u00f3n con las otras p\u00e1ginas, mientras que la p\u00e1gina de productos tiene el tiempo de carga m\u00e1s lento. </li> <li>Esto puede influir en la experiencia del usuario y en las tasas de conversi\u00f3n, lo que sugiere que se debe prestar atenci\u00f3n a la optimizaci\u00f3n de la velocidad de carga de la p\u00e1gina de productos.</li> </ul> </li> <li> <p>Estad\u00edsticas de Ventas de Productos: Proporciona un an\u00e1lisis sobre cu\u00e1l es el producto m\u00e1s vendido y cu\u00e1l es el menos vendido.</p> <p>Datos en bruto:</p> <ul> <li>Producto A: 100 unidades vendidas</li> <li>Producto B: 150 unidades vendidas</li> <li>Producto C: 80 unidades vendidas</li> </ul> Ver soluci\u00f3n <ul> <li>Producto m\u00e1s vendido: Producto B con 150 unidades vendidas.</li> <li>Producto menos vendido: Producto C con 80 unidades vendidas.</li> </ul> <p>An\u00e1lisis:</p> <ul> <li>El an\u00e1lisis muestra que el Producto B es el m\u00e1s popular entre los clientes, seguido por el Producto A, mientras que el Producto C tiene la menor demanda. </li> <li>Esta informaci\u00f3n puede ser \u00fatil para ajustar la estrategia de ventas y el inventario en consecuencia.</li> </ul> </li> <li> <p>Edades de los Empleados de una Empresa: Calcula la edad promedio de los empleados y proporciona un an\u00e1lisis sobre la distribuci\u00f3n de edades en la empresa.</p> <p>Datos en bruto:</p> <p>Edades de los empleados de una empresa: 28, 35, 42, 29, 31, 45, 27</p> Ver soluci\u00f3n <p>Calculamos la edad promedio sumando todas las edades de los empleados y dividi\u00e9ndolas por el n\u00famero total de empleados:</p> <p>(28 + 35 + 42 + 29 + 31 + 45 + 27) / 7 =  237 / 7 \u2248 34 a\u00f1os</p> <p>An\u00e1lisis:</p> <ul> <li>La edad promedio de los empleados es de aproximadamente 34 a\u00f1os.</li> <li>Analizando la distribuci\u00f3n de edades, observamos que las edades var\u00edan entre 27 y 45 a\u00f1os. </li> <li>Esto sugiere una mezcla diversa de empleados en t\u00e9rminos de edad, lo que podr\u00eda beneficiar a la empresa al proporcionar una amplia gama de experiencias y perspectivas.</li> </ul> </li> <li> <p>Tiempo de Entrega de Pedidos: Calcula el tiempo de entrega promedio de los pedidos y proporciona un an\u00e1lisis sobre la eficiencia del proceso de entrega.</p> <p>Datos en bruto:</p> <p>Tiempo de entrega de pedidos en d\u00edas: 3, 4, 5, 2, 6</p> Ver soluci\u00f3n <p>Calculamos el promedio sumando todos los tiempos de entrega y dividi\u00e9ndolos por el n\u00famero total de pedidos:</p> <p>(3 + 4 + 5 + 2 + 6) / 5 =  20 / 5 = 4 d\u00edas</p> <p>An\u00e1lisis:</p> <ul> <li>El tiempo de entrega promedio de los pedidos es de 4 d\u00edas.</li> <li>Analizando la eficiencia del proceso de entrega, observamos que el tiempo de entrega var\u00eda entre 2 y 6 d\u00edas. </li> <li>Esto sugiere cierta consistencia en el proceso de entrega, pero podr\u00eda haber margen para mejorar la velocidad de entrega para garantizar una experiencia \u00f3ptima del cliente.</li> </ul> </li> <li> <p>Temperaturas Mensuales: Calcula la temperatura promedio mensual y proporciona un an\u00e1lisis sobre las fluctuaciones de temperatura a lo largo del a\u00f1o.</p> <p>Datos en bruto:</p> <p>Temperaturas mensuales registradas durante un a\u00f1o: 20\u00b0C, 22\u00b0C, 18\u00b0C, 25\u00b0C, 21\u00b0C, 23\u00b0C, 19\u00b0C, 24\u00b0C, 20\u00b0C, 22\u00b0C, 26\u00b0C, 21\u00b0C</p> Ver soluci\u00f3n <p>Calculamos el promedio sumando todas las temperaturas mensuales y dividi\u00e9ndolas por el n\u00famero total de meses:</p> <p>(20 + 22 + 18 + 25 + 21 + 23 + 19 + 24 + 20 + 22 + 26 + 21) / 12 =  261 / 12 \u2248 21.75\u00b0C</p> <p>An\u00e1lisis:</p> <ul> <li>La temperatura promedio mensual es aproximadamente 21.75\u00b0C.</li> <li>Analizando las fluctuaciones de temperatura, observamos que las temperaturas var\u00edan entre 18\u00b0C y 26\u00b0C a lo largo del a\u00f1o. </li> <li>Esto sugiere cierta variabilidad en el clima, pero en general, las temperaturas se mantienen dentro de un rango moderado y c\u00f3modo.</li> </ul> </li> <li> <p>Calificaciones de un curso: Calcula el promedio de las calificaciones y proporciona un an\u00e1lisis sobre el rendimiento general del grupo.</p> <p>Datos en bruto:</p> <p>Calificaciones en una asignatura: 75, 80, 65, 90, 85</p> <p>Nota de aprobaci\u00f3n: 75 o m\u00e1s</p> Ver soluci\u00f3n <p>Calculamos el promedio sumando todas las calificaciones y dividi\u00e9ndolas por el n\u00famero total de calificaciones:</p> <p>(75 + 80 + 65 + 90 + 85) / 5 =  395 / 5 = 79</p> <p>An\u00e1lisis:</p> <ul> <li>El promedio de las calificaciones es 79.</li> <li>Analizando el rendimiento general, podemos decir que el grupo, en promedio, aprueba la asignatura. </li> <li>Hay m\u00e1s notas de aprobaci\u00f3n (4) que de desaprobaci\u00f3n (1). </li> <li>Sin embargo, podr\u00edamos considerar investigar m\u00e1s a fondo las causas detr\u00e1s de la calificaci\u00f3n m\u00e1s baja para ofrecer apoyo adicional si es necesario.</li> </ul> </li> </ol>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/objetivos-de-la-unidad/","title":"Conceptos fundamentales de la inform\u00e1tica","text":"<p>Rev. 16/03/2024</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/objetivos-de-la-unidad/#competencias-academicas","title":"Competencias acad\u00e9micas","text":"<p>Al finalizar esta unidad, deber\u00e1s ser capaz de:</p> <ol> <li>Identificar un sistema inform\u00e1tico y sus componentes principales y explicar el prop\u00f3sito y funcionamiento de cada componente y del sistema como un todo. </li> <li>Comprender la diferencia entre datos e informaci\u00f3n y su importancia en la toma de decisiones.</li> <li>Identificar y trabajar con los diferentes sistemas de numeraci\u00f3n</li> <li>Explicar c\u00f3mo se representan y almacenan los datos en los sistemas inform\u00e1ticos.</li> <li>Reconocer los distintos tipos de software y hardware utilizados en inform\u00e1tica y su interacci\u00f3n.</li> <li>Describir los conceptos b\u00e1sicos de redes de computadoras y su importancia en la conectividad global.</li> <li>Evaluar las amenazas a la seguridad inform\u00e1tica y aplicar medidas de protecci\u00f3n adecuadas.</li> <li>Analizar las tendencias emergentes en el campo de la inform\u00e1tica y su impacto en la sociedad y el mundo laboral.</li> <li>Aplicar los conocimientos adquiridos en el curso a trav\u00e9s de proyectos pr\u00e1cticos y casos de estudio.</li> </ol>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/","title":"Sistema inform\u00e1tico","text":"<p>Rev. 19/03/2024</p> <p>Definici\u00f3n</p> <p>Un sistema inform\u00e1tico es un conjunto de componentes interrelacionados que trabajan juntos (que interact\u00faan entre s\u00ed) de manera coordinada con el fin de gestionar y procesar datos, realizar diversas tareas o funciones espec\u00edficas y almacenar o proveer informaci\u00f3n al usuario, de manera eficiente. </p> <p>Estos componentes pueden ser f\u00edsicos (hardware) como la CPU, la memoria, o los dispositivos de entrada y salida, o l\u00f3gicos (software) como el sistema operativo, las aplicaciones y los datos que se procesan.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#esquema-de-un-sistema-informatico","title":"Esquema de un sistema inform\u00e1tico","text":"<p>El esquema b\u00e1sico de un sistema inform\u00e1tico generalmente incluye los siguientes componentes:</p> <p></p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#componentes-de-un-sistema-informatico","title":"Componentes de un sistema inform\u00e1tico","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#datos-e-informacion","title":"Datos e Informaci\u00f3n","text":"<p>Los datos son una representaci\u00f3n simb\u00f3lica de una situaci\u00f3n o conocimiento que son ingresados a un sistema inform\u00e1tico y la informaci\u00f3n es el resultado de procesar esos datos en un contexto espec\u00edfico que es entregada al personal inform\u00e1tico por parte de dicho sistema.</p> <p>Tanto los datos como la informaci\u00f3n tambi\u00e9n pueden ser almacenados en el sistema inform\u00e1tico o transmitidos a otro sistema inform\u00e1tico.</p> <p>Pueden ser texto, im\u00e1genes, sonido, video o cualquier otra forma de informaci\u00f3n digital.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#hardware","title":"Hardware","text":"<p>Esta es la parte f\u00edsica del sistema inform\u00e1tico, que incluye:</p> <ul> <li>Computadoras: Estas m\u00e1quinas f\u00edsicas ejecutan programas y procesan datos. Incluyen componentes como la CPU (Unidad Central de Procesamiento), la memoria central (RAM) la placa madre (motherboard) y los buses de datos y de direcciones, entre otros.</li> <li>Perif\u00e9ricos: Son los dispositivos que se conectan a la computadora, como el teclado, el mouse, la impresora por ejemplo.</li> <li>Unidades de almacenamiento: Son los discos duros (HDD), las unidades de estado s\u00f3lido (SSD), las unidades flash USB (pendrives), etc.</li> <li>Redes: Los los dispositivos de red como routers o switches que permiten la comunicaci\u00f3n entre computadoras de manera cableada o inal\u00e1mbrica.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#software","title":"Software","text":"<p>Este es el conjunto de programas que controlan y coordinan las operaciones del hardware. </p> <p>El software incluye:</p> <ul> <li>Sistemas operativos: Es el software fundamental que administra recursos y permite la ejecuci\u00f3n de programas. Ejemplos incluyen Windows, macOS, Linux.</li> <li>Controladores de dispositivo y utilidades del sistema: Es el software que permite que el hardware interact\u00fae con el sistema operativo.</li> <li>Lenguajes de programaci\u00f3n: Son las herramientas para escribir y ejecutar c\u00f3digo. Ejemplos incluyen C, C++, Python, Java.</li> <li>Aplicaciones de software: Son los programas espec\u00edficos para tareas como procesamiento de texto, manejo de hojas de c\u00e1lculo, navegaci\u00f3n web, dise\u00f1o gr\u00e1fico, etc.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#personal-informatico","title":"Personal inform\u00e1tico","text":"<p>Son las personas que interact\u00faan con el sistema inform\u00e1tico, utilizando el hardware y el software para realizar tareas espec\u00edficas.</p> <p>Estas pueden crear, acceder y modificar datos utilizando aplicaciones y herramientas.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#procesos","title":"Procesos","text":"<p>Son las instrucciones y operaciones que se llevan a cabo en el sistema inform\u00e1tico para procesar datos y realizar tareas. Estos procesos pueden ser automatizados o ejecutados por el personal inform\u00e1tico.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistema-informatico/#comunicacion","title":"Comunicaci\u00f3n","text":"<p>Es la capacidad del sistema inform\u00e1tico para intercambiar datos y compartir recursos entre diferentes dispositivos y personal inform\u00e1tico. Esto puede implicar redes de comunicaci\u00f3n locales (LAN), redes de \u00e1rea amplia (WAN), Internet u otros canales de conexi\u00f3n.</p> <p>Dentro de la comunicaci\u00f3n podemos identificar:</p> <ul> <li>Redes de comunicaci\u00f3n: Permiten la transferencia de datos entre computadoras.</li> <li>Protocolos de comunicaci\u00f3n: Son las reglas y est\u00e1ndares para la transmisi\u00f3n de datos.</li> </ul> <p>Todos estos componentes trabajan juntos de manera coordinada para realizar diversas funciones y procesar la informaci\u00f3n de manera eficiente dentro del sistema inform\u00e1tico.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/","title":"Sistemas de numeraci\u00f3n y codificaci\u00f3n","text":"<p>Rev. 17/03/2024</p> <p>Los sistemas de numeraci\u00f3n y codificaci\u00f3n son fundamentales en la inform\u00e1tica y la electr\u00f3nica para representar informaci\u00f3n de manera comprensible y manipulable por las computadoras. </p> <p>Como estudiamos anteriormente en Representaci\u00f3n de datos, estos sistemas se utilizan para representar n\u00fameros, caracteres de texto, im\u00e1genes, sonidos y otros tipos de datos en formato digital. </p> <p>A continuaci\u00f3n, desarrollaremos los conceptos principales de los sistemas de numeraci\u00f3n y codificaci\u00f3n:</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#sistemas-de-numeracion","title":"Sistemas de Numeraci\u00f3n:","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#sistema-decimal-base-10","title":"Sistema Decimal (Base 10):","text":"<ul> <li>Es el sistema de numeraci\u00f3n m\u00e1s com\u00fan, que utiliza diez s\u00edmbolos (0 al 9) para representar n\u00fameros.</li> <li>Cada posici\u00f3n en un n\u00famero decimal tiene un valor que es una potencia de 10, siendo el d\u00edgito m\u00e1s a la derecha el de menor valor y el m\u00e1s a la izquierda el de mayor valor.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#sistema-binario-base-2","title":"Sistema Binario (Base 2):","text":"<ul> <li>Utiliza dos s\u00edmbolos (0 y 1) para representar n\u00fameros.</li> <li>Cada posici\u00f3n en un n\u00famero binario tiene un valor que es una potencia de 2, siendo el d\u00edgito m\u00e1s a la derecha el de menor valor y el m\u00e1s a la izquierda el de mayor valor.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#sistema-hexadecimal-base-16","title":"Sistema Hexadecimal (Base 16):","text":"<ul> <li>Utiliza diecis\u00e9is s\u00edmbolos (0 al 9 y A a F) para representar n\u00fameros.</li> <li>Se utiliza com\u00fanmente en inform\u00e1tica debido a su conveniencia para representar n\u00fameros binarios de manera m\u00e1s compacta y legible.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#codificacion-de-datos","title":"Codificaci\u00f3n de Datos:","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#ascii-american-standard-code-for-information-interchange","title":"ASCII (American Standard Code for Information Interchange):","text":"<ul> <li>Es una codificaci\u00f3n de caracteres de texto que asigna un n\u00famero \u00fanico a cada letra, d\u00edgito y s\u00edmbolo com\u00fanmente utilizado en ingl\u00e9s y otros idiomas.</li> <li>Utiliza 7 u 8 bits para representar cada car\u00e1cter, lo que permite un total de 128 o 256 caracteres diferentes, respectivamente.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#unicode","title":"Unicode:","text":"<ul> <li>Es una codificaci\u00f3n de caracteres m\u00e1s amplia que puede representar caracteres de muchos idiomas y s\u00edmbolos especiales de manera consistente en todas las plataformas inform\u00e1ticas.</li> <li>Unicode utiliza 16 bits para representar cada car\u00e1cter, lo que permite un rango mucho m\u00e1s amplio de caracteres que ASCII.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#codificacion-de-imagenes","title":"Codificaci\u00f3n de Im\u00e1genes:","text":"<ul> <li>Las im\u00e1genes se pueden codificar utilizando diferentes formatos de archivo, como JPEG, PNG, GIF, BMP, entre otros.</li> <li>Cada formato utiliza algoritmos de compresi\u00f3n espec\u00edficos para almacenar la informaci\u00f3n de la imagen de manera eficiente, reduciendo el tama\u00f1o del archivo sin perder demasiada calidad perceptible.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#codificacion-de-sonido","title":"Codificaci\u00f3n de Sonido:","text":"<ul> <li>El sonido se puede codificar utilizando diferentes formatos de archivo de audio, como MP3, WAV, AAC, etc.</li> <li>Cada formato utiliza algoritmos de compresi\u00f3n espec\u00edficos para representar el sonido de manera eficiente, eliminando redundancias y manteniendo la calidad auditiva dentro de l\u00edmites aceptables.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/sistemas-de-numeracion-y-codificacion/#importancia-y-aplicaciones","title":"Importancia y Aplicaciones:","text":"<ul> <li>Los sistemas de numeraci\u00f3n y codificaci\u00f3n son fundamentales en la inform\u00e1tica para representar y manipular datos de manera efectiva.</li> <li>Permiten la comunicaci\u00f3n y el intercambio de informaci\u00f3n entre diferentes dispositivos y sistemas inform\u00e1ticos.</li> <li>Son la base para el desarrollo de algoritmos, software y hardware en la computaci\u00f3n moderna.</li> <li> <p>Se aplican en una amplia gama de campos, incluidos la programaci\u00f3n de software, el dise\u00f1o de hardware, la comunicaci\u00f3n de red, el procesamiento de im\u00e1genes y sonido, entre otros.</p> </li> <li> <p>La representaci\u00f3n y el almacenamiento de datos en sistemas inform\u00e1ticos son fundamentales para el funcionamiento de la inform\u00e1tica moderna.</p> </li> <li>Permite que los programas inform\u00e1ticos almacenen, procesen y recuperen informaci\u00f3n de manera eficiente y precisa.</li> <li>Facilita el intercambio de datos entre diferentes sistemas inform\u00e1ticos y dispositivos.</li> <li>Es esencial para una amplia gama de aplicaciones, incluidas bases de datos, sistemas operativos, software de productividad, multimedia, aplicaciones web, juegos y mucho m\u00e1s.</li> </ul> <p>En resumen, los sistemas de numeraci\u00f3n y codificaci\u00f3n son conceptos esenciales en la inform\u00e1tica que permiten representar y manipular datos de manera efectiva en formato digital, lo que facilita su almacenamiento, procesamiento y transmisi\u00f3n.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/codificacion-de-datos/","title":"Codificaci\u00f3n de datos","text":"<p>Rev. 24/03/2024</p> <p>Los datos se transforman en un formato legible para las computadoras a trav\u00e9s de diversos esquemas de codificaci\u00f3n, tales como ASCII, Unicode, y formatos de archivos de imagen y audio como JPEG, PNG, MP3, WAV, entre otros. </p> <p>Cada tipo de dato se asocia con una codificaci\u00f3n espec\u00edfica que determina su representaci\u00f3n en formato binario y su almacenamiento en archivos o en la memoria del sistema inform\u00e1tico. </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/codificacion-de-datos/#codificacion-de-caracteres","title":"Codificaci\u00f3n de caracteres","text":"<p>Para representar letras, n\u00fameros y s\u00edmbolos se utilizan diferentes esquemas de codificaci\u00f3n de caracteres, como ASCII, Unicode, UTF-8 o UTF-16, que asignan valores num\u00e9ricos a cada car\u00e1cter para su representaci\u00f3n en binario.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/codificacion-de-datos/#codigo-ascii","title":"C\u00f3digo ASCII","text":"<p>ASCII (American Standard Code for Information Interchange) es una codificaci\u00f3n de caracteres de texto que asigna un n\u00famero \u00fanico a cada letra, d\u00edgito y s\u00edmbolo com\u00fanmente utilizado en ingl\u00e9s y otros idiomas. </p> <p>El c\u00f3digo ASCII (se pronuncia \"asqui\") fue creado en 1963 por el Comit\u00e9 Estadounidense de Est\u00e1ndares o \"ASA\". Este organismo cambio su nombre en 1969 por \"Instituto Estadounidense de Est\u00e1ndares Nacionales\" o \"ANSI\" como se lo conoce desde entonces.</p> <p>Este c\u00f3digo naci\u00f3 a partir de reordenar y expandir el conjunto de s\u00edmbolos y caracteres ya utilizados en aquel momento en telegraf\u00eda por la compa\u00f1\u00eda Bell. En un primer momento solo inclu\u00eda letras may\u00fasculas y n\u00fameros, pero en 1967 se agregaron las letras min\u00fasculas y algunos caracteres de control, formando as\u00ed lo que se conoce como US-ASCII, es decir los caracteres del 0 al 127.</p> <p>As\u00ed con este conjunto de solo 128 caracteres fue publicado en 1967 como est\u00e1ndar, conteniendo todos lo necesario para escribir en idioma ingles.</p> <p></p> <p>En 1981, la empresa IBM desarroll\u00f3 una extensi\u00f3n de 8 bits del c\u00f3digo ASCII, llamada \"pagina de c\u00f3digo 437\", en esta versi\u00f3n se reemplazaron algunos caracteres de control obsoletos, por caracteres gr\u00e1ficos. Adem\u00e1s se incorporaron 128 caracteres nuevos, con s\u00edmbolos, signos, gr\u00e1ficos adicionales y letras latinas, necesarias para la escrituras de textos en otros idiomas, como por ejemplo el espa\u00f1ol. As\u00ed fue como se sumaron los caracteres que van del ASCII 128 al 255.</p> <p>IBM incluy\u00f3 soporte a esta p\u00e1gina de c\u00f3digo en el hardware de su modelo 5150, conocido como \"IBM-PC\", considerada la primera computadora personal. El sistema operativo de este modelo, el \"MS-DOS\" tambi\u00e9n utilizaba el c\u00f3digo ASCII extendido.</p> <p></p> <p>Casi todos los sistemas inform\u00e1ticos de la actualidad utilizan el c\u00f3digo ASCII para representar caracteres, s\u00edmbolos, signos y textos</p> <p>Para tener en cuenta</p> <p>La representaci\u00f3n binaria tiene el bit m\u00e1s significativo primero (\u201cbig endian\u201d). Aunque no entiendas por ahora que significa esto, lo que tienes que saber es que ASCII es de 7 bits.</p> <p>Debido a que muchos han llamado codificaciones como CP437, ISO-8859-1, CP-1252 y otras \"ASCII extendido\", algunas personas tienen la idea err\u00f3nea de que ASCII es de 8 bits (1 byte).</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/codificacion-de-datos/#codigo-alt","title":"C\u00f3digo ALT","text":"<p>El c\u00f3digo ALT se refiere a una serie de c\u00f3digos que puedes ingresar utilizando el teclado de tu computadora para generar caracteres especiales que no se encuentran en el teclado est\u00e1ndar. Estos c\u00f3digos se ingresan manteniendo presionada la tecla ALT y luego escribiendo una serie de n\u00fameros en el teclado num\u00e9rico.</p> <p>Por ejemplo, si mantienes presionada la tecla ALT y luego escribes 64 en el teclado num\u00e9rico, cuando sueltes la tecla ALT, se generar\u00e1 el car\u00e1cter \"@\".</p> <p>Es importante mencionar que no todos los c\u00f3digos ALT corresponden a caracteres en el c\u00f3digo ASCII. Algunos c\u00f3digos ALT pueden generar caracteres que est\u00e1n fuera del conjunto de caracteres ASCII est\u00e1ndar.</p> <p>Para conocer el c\u00f3digo ALT correspondiente al s\u00edmbolo que est\u00e1s buscando te invito a que visites la p\u00e1gina web de referencia haciendo clic aqu\u00ed. </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/codificacion-de-datos/#codigo-unicode","title":"C\u00f3digo Unicode","text":"<p>Unicode es una codificaci\u00f3n de caracteres m\u00e1s amplia que puede representar caracteres de muchos idiomas y s\u00edmbolos especiales de manera consistente en todas las plataformas inform\u00e1ticas.</p> <p>El 12 de septiembre de 2023 fue lanzada la versi\u00f3n 15.1.0. Casi medio mill\u00f3n de s\u00edmbolos de todo tipo, incluyendo flechas, signos matem\u00e1ticos, emojis, jerogl\u00edficos y antiguos escritos, est\u00e1n disponibles. </p> <p>Como esta es much\u00edsima informaci\u00f3n para poder ser visualizada aqu\u00ed, te invito a que visites la p\u00e1gina web de referencia haciendo clic aqu\u00ed.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/codificacion-de-datos/#conclusiones-depurar","title":"Conclusiones (depurar)","text":"<p>En resumen, los sistemas de numeraci\u00f3n y codificaci\u00f3n son conceptos esenciales en la inform\u00e1tica que permiten representar y manipular datos de manera efectiva en formato digital, lo que facilita su almacenamiento, procesamiento y transmisi\u00f3n.</p> <p>En los sistemas inform\u00e1ticos existen varios tipos de datos y cada uno tiene su propia forma de representaci\u00f3n. As\u00ed, los datos se representan y almacenan de varias maneras, dependiendo del tipo de dato y de la arquitectura del sistema.</p> <p>Esta codificaci\u00f3n es esencial para garantizar que los datos sean interpretados y procesados de manera precisa por las aplicaciones de software y los dispositivos perif\u00e9ricos.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/codificacion-de-datos/#ejercicios","title":"Ejercicios","text":"<ol> <li> <p>\u00bfPodr\u00edas decir que dice la siguiente codificaci\u00f3n seg\u00fan el c\u00f3digo ASCII?</p> <pre><code>01000101 01010011 01010100 01001111 00100000  \n01000101 01010011 00100000 01001101 01010101 \n01011001 00100000 01000110 01000001 01000011 \n01001001 01001100 \n</code></pre> Ver soluci\u00f3n <p>Aqu\u00ed est\u00e1 la conversi\u00f3n de cada byte a su car\u00e1cter correspondiente en ASCII:</p> <p>01000101: E (69 en decimal) 01010011: S (83 en decimal) 01010100: T (84 en decimal) 01001111: O (79 en decimal) 00100000: (espacio) (32 en decimal) 01000101: E (69 en decimal) 01010011: S (83 en decimal) 00100000: (espacio) (32 en decimal) 01001101: M (77 en decimal) 01010101: U (85 en decimal) 01011001: Y (89 en decimal) 00100000: (espacio) (32 en decimal) 01000110: F (70 en decimal) 01000001: A (65 en decimal) 01000011: C (67 en decimal) 01001001: I (73 en decimal) 01001100: L (76 en decimal)</p> <p>Esta codificaci\u00f3n es una serie de bytes en binario. Cada byte representa un car\u00e1cter en la codificaci\u00f3n ASCII. </p> <p>Por lo tanto, la cadena de bytes en binario se traduce a \"ESTO ES MUY F\u00c1CIL\" en ASCII.</p> </li> </ol>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/representacion-de-datos/","title":"Representaci\u00f3n de datos","text":"<p>Rev. 17/03/2024</p> <p>En los sistemas inform\u00e1ticos la representaci\u00f3n y el almacenamiento de datos son procesos fundamentales para el funcionamiento de las computadoras.</p> <p>Desde hace mucho tiempo, el hombre en su vida diaria se expresa, comunica, almacena informaci\u00f3n, y la manipula mediante letras y n\u00fameros. </p> <p>Para la representaci\u00f3n num\u00e9rica utiliza el sistema de representaci\u00f3n decimal y para la representaci\u00f3n de caracteres dispone de un alfabeto que representa estos caracteres. </p> <p>Siguiendo el mismo principio que gu\u00eda al hombre, las computadoras tienen su propio sistema de representaci\u00f3n. </p> <p>Debido a su construcci\u00f3n basada fundamentalmente en circuitos electr\u00f3nicos digitales, utiliza el sistema binario. Esto obliga a transformar la representaci\u00f3n de nuestra informaci\u00f3n, tanto num\u00e9rica como alfanum\u00e9rica, a una representaci\u00f3n binaria para que la m\u00e1quina sea capaz de procesarlos. </p> <p>Por ejemplo, </p> <p><code>4 + 4 = 8</code></p> <p>La computadora debe encontrar la forma de poder representar el n\u00famero 4 o el resultado de la suma entre ambos n\u00fameros 4 entre otras acciones.</p> <p>Para todas estas situaciones existe un sistema de representaci\u00f3n interna de los datos.   </p> <p>Definici\u00f3n</p> <p>La representaci\u00f3n de datos es el proceso de codificar dichos datos en un formato espec\u00edfico para que puedan ser almacenados, procesados, transmitidos y comprendidos por computadoras u otros dispositivos. </p> <p>As\u00ed, en cualquier sistema inform\u00e1tico, Los datos y la informaci\u00f3n se representan y almacenan en formato digital utilizando una combinaci\u00f3n de sistemas de numeraci\u00f3n, codificaci\u00f3n y estructuras de datos. </p> <p>Luego de enumerar la importancia y aplicaciones de la representaci\u00f3n de datos, abordaremos una explicaci\u00f3n general de c\u00f3mo se realiza este proceso de representaci\u00f3n, empezando por estudiar los diferentes sistemas de numeraci\u00f3n, incluido el sistema binario.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/representacion-de-datos/#importancia-y-aplicaciones","title":"Importancia y Aplicaciones","text":"<ul> <li> <p>La representaci\u00f3n, la manipulaci\u00f3n y el almacenamiento de datos de manera efectiva, a trav\u00e9s de los sistemas de numeraci\u00f3n y codificaci\u00f3n, son fundamentales para el funcionamiento de los sistemas inform\u00e1ticos modernos.</p> </li> <li> <p>Permiten que los programas inform\u00e1ticos almacenen, procesen y recuperen informaci\u00f3n de manera eficiente y precisa.</p> </li> <li> <p>Permiten la comunicaci\u00f3n y facilitan el intercambio de datos e informaci\u00f3n entre diferentes dispositivos y sistemas inform\u00e1ticos.</p> </li> <li> <p>Son esenciales para el desarrollo de una amplia gama de campos y aplicaciones en la computaci\u00f3n moderna, incluidos concepci\u00f3n de algoritmos y la programaci\u00f3n de software de todo tipo, el dise\u00f1o de hardware, la comunicaci\u00f3n de red, el procesamiento de im\u00e1genes y sonido, el manejo de bases de datos, entre otros.</p> </li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/","title":"Sistemas de numeraci\u00f3n","text":"<p>Rev. 23/03/2024</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#que-es-un-sistema-de-numeracion","title":"\u00a1Qu\u00e9 es un sistema de numeraci\u00f3n?","text":"<p>Definici\u00f3n</p> <p>Se denomina sistema de numeraci\u00f3n al conjunto de s\u00edmbolos y reglas de generaci\u00f3n que se utilizan para la representaci\u00f3n de datos num\u00e9ricos o cantidades. </p> <p>Es decir que un sistema de numeraci\u00f3n es un conjunto de s\u00edmbolos finitos y reglas de generaci\u00f3n que permiten construir (representar) todos los n\u00fameros v\u00e1lidos. </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#clasificacion","title":"Clasificaci\u00f3n","text":"<p>Los sistemas de numeraci\u00f3n pueden clasificarse en dos grandes grupos: </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#sistemas-de-numeracion-no-posicionales","title":"Sistemas de numeraci\u00f3n no posicionales","text":"<p>En los sistemas no posicionales los d\u00edgitos tienen el valor del s\u00edmbolo utilizado, que no depende de la posici\u00f3n (columna) que ocupan en el n\u00famero.</p> <p>Estos son los m\u00e1s antiguos. Se usaban, por ejemplo, los dedos de la mano para representar la cantidad cinco y despu\u00e9s se hablaba de cu\u00e1ntas manos se ten\u00eda. </p> <p>Tambi\u00e9n se sabe que se usaban cuerdas con nudos para representar cantidades. Tiene mucho que ver con la coordinabilidad entre conjuntos. Entre ellos est\u00e1n los sistemas del antiguo Egipto, el sistema de numeraci\u00f3n romana, y los usados en Mesoam\u00e9rica por mayas, aztecas y otros pueblos.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#sistemas-de-numeracion-posicionales","title":"Sistemas de numeraci\u00f3n posicionales","text":"<p>En los sistemas de numeraci\u00f3n ponderados o posicionales el valor de un d\u00edgito depende tanto del s\u00edmbolo utilizado, como de la posici\u00f3n que ese s\u00edmbolo ocupa en el n\u00famero.</p> <p>Los sistemas de numeraci\u00f3n actuales son sistemas posicionales, en los que el valor relativo que representa cada s\u00edmbolo o d\u00edgito de una determinada cantidad depende de su valor absoluto y de la posici\u00f3n relativa que ocupa dicha cifra con respecto a la coma decimal. </p> <p>El n\u00famero de s\u00edmbolos permitidos en un sistema de numeraci\u00f3n posicional se conoce como base del sistema de numeraci\u00f3n. Si un sistema de numeraci\u00f3n posicional tiene base B significa que disponemos de B s\u00edmbolos diferentes para escribir los n\u00fameros, y que B unidades forman una unidad de orden superior.</p> <p>Por ejemplo, el sistema de numeraci\u00f3n babil\u00f3nico es posicional. </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#representacion-de-un-sistema-de-numeracion","title":"Representaci\u00f3n de un sistema de numeraci\u00f3n","text":"<p>Un sistema de numeraci\u00f3n puede representarse como:</p> <p></p> <p>Donde:</p> <ul> <li>N es el sistema de numeraci\u00f3n considerado (decimal, binario, hexadecimal, etc.)  </li> <li> <p>S son los s\u00edmbolos permitidos en el sistema. (Conocido como base)</p> <ul> <li>En el caso del sistema decimal son {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</li> <li>En el caso del sistema binario son {0, 1} </li> <li>En el caso del sistema hexadecimal son {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A (10), B (11), C (12), D (13), E (14), F (15)}  </li> <li>En el caso del sistema octal son {0, 1, 2, 3, 4, 5, 6, 7}</li> </ul> </li> <li> <p>R son las reglas que nos indican qu\u00e9 n\u00fameros son v\u00e1lidos en el sistema, y cu\u00e1les no.     Estas reglas son diferentes para cada sistema de numeraci\u00f3n considerado, pero una regla com\u00fan a todos es que para construir n\u00fameros v\u00e1lidos en un sistema de numeraci\u00f3n determinado s\u00f3lo se pueden utilizar los s\u00edmbolos permitidos en ese sistema.  </p> </li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#base-de-un-sistema-de-numeracion","title":"Base de un sistema de numeraci\u00f3n","text":"<p>Definici\u00f3n</p> <p>Un sistema de numeraci\u00f3n se caracteriza fundamentalmente por su base. La base es el n\u00famero de s\u00edmbolos \u00fanicos y permitidos que utiliza dicho sistema para representar n\u00fameros, y adem\u00e1s es el coeficiente que determina cu\u00e1l es el valor de cada s\u00edmbolo dependiendo de la posici\u00f3n que ocupe.</p> <p>Para indicar en qu\u00e9 sistema de numeraci\u00f3n se representa una cantidad se a\u00f1ade como sub\u00edndice a la derecha el n\u00famero de s\u00edmbolos que se pueden representar en dicho sistema.</p> <p>Por ejemplo si mencionamos 101 (uno - cero - uno), dependiendo de la base, el valor representado ser\u00e1 diferente. Veamos el siguiente caso tomando 101 como valor representado en el sistema decimal. En otros sistemas de numeraci\u00f3n, 101 representar\u00e1 otro valor, si se lo convierte a sistema decimal:</p> <ul> <li>En el caso del sistema decimal: 101<sub>(10)</sub></li> <li>En el caso del sistema binario: 101<sub>(2)</sub> = 5<sub>(10)</sub></li> <li>En el caso del sistema hexadecimal: 101<sub>(16)</sub> = 257<sub>(10)</sub></li> <li>En el caso del sistema octal: 101<sub>(8)</sub> = 65<sub>(10)</sub></li> </ul> <p>Veremos m\u00e1s adelante como son las reglas de conversi\u00f3n para cada caso.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#teorema-fundamental-de-la-numeracion","title":"Teorema Fundamental de la Numeraci\u00f3n","text":"<p>El valor total del n\u00famero ser\u00e1 la suma de cada d\u00edgito multiplicado por la potencia de la base correspondiente a la posici\u00f3n que ocupa en el n\u00famero.</p> <p>Se trata de un teorema que relaciona una cantidad expresada en cualquier sistema de numeraci\u00f3n posicional con la misma cantidad expresada en el sistema decimal. Supongamos una cantidad expresada en un sistema cuya base es B y representamos por x<sub>i</sub> cada uno de los d\u00edgitos que contiene dicha cantidad, donde el sub\u00edndice i indica la posici\u00f3n del d\u00edgito con respecto a la coma fraccionaria, la posici\u00f3n se numera en forma creciente hacia la izquierda y decreciente hacia la derecha de la coma (posici\u00f3n 0), en ambos casos de a 1. </p> <p>En los sistemas de numeraci\u00f3n posicional, como el sistema decimal (base 10), binario (base 2), hexadecimal (base 16), etc., un n\u00famero se representa como una suma ponderada de sus d\u00edgitos multiplicados por las potencias de la base del sistema.</p> <p>El Teorema Fundamental de la Numeraci\u00f3n dice que el valor decimal de una cantidad expresada en otro sistema de numeraci\u00f3n, est\u00e1 dado por la f\u00f3rmula: </p> <p></p> <p>donde el n\u00famero en base B es</p> <p></p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#sistema-decimal","title":"Sistema Decimal","text":"<p>El sistema que ha usado el hombre para contar desde hace bastante tiempo es el denominado sistema decimal, adoptado por contar con los diez dedos de la mano. </p> <p>El sistema decimal es uno de los denominados posicionales, que utiliza un conjunto de 10 s\u00edmbolos, <code>x&lt;sub&gt;i&lt;/sub&gt; \u0404 {0,...9}</code>. </p> <p>Un valor determinado o cantidad, que se denomina n\u00famero decimal, se puede expresar por la siguiente f\u00f3rmula, donde la base es 10. </p> <p>\u00bfCu\u00e1l es la interpretaci\u00f3n de la representaci\u00f3n de la cantidad 973,1416?</p> <p></p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#sistema-binario","title":"Sistema Binario","text":"<p>El sistema binario es el sistema de numeraci\u00f3n que utiliza internamente el hardware de las computadoras actuales. La base o n\u00famero de s\u00edmbolos que utiliza el sistema binario es 2, siendo los s\u00edmbolos 0 y 1, los utilizados para la representaci\u00f3n de cantidades.  </p> <p>\u00bfQu\u00e9 n\u00famero decimal representa el n\u00famero binario 1001,1?</p> <p></p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#sistema-hexadecimal","title":"Sistema Hexadecimal","text":"<p>Adem\u00e1s del sistema binario, se utilizan otros sistemas de numeraci\u00f3n como el hexadecimal y el octal para representar y visualizar datos binarios de manera m\u00e1s compacta y legible para los humanos. </p> <p>En el sistema hexadecimal, por ejemplo, cada d\u00edgito puede representar 4 bits (de 0000 a 1111 en binario), lo que facilita la visualizaci\u00f3n de valores binarios largos.</p> <p>As\u00ed, el sistema hexadecimal es un sistema posicional que utiliza diecis\u00e9is s\u00edmbolos para la representaci\u00f3n de cantidades. Estos s\u00edmbolos son 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, y F, donde las letras A, B, C, D, E, F equivalen a 10, 11, 12, 13, 14 y 15 del sistema decimal respectivamente. </p> <p>\u00bfQu\u00e9 n\u00famero decimal representa el n\u00famero hexadecimal 2CA?</p> <p></p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#rango-de-representacion-valores-minimo-y-maximo","title":"Rango de representaci\u00f3n: valores m\u00ednimo y m\u00e1ximo","text":"<p>Se denomina rango de representaci\u00f3n en un sistema determinado, al conjunto de n\u00fameros representables con el mismo. </p> <p>Un sistema de base b y n\u00fameros de n d\u00edgitos tiene un rango igual a b<sup>n</sup>.  </p> <p>El valor m\u00ednimo representable se obtiene cuando los n d\u00edgitos del n\u00famero son iguales al s\u00edmbolo de menor valor del sistema, por ejemplo con 4 d\u00edgitos, 0000 coincide como m\u00ednimo en base 2, 10 o 16. </p> <p>El valor m\u00e1ximo representable se obtiene cuando los n d\u00edgitos del n\u00famero son iguales al s\u00edmbolo de mayor valor del sistema, por ejemplo con 4 d\u00edgitos, los m\u00e1ximos ser\u00e1n 1111<sub>2</sub>, 9999<sub>10</sub> o FFFF<sub>16</sub>. </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#conversiones-entre-los-sistemas-de-numeracion","title":"Conversiones entre los sistemas de numeraci\u00f3n","text":"<p>Se denomina conversi\u00f3n entre n\u00fameros representados en distintos sistemas de numeraci\u00f3n a la transformaci\u00f3n de una determinada cantidad expresada en uno de dichos sistemas de numeraci\u00f3n, a su representaci\u00f3n equivalente en el otro sistema. </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#conversion-decimal-binario","title":"Conversi\u00f3n decimal-binario","text":"<p>El m\u00e9todo de conversi\u00f3n de un n\u00famero decimal a un n\u00famero binario consiste en efectuar, sobre la parte entera del n\u00famero decimal, divisiones sucesivas de los cocientes por el n\u00famero 2, hasta que el cociente entre una de las divisiones tome el valor 0. La uni\u00f3n de todos los restos obtenidos, escritos en orden inverso, nos proporciona ahora el n\u00famero inicial expresado en sistema binario. </p> <p>Por ejemplo,</p> <p>Leyendo los restos del \u00faltimo obtenido al primero de ellos, obtenemos: 1111<sub>2</sub> = 15<sub>10</sub> </p> <p>Para convertir una fracci\u00f3n decimal a su equivalente binario se debe multiplicar dicha fracci\u00f3n por dos, obteniendo en la parte entera del resultado el primero de los d\u00edgitos binarios de la fracci\u00f3n que buscamos. A continuaci\u00f3n, se repite el proceso con la parte fraccionaria del resultado anterior, obteniendo en la parte entera del nuevo resultado el segundo de los d\u00edgitos buscados. El proceso se repite hasta que desaparezca la parte fraccionaria de los resultados parciales (se haga 0) o hasta que tengamos los suficientes d\u00edgitos binarios. </p> <p>Por ejemplo,</p> <p>Un n\u00famero decimal que posee parte entera y parte fraccionaria (ej. 4,625) puede convertirse a su representaci\u00f3n binaria utilizando los 2 mecanismos anteriores, uno para la parte a la izquierda de la coma (4<sub>10</sub>= 100<sub>2</sub>) y el otro para la parte a la derecha de la misma (,625<sub>10</sub> = ,101<sub>2</sub>). El resultado completo es 4,625<sub>10</sub> = 100,101<sub>2</sub>. </p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#conversion-hexadecimal-binario-y-binario-hexadecimal","title":"Conversi\u00f3n hexadecimal-binario y binario-hexadecimal","text":"<p>Cada d\u00edgito hexadecimal tiene una representaci\u00f3n binaria con cuatro d\u00edgitos seg\u00fan indica la siguiente tabla:</p> Hexadecimal Binario Decimal 0 0000 0 1 0001 1 2 0010 2 3 0011 3 4 0100 4 5 0101 5 6 0110 6 7 0111 7 8 1000 8 9 1001 9 A 1010 10 B 1011 11 C 1100 12 D 1101 13 E 1110 14 F 1111 15 <p>Esta tabla puede ser utilizada para convertir un n\u00famero hexadecimal a binario. </p> <p>En esta conversi\u00f3n cada d\u00edgito hexadecimal se reemplaza por los cuatro d\u00edgitos binarios correspondientes. </p> <p>En la conversi\u00f3n de binario a hexadecimal se realiza un proceso inverso. Se agrupan los d\u00edgitos binarios de a 4 a partir de la coma decimal hacia la izquierda y hacia la derecha, sustituyendo cada cuarteto por su correspondiente d\u00edgito hexadecimal. </p> <p>Por ejemplo:</p> <p>Convertir el n\u00famero hexadecimal 7BA3,BC<sub>16</sub> a binario</p> <pre><code>   7         B         A         3     ,     B         C \n0 1 1 1   1 0 1 1   1 0 1 0   0 0 1 1  ,  1 0 1 1   1 1 0 0  \n</code></pre> <p>Convertir el n\u00famero binario 0001100101001111,1011011<sub>2</sub> a hexadecimal</p> <pre><code>0 0 0 1   1 0 0 1   0 1 0 0    1 1 1 1   ,  1 0 1 1   0 1 1 0\n   1         9         4         F       ,     B         6 \n</code></pre>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#clases-audiovisuales-sobre-conversion","title":"Clases audiovisuales sobre conversi\u00f3n","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#decimal-a-binario-decimal-a-hexadecimal-decimal-a-octal","title":"Decimal a Binario - Decimal a Hexadecimal - Decimal a Octal","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#binario-a-decimal-parte-1","title":"Binario a Decimal - Parte 1","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#binario-hexadecimal-y-octal-a-decimal-parte-2","title":"Binario, Hexadecimal y Octal a Decimal - Parte 2","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#binario-hexadecimal-y-octal-a-decimal-parte-3","title":"Binario, Hexadecimal y Octal a Decimal - Parte 3","text":""},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#ejercicios","title":"Ejercicios","text":"<ol> <li>Representa en binario el n\u00famero 12<sub>10</sub> </li> <li>Representa en hexadecimal el n\u00famero 60<sub>10</sub></li> <li>Convierte el n\u00famero 10001111<sub>2</sub> a decimal.</li> <li>Convierte el n\u00famero 10001111<sub>2</sub> a hexadecimal.</li> <li>Representa en binario el n\u00famero 1327<sub>10</sub></li> <li>Convierte el n\u00famero 01001011<sub>2</sub> a decimal.</li> <li>\u00bfCu\u00e1les de estos dos n\u00fameros es mayor en el sistema decimal 1011101<sub>2</sub> o 5B<sub>16</sub>?</li> <li>\u00bfCu\u00e1l de estos n\u00fameros es menor: A5DE<sub>16</sub> o 00111010<sub>2</sub>?</li> </ol> <p>Sistemas de Numeraci\u00f3n:</p> <p>Los datos se representan internamente en formato binario (sistema de base 2), utilizando combinaciones de 0 y 1 para representar n\u00fameros, caracteres de texto, im\u00e1genes, sonidos y otros tipos de informaci\u00f3n. Los n\u00fameros enteros, flotantes y otros tipos de datos se representan en binario utilizando diferentes t\u00e9cnicas, como complemento a dos para n\u00fameros negativos y formatos espec\u00edficos para n\u00fameros en punto flotante. Los sistemas de numeraci\u00f3n hexadecimales tambi\u00e9n se utilizan en ciertos contextos, especialmente en programaci\u00f3n y representaci\u00f3n compacta de datos binarios.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#representacion-binaria","title":"Representaci\u00f3n binaria:","text":"<p>La unidad fundamental de almacenamiento en la computadora es el bit, que puede ser 0 o 1. Todos los datos, ya sean n\u00fameros, texto, im\u00e1genes, sonidos, etc., se representan en forma binaria utilizando combinaciones de 0 y 1.</p> <p>En su nivel m\u00e1s fundamental, todo lo que se almacena en un medio de almacenamiento digital est\u00e1 representado en forma binaria. Cada archivo, sin importar su tama\u00f1o, se descompone en una secuencia de ceros y unos que los dispositivos electr\u00f3nicos pueden entender y procesar.</p> <ul> <li>La representaci\u00f3n binaria utiliza solo dos s\u00edmbolos, 0 y 1, que se corresponden con los estados de \"apagado\" y \"encendido\" en la electr\u00f3nica digital.</li> <li>Los datos binarios son fundamentales en la computaci\u00f3n, ya que los circuitos electr\u00f3nicos de las computadoras est\u00e1n dise\u00f1ados para manipular se\u00f1ales binarias.</li> <li>Cada d\u00edgito binario se llama bit (binary digit). Un conjunto de 8 bits se llama byte, que es una unidad com\u00fan de medida en el almacenamiento y la transmisi\u00f3n de datos.</li> <li>Los n\u00fameros, textos, im\u00e1genes y sonidos pueden ser representados en formato binario mediante distintas t\u00e9cnicas de codificaci\u00f3n.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#bytes-y-estructuras-de-datos","title":"Bytes y estructuras de datos","text":"<p>Los datos se agrupan en bytes, que son secuencias de 8 bits. Los bytes se utilizan para representar diferentes tipos de datos. Por ejemplo, un car\u00e1cter en ASCII o UTF-8 se representa con un byte. Para datos m\u00e1s grandes, como n\u00fameros enteros, n\u00fameros de punto flotante, texto largo, im\u00e1genes, etc., se utilizan m\u00faltiples bytes o estructuras de datos m\u00e1s complejas.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#formatos-de-datos","title":"Formatos de datos:","text":"<p>Los datos pueden tomar diferentes formatos como n\u00fameros enteros, n\u00fameros decimales, caracteres simples o cadenas de caracteres, im\u00e1genes, videos o sonidos, entre otros formatos. </p> <p>Estos formatos se denominan tipo de dato y cada tipo de dato tiene su propio formato de representaci\u00f3n. Por ejemplo:</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#representacion-de-datos-estructurados-y-no-estructurados","title":"Representaci\u00f3n de datos estructurados y no estructurados","text":"<p>Los datos estructurados, como las bases de datos, se organizan en tablas con filas y columnas, mientras que los datos no estructurados, como archivos de texto, im\u00e1genes o videos, pueden almacenarse en forma de archivos binarios o en formatos espec\u00edficos dise\u00f1ados para ese tipo de datos.</p>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#representacion-de-imagenes","title":"Representaci\u00f3n de im\u00e1genes:","text":"<p>Im\u00e1genes y Videos: Se almacenan como matrices de p\u00edxeles, donde cada p\u00edxel tiene valores de color.</p> <ul> <li>Las im\u00e1genes se pueden representar digitalmente mediante p\u00edxeles, que son los elementos m\u00e1s peque\u00f1os de una imagen.</li> <li>Cada p\u00edxel se puede representar mediante valores num\u00e9ricos que indican su color y brillo. Los colores suelen representarse mediante combinaciones de los tres colores primarios: rojo, verde y azul (modelo RGB).</li> <li>La resoluci\u00f3n de una imagen se refiere a la cantidad de p\u00edxeles que la componen, y la profundidad de bits determina la cantidad de colores o tonos que se pueden representar por p\u00edxel.</li> <li>Los formatos de archivo comunes para im\u00e1genes incluyen JPEG, PNG, GIF, BMP, entre otros, que utilizan diferentes algoritmos de compresi\u00f3n para almacenar la informaci\u00f3n de imagen de manera eficiente.</li> </ul>"},{"location":"unidades/conceptos-fundamentales-de-la-informatica/representacion-de-datos/sistemas-de-numeracion/#representacion-de-sonidos","title":"Representaci\u00f3n de sonidos:","text":"<p>Se representan mediante muestras de amplitud en funci\u00f3n del tiempo. Codificaci\u00f3n: La elecci\u00f3n de la codificaci\u00f3n afecta c\u00f3mo se representan los datos. Por ejemplo, UTF-8 es ampliamente utilizado para caracteres multiling\u00fces.</p> <ul> <li>El sonido se puede representar digitalmente mediante muestras de audio.</li> <li>En la grabaci\u00f3n digital de sonido, se toman muestras del sonido a intervalos regulares (frecuencia de muestreo), y la amplitud del sonido en cada momento se convierte en un valor num\u00e9rico (profundidad de bits).</li> <li>Cuanto mayor sea la frecuencia de muestreo y la profundidad de bits, mayor ser\u00e1 la fidelidad de la reproducci\u00f3n del sonido.</li> <li>Los formatos de archivo de audio comunes incluyen MP3, WAV, AAC, entre otros, que utilizan diferentes m\u00e9todos de compresi\u00f3n para almacenar el audio de manera eficiente sin sacrificar demasiada calidad perceptible.</li> </ul> <p>En resumen, la representaci\u00f3n de datos en formato binario, texto, im\u00e1genes y sonido es esencial para el funcionamiento de la computaci\u00f3n moderna, permitiendo el almacenamiento, procesamiento y transmisi\u00f3n eficientes de una amplia variedad de informaci\u00f3n.</p> <p>Unario, decimal, binario. N\u00fameros, texto, emojis, im\u00e1genes, videos y sonidos.</p> <p>Todas estas ideas son solo ceros y unos, interpretadas y utilizadas por el software que escribiremos, para interpretarlas de la manera que queramos.</p>"},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/","title":"Caso practico resolucion de problema mediante diagrama de flujo","text":""},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/#problema-propuesto","title":"Problema propuesto","text":"<p>Se cuenta con las notas del trimestre 1 (t1), trimestre 2 (t2) y trimestre 3 (t3) de un alumno.</p> <p>Se sabe que el promedio final ( pf ) se calcula con la f\u00f3rmula: pf = (t1 + t2 + 2 * t3) / 4</p> <p>Si el alumno cumple con la siguiente condici\u00f3n: t3 &gt;= 6 y pf &gt;= 6 tiene opci\u00f3n a rendir un examen sustitutorio ( ES )</p> <p>Escriba un algoritmo que reciba las notas y luego muestre un mensaje indicando si el alumno puede rendir o no el examen sustitutorio.</p> <p>En el caso que ya no pueda rendir el examen sustitutorio, debe mostrar solamente el promedio final.</p>"},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/#resolucion","title":"Resoluci\u00f3n","text":"An\u00e1lisis<pre><code>Datos de entrada: \n    t1, t2, t3\nSalida: \n    si (t3 &gt;= 6 y pf &gt;= 6) mostrar que puede rendir ES;\n    si no, mostrar que no puede rendir ES y mostrar la nota final pf\n</code></pre> Algoritmo<pre><code>Inicio\n   Ingresar las notas del alumno en t1, t2, t3\n   Calcular pf con la siguiente f\u00f3rmula: (t1 + t2 + 2 * t3) / 4\n   Si cumple la condici\u00f3n t3 &gt;= 6 y pf &gt;= 6 entonces\n      Mostrar el mensaje \"Puede rendir el ES\"\n   Si no cumple la condici\u00f3n entonces \n      Mostrar el mensaje \"No puede rendir es\" y mostrar pf\nFin\n</code></pre> <p>Si la l\u00f3gica del algoritmo es correcta y el diagrama de flujo es v\u00e1lido, el siguiente paso ser\u00e1 transcribir ambos dise\u00f1os en pseudoc\u00f3digo.</p> <p>El pseudoc\u00f3digo es una versi\u00f3n legible, en lenguaje humano natural, de un algoritmo. Es decir, que es una representaci\u00f3n de dicho algoritmo en idioma, ya con especificaciones de implementaci\u00f3n como programa pero sin ser un lenguaje de programaci\u00f3n espec\u00edfico a\u00fan.</p> <p>Estudiaremos como se utiliza el pseudoc\u00f3digo dentro del proceso de creaci\u00f3n de software, m\u00e1s adelante.</p>"},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/#recuerda-siempre","title":"recuerda siempre","text":""},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/","title":"Diagramas de flujo","text":""},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#introduccion","title":"Introducci\u00f3n","text":"<p>Son una notaci\u00f3n para implementar algoritmos, basada en la utilizaci\u00f3n de s\u00edmbolos gr\u00e1ficos denominados bloques, donde se escriben las instrucciones que tiene que realizar el algoritmo.</p> <p>Estos bloques est\u00e1n conectados entre s\u00ed por l\u00edneas indicando el orden de ejecuci\u00f3n de las instrucciones.</p>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#que-es-un-diagrama-de-flujo","title":"\u00bfQu\u00e9 es un diagrama de flujo?","text":"<p>Un diagrama de flujo es una notaci\u00f3n gr\u00e1fica para implementar algoritmos.</p> <p>Se basa en el uso de s\u00edmbolos gr\u00e1ficos denominados bloques, donde se escriben las instrucciones que tiene que realizar el programa. Es decir, que cada instrucci\u00f3n es representada por un s\u00edmbolo diferente que contiene una breve descripci\u00f3n de lo que hace. </p> <p>Estos bloques est\u00e1n conectados entre s\u00ed por l\u00edneas, indicando el orden de ejecuci\u00f3n las instrucciones.</p> <p>En todo diagrama de flujo siempre habr\u00e1 un solo bloque de inicio y otro de fin.</p> <p></p>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#caracteristicas-de-los-diagramas-de-flujo","title":"Caracter\u00edsticas de los diagramas de flujo","text":"<ul> <li>Cumple un rol vital en la concepci\u00f3n de la soluci\u00f3n a un problema.</li> <li>Es extremadamente \u00fatil en la comprensi\u00f3n de la l\u00f3gica de problemas dif\u00edciles y extensos.</li> <li>Debe ser una representaci\u00f3n diagram\u00e1tica que ilustre el flujo de instrucciones necesarias para solucionar el problema.</li> <li>Debe ser dibujado en la etapa anterior al desarrollo del pseudoc\u00f3digo.</li> <li>Debe facilitar la comunicaci\u00f3n entre el dise\u00f1ador de la soluci\u00f3n y los programadores del c\u00f3digo.</li> <li>Es obligatorio realizarlo para incluirlo en cualquier documentaci\u00f3n de desarrollo.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#limitaciones-de-los-diagramas-de-flujo","title":"Limitaciones de los diagramas de flujo","text":"<ul> <li>L\u00f3gica compleja: en algunos casos, la l\u00f3gica de se vuelve complicada y los diagramas se tornan complejos y confusos.</li> <li>Alteraciones y modificaciones: si fuera necesario alterar alguna parte del diagrama, en casi todos los casos ser\u00eda necesario redibujarlos completamente (aunque si el trabajo se realizara con un software, ser\u00eda menos tedioso, pero a\u00fan as\u00ed, requerir\u00eda de tiempo y mucha atenci\u00f3n para no romper la l\u00f3gica del algoritmo).</li> <li>La esencia de \u201clo que est\u00e1 hecho\u201d puede perderse f\u00e1cilmente en los detalles t\u00e9cnicos de \u201c\u00bfc\u00f3mo est\u00e1 hecho?\u201d: se debe evitar caer en la trampa de preocuparse demasiado por los detalles t\u00e9cnicos en la etapa de dise\u00f1o del algoritmo, ya que esto podr\u00eda conducir a una p\u00e9rdida de perspectiva del panorama general y hacer que el proceso de dise\u00f1o sea m\u00e1s complicado de lo necesario.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#ventajas-del-uso-de-diagramas-de-flujo","title":"Ventajas del uso de diagramas de flujo","text":"<ul> <li>Comunicaci\u00f3n: los diagramas son la mejor forma de comunicar la l\u00f3gica de un sistema a todo el equipo de desarrollo.</li> <li>An\u00e1lisis efectivo: con la ayuda de los diagramas, el problema puede ser analizado de manera m\u00e1s efectiva.</li> <li>Documentaci\u00f3n adecuada: sirven como herramienta de comunicaci\u00f3n en la documentaci\u00f3n de un programa.</li> <li>Codificaci\u00f3n eficiente: los diagramas act\u00faan como gu\u00edas durante el proceso de an\u00e1lisis y dise\u00f1o de c\u00f3digo.</li> <li>Correcciones precisas: ayudan a realizar correcciones m\u00e1s precisas de los programas cuando fallan o son testeados.</li> <li>Mantenimiento eficiente del programa: el mantenimiento de un programa que se encuentra operando resulta m\u00e1s f\u00e1cil con la ayuda de los diagramas, ayudando al programador a poner sus esfuerzos de manera m\u00e1s eficiente sobre cada parte del programa.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#reglas-para-la-realizacion-de-diagramas-de-flujo","title":"Reglas para la realizaci\u00f3n de diagramas de flujo","text":"<p>Terminar de armar esta secci\u00f3n</p> <ul> <li>El diagrama de flujo debe ser claro, simple y f\u00e1cil de leer. No debe existir lugar para las ambig\u00fcedades.</li> <li>La direcci\u00f3n usual del flujo de procedimientos debe ser de izquierda a derecha y de arriba hacia abajo.</li> <li>Cada instrucci\u00f3n necesaria en un diagrama de flujo debe ser listada en un orden l\u00f3gico. Lo mismo para bloques de sentencias, estructuras de control y dem\u00e1s partes que compongan al algoritmo.</li> <li>S\u00f3lo puede haber una l\u00ednea de entrada de flujo y una l\u00ednea de salida de flujo de cada bloque. En caso de ser necesario, es posible unificar las l\u00edneas de entrada en una sola antes de ingresar al bloque.</li> <li>S\u00f3lo una l\u00ednea de flujo puede ingresar a un s\u00edmbolo de decisi\u00f3n, pero puede salir una l\u00ednea por cada respuesta posible.</li> <li>S\u00f3lo puede utilizarse una l\u00ednea de flujo en conjunto con un s\u00edmbolo Terminal.</li> <li>Las l\u00edneas de flujo deben ser verticales u horizontales. Salvo que un s\u00edmbolo determine lo contrario (por ejemplo, los condicionales), cada l\u00ednea de flujo debe ingresar a un s\u00edmbolo por su parte superior.</li> <li>Escriba sint\u00e1cticamente dentro de cada s\u00edmbolo. Si fuera necesaria mayor descripci\u00f3n, emplee referencias.</li> <li>Si el diagrama se torna complejo, es mejor utilizar conector para eliminar l\u00edneas de flujo. Evite las intersecciones de l\u00edneas de flujo lo m\u00e1s que pueda.</li> <li>Aseg\u00farese que el diagrama de flujo posea un Inicio y un Fin l\u00f3gicos.</li> <li>Es \u00fatil testear la validez del diagrama, recorri\u00e9ndolo con valores simples de prueba.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#estructuras-de-control","title":"Estructuras de control","text":"<p>Un algoritmo debe ser creado empleando estructuras de control que definen el flujo de ejecuci\u00f3n de las instrucciones a lo largo del programa.</p> <p>Estas instrucciones se dividen en tres categor\u00edas generales:</p> <ul> <li> <p>Estructura de control secuencial</p> </li> <li> <p>Estructura de control selectiva</p> <ul> <li>Selectiva (o alternativa) simple </li> <li>Selectiva (o alternativa) doble</li> <li>Selectiva (o alternativa) doble anidada</li> <li>Selectiva (o alternativa) m\u00faltiple</li> </ul> </li> <li> <p>Estructura de control iterativa (repetitiva)</p> <ul> <li>Repetir Mientras (While) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Hasta (Until) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Para\u2026Siguiente (For\u2026Next)</li> </ul> </li> </ul> <p>Analizaremos estas estructuras m\u00e1s adelante cuando veamos la simbolog\u00eda de cada una.</p>"},{"location":"unidades/diagramas-de-flujo/resumen-de-diagramas-de-flujo/","title":"Resumen de diagramas de flujo","text":""},{"location":"unidades/diagramas-de-flujo/resumen-de-diagramas-de-flujo/#resumen","title":"Resumen","text":"<p>Completar</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/","title":"Simbolog\u00eda de los diagramas de flujo","text":""},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#lineas-de-flujo","title":"L\u00edneas de flujo","text":"<p>Cada l\u00ednea de flujo se representa con una l\u00ednea recta con una sola flecha de sentido que permite conectar los bloques del diagrama. Esta flecha indica la secuencia en la que se van a ejecutar las acciones.</p> <p></p> <p>Consejos \u00fatiles</p> <p>Las l\u00edneas de flujo, siempre que se pueda, deben ir de arriba hacia abajo, de izquierda a derecha.</p> <p>Su trazado debe ser siempre en forma recta.</p> <p>Se debe evitar el cruce de l\u00edneas de flujo para facilitar la legibilidad del diagrama. En caso de no ser posible, se deber\u00e1 optar por alguna soluci\u00f3n que no entorpezca el diagrama.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#inicio-y-fin","title":"Inicio y Fin","text":"<p>Todo algoritmo y por lo tanto, todo diagrama de flujo tiene un inicio y un fin. La silueta del bloque es la misma y se coloca la palabra INICIO o FIN seg\u00fan corresponda. </p> <p></p> <p>Consejos \u00fatiles</p> <p>Del bloque de INICIO solo puede salir una l\u00ednea de flujo.</p> <p>Al bloque de FIN solo puede llegar una l\u00ednea de flujo.</p> <p>Puedes utilizar el bloque completo o su versi\u00f3n abreviada.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#instruccion-o-sentencia-tambien-conocido-como-proceso-tarea-accion-o-paso","title":"Instrucci\u00f3n o Sentencia (tambi\u00e9n conocido como proceso, tarea, acci\u00f3n o paso):","text":"<p>En este bloque se escribe la instrucci\u00f3n que debe realizar el programa. Si son varias, se escriben una debajo de la otra, sin olvidarse que se ejecutan, una a una, en forma secuencial seg\u00fan el orden en que fueron escritas.</p> <p></p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#comentarios","title":"Comentarios","text":"<p>Los comentarios son elementos del algoritmo que sirven como referencia del c\u00f3digo fuente. Generalmente comentan que es lo que hace una parte del c\u00f3digo o sirven de informaci\u00f3n para futuras intervenciones de los programadores. </p> <p></p> <p>Consejos \u00fatiles</p> <p>Un comentario es una aclaraci\u00f3n para comprender mejor el c\u00f3digo del programa.</p> <p>No forma parte del c\u00f3digo y por lo tanto no se ejecuta.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#entrada-y-salida","title":"Entrada y Salida","text":"<p>Estos bloques representan acciones de entrada desde un teclado, por ejemplo, o de salida hacia una pantalla. </p> <p>Es decir, si debemos ejecutar una acci\u00f3n que consiste en leer un dato que se ingresa mediante el teclado de una PC y almacenarlo en la variable de nombre \u201ca\u201d, entonces dicha acci\u00f3n se describe dentro de este bloque como \u201cleer a\u201d.</p> <p></p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#conectores","title":"Conectores","text":"<p>Falta completar</p> <p>Permiten unir diagramas de flujo cuando \u00e9stos no caben en una misma columna de la hoja por completo. Es decir, cuando debemos, por cuestiones de espacio en la hoja, fragmentar el programa entonces utilizamos estos bloques para indicar los puntos de uni\u00f3n. Cada par de puntos que se deben unir llevar\u00e1n dentro de este bloque la misma referencia.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-secuencial","title":"Estructura secuencial","text":"<p>La estructura secuencial es aquella en la que una instrucci\u00f3n sigue a otra en secuencia. </p> <p>Las instrucciones se suceden de tal modo que la salida de una es la entrada de la siguiente y as\u00ed sucesivamente hasta el final de la estructura secuencial o, en su defecto, el final del del programa. </p> <p>Planteado de este modo, la estructura secuencial tiene una sola entrada y una sola salida. </p> <p></p> <p>Consejos \u00fatiles</p> <p>Las instrucciones del programa se ejecutan en el orden que se encuentran escritas.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#bloque-de-sentencias","title":"Bloque de sentencias","text":"<p>Consejos \u00fatiles</p> <p>Para simplificar la lectura de un diagrama, se puede representar un conjunto de sentencias (cualquier sea su estructura) como un \u00fanico bloque identificado que, opcionalmente, puede tener una referencia hacia otro diagrama de flujo que lo detalle.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-simple","title":"Estructura selectiva (o alternativa) simple","text":"<p>En la estructura selectiva simple, la ejecuci\u00f3n de las instrucciones depende de la validaci\u00f3n de una expresi\u00f3n condicional. En caso de no ser validada la expresi\u00f3n, se pasan por alto las instrucciones en cuesti\u00f3n y el control de flujo contin\u00faa con el resto del programa.</p> <p></p> <p>\u00a1Para recordar!</p> <p>El bloque de sentencias se ejecuta solo si la expresi\u00f3n condicional es verdadera.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-doble","title":"Estructura selectiva (o alternativa) doble","text":"<p>En la estructura selectiva doble, la ejecuci\u00f3n de determinadas instrucciones depende de la validaci\u00f3n, o no, de una expresi\u00f3n condicional. Si la expresi\u00f3n se valida, se ejecutan unas instrucciones. Caso contrario, se ejecutan otras instrucciones. Al finalizar, en ambos casos, el control de flujo contin\u00faa con el resto del programa.</p> <p></p> <p>\u00a1Para recordar!</p> <p>Si la expresi\u00f3n condicional es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional es falsa, se ejecuta el bloque de sentencias falso.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-doble-anidada","title":"Estructura selectiva (o alternativa) doble anidada","text":"<p>Corregir que el else puede ser vacio</p> <p>El funcionamiento de la estructura selectiva doble anidada es igual que el de la estructura selectiva doble.</p> <p></p> <p>Si la expresi\u00f3n condicional 1 es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional 1 es falsa, se eval\u00faa la expresi\u00f3n condicional 2.</p> <p>Si la expresi\u00f3n condicional 2 es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional 2 es falsa, se ejecuta el bloque de sentencias falso.</p> <p>\u00a1Para recordar!</p> <p>Esta estructura puede contener tantas estructuras selectivas como sea necesario. </p> <p>La regla de c\u00e1lculo para saber la cantidad de estructuras selectivas doble necesarias es:</p> <p>CANTIDAD DE ESTRUCTURAS = CANTIDAD DE BLOQUES DE SENTENCIAS DISTINTOS \u2013 1</p> <p>Y recuerda que el \u00faltimo bloque de sentencias siempre se ejecuta por el camino falso de la \u00faltima estructura selectiva doble.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-multiple","title":"Estructura selectiva (o alternativa) m\u00faltiple","text":"<p>La estructura selectiva m\u00faltiple eval\u00faa una expresi\u00f3n condicional que puede tomar \"n\" valores. Seg\u00fan este valor, se ejecuta el bloque de sentencias correspondiente.</p> <p></p> <p>\u00a1Para recordar!</p> <p>Esta estructura puede contener tantos casos como sean necesarios. </p> <p>Puede caber la posibilidad que exista un bloque de sentencias por defecto (default) que se ejecute en el caso que la expresi\u00f3n condicional no valide ninguno de los casos existentes. </p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la entrada","text":"<p>La estructura iterativa Mientras (While) con la condici\u00f3n a la entrada, primero, eval\u00faa la expresi\u00f3n condicional antes de ejecutar por primera vez el bloque de sentencias incluido en dicha estructura. </p> <p>Si la expresi\u00f3n es v\u00e1lida (verdadero), se ejecuta el bloque de sentencias una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. </p> <p>Si la expresi\u00f3n vuelva a ser v\u00e1lida (verdadero), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n sea v\u00e1lido (verdadero).</p> <p>En el momento que el resultado de la expresi\u00f3n no sea v\u00e1lido (falso), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se emplea esta estructura.</p> <p>La regla dice que la ejecuci\u00f3n del bloque de sentencias depender\u00e1 de una condici\u00f3n que debe validarse a partir de algo que ocurra previamente en el programa, antes de llegar a la ejecuci\u00f3n de esta estructura.</p> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta no es v\u00e1lida (falso), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la salida","text":"<p>La estructura iterativa Mientras (While) con la condici\u00f3n a la salida, primero, ejecuta el bloque de sentencias incluido en dicha estructura, una vez, sin evaluar ninguna expresi\u00f3n condicional y, al finalizar la ejecuci\u00f3n, reci\u00e9n se eval\u00faa la expresi\u00f3n condicional.</p> <p>Si la expresi\u00f3n es v\u00e1lida (verdadero), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n sea v\u00e1lido (verdadero).</p> <p>En el momento que el resultado de la expresi\u00f3n no sea v\u00e1lido (falso), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>La regla dice que las sucesivas ejecuciones del bloque de sentencias depender\u00e1 de una condici\u00f3n que debe validarse a partir de algo que ocurra dentro de dicho bloque al ejecutarse obligatoriamente una vez (y, eventualmente, en conjunto con algo que ocurra previamente en el programa antes de llegar a la ejecuci\u00f3n de esta estructura).</p> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional no sea v\u00e1lido (falso).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#diferencia-entre-ambas-estructuras","title":"Diferencia entre ambas estructuras","text":"<p>Observa las diferencias de la estructura con la condici\u00f3n a la entrada respecto de la estructura con la condici\u00f3n a la salida:</p> <p>\u00a1No te las confundas! \u00a1Su principio de funcionamiento es parecido, pero no son iguales!</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la entrada","text":"<p>La estructura iterativa Hasta (Until) con la condici\u00f3n a la entrada, primero, eval\u00faa la expresi\u00f3n condicional antes de ejecutar por primera vez el bloque de sentencias incluido en dicha estructura. </p> <p>Si la expresi\u00f3n NO es v\u00e1lida (falso), se ejecuta el bloque de sentencias una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. </p> <p>Si la expresi\u00f3n vuelva a NO ser v\u00e1lida (falso), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n NO sea v\u00e1lido (falso).</p> <p>En el momento que el resultado de la expresi\u00f3n SI sea v\u00e1lido (verdadero), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>La regla dice que la ejecuci\u00f3n del bloque de sentencias depender\u00e1 de una condici\u00f3n que NO debe validarse a partir de algo que ocurra previamente en el programa, antes de llegar a la ejecuci\u00f3n de esta estructura.</p> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta ES v\u00e1lida (verdadero), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de NO ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la salida","text":"<p>La estructura iterativa Hasta (Until) con la condici\u00f3n a la salida, primero, ejecuta el bloque de sentencias incluido en dicha estructura, una vez, sin evaluar ninguna expresi\u00f3n condicional y, al finalizar la ejecuci\u00f3n, reci\u00e9n se eval\u00faa la expresi\u00f3n condicional.</p> <p>Si la expresi\u00f3n NO es v\u00e1lida (falso), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n NO sea v\u00e1lido (falso).</p> <p>En el momento que el resultado de la expresi\u00f3n SI sea v\u00e1lido (verdadero), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>La regla dice que las sucesivas ejecuciones del bloque de sentencias depender\u00e1n de una condici\u00f3n que debe validarse a partir de algo que ocurra dentro de dicho bloque al ejecutarse obligatoriamente una vez (y, eventualmente, en conjunto con algo que ocurra previamente en el programa antes de llegar a la ejecuci\u00f3n de esta estructura).</p> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional SI sea v\u00e1lido (verdadero).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#diferencia-entre-ambas-estructuras_1","title":"Diferencia entre ambas estructuras","text":"<p>Observa las diferencias de la estructura con la condici\u00f3n a la entrada respecto de la estructura con la condici\u00f3n a la salida:</p> <p>\u00a1No te las confundas! \u00a1Su principio de funcionamiento es parecido, pero no son iguales!</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-parasiguiente-fornext","title":"Estructura iterativa (o repetitiva) Para\u2026Siguiente (For\u2026Next)","text":"<p>La estructura iterativa Para\u2026Siguiente (For\u2026Next) es similar a las estructuras iterativas anteriores, solo que contiene una variable de control o \"\u00edndice\", a la que se le asigna un valor inicial para que, luego, repetici\u00f3n tras repetici\u00f3n, se vaya modificando dicho valor por otro \"valor de control\" que permita evaluarlo frente a una expresi\u00f3n condicional que deber\u00e1 ser v\u00e1lida (verdadero) para permitir cada nueva ejecuci\u00f3n del bloque de sentencias.</p> <p>En el momento que el resultado de la evaluaci\u00f3n del valor almacenado en la variable de control frente a la la expresi\u00f3n condicional no sea v\u00e1lido (falso), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>Esta estructura tiene como finalidad repetir un mismo bloque de sentencias un conocido n\u00famero de veces, cuando SI se conoce el n\u00famero de repeticiones del bucle, y no depender\u00e1 de una condici\u00f3n que debe validarse a partir de algo que ocurra previamente en el programa, antes de llegar a la ejecuci\u00f3n de esta estructura, o de algo que ocurra en la propia estructura. </p> <p>\u00a1Para recordar!</p> <p>A diferencia de las estructuras anteriores donde, seg\u00fan el caso, no se ejecutaban nunca o lo hac\u00edan, si o si, al menos una vez, el esp\u00edritu de esta estructura es el de SI ejecutarse siempre, y el de hacerlo un n\u00famero conocido de veces.</p> <p>Se asigna un valor inicial a la variable de control, que debe cumplir con la expresi\u00f3n condicional que controla la cantidad de repeticiones del bloque de sentencias.</p> <p>Tras cada ejecuci\u00f3n de dicho bloque, a la variable de control se le asignar\u00e1 el siguiente valor de control y se volver\u00e1 a efectuar la validaci\u00f3n de la expresi\u00f3n condicional.</p> <p>Este procedimiento se continuar\u00e1 repitiendo hasta que el valor de la variable de control no valide la expresi\u00f3n condicional (verdadero). </p> <p>Cuando SI se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#ejercitacion","title":"Ejercitaci\u00f3n","text":"<p>\u00bfPuedes identificar cada uno de los bloques empleadas en estos dos diagramas de flujo?</p> <p></p>"},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/","title":"An\u00e1lisis de problema y dise\u00f1o de algoritmo","text":""},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/#analisis-de-problema-y-diseno-de-algoritmo","title":"An\u00e1lisis de problema y dise\u00f1o de algoritmo","text":"<p>Se cuenta con las notas del trimestre 1 (t1), trimestre 2 (t2) y trimestre 3 (t3) de un alumno.</p> <p>Se sabe que el promedio final ( pf ) se calcula con la f\u00f3rmula: pf = (t1 + t2 + 2 * t3) / 4</p> <p>Si el alumno cumple con la siguiente condici\u00f3n: t3 &gt;= 6 y pf &gt;= 6 tiene opci\u00f3n a rendir un examen sustitutorio ( ES )</p> <p>Escriba un algoritmo que reciba las notas y luego muestre un mensaje indicando si el alumno puede rendir o no el examen sustitutorio.</p> <p>En el caso que ya no pueda rendir el examen sustitutorio, debe mostrar solamente el promedio final.</p> An\u00e1lisis<pre><code>Datos de entrada: t1, t2, t3\nSalida: si (t3 &gt;= 6 y pf &gt;= 6) mostrar mensaje; si no, mostrar que no puede rendir ES y mostrar pf\n</code></pre> Algoritmo<pre><code>Inicio del algoritmo\n   1. Ingresar las notas del alumno en t1, t2, t3\n   2. Calcular pf con la siguiente f\u00f3rmula: (t1 + t2 + 2 * t3) / 4\n   3. Si cumple la condici\u00f3n t3 &gt;= 6 y pf &gt;= 6 entonces\n      4. Mostrar el mensaje \"Puede rendir el ES\"\n   5. Si no cumple la condici\u00f3n entonces \n      6. Mostrar el mensaje \"No puede rendir ES\" y mostrar pf\nFin del algoritmo\n</code></pre>"},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/#representacion-del-diseno-en-diagrama-de-flujo","title":"Representaci\u00f3n del dise\u00f1o en diagrama de flujo","text":""},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/#representacion-del-diseno-en-pseudocodigo","title":"Representaci\u00f3n del dise\u00f1o en pseudoc\u00f3digo","text":""},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/","title":"Descripci\u00f3n te\u00f3rica y conceptual de una idea o proceso","text":""},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/#introduccion","title":"Introducci\u00f3n","text":"<p>Una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se refiere a una explicaci\u00f3n basada en los principios te\u00f3ricos o conceptuales en lugar de los detalles pr\u00e1cticos o emp\u00edricos.</p> <p>As\u00ed, se centran en comprender los fundamentos, las relaciones y las implicaciones de una idea o proceso en lugar de proporcionar una descripci\u00f3n detallada de c\u00f3mo se llevar\u00eda a cabo en la pr\u00e1ctica.</p> <p>\u00bfQu\u00e9 es una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso?</p> <p>Una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se refiere a una explicaci\u00f3n basada en los principios te\u00f3ricos o conceptuales en lugar de los detalles pr\u00e1cticos o emp\u00edricos.</p> <p>Definici\u00f3n</p> <p>La descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se centra en comprender sus fundamentos, sus relaciones y sus implicaciones, en lugar de proporcionar una descripci\u00f3n detallada de c\u00f3mo se llevar\u00edan a cabo en la pr\u00e1ctica.</p> <p>Cuando se realiza una descripci\u00f3n te\u00f3rica, se utilizan principios, teor\u00edas o modelos conceptuales para analizar y explicar los aspectos clave de la idea o proceso. Estas descripciones suelen ser abstractas y generalizadas, y se basan en suposiciones y principios fundamentales en lugar de en ejemplos espec\u00edficos o aplicaciones pr\u00e1cticas.</p> <p>La finalidad de una descripci\u00f3n te\u00f3rica o conceptual es proporcionar una comprensi\u00f3n m\u00e1s profunda de la idea o proceso en cuesti\u00f3n, explorar sus implicaciones y relaciones con otros conceptos, y permitir un an\u00e1lisis cr\u00edtico y reflexivo. Estas descripciones pueden ser utilizadas en diversos campos para desarrollar teor\u00edas, explicar sucesos complejos y fundamentar argumentos.</p>"},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/#como-se-aplica-en-el-contexto-de-la-programacion-informatica","title":"\u00bfC\u00f3mo se aplica en el contexto de la programaci\u00f3n inform\u00e1tica?","text":"<p>En el contexto de la programaci\u00f3n inform\u00e1tica, las descripciones te\u00f3ricas y conceptuales son esenciales para comprender los fundamentos y los conceptos clave relacionados con el desarrollo de software y la resoluci\u00f3n de problemas computacionales. Algunas aplicaciones de descripciones te\u00f3ricas en este campo incluyen:</p> <ol> <li> <p>Teor\u00eda de algoritmos: las descripciones te\u00f3ricas permiten analizar y comprender la eficiencia y la complejidad de los algoritmos utilizados en la programaci\u00f3n. Teor\u00edas como la teor\u00eda de la complejidad computacional, la teor\u00eda de grafos y la teor\u00eda de aut\u00f3matas proporcionan un marco conceptual para evaluar y dise\u00f1ar algoritmos eficientes.</p> </li> <li> <p>Estructuras de datos: las descripciones te\u00f3ricas son utilizadas para comprender las diferentes estructuras de datos y sus propiedades. Teor\u00edas como la teor\u00eda de conjuntos, la teor\u00eda de grafos y la teor\u00eda de la recursividad son aplicadas para analizar y dise\u00f1ar estructuras de datos eficientes, como listas enlazadas, \u00e1rboles, colas, pilas, entre otros.</p> </li> <li> <p>Paradigmas de programaci\u00f3n: las descripciones te\u00f3ricas son \u00fatiles para comprender los diferentes paradigmas de programaci\u00f3n, como la programaci\u00f3n orientada a objetos, la programaci\u00f3n funcional y la programaci\u00f3n l\u00f3gica. Estas teor\u00edas proporcionan un enfoque conceptual para abordar problemas de manera estructurada y modular, permitiendo desarrollar aplicaciones m\u00e1s mantenibles y escalables.</p> </li> <li> <p>Teor\u00eda de compiladores: las descripciones te\u00f3ricas son aplicadas en el desarrollo de compiladores, que son programas que traducen el c\u00f3digo fuente en lenguajes de programaci\u00f3n a un formato ejecutable. La teor\u00eda de compiladores involucra conceptos como an\u00e1lisis l\u00e9xico, an\u00e1lisis sint\u00e1ctico, generaci\u00f3n de c\u00f3digo y optimizaci\u00f3n, y proporciona una base te\u00f3rica para el desarrollo de compiladores eficientes y robustos.</p> </li> </ol> <p>Estas son algunas \u00e1reas en las que las descripciones te\u00f3ricas son aplicadas en la programaci\u00f3n inform\u00e1tica. Estas, permiten comprender los fundamentos y los conceptos subyacentes de la programaci\u00f3n, lo que a su vez ayuda a mejorar las habilidades de resoluci\u00f3n de problemas y la capacidad para dise\u00f1ar y desarrollar software de manera eficiente.</p>"},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/#resumen","title":"Resumen","text":"<p>Una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se refiere a una explicaci\u00f3n basada en los principios te\u00f3ricos o conceptuales en lugar de los detalles pr\u00e1cticos o emp\u00edricos.</p> <p>As\u00ed, se centran en comprender los fundamentos, las relaciones y las implicaciones de una idea o proceso en lugar de proporcionar una descripci\u00f3n detallada de c\u00f3mo se llevar\u00eda a cabo en la pr\u00e1ctica.</p> <p>Algunas aplicaciones que requieren de descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso en este campo incluyen: teor\u00eda de algoritmos, estructuras de datos, paradigmas de programaci\u00f3n y teor\u00eda de compiladores, entre otras. </p> <p>As\u00ed, es posible comprender los fundamentos y los conceptos subyacentes de la programaci\u00f3n, lo que a su vez ayuda a mejorar las habilidades de resoluci\u00f3n de problemas y la capacidad para dise\u00f1ar y desarrollar software de manera eficiente.</p>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/","title":"Dise\u00f1o de algoritmos","text":""},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#introduccion","title":"Introducci\u00f3n","text":"<p>Un algoritmo es una serie de instrucciones o secuencia de pasos bien definidos y ordenados que resuelve un problema o realiza una tarea espec\u00edfica.</p> <p>La aplicaci\u00f3n de algoritmos se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#pasos-para-disenar-un-algoritmo","title":"Pasos para dise\u00f1ar un algoritmo","text":"<ol> <li> <p>Definir el problema claramente: comprender claramente cu\u00e1l es el problema que se va a resolver y qu\u00e9 resultado se espera obtener.</p> </li> <li> <p>Analizar el problema: descomponer el problema en partes m\u00e1s peque\u00f1as y comprender las relaciones entre ellas.</p> </li> <li> <p>Identificar los datos de entrada necesarios: comprender cuales son los valores que el programa deber\u00e1 procesar dentro de un contexto determinado para producir la soluci\u00f3n adecuada.</p> </li> <li> <p>Dise\u00f1ar una soluci\u00f3n: determinar los pasos necesarios, organiz\u00e1ndolos en un orden l\u00f3gico, para resolver el problema, utilizando diferentes t\u00e9cnicas algor\u00edtmicas, como algoritmos de b\u00fasqueda, ordenaci\u00f3n, recursividad, etc., para dise\u00f1ar una soluci\u00f3n para cada parte del problema.</p> </li> <li> <p>Escribir el algoritmo: expresar la soluci\u00f3n paso a paso en un lenguaje adecuado, como pseudoc\u00f3digo o un lenguaje de programaci\u00f3n espec\u00edfico.</p> </li> <li> <p>Probar y depurar: ejecutar el algoritmo con diferentes casos de prueba para asegurarse de que funcione correctamente y verificar si produce los resultados esperados. Si hay errores, depurar el algoritmo identificando y corrigiendo los problemas.</p> </li> </ol>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#que-son-las-instrucciones","title":"\u00bfQu\u00e9 son las instrucciones?","text":"<p>Son las acciones o comandos que van a ser ejecutados por la computadora para resolver un problema. Conforman un algoritmo que, a partir de un lenguaje de programaci\u00f3n espec\u00edfico, se convertir\u00e1 en un programa donde cada instrucci\u00f3n ser\u00e1 una sentencia.</p> <ul> <li>Instrucciones de Inicio/Fin: indican el Inicio y el Fin del algoritmo</li> <li>Instrucciones de lectura: solicitan al usuario el ingreso de datos desde un dispositivo de entrada como, por ejemplo, el teclado.</li> <li>Instrucciones de escritura: muestras los resultados a trav\u00e9s de un dispositivo de salida como, por ejemplo, la pantalla.</li> <li>Instrucciones de asignaci\u00f3n: almacenan un valor en una variable, perdi\u00e9ndose cualquier otro valor almacenado en ella.</li> <li>Instrucciones selectivas: permiten ejecutar unas u otras tareas de acuerdo al resultado de una expresi\u00f3n condicional.</li> <li>Instrucciones repetitivas: permiten la repetici\u00f3n de un grupo de instrucciones, generando un bucle (loop).</li> </ul>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#fases-para-la-construccion-de-un-programa","title":"Fases para la construcci\u00f3n de un programa","text":"<p>Esta secci\u00f3n no va ac\u00e1</p> <p></p>"},{"location":"unidades/diseno-de-algoritmos/herramientas-para-la-representacion-de-algoritmos/","title":"Herramientas para la representaci\u00f3n de algoritmos","text":""},{"location":"unidades/diseno-de-algoritmos/herramientas-para-la-representacion-de-algoritmos/#herramientas-para-la-representacion-de-algoritmos","title":"Herramientas para la representaci\u00f3n de algoritmos","text":"<p>Para representar los algoritmos en forma estandarizada, contamos con las siguientes herramientas:</p> <ul> <li> <p>Diagrama de flujo: es una notaci\u00f3n gr\u00e1fica para implementar algoritmos.</p> </li> <li> <p>Pseudoc\u00f3digo: es un lenguaje de especificaci\u00f3n (palabras reservadas) en lenguaje natural</p> </li> <li> <p>Diagrama de Nassi-Scheneiderman: es una combinaci\u00f3n de las dos anteriores</p> </li> </ul> <p></p> <p>A continuaci\u00f3n, veremos un ejemplo de creaci\u00f3n de un algoritmo utilizando estas herramientas.</p> <p>No te preocupes si te parece dif\u00edcil. Estudiaremos cada herramienta en profundidad m\u00e1s adelante. As\u00ed ver\u00e1s que, en realidad, es mucho m\u00e1s simple y f\u00e1cil de lo que parece.</p>"},{"location":"unidades/diseno-de-algoritmos/resumen-diseno-de-algoritmos/","title":"Resumen Dise\u00f1o de algoritmos","text":"<p>En resumen, los algoritmos son herramientas esenciales para resolver problemas, optimizar procesos y realizar tareas computacionales de manera eficiente. Su aplicaci\u00f3n se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p> <p>Un algoritmo es una secuencia o conjunto finito, preciso y ordenado paso a paso de instrucciones definidas que se utiliza para resolver un problema o realizar una tarea espec\u00edfica de manera eficiente y sistem\u00e1tica. </p> <p>\u00a1Para recordar! que existen muchos algoritmos, desde los m\u00e1s simples hasta los m\u00e1s avanzados, que pueden emplearse para resolver diferentes problemas o realizar tareas espec\u00edficas.</p> <p>La mejor manera de aprender algoritmos es practicar. El aprendizaje de los algoritmos es un proceso continuo y gradual, por lo cual requiere tiempo y pr\u00e1ctica. Intenta resolver problemas algor\u00edtmicos por tu cuenta y trabaja en proyectos que requieran implementar algoritmos espec\u00edficos.</p> <p>No te desanimes si al principio encuentras los conceptos dif\u00edciles. Con el tiempo y la pr\u00e1ctica, podr\u00e1s mejorar tus habilidades algor\u00edtmicas A medida que adquieras m\u00e1s experiencia, podr\u00e1s resolver problemas m\u00e1s complejos y optimizar tus soluciones.</p> <p>\u00a1Buena suerte en tu camino de aprendizaje!</p>"},{"location":"unidades/fundamentos-de-la-programacion/conceptos-basicos-de-programacion/","title":"Conceptos b\u00e1sicos de programaci\u00f3n","text":"<p>Rev. 11/01/2024</p> <p>Los conceptos b\u00e1sicos de programaci\u00f3n son fundamentales para comprender c\u00f3mo funcionan los lenguajes de programaci\u00f3n y c\u00f3mo se pueden utilizar para resolver problemas.</p> <p>Representan la base para el desarrollo de software. Son esenciales para comprender c\u00f3mo funciona la programaci\u00f3n y c\u00f3mo crear programas eficientes y efectivos. </p> <p>Aqu\u00ed te dejo una breve descripci\u00f3n de algunos de estos conceptos, los m\u00e1s importantes, para ir entrando en tema: </p> <ol> <li> <p>Introducci\u00f3n a la Programaci\u00f3n: Qu\u00e9 es la programaci\u00f3n, por qu\u00e9 es importante, y una visi\u00f3n general de los lenguajes de programaci\u00f3n.</p> </li> <li> <p>Variables y tipos de dato: Entender c\u00f3mo almacenar informaci\u00f3n en variables y los diferentes tipos de dato disponibles (enteros, flotantes, cadenas, booleanos, etc.).</p> <p>Las variables son contenedores para almacenar valores de datos. Una variable puede tener un nombre corto, como \"x\", o un nombre m\u00e1s descriptivo, como \"edad\", \"total_carrito_compra\", etc.</p> <p>Cada variable tiene un tipo de dato. Los tipos de dato m\u00e1s comunes son los enteros, los n\u00fameros de punto flotante, las cadenas de caracteres y los booleanos.</p> </li> <li> <p>Operadores: C\u00f3mo manipular variables y datos utilizando operadores (aritm\u00e9ticos, de comparaci\u00f3n, l\u00f3gicos, etc.).</p> </li> <li> <p>Estructuras de Control: Son bloques de c\u00f3digo que deciden qu\u00e9 partes de los programas se ejecutan en funci\u00f3n de ciertas condiciones. Es decir, que permiten controlar el flujo de ejecuci\u00f3n de un programa.</p> <p>Las estructuras de control m\u00e1s comunes son las estructuras repetitivas (bucles) for y while y las estructuras alternativas (condicionales) if y switch.</p> </li> <li> <p>Funciones y procedimientos: Permiten dividir un programa en bloques de c\u00f3digo m\u00e1s peque\u00f1os y reutilizables que realizan una tarea espec\u00edfica. </p> <p>A diferencia de un procedimiento, una funci\u00f3n puede tomar entradas, realizar alguna acci\u00f3n y luego devolver un resultado.</p> </li> <li> <p>Estructuras de datos: Se enfocan la definici\u00f3n de estructuras que permiten organizar, manejar y almacenar los datos para que puedan ser utilizados de manera f\u00e1cil y eficiente. </p> <p>Algunas estructuras de datos comunes incluyen cadenas de caracteres, arreglos, listas, tuplas, diccionarios, conjuntos, pilas, colas, \u00e1rboles y grafos.</p> </li> <li> <p>Entrada y Salida (I/O): C\u00f3mo interactuar con el usuario a trav\u00e9s de la entrada (input) de datos y la salida (print) de informaci\u00f3n.</p> </li> <li> <p>L\u00f3gica de Programaci\u00f3n: La habilidad para pensar l\u00f3gicamente y resolver problemas de manera eficiente es esencial para la programaci\u00f3n. </p> </li> <li> <p>Algoritmos: Este tema cubre c\u00f3mo se pueden dise\u00f1ar, crear y analizar secuencias de instrucciones para realizar una tarea espec\u00edfica. Los algoritmos son la base de cualquier programa.</p> <p>Incluye el estudio de patrones espec\u00edficos de c\u00f3digo para realizar tareas de b\u00fasqueda, ordenaci\u00f3n, recursividad, etc.</p> </li> <li> <p>Manejo de Errores y Excepciones: Este tema cubre c\u00f3mo manejar las situaciones inesperadas, los errores y las excepciones que pueden ocurrir durante la ejecuci\u00f3n de un programa para evitar que el programa se bloquee.</p> </li> <li> <p>Programaci\u00f3n Orientada a Objetos: Este es un paradigma de programaci\u00f3n que utiliza objetos y sus interacciones para dise\u00f1ar aplicaciones y programas de software.</p> <p>Los conceptos b\u00e1sicos de la programaci\u00f3n orientada a objetos son las clases, los objetos, m\u00e9todos y atributos, herencia, polimorfismo, encapsulamiento y abstracci\u00f3n. </p> </li> <li> <p>Pruebas de software: Este tema cubre c\u00f3mo probar el c\u00f3digo para asegurarse de que funciona como se espera. Los temas pueden incluir pruebas unitarias, pruebas de integraci\u00f3n, pruebas de regresi\u00f3n, etc.</p> </li> <li> <p>Depuraci\u00f3n de c\u00f3digo: Este tema cubre c\u00f3mo encontrar y corregir errores en el c\u00f3digo.</p> </li> <li> <p>Control de Versiones: Este tema cubre c\u00f3mo manejar diferentes versiones de un programa, permitiendo que varias personas trabajen en el mismo proyecto simult\u00e1neamente. Los temas pueden incluir Git, GitHub, etc.</p> </li> <li> <p>Documentaci\u00f3n y comentarios: Este tema cubre la importancia de documentar el c\u00f3digo para que otros programadores (o incluso el propio programador en el futuro) puedan entenderlo f\u00e1cilmente.</p> </li> <li> <p>Desarrollo de Software \u00c1gil: Este tema cubre c\u00f3mo manejar proyectos de software de manera eficiente y efectiva. Los temas pueden incluir Scrum, Kanban, etc.</p> </li> </ol> <p>\u00a1Para recordar!</p> <p>Para poder comenzar a programar y convertirse en un programador profesional, independientemente del lenguaje de programaci\u00f3n con el cual desarrolles tu software, es importante que adquieras una comprensi\u00f3n s\u00f3lida de todos estos conceptos que son la base de la mayor\u00eda de los lenguajes de programaci\u00f3n, aunque la sintaxis pueda variar entre lenguaje y lenguaje. </p> <p>Familiarizarse con estos conceptos proporciona una base s\u00f3lida para el desarrollo de software efectivo y la adaptaci\u00f3n a nuevos lenguajes de programaci\u00f3n.</p> <p>As\u00ed, podr\u00e1s crear algoritmos, empleando la l\u00f3gica de programaci\u00f3n y respetando la sintaxis particular de cada lenguaje, que te permitir\u00e1n resolver problemas complejos y automatizar tareas de manera eficiente.</p> <p>A medida que avances, puedes profundizar en cada uno de estos temas y aprender conceptos m\u00e1s avanzados.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/_creacion-y-uso-de-constantes/","title":"Creaci\u00f3n y uso de constantes","text":"<p>reformular</p> <p>\u00a1Para recordar!</p> <p>Como hemos dicho, las constantes se declaran utilizando una sintaxis espec\u00edfica, y suelen seguir una convenci\u00f3n de nombres en may\u00fasculas para diferenciarlas de las variables, que suelen tener nombres en min\u00fasculas.</p> <p>Por ejemplo, en el lenguaje de programaci\u00f3n C++, se puede declarar una constante entera de la siguiente manera:</p> C++<pre><code>// Inicializaci\u00f3n de la constante MI_CONSTANTE del tipo entero, con valor 10\nconst int MI_CONSTANTE = 10;\n</code></pre> <p>En este caso, MI_CONSTANTE es el nombre de la constante y se le asigna el valor entero de 10. </p> <p>``` warning \"\u00a1Muy importante!\" Una vez inicializada la constante, el valor almacenado en ella no podr\u00e1 ser modificado durante el resto del la ejecuci\u00f3n del programa. <pre><code>``` c++ title=\"C++\"\n// Inicializaci\u00f3n de la constante PI del tipo de punto flotante, con valor 3.14\nconst float PI = 3.14; \n\n// Inicializaci\u00f3n de la variable r del tipo de punto flotante, con valor 4\nfloat r = 4;\nstd::cout &lt;&lt; \"Un c\u00edrculo de radio \" &lt;&lt; r &lt;&lt; \" cm tiene \" &lt;&lt; (2 * PI * r) &lt;&lt; \" cm de per\u00edmetro.\";\n</code></pre></p> <p>En el ejemplo anterior, el programa imprimir\u00e1 en pantalla \"Un c\u00edrculo de radio 2 cm tiene 25.12 cm de per\u00edmetro.\"</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/_resumen-sobre-constantes/","title":"Constantes: resumen","text":"<p>Las constantes tienen varias ventajas en la programaci\u00f3n:     * En primer lugar, ayudan a mejorar la legibilidad del c\u00f3digo, ya que proporcionan informaci\u00f3n clara sobre el prop\u00f3sito o el significado de un valor en particular.      * Adem\u00e1s, el uso de constantes en lugar de valores literales directamente en el c\u00f3digo hace que sea m\u00e1s f\u00e1cil realizar cambios y actualizaciones en el programa, ya que solo es necesario modificar el valor de la constante en un lugar para que tenga efecto en todo el programa.</p> <p>Es importante tener en cuenta que una constante se trata como un valor literal en el c\u00f3digo y no como una referencia a un valor almacenado en alg\u00fan lugar de la memoria. Si necesitas un valor que pueda cambiar o hacer referencia a otro valor, deber\u00edas utilizar una variable en lugar de una constante.</p> <p>El alcance de una constante puede variar seg\u00fan el lenguaje de programaci\u00f3n y c\u00f3mo se declare. Puede ser global, donde es accesible en todo el programa, o local, donde solo es v\u00e1lido dentro de un \u00e1mbito espec\u00edfico o bloque de c\u00f3digo particular.</p> <p>Es importante definir el tipo de dato correcto para una constante, ya que esto determina c\u00f3mo se almacenar\u00e1 y se manipular\u00e1 su valor.</p> <p><code>warning \"\u00a1Muy importante!\" Una vez inicializada la constante, el valor almacenado en ella no podr\u00e1 ser modificado durante el resto del la ejecuci\u00f3n del programa.</code></p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/alcance-de-una-constante/","title":"Alcance de una constante","text":"<p>Rev. 15/01/2024</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, al igual que las variables, las constantes tienen un alcance.</p> <p>Definici\u00f3n</p> <p>El alcance de una constante en programaci\u00f3n se refiere a la regi\u00f3n o parte de c\u00f3digo donde una constante existe y es accesible para poder ser utilizada. </p> <p>Es importante tener en cuenta que el alcance de una constante va a estar determinado por el \u00e1mbito en el que se declara.</p> <p>En muchos lenguajes de programaci\u00f3n, el alcance de una constante es global, lo que significa que la constante es accesible desde cualquier parte del programa. Por ejemplo, si se declara una constante al inicio del programa, esa constante puede ser utilizada en cualquier funci\u00f3n, clase o m\u00f3dulo dentro del programa.</p> <p>Sin embargo, algunos lenguajes de programaci\u00f3n permiten declarar constantes con alcance local, limitando su visibilidad y acceso a una funci\u00f3n, bloque o \u00e1mbito espec\u00edfico. Por ejemplo, si se declara una constante dentro de una funci\u00f3n, esa constante solo ser\u00e1 visible dentro de esa funci\u00f3n y no estar\u00e1 disponible fuera de ella, en otras partes del programa.</p> <p>As\u00ed, el alcance de una constante determina d\u00f3nde es visible y accesible en el c\u00f3digo. Aqu\u00ed hay algunos ejemplos en diferentes lenguajes para que veas, pero no te preocupes si la sintaxis te resulta compleja, son solo ejemplos:</p> <ul> <li>JavaScript: Las constantes declaradas con <code>const</code> tienen un alcance de bloque, lo que significa que s\u00f3lo son accesibles dentro del bloque en el que se declararon.</li> </ul> JavaScript<pre><code>{\n    const MY_CONST = 'Hello, world!';\n    console.log(MY_CONST); // 'Hello, world!'\n}\nconsole.log(MY_CONST); // ReferenceError: MY_CONST is not defined\n</code></pre> <ul> <li>Java: Las constantes en Java, declaradas con final, tienen un alcance dependiendo de d\u00f3nde se declaren. Si se declaran dentro de un m\u00e9todo, s\u00f3lo son accesibles dentro de ese m\u00e9todo. Si se declaran a nivel de clase, son accesibles para toda la clase.</li> </ul> Java<pre><code>public class Main {\n    final static String CLASS_CONSTANT = \"Class constant\";\n\n    public static void main(String[] args) {\n        final String METHOD_CONSTANT = \"Method constant\";\n        System.out.println(CLASS_CONSTANT); // \"Class constant\"\n        System.out.println(METHOD_CONSTANT); // \"Method constant\"\n    }\n\n    public static void anotherMethod() {\n        System.out.println(CLASS_CONSTANT); // \"Class constant\"\n        System.out.println(METHOD_CONSTANT); // Error: Cannot resolve symbol 'METHOD_CONSTANT'\n    }\n}\n</code></pre> <ul> <li>C++: Las constantes en C++, declaradas con const, tienen un alcance que depende de d\u00f3nde se declaren. Si se declaran dentro de una funci\u00f3n, s\u00f3lo son accesibles dentro de esa funci\u00f3n. Si se declaran fuera de todas las funciones, son accesibles para todo el archivo.</li> </ul> C++<pre><code>#include &lt;iostream&gt;\n\nconst int GLOBAL_CONSTANT = 10;\n\nint main() {\n    const int LOCAL_CONSTANT = 20;\n    std::cout &lt;&lt; GLOBAL_CONSTANT &lt;&lt; std::endl; // 10\n    std::cout &lt;&lt; LOCAL_CONSTANT &lt;&lt; std::endl; // 20\n}\n\nvoid anotherFunction() {\n    std::cout &lt;&lt; GLOBAL_CONSTANT &lt;&lt; std::endl; // 10\n    std::cout &lt;&lt; LOCAL_CONSTANT &lt;&lt; std::endl; // Error: 'LOCAL_CONSTANT' was not declared in this scope\n}\n</code></pre> <p>Por lo tanto, aunque la sintaxis y las reglas exactas pueden variar, la idea general de que las constantes tienen un alcance es com\u00fan en muchos lenguajes de programaci\u00f3n.</p> <p>Recuerda que todos los conceptos de alcance que se aplican a las constantes son los mismos que los aplicados a las variable. As\u00ed que, si necesitas repasarlos, puedes acceder a la documentaci\u00f3n haciendo clic aqu\u00ed.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/caracteristicas-de-las-constantes/","title":"Caracter\u00edsticas de las constantes","text":"<p>Rev. 15/01/2024</p> <p>Al igual que las variables, las constantes poseen cuatro caracter\u00edsticas distintivas:</p> <ul> <li> <p>Tipo de dato asociado</p> <p>El tipo de dato de una constante se refiere al tipo de valor que la constante puede almacenar. Este tipo de dato se determina en el momento de la declaraci\u00f3n de la constante, de manera expl\u00edcita (con una palabra clave) o por el valor que se le asigna, y no puede cambiarse despu\u00e9s.</p> <p>Los tipos de datos comunes incluyen n\u00fameros enteros, n\u00fameros flotantes (n\u00fameros con decimales), caracteres (char), valores l\u00f3gicos o booleanos (verdadero o falso), entre otros.</p> <p>Es importante definir correctamente el tipo de dato de la constante para poder almacenar el valor correspondiente de manera exacta.</p> <p>Adem\u00e1s, los diferentes tipos de dato pueden afectar las operaciones que puedes realizar con la constante.</p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> <li> <p>Identificador o Nombre</p> <p>El identificador de una constante es el nombre que se le da a la constante.</p> <p>Se utiliza para referenciar, es decir identificar, la constante durante de la ejecuci\u00f3n del programa, desde el momento en que se crea la constante hasta el momento en que se destruye o que finaliza el programa, lo que ocurra primero. Tambi\u00e9n se suele hablar de nombre de constante.</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, las reglas para los identificadores de constantes son las mismas que para las variables. Estas reglas pueden variar de un lenguaje a otro, pero generalmente el identificador de una constante se define todo en may\u00fasculas, respetando las reglas.</p> <p>As\u00ed, para definir un identificador v\u00e1lido, se deber\u00e1 elegir un nombre en may\u00fasculas y respetar las convenciones de nombramiento (naming convention) para hacer el c\u00f3digo legible y permitir un mantenimiento \u00e1gil y simple.</p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> <li> <p>Alcance</p> <p>El alcance de una constante se refiere a la regi\u00f3n o parte de c\u00f3digo donde una constante existe y es accesible para poder ser utilizada. </p> <p>Hay dos tipos principales de alcance: local, limitado a la parte del c\u00f3digo donde esa constante existe y puede ser accedida; o global, accesible desde cualquier parte del c\u00f3digo.</p> <p>Es fundamental que la constante cuente con el alcance adecuado para que sea visible y pueda ser accedida en las regiones o partes de c\u00f3digo que precisen interactuar con ella.</p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> <li> <p>Dato asignado</p> <p>Un dato asignado a una constante es un valor que se establece al definir la constante y que no puede cambiar durante la ejecuci\u00f3n del programa. En otras palabras, una vez que se asigna un valor a una constante, ese valor permanece inmutable.</p> <p>Este dato asignado deber\u00e1 ser del mismo tipo de dato asociado a la constante.</p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> </ul> <p>En t\u00e9rminos generales, un dato asignado a una constante es un valor que no cambia durante la ejecuci\u00f3n del programa. Una vez que se asigna un valor a una constante, no puede ser modificado posteriormente.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/dato-asignado-a-una-constante/","title":"Dato asignado a una constante","text":"<p>Rev. 15/01/2024</p> <p>Definici\u00f3n</p> <p>Un dato asignado a una constante es un valor que se establece al definir la constante y que no puede cambiar durante la ejecuci\u00f3n del programa. En otras palabras, una vez que se asigna un valor a una constante, ese valor permanece inmutable, no puede ser modificado posteriormente.</p> <p>Este dato asignado deber\u00e1 ser del mismo tipo de dato asociado a la constante.</p> <p>Por ejemplo, las constantes se utilizan para representar valores que son fijos, como el n\u00famero pi en matem\u00e1ticas, o configuraciones que no deben cambiar una vez que el programa est\u00e1 en ejecuci\u00f3n, como una cadena de conexi\u00f3n a una base de datos.</p> C\u00f3digo generalizado<pre><code>const float PI = 3.14159;\n</code></pre> <p>El dato almacenado en la constante <code>PI</code> es el n\u00famero flotante <code>3.14159</code>. </p> <p>La constante, mientras exista y sea visible, puede ser accedida y el dato almacenado en ella puede ser le\u00eddo \u00a1pero no puede ser modificado!</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/dato-asignado-a-una-constante/#proceso-de-asignacion-de-un-dato-a-la-constante","title":"Proceso de asignaci\u00f3n de un dato a la constante","text":"<p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, la asignaci\u00f3n de un dato a una constante se realiza en el momento de la declaraci\u00f3n. Una vez que se asigna el dato, no se puede cambiar. Aqu\u00ed hay algunos ejemplos en diferentes lenguajes de programaci\u00f3n:</p> JavaScript<pre><code>const CONSTANTE = \"Valor\";\n</code></pre> Java<pre><code>final String CONSTANTE = \"Valor\";\n</code></pre> C++<pre><code>const std::string CONSTANTE = \"Valor\";\n</code></pre> <p>En todos estos ejemplos, si intentas cambiar el valor de CONSTANTE despu\u00e9s de su declaraci\u00f3n, el compilador o el int\u00e9rprete te dar\u00e1 un error.</p> <p>\u00a1Para recordar!</p> <p>En Python, no existen las constantes en el sentido estricto. Sin embargo, por convenci\u00f3n, los nombres de las variables en may\u00fasculas se utilizan para indicar que una variable debe tratarse como una constante y no debe modificarse.</p> Python<pre><code>CONSTANTE = \"Valor\"\n</code></pre> <p>Recuerda, aunque hemos llamado a CONSTANTE una \"constante\", en realidad es una variable en Python. Python no impedir\u00e1 que cambies el valor de CONSTANTE m\u00e1s adelante en el c\u00f3digo. La idea de usar may\u00fasculas es simplemente para indicar a otros desarrolladores que esta variable no deber\u00eda cambiarse.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/dato-asignado-a-una-constante/#proceso-de-destruccion-de-una-constante","title":"Proceso de destrucci\u00f3n de una constante","text":"<p>En muchos lenguajes de programaci\u00f3n, una vez que se declara una constante, no puede ser destruida o eliminada durante la ejecuci\u00f3n del programa. Esto se debe a que las constantes est\u00e1n dise\u00f1adas para ser valores inmutables que no cambian.</p> <p>Entonces, si la constante el global, existir\u00e1, ser\u00e1 visible y podr\u00e1 ser accedida desde que sea declarada hasta la finalizaci\u00f3n de la ejecuci\u00f3n del programa.</p> <p>Por otra parte, si la constante es local, existir\u00e1, ser\u00e1 visible y podr\u00e1 ser accedida desde que sea declarada hasta que el flujo del programa salga de la regi\u00f3n o parte del c\u00f3digo donde fuera declarada.</p> <p>Sin embargo, en algunos lenguajes de programaci\u00f3n puede existir una funci\u00f3n que permita su eliminaci\u00f3n. Para tal caso, deber\u00e1s consultar la bibliograf\u00eda correspondiente del lenguaje de programaci\u00f3n en cuesti\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/dato-asignado-a-una-constante/#que-es-la-asignacion-multiple","title":"\u00bfQu\u00e9 es la asignaci\u00f3n m\u00faltiple?","text":"<p>La asignaci\u00f3n m\u00faltiple de constantes es similar a la asignaci\u00f3n m\u00faltiple de variables, pero con la diferencia de que los valores asignados no pueden ser modificados despu\u00e9s de su declaraci\u00f3n. </p> <p>En algunos lenguajes de programaci\u00f3n, como JavaScript (ES6 y posteriores), puedes declarar m\u00faltiples constantes en una sola l\u00ednea de la siguiente manera:</p> JavaScript<pre><code>const a = 1, b = 2, c = 3;\n</code></pre> <p>En este c\u00f3digo, 1 se asigna a <code>a</code>, 2 se asigna a <code>b</code>, y 3 se asigna a <code>c</code>. Recuerda que, a diferencia de las variables, las constantes no pueden cambiar su valor una vez que se han asignado.</p> <p>La asignaci\u00f3n m\u00faltiple puede hacer que el c\u00f3digo sea m\u00e1s conciso y legible, pero tambi\u00e9n puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender si se usa de manera excesiva o en situaciones complejas.</p> <p>As\u00ed, puede ser tanto una buena como una mala pr\u00e1ctica, dependiendo del contexto y de c\u00f3mo se utilice.</p> <p>Es una buena pr\u00e1ctica cuando:</p> <ul> <li>Mejora la legibilidad del c\u00f3digo al agrupar las declaraciones relacionadas.</li> <li>Reduce la cantidad de l\u00edneas de c\u00f3digo, lo que puede hacer que el c\u00f3digo sea m\u00e1s f\u00e1cil de leer y mantener.</li> <li>Puede ser una mala pr\u00e1ctica cuando:</li> </ul> <p>\"Es una mala pr\u00e1ctica cuando:</p> <ul> <li>Se utiliza en exceso o en situaciones complejas, lo que puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender.</li> <li>Se asignan valores a m\u00faltiples variables que no est\u00e1n relacionadas, lo que puede confundir a otros desarrolladores que intentan entender el c\u00f3digo.</li> </ul> <p>\u00a1Para recordar!</p> <p>En general, como con muchos aspectos en la programaci\u00f3n, la clave est\u00e1 en el equilibrio. Utiliza la asignaci\u00f3n m\u00faltiple cuando mejore la legibilidad y la comprensi\u00f3n del c\u00f3digo, pero ev\u00edtala cuando pueda causar confusi\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/identificador-de-una-constante/","title":"Identificador de una constante","text":"<p>Rev. 15/01/2024</p> <p>Definici\u00f3n</p> <p>El identificador de una constante es el nombre que se le da a la constante para identificarla en el c\u00f3digo. A partir de los identificadores, los programadores pueden referirse a cada constante en otras partes del c\u00f3digo.</p> <p>Generalmente, se diferencia una constante de una variable en que el nombre de la constante est\u00e1 definido todo en may\u00fasculas. Por ejemplo:</p> C\u00f3digo generalizado<pre><code>int MI_CONSTANTE = 10\nprint(MI_CONSTANTE) // Output: 10\n</code></pre> <p>En el c\u00f3digo anterior <code>int MI_CONSTANTE = 10</code>, <code>MI_CONSTANTE</code> es el identificador de la constante. Cada vez que se usa <code>MI_CONSTANTE</code> en el c\u00f3digo, se est\u00e1 haciendo referencia al valor almacenado en ella, el valor <code>10</code>.</p> <p>Adem\u00e1s, en muchos lenguajes de programaci\u00f3n, las constantes se definen usando una palabra clave especial, que generalmente suele ser <code>const</code>. Veamos algunas declaraciones de constantes en diferentes lenguajes:</p> JavaScript<pre><code>const PI = 3.14159;\n</code></pre> C++<pre><code>const double PI = 3.14159;\n</code></pre> C#<pre><code>const double PI = 3.14159;\n</code></pre> <p>En otros lenguajes, la palabra clave puede variar, como en Java, donde se pueden declarar constantes utilizando la palabra clave <code>final</code>:</p> Java<pre><code>public static final double PI = 3.14159;\n</code></pre> <p>En todos estos lenguajes, una vez que se ha asignado un valor a la constante PI, no se puede cambiar. Si intentas hacerlo, el compilador o el int\u00e9rprete te dar\u00e1 un error.</p> <p>\u00bfQu\u00e9 ocurre en Python?</p> <p>En Python, una constante es un tipo de variable cuyo valor no se puede cambiar. Aunque Python no tiene soporte nativo para constantes, por convenci\u00f3n, los desarrolladores usan nombres de variables en may\u00fasculas para indicar que una variable debe tratarse como una constante y no debe modificarse.</p> Python<pre><code>PI = 3.14159\n</code></pre> <p>En este ejemplo, <code>PI</code> es una \"constante\". Deber\u00eda ser entendido que no se debe cambiar el valor de <code>PI</code> en ninguna parte del c\u00f3digo despu\u00e9s de su definici\u00f3n inicial, aunque t\u00e9cnicamente es posible hacerlo y durante la ejecuci\u00f3n del programa no se suceder\u00e1 ning\u00fan error.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/identificador-de-una-constante/#reglas-para-definir-el-identificador-de-una-constante","title":"Reglas para definir el identificador de una constante","text":"<p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, las reglas para los identificadores de constantes son las mismas que para las variables.</p> <p>Las convenciones de nombramiento (naming conventions), son reglas o gu\u00edas que se utilizan para determinar c\u00f3mo nombrar las constantes en la programaci\u00f3n. Estas convenciones pueden variar dependiendo del lenguaje de programaci\u00f3n. Pero recuerda que son las mismas reglas o gu\u00edas que se utilizan para determinar c\u00f3mo nombrar las variables. As\u00ed que, si necesitas repasarlas, puedes acceder a la documentaci\u00f3n haciendo clic aqu\u00ed.</p> <p>\u00a1Para recordar!</p> <p>Es importante notar que aunque las reglas para los identificadores son las mismas, las constantes y las variables se comportan de manera diferente. Una vez que se asigna un valor a una constante, no puedes cambiarlo, mientras que si puedes cambiar el valor de una variable las veces que quieras.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/que-son-las-constantes/","title":"\u00bfQu\u00e9 son las constantes?","text":"<p>Rev. 15/01/2024</p> <p>Definici\u00f3n</p> <p>En programaci\u00f3n, una constante es un tipo de identificador en programaci\u00f3n que almacena un valor inmutable (que no puede ser modificado durante la ejecuci\u00f3n del programa) una vez que se ha asignado, durante la ejecuci\u00f3n del programa. </p> <p>Las constantes se utilizan para representar valores que son fijos, literales, que se conocen de antemano como el n\u00famero pi en matem\u00e1ticas, o configuraciones que no deben cambiar una vez que el programa est\u00e1 en ejecuci\u00f3n, como n\u00fameros espec\u00edficos, valores booleanos que representen un estado particular (verdadero/falso) o una cadena de conexi\u00f3n a una base de datos.</p> <p>Cuando se declara una constante, se le asigna un valor inicial y este valor permanece inmutable durante todo el ciclo de vida del programa.</p> <p>Cuando se dice que una constante se trata como un valor literal en el c\u00f3digo, significa que cada vez que se usa la constante en el c\u00f3digo, se reemplaza directamente por su valor. No es una referencia a una ubicaci\u00f3n de memoria, como puede ser una variable. Por lo tanto, no puedes cambiar el valor de una constante como podr\u00edas hacer con una variable.</p> <p>Las constantes, al igual que las variables, tienen Identificador, alcance, tipo de dato y valor, aunque este \u00faltimo es inmutable.</p> <p>\u00a1Para recordar!</p> <p>Ya vimos que una variable es un identificador que se utiliza para almacenar un valor que puede cambiar durante la ejecuci\u00f3n del programa. </p> <p>A diferencia de una constante, una variable es una referencia a una ubicaci\u00f3n en la memoria donde se almacena un valor. Esto significa que puedes cambiar el valor almacenado en esa ubicaci\u00f3n de memoria, haciendo referencia a la variable.</p> <p>Si necesitas un valor que no cambie durante la ejecuci\u00f3n de tu programa, debes usar una constante. Si necesitas un valor que pueda cambiar, debes usar una variable.</p> <p>La forma exacta de definir una constante puede variar de un lenguaje de programaci\u00f3n a otro, pero el concepto subyacente es el mismo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/tipo-de-dato-de-una-constante/","title":"Tipo de dato de una constante","text":"<p>Rev. 15/01/2024</p> <p>Definici\u00f3n</p> <p>El tipo de dato de una constante se refiere al tipo de valor que la constante puede almacenar. Este tipo de dato se determina en el momento de la declaraci\u00f3n de la constante, de manera expl\u00edcita (con una palabra clave) o por el valor que se le asigna, y no puede cambiarse despu\u00e9s.</p> <p>El tipo de dato de una constante determina qu\u00e9 tipo de operaciones puedes realizar con la constante y c\u00f3mo se comportar\u00e1 en diferentes contextos. Por ejemplo, no puedes realizar operaciones matem\u00e1ticas con una constante de tipo cadena, y no puedes usar una constante de tipo entero o flotante donde se espera una cadena.</p> <p>En algunos lenguajes de programaci\u00f3n, como Java y C++, debes especificar expl\u00edcitamente el tipo de dato de la constante en el momento de la declaraci\u00f3n. Por ejemplo:</p> Java<pre><code>public static final int INT_CONST = 10;\npublic static final String STRING_CONST = \"Hello, world!\";\npublic static final boolean BOOLEAN_CONST = true;\n</code></pre> C++<pre><code>const int INT_CONST = 10;\nconst char* STRING_CONST = \"Hello, world!\";\nconst bool BOOLEAN_CONST = true;\n</code></pre> <p>En otros lenguajes de programaci\u00f3n, como JavaScript, el tipo de dato de la constante se infiere del valor que se le asigna en el momento de la declaraci\u00f3n. No necesitas especificar expl\u00edcitamente el tipo de dato. Por ejemplo:</p> JavaScript<pre><code>const NUMBER_CONST = 10;\nconst STRING_CONST = 'Hello, world!';\nconst BOOLEAN_CONST = true;\nconst OBJECT_CONST = { key: 'value' };\nconst ARRAY_CONST = [1, 2, 3];\n</code></pre> <p>Por lo tanto, aunque la sintaxis y las reglas exactas pueden variar, la idea general de que las constantes tienen un tipo de dato asociado es com\u00fan en muchos lenguajes de programaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/tipos-de-constantes/","title":"Tipos de contantes","text":"<p>Rev. 15/01/2024</p> <p>Existen dos tipos principales de constantes: constantes literales y constantes de nombre simb\u00f3lico.</p> <ul> <li> <p>Constante expresada por su valor literal: Una constante literal es un valor espec\u00edfico, expresado en forma expl\u00edcita, que se utiliza directamente en el c\u00f3digo. Se escribe como tal en el c\u00f3digo y no puede ser referenciado ya que no posee un identificador asociado.</p> Constante literal<pre><code>print(3.14159) \n</code></pre> <p><code>3.14159</code> es una constante literal. Se utiliza directamente en el c\u00f3digo y no puede ser referenciado ya que no posee un identificador asociado.</p> </li> <li> <p>Constante expresada con un nombre simb\u00f3lico: Una constante de nombre simb\u00f3lico es un identificador, escrito en may\u00fasculas, que se utiliza para representar un valor constante. En lugar de utilizar directamente el valor en el c\u00f3digo, se utiliza el nombre simb\u00f3lico para referirse a \u00e9l. Esto hace que el c\u00f3digo sea m\u00e1s legible y f\u00e1cil de mantener, ya que si el valor de la constante cambia, solo es necesario actualizar el valor en un solo lugar.</p> Constante de nombre simb\u00f3lico<pre><code>float PI = 3.14159\nprint (PI)\n</code></pre> <p><code>PI</code> es una constante de nombre simb\u00f3lico. El valor <code>3.14159</code> se encuentra almacenado en un espacio de memoria asociado a un nombre simb\u00f3lico <code>PI</code>. Este nombre asociado siempre se escribe en may\u00fasculas. As\u00ed, este valor se referencia en el c\u00f3digo a partir de su identificador asociado. </p> <p>Si el valor de <code>PI</code> cambia en el futuro, solo es necesario actualizar el valor en un solo lugar (la declaraci\u00f3n de la constante \"<code>PI</code>\") en lugar de buscar y reemplazar todas las ocurrencias del valor literal en el c\u00f3digo. Esto hace que el c\u00f3digo sea m\u00e1s legible y menos propenso a errores.</p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/tipos-de-constantes/#ventajas-y-desventajas-de-cada-tipo","title":"Ventajas y desventajas de cada tipo","text":"<p>Ventajas de las constantes literales:</p> <ul> <li>Son simples y directas.</li> <li>No requieren ninguna declaraci\u00f3n previa.</li> </ul> <p>Desventajas de las constantes literales:</p> <ul> <li>No son descriptivas. No es inmediatamente claro qu\u00e9 representa el valor.</li> <li>Si necesitas cambiar el valor, tendr\u00edas que buscar y cambiar todas las ocurrencias en el c\u00f3digo.</li> </ul> <p>Ventajas de las constantes de nombre simb\u00f3lico:</p> <ul> <li>Son descriptivas. El nombre de la constante puede indicar claramente qu\u00e9 representa el valor.</li> <li>Si necesitas cambiar el valor, solo necesitas cambiarlo en la declaraci\u00f3n de la constante.</li> </ul> <p>Desventajas de las constantes de nombre simb\u00f3lico:</p> <ul> <li>Requieren una declaraci\u00f3n previa.</li> <li>Pueden ocupar m\u00e1s espacio en el c\u00f3digo, especialmente si el nombre de la constante es largo.</li> </ul> <p>\u00a1Para recordar!</p> <p>Las constantes de nombre simb\u00f3lico tienen varias ventajas en la programaci\u00f3n: </p> <ul> <li>En primer lugar, ayudan a mejorar la legibilidad del c\u00f3digo, ya que proporcionan informaci\u00f3n clara sobre el prop\u00f3sito o el significado de un valor en particular. </li> <li>Adem\u00e1s, el uso de nombres simb\u00f3licas en lugar de valores literales directamente en el c\u00f3digo hace que sea m\u00e1s f\u00e1cil realizar cambios y actualizaciones en el programa, ya que solo es necesario modificar el valor de la constante en un lugar para que tenga efecto en todo el programa donde es utilizada.</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/utilizacion-de-constantes-en-un-programa/","title":"Utilizaci\u00f3n de constantes en un programa","text":"<p>Rev. 11/01/2024</p> <p>La utilizaci\u00f3n de una constante en un programa es cuando una instrucci\u00f3n de c\u00f3digo accede a la constante para realizar alguna operaci\u00f3n o acci\u00f3n con ella. </p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/utilizacion-de-constantes-en-un-programa/#sintaxis","title":"Sintaxis","text":"<p>En muchos lenguajes de programaci\u00f3n, las constantes se declaran utilizando una sintaxis espec\u00edfica, usando una palabra clave especial, que generalmente suele ser <code>const</code>, y suelen seguir una convenci\u00f3n de nombres en may\u00fasculas para diferenciarlas de las variables, que suelen tener nombres en min\u00fasculas. </p> Sintaxis<pre><code>const nombre_del_tipo_de_dato NOMBRE_DE_CONSTANTE = asignaci\u00f3n_de_valor\n</code></pre> <p>Es importante tener en cuenta que algunos lenguajes de programaci\u00f3n tambi\u00e9n permiten especificar el tipo de dato de manera espec\u00edfica.</p> <p>La sintaxis puede variar ligeramente entre los diferentes lenguajes de programaci\u00f3n, por lo que es recomendable consultar la documentaci\u00f3n oficial del lenguaje que est\u00e9s utilizando para obtener detalles espec\u00edficos sobre c\u00f3mo definir constantes con tipos de dato espec\u00edficos. </p> Declaraci\u00f3n de constantes indicando el tipo de dato<pre><code>const float PI = 3.14159265359\nconst int HORAS_DEL_DIA = 24\nconst string NOMBRE_PLANETA = \u201dTierra\u201d\nconst int NUM1 = 4, NUM2 = 67\nconst char AFIRMACION = \"s\", NEGACION = \"n\"\n</code></pre> Declaraci\u00f3n de constantes sin indicar el tipo de dato<pre><code>const PI = 3.14159265359\nconst HORAS_DEL_DIA = 24\nconst NOMBRE_PLANETA = \u201dTierra\u201d\nconst NUM1 = 4, NUM2 = 67\nconst AFIRMACION = \"s\", NEGACION = \"n\"\n</code></pre> <p>\u00a1Para recordar!</p> <p>Como hemos dicho, las constantes se declaran utilizando una sintaxis espec\u00edfica, y suelen seguir una convenci\u00f3n de nombres en may\u00fasculas para diferenciarlas de las variables, que suelen tener nombres en min\u00fasculas.</p> <p>Por ejemplo, en el lenguaje de programaci\u00f3n C++, se puede declarar una constante entera de la siguiente manera:</p> C++<pre><code>// Inicializaci\u00f3n de la constante MI_CONSTANTE del tipo entero, con valor 10\nconst int MI_CONSTANTE = 10;\n</code></pre> <p>En este caso, <code>MI_CONSTANTE</code> es el nombre de la constante y se le asigna el valor entero de 10. </p> <p>\u00a1Muy importante!</p> <p>Una vez inicializada la constante, el valor almacenado en ella no podr\u00e1 ser modificado durante el resto del la ejecuci\u00f3n del programa.</p> C++<pre><code>// Inicializaci\u00f3n de la constante PI del tipo de punto flotante, con valor 3.14\nconst float PI = 3.14; \n\n// Inicializaci\u00f3n de la variable r del tipo de punto flotante, con valor 4\nfloat r = 4;\nstd::cout &lt;&lt; \"Un c\u00edrculo de radio \" &lt;&lt; r &lt;&lt; \" cm tiene \" &lt;&lt; (2 * PI * r) &lt;&lt; \" cm de per\u00edmetro.\";\n</code></pre> <p>En el ejemplo anterior, el programa imprimir\u00e1 en pantalla \"Un c\u00edrculo de radio 2 cm tiene 25.12 cm de per\u00edmetro.\"</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-alternativas/","title":"Estructuras alternativas","text":"<p>Rev. 28/02/2024</p> <p>Las estructuras alternativas (control de flujo condicional) o condicionales, tambi\u00e9n conocidas como estructuras de toma de decisiones o decision making, se usan para decidir el control de flujo basado en una condici\u00f3n, usando la cl\u00e1usula if.</p> <p>Es decir, que se utilizan para ejecutar selectivamente un conjunto de sentencias, seg\u00fan se cumpla, o no, una condici\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-alternativas/#estructura-alternativa-simple","title":"Estructura alternativa simple","text":"<p>La estructura alternativa simple (control de flujo condicional if \u2026 end if) se utiliza para ejecutar un bloque de c\u00f3digo, solo si la condici\u00f3n es verdadera. Si la condici\u00f3n es falsa, no ejecuta ning\u00fan otro bloque relacionado al if y el programa contin\u00faa con la siguiente instrucci\u00f3n.</p> C\u00f3digo generalizado<pre><code>if (x &gt; 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es mayor a 10\n    print (\"El n\u00famero es mayor a 10.\")\n\n}\n</code></pre> <p>\u00a1Para recordar!</p> <p>En Python no se utilizan las llaves para delimitar un bloque de sentencias. En su lugar, las sentencias se deben indentar (tabular) hacia la derecha, como podr\u00e1s observar el el siguiente c\u00f3digo.</p> <p>Ejercicio de aplicaci\u00f3n:</p> <p>Ingresar un n\u00famero entero por teclado. Luego imprimir en pantalla si el n\u00famero ingresado es positivo.</p> Ver soluci\u00f3n posible Python<pre><code>n = int(input(\"ingrese un numero: \")) # el comando input siempre devuelve una cadena. Es preciso convertirla a entero.\n\nif n &gt; 0:\n    print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) para evitar hacer Casting con el entero al concatenar\n</code></pre> <p>En este ejercicio, al imprimir utilizando la coma en lugar del operador de concatenaci\u00f3n, lo que se est\u00e1 haciendo es imprimir un conjunto de argumentos en lugar de armar una cadena de texto. Esto permite \"mezclar\" distintos tipos de dato entre si, porque en realidad no se est\u00e1 mezclando nada.  </p> <p>Si en lugar de utilizar la coma se hubiera utilizado el operador de concatenaci\u00f3n, se tendr\u00eda que haber compatibilizado todos los tipos de dato como cadenas:</p> Python<pre><code>print(str(n) + \" es positivo.\")\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-alternativas/#estructura-alternativa-doble","title":"Estructura alternativa doble","text":"<p>La estructura alternativa doble (control de flujo condicional if \u2026 else \u2026 end if) se utiliza para ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera y otro bloque de c\u00f3digo si la condici\u00f3n es falsa.</p> C\u00f3digo generalizado<pre><code>if (x &gt; 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es mayor a 10\n    print (\"El n\u00famero es mayor a 10.\")\n\n} else {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x NO es mayor a 10\n    print (\"El n\u00famero no es mayor a 10.\")\n\n}\n</code></pre> <p>Ejercicio de aplicaci\u00f3n:</p> <p>Ingresar un n\u00famero entero por teclado. Luego imprimir en pantalla si el n\u00famero ingresado es positivo o negativo.</p> <p>\u00a1Atenci\u00f3n! Limitaci\u00f3n</p> <p>En este ejercicio vamos a descartar el cero. No lo tendremos en cuenta.</p> Ver soluci\u00f3n propuesta Python<pre><code>n = int(input(\"ingrese un numero: \")) # el comando input siempre devuelve una cadena. Es preciso convertirla a entero.\n\nif n &gt; 0:\n    print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\nelse\n    print(n, \"es negativo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-alternativas/#estructura-alternativa-doble-anidada","title":"Estructura alternativa doble anidada","text":"<p>En la estructura alternativa doble anidada (control de flujo condicional if \u2026 elseif \u2026  \u2026 end if) se utilizan m\u00faltiples if \u2026 else if \u2026 end if para decidir el flujo de control, respetando la l\u00f3gica arriba explicada.</p> C\u00f3digo generalizado<pre><code>if (x &gt; 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es mayor a 10\n    print (\"El n\u00famero es mayor a 10.\")\n\n} else if (x == 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es igual a 10\n    print (\"El n\u00famero es igual a 10.\")\n\n} else {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x NO es mayor y NO es igual a 10\n    print (\"El n\u00famero no es mayor y no es igual a 10. Es menor.\")\n\n}\n</code></pre> <p>\u00a1Para recordar!</p> <p>Dependiendo del lenguaje de programaci\u00f3n, la estructura else if podr\u00eda escribirse diferente, como elseif o elif por ejemplo.</p> <p>Ejercicio de aplicaci\u00f3n:</p> <p>Ingresar un n\u00famero entero por teclado. Luego imprimir en pantalla si el n\u00famero ingresado es positivo, negativo o neutro.</p> Ver soluci\u00f3n propuesta Python<pre><code>n = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\nif n &gt; 0:\n    print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\nelif n &lt; 0:\n    print(n, \"es negativo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\nelse:\n    print(n, \"es neutro.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-alternativas/#diferencia-entre-if-como-expresion-vs-if-como-sentencia","title":"Diferencia entre if como expresi\u00f3n vs. if como sentencia","text":"<p>\u00a1Importante!</p> <p>La diferencia entre expresiones y sentencias es que las expresiones devuelven un valor y, por lo tanto, se pueden usar en lugares donde se requieren valores, mientras que las sentencias son instrucciones o bloque de instrucciones que se ejecutan en un programa, pero en si, no devuelven ning\u00fan valor si no a trav\u00e9s de una expresi\u00f3n contenida en la sentencia. </p> <p>As\u00ed, el resultado de una expresi\u00f3n se puede usar como valor para almacenar en una variable, como argumento para pasar a una funci\u00f3n, o como operando para realizar alguna operaci\u00f3n con operadores; mientras que las sentencias no devuelven ning\u00fan resultado .</p> <p>Si la estructura if se utiliza como expresi\u00f3n, podr\u00edas hacer esto: </p> C\u00f3digo generalizado<pre><code>const miValor = if condici\u00f3n { valor1 } else { valor2 }\n</code></pre> <p>Si la estructura if se utiliza como sentencia, podr\u00edas hacer esto: </p> C\u00f3digo generalizado<pre><code>int miValor\nif condici\u00f3n {\n    miValor = valor1\n} else {\n    miValor = valor2\n}\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-alternativas/#estructura-alternativa-multiple","title":"Estructura alternativa m\u00faltiple","text":"<p>La estructura alternativa m\u00faltiple (control de flujo condicional switch) se usa para decidir el control de flujo basado en casos, usando la cl\u00e1usula switch. </p> <p>la estructura switch entra en esta categor\u00eda, donde la selecci\u00f3n se realiza utilizando las declaraciones de case y default. Es una manera alternativa a la sentencia if \u2026 else \u2026 end if anidada para evaluar decisiones m\u00faltiples.  </p> <p>Esta estructura se combina con sentencias de interrupci\u00f3n o salto y sentencias etiquetadas, como veremos m\u00e1s adelante.</p> <p>Cuando el valor de opci\u00f3n no se corresponde con ning\u00fan caso (case) y existe el caso default, se ejecuta el bloque correspondiente a dicho caso.</p> <p>Las declaraciones case y default no interrumpen por s\u00ed mismas el flujo de control del programa. Por ello, es necesario una sentencia de salto (normalmente la instrucci\u00f3n break).</p> <p>Si se omite el break al final de un caso, el programa pasa a ejecutar las sentencias de los casos siguientes hasta encontrar un break o hasta el final del switch.</p> <p>Se recomienda situar el caso default en \u00faltimo lugar e incluir siempre un break al final de su secuencia de sentencias asociada.</p> C\u00f3digo generalizado<pre><code>int opcion = 2;\n\nswitch (opcion) {\n    case 1:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 1.\");\n        break;\n\n    case 2:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 2.\");\n\n    default:\n        print(\"Esta rama de flujo del programa se recorre por defecto si no hay una opci\u00f3n case que concuerde.\");\n        break;   \n}   \n</code></pre> <p>No pueden existir dos casos iguales en un mismo switch (un mismo caso, s\u00ed puede ocurrir en distintos switch anidados).</p> <p>\u00a1Para recordar!</p> <p>Una sentencia switch es m\u00e1s eficiente que una escalera de if-else anidada.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-repetitivas/","title":"Estructuras repetitivas (ciclos o iteraciones)","text":"<p>Rev. 28/02/2024</p> <p>Se utilizan para seguir ejecutando una sentencia o un bloque de sentencias de manera repetitiva mientras se cumpla o hasta que se cumpla una cierta condici\u00f3n. </p> <p>tambi\u00e9n conocidas como estructuras de bucle o looping, se utilizan para repetir el mismo bloque de c\u00f3digo una y otra vez hasta un n\u00famero determinado de veces o basado en la veracidad o falsedad de una condici\u00f3n. </p> <p>Existen tres tipos de estructuras repetitivas:</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-repetitivas/#bucle-o-ciclo-cerrado-for-next","title":"bucle o ciclo cerrado for \u2026 next","text":"<p>Se utiliza para repetir un bloque de c\u00f3digo un n\u00famero espec\u00edfico de veces, en funci\u00f3n de la veracidad de una condici\u00f3n, simple o compuesta.</p> C\u00f3digo generalizado<pre><code>for (i = 1; i &lt;= 5; i++) {\n    print (i);\n} // la llave cerrada representa next i\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-repetitivas/#bucle-o-ciclo-abierto-con-la-condicion-a-la-entrada-while-loop-until-loop","title":"bucle o ciclo abierto con la condici\u00f3n a la entrada while \u2026 loop | until \u2026 loop","text":"<p>Se utiliza para repetir un bloque de c\u00f3digo mientras o hasta que se cumpla una condici\u00f3n.</p> <p>La comprobaci\u00f3n de la condici\u00f3n se realiza antes de la ejecuci\u00f3n del bloque de sentencias, y por tanto puede que \u00e9ste no se ejecute ni una vez.</p> C\u00f3digo generalizado<pre><code>j = 0;\nwhile (j &lt; 5) {\n\n    // este bloque de c\u00f3digo se va a repetir mientras j sea menor a 5\n    print (j);\n    j++;\n\n} // la llave cerrada representa loop\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\nj = 0;\nuntil (j &gt;= 5) {\n    print (j);\n    j++;\n} // la llave cerrada representa loop    \n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/estructuras-repetitivas/#bucle-o-ciclo-abierto-con-la-condicion-a-la-salida-do-loop-while-do-loop-until","title":"bucle o ciclo abierto con la condici\u00f3n a la salida do \u2026 loop while | do \u2026 loop until","text":"<p>Se utiliza para repetir un bloque de c\u00f3digo mientras o hasta que se cumpla una condici\u00f3n, simple o compuesta.</p> <p>La comprobaci\u00f3n de la condici\u00f3n se realiza despu\u00e9s de la ejecuci\u00f3n del bloque de sentencias, y por tanto \u00e9ste siempre se ejecuta al menos una vez.</p> C\u00f3digo generalizado<pre><code>do {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop while (n != 0)\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\ndo {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop until (n == 0)\n</code></pre> <p>Como se puede observar en ambos ciclos abiertos, la palabra reservada <code>while</code> est\u00e1 de un color mientras que <code>until</code> no lo est\u00e1. Esto se debe a que no es com\u00fan encontrar disponible la segunda opci\u00f3n en la mayor\u00eda de los lenguajes. Sin embargo, corresponde informar acerca de su existencia ya que en caso de existir, es v\u00e1lido utilizarla si con ella se mejora la formulaci\u00f3n de la condici\u00f3n de repitancia del ciclo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/","title":"Estructuras de control de flujo","text":"<p>Rev. 28/02/2024</p> <p>Los programas usan sentencias de control de flujo para ejecutar sentencias condicionalmente, repetir sentencias o saltar a otra parte del programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#que-es-una-estructura-de-control-de-flujo","title":"\u00bfQu\u00e9 es una estructura de control de flujo?","text":"<p>Cuando se escribe un programa, se est\u00e1n escribiendo sentencias (\u00a1Para recordar! que son instrucciones o declaraciones) en un archivo. Sin estructuras de control de flujo, el programa se ejecuta en el orden en que aparecen escritas las sentencias en el programa, de izquierda a derecha y de arriba a abajo. </p> <p>Para alterar este comportamiento de manera condicional (esto es a partir de validar o no una condici\u00f3n espec\u00edfica) se deben incluir estructuras de control de flujo.</p> <p>Estas estructuras permiten que el flujo del programa ejecute o no ejecute determinadas sentencias, o que ejecute repetidamente una o m\u00e1s sentencias agrupadas en un bloque, o que pueda cambiar su secuencia normal saltando a otra parte del programa de manera no secuencial, es decir, saltando a otra sentencia en otra ubicaci\u00f3n no consecutiva a la sentencia que se encuentra en ejecuci\u00f3n.</p> <p>Por ejemplo, en el siguiente fragmento de c\u00f3digo, la instrucci\u00f3n si ejecuta condicionalmente la salida por pantalla de un mensaje seg\u00fan el resultado que devuelva la expresi\u00f3n que eval\u00faa si el dato almacenado en una variable se encuentra en may\u00fasculas:</p> C\u00f3digo generalizado<pre><code>char letra\n\n\u22ee\n\nletra = input(\"Ingrese una letra por teclado: \")\n\nsi letra est\u00e1 en mayusculas entonces\n    print(\"la letra \" + letra + \" est\u00e1 en may\u00fasculas.\")\nfin si\n\n\u22ee\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#estructuras-de-control-de-flujo_1","title":"Estructuras de control de flujo","text":"<p>\u00a1Hablemos con propiedad!</p> <p>Si bien en unidades pasadas hablamos de sentencias de control de flujo, lo correcto es llamarlas estructuras de control de flujo puesto que si bien son sentencias, en realidad, estas sentencias se encuentran estructuradas, agrupadas, con cierta coherencia para que se comporten de determinada manera a lo largo de la ejecuci\u00f3n del programa.</p> <p>Definici\u00f3n</p> <p>Las estructuras de control de flujo modifican la ejecuci\u00f3n secuencial de las sentencias que forman un programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/manejo-de-excepciones/","title":"Manejo de excepciones","text":"<p>Rev. 28/02/2024</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/manejo-de-excepciones/#estructuras-de-manejo-de-excepciones","title":"Estructuras de manejo de excepciones","text":""},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/manejo-de-excepciones/#sentencias-de-control-de-flujo","title":"Sentencias de control de flujo","text":"<p>Ahora si podemos hablar de un \u00faltimo grupo de instrucciones que si pueden llamarse sentencias de control de flujo:</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/manejo-de-excepciones/#sentencias-de-salto","title":"Sentencias de salto","text":"<p>Se utilizan para alterar de manera incondicional el orden de ejecuci\u00f3n de las sentencias de un programa. S\u00f3lo deber\u00edan utilizarse con el fin de simplificar o mejorar los algoritmos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/manejo-de-excepciones/#expresiones-condicionales-if-else-y-el-operador-ternario","title":"Expresiones condicionales if \u2026 else y el operador ternario","text":"<p>Una expresi\u00f3n condicional que no sea una declaraci\u00f3n podr\u00eda referirse al uso de operadores condicionales que eval\u00faan una condici\u00f3n y retornan un valor en lugar de controlar el flujo de ejecuci\u00f3n.</p> <p>Entonces, se utiliza la estructura if \u2026 else como expresi\u00f3n para producir un valor basado en una condici\u00f3n. Esto puede ser \u00fatil para asignaciones concisas u operaciones condicionales en una l\u00ednea de c\u00f3digo, ya que permite devolver un valor espec\u00edfico basado en una condici\u00f3n, dependiendo de si esta condici\u00f3n es verdadera o falsa. </p> <p>El operador ternario, tambi\u00e9n conocido como operador condicional, es un operador utilizado en muchos lenguajes de programaci\u00f3n, como JavaScript, para evaluar una condici\u00f3n y seleccionar uno de dos valores posibles, dependiendo del resultado de esa condici\u00f3n. </p> <p>El operador ternario se llama \"ternario\" porque toma tres operandos:      * la condici\u00f3n a evaluar,      * el valor que se devuelve si la condici\u00f3n es verdadera, y      * el valor que se devuelve si la condici\u00f3n es falsa.</p> <p>En otras palabras, el operador ternario permite asignar un valor o ejecutar una expresi\u00f3n bas\u00e1ndose en una condici\u00f3n de una manera m\u00e1s concisa.</p> <p>Sin embargo, es importante no abusar de su uso excesivo para mantener la claridad y la legibilidad del c\u00f3digo.</p> <p>\u00a1Importante!</p> <p>Es importante mencionar que la sintaxis y la manera de utilizar las expresiones condicionales pueden variar seg\u00fan el lenguaje de programaci\u00f3n.</p> <p>Cada lenguaje tiene su propia sintaxis y convenciones para expresiones condicionales. Por lo tanto, siempre es recomendable consultar la documentaci\u00f3n espec\u00edfica del lenguaje para obtener informaci\u00f3n detallada sobre las expresiones condicionales disponibles en ese contexto.</p> <p>A continuaci\u00f3n, veamos algunos ejemplos en varios lenguajes:</p> JavaScript: sintaxis<pre><code>condici\u00f3n ? valor_si_verdadero : valor_si_falso\n</code></pre> <p>Aqu\u00ed, condici\u00f3n es una expresi\u00f3n booleana que se eval\u00faa. Si la condici\u00f3n es verdadera, se devuelve  valor_si_verdadero. Si la condici\u00f3n es falsa, se devuelve valor_si_falso.</p> JavaScript<pre><code>const edad = 25\nconst es_adulto = edad &gt;= 18 ? \"Es adulto\" : \"No es adulto\"\nconsole.log(es_adulto)  // Salida: Es adulto\n</code></pre> <p>En este ejemplo, se eval\u00faa la condici\u00f3n edad &gt;= 18. Si esta es verdadera (lo cual es cierto en este caso), se devuelve la cadena \"Es adulto\". De lo contrario, se hubiera devuelto la cadena \"No es adulto\". El valor devuelto es asignado a la variable es_adulto. Luego, el valor almacenado en esta se imprime en la consola.</p> <p>Recreemos el mismo programa pero en otro lenguaje de programaci\u00f3n cuya sintaxis se escribe diferente:</p> Python: sintaxis<pre><code>valor_si_verdadero if condici\u00f3n else valor_si_falso\n</code></pre> <p>Aqu\u00ed, la expresi\u00f3n que contiene a la instrucci\u00f3n if eval\u00faa la condici\u00f3n. Si la condici\u00f3n es verdadera, se devuelve el valor especificado antes de la instrucci\u00f3n if. Si la condici\u00f3n es falsa, se devuelve el valor especificado despu\u00e9s de la instrucci\u00f3n else.</p> Python<pre><code>edad = 25\nes_adulto = \"Es adulto\" if edad &gt;= 18  else \"No es adulto\"\nprint(es_adulto)  // Salida: Es adulto\n</code></pre> <p>Volvamos al ejercicio de aplicaci\u00f3n que hicimos hace un tiempo atr\u00e1s:</p> <p>Ingresar un n\u00famero entero por teclado. Luego imprimir en pantalla si el n\u00famero ingresado es positivo, negativo o neutro.</p> Python<pre><code>n = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\nif n &gt; 0:\n    print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\nelif n &lt; 0:\n    print(n, \"es negativo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\nelse:\n    print(n, \"es neutro.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n</code></pre> <p>Si resolvi\u00e9semos este ejercicio implementando el operador ternario, ser\u00eda mucho mas corto.</p> <p>\u00a1Int\u00e9ntalo!</p> Ver soluci\u00f3n propuesta Python<pre><code>n = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\nprint(n, \"es\", \"positivo\" if n &gt; 0 else (\"negativo\" if n &lt; 0 else \"neutro\"))\n</code></pre> <p>\u00a1Para analizar!</p> <p>\u00bfCu\u00e1ntos operadores ternarios se utilizaron en el ejercicio? </p> <p>\u00bfPuedes identificarlo o identificarlos si fueron m\u00e1s de uno?</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/operadores-logicos/","title":"Operadores l\u00f3gicos","text":"<p>Rev. 28/02/2024</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/operadores-logicos/#expresiones-condicionales-if-else-y-el-operador-logico-or","title":"Expresiones condicionales if \u2026 else y el operador l\u00f3gico OR","text":"<p>En algunos lenguajes, como JavaScript, adem\u00e1s del operador ternario existe otra forma de realizar una estructura condicional como expresi\u00f3n, conocida como estructura alternativa u operador l\u00f3gico OR. En JavaScript se emplea con doble barra vertical ( || ). </p> <p>Esta estructura se puede utilizar para asignar un valor basado en una condici\u00f3n sin necesidad de usar un bloque if o el operador ternario.</p> <p>Esta estructura alternativa se basa en la evaluaci\u00f3n de cortocircuito del operador l\u00f3gico OR.  El operador OR devuelve el primer valor verdadero que encuentre en una serie de condiciones representadas como expresiones evaluadas en orden. Si todas las expresiones son falsas, devuelve el \u00faltimo valor.</p> JavaScript: sintaxis<pre><code>condici\u00f3n_1 (|| \u2026 condici\u00f3n_2 || \u2026 condici\u00f3n_n) || valor_si_falso\n</code></pre> <p>Aqu\u00ed, condici\u00f3n_1 es una expresi\u00f3n que se eval\u00faa. Si la expresi\u00f3n es verdadera, se devuelve el valor de la condici\u00f3n_1. Pero si la expresi\u00f3n es falsa, se devuelve el valor_si_falso.</p> <p>Atenci\u00f3n</p> <p>Esta estructura alternativa puede ser \u00fatil cuando se desea asignar un valor predeterminado o un valor alternativo en caso de que una variable sea falsa o no est\u00e9 definida. </p> <p>Sin embargo, es importante tener en cuenta que este enfoque solo es adecuado para casos en los que se desea asignar un valor espec\u00edfico o predeterminado y no para realizar acciones m\u00e1s complejas como ejecutar bloques de c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/operadores-logicos/#ejemplos","title":"Ejemplos","text":"<p>Las siguientes expresiones condicionales permiten asignar un valor o realizar operaciones basadas en una condici\u00f3n en una \u00fanica l\u00ednea de c\u00f3digo sin afectar directamente el flujo de ejecuci\u00f3n.</p> JavaScript: asignaci\u00f3n de un valor predeterminado<pre><code>const nombre = ''\nconst nombre_valido = nombre || 'Nombre desconocido'\nconsole.log(nombre_valido); // Salida: 'Nombre desconocido'\n</code></pre> <p>En este ejemplo, la variable nombre se eval\u00faa en un contexto booleano. Si el valor de nombre es una cadena vac\u00eda (falso), null o indefinido, se devuelve el valor Nombre desconocido. Si nombre tuviera un valor distinto de una cadena vac\u00eda (verdadero), se devolver\u00eda el valor almacenado en nombre.</p> JavaScript: validaci\u00f3n de argumentos de una funci\u00f3n<pre><code>function saludar(nombre) {\n    nombre = nombre || 'Invitado'\n    console.log(`\u00a1Hola, ${nombre}!`)\n}\n\nsaludar(); // Salida: \u00a1Hola, Invitado!\nsaludar('Pedro'); // Salida: \u00a1Hola, Pedro!\n</code></pre> <p>En este ejemplo, si no se proporciona un argumento al par\u00e1metro nombre al llamar a la funci\u00f3n saludar(), se asignar\u00e1 autom\u00e1ticamente el valor 'Invitado'.</p> <p>Para saber un poco mas</p> <p>`<code>${nombre}</code>` : El uso de las comillas invertidas ( ` ) con el signo pesos seguido de una variable encerrada entre llaves permite reemplazar dicha variable por su valor almacenado dentro de una cadena de texto.</p> JavaScript: uso en una expresi\u00f3n booleana<pre><code>const es_valido = respuesta === \u2018si' || respuesta === 'yes'\n</code></pre> <p>En este ejemplo, es_valido se eval\u00faa como true si la variable respuesta tiene el valor si o yes.</p> JavaScript : selecci\u00f3n de valor basado en condiciones<pre><code>const mensaje = (estado === 'error' || estado === 'fallido') ? 'Ha ocurrido un error.' : 'Operaci\u00f3n exitosa.'\n</code></pre> <p>Aqu\u00ed, el valor de mensaje se selecciona dependiendo del valor de estado. Si estado es igual a error o fallido, se asigna el mensaje de error. De lo contrario, se asigna el mensaje de operaci\u00f3n exitosa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/ejercitacion/ejercitacion-final/","title":"Fundamentos de la programaci\u00f3n: Ejercitaci\u00f3n final","text":"<ol> <li> <p>Crea una variable que contenga tu nombre y apellido a continuaci\u00f3n del c\u00f3digo abajo escrito. Luego, Imprime un saludo utilizando los datos almacenados en la variable.</p> Python<pre><code>print(\"\\033[2J\\033[1H\") # Limpia la pantalla\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\nprint(\"Hola\", nombre)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola Pablo Martinez Roca\n</code></pre> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Ingresa tu edad por teclado (escribe una oraci\u00f3n amigable que le solicite al usuario que ingrese su edad).  </p> <p>Luego, imprime tu edad en pantalla (escribe una oraci\u00f3n amigable que le indique al usuario su edad).</p> Ver soluci\u00f3n propuesta Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\nprint(\"Hola\", nombre)\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Tienes\", edad, \"a\u00f1os.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola Pablo Martinez Roca\nIngresa tu edad: 45\nTienes 45 a\u00f1os.\n</code></pre> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que responda a lo siguiente:  </p> <p>Imprime en pantalla: \"Hola (tu nombre). Tu edad es (tu edad) a\u00f1os.\" en un mismo rengl\u00f3n, sin utilizar la coma (,).</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n</code></pre> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Utiliza el siguiente c\u00f3digo para simular una pausa: </p> <pre><code>input(\"Presiona enter para continuar...\")\n</code></pre> <p>Luego agrega el c\u00f3digo del ejercicio 1 que sirve para limpiar la pantalla.  </p> <p>A continuaci\u00f3n, imprime en pantalla si tu edad es par o impar (utiliza el operador m\u00f3dulo ( % ) para calcular el resto de una divisi\u00f3n).  </p> <p>La salida en pantalla debe ser exactamente de la siguiente forma: </p> Terminal (Entrada/Salida)<pre><code>Tu edad es par ( *edad* )\n</code></pre> <p>o </p> Terminal (Entrada/Salida)<pre><code>Tu edad es impar ( *edad* )\n</code></pre> <p>Donde *edad* es el n\u00famero almacenado en la variable edad, ingresado por teclado.  </p> Ver soluci\u00f3n propuesta Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n</code></pre> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Agrega el c\u00f3digo que sirve para simular una pausa.  </p> <p>Luego agrega el c\u00f3digo que sirve para limpiar la pantalla.  </p> <p>Ingresa otro n\u00famero por teclado.  </p> <p>Imprime en pantalla si el n\u00famero es mayor, igual o menor que tu edad, en ese orden de comparaci\u00f3n. Arma una oraci\u00f3n con el n\u00famero, tu edad y el resultado de la comparaci\u00f3n.  </p> Ver soluci\u00f3n propuesta Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnumero = int(input(\"Ingresa un n\u00famero cualquiera: \"))\n\nif numero &gt; edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es mayor a tu edad (\" + str(edad) + \").\")\nelif numero == edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es igual a tu edad (\" + str(edad) + \").\")\nelse:\n    print(\"El n\u00famero (\" + str(numero) + \") es menor a tu edad (\" + str(edad) + \").\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nIngresa un n\u00famero cualquiera : 7\nEl n\u00famero (7) es menor a tu edad (45).\n</code></pre> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Modifica el c\u00f3digo para que cuando el n\u00famero sea igual que tu edad, solicite n\u00fameros hasta que se rompa la igualdad.  </p> <p>Luego, que imprima si el n\u00famero es menor o mayor que tu edad armando una oraci\u00f3n con el n\u00famero, tu edad y el resultado de la comparaci\u00f3n, tal como has hecho en el ejercicio anterior.</p> Ver soluci\u00f3n propuesta Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnumero = int(input(\"Ingresa un n\u00famero cualquiera: \"))\n\nwhile numero == edad:\n    print(\"El n\u00famero ingresado (\" + str(numero) + \") es igual a tu edad (\" + str(edad) + \"), pero no pueden ser iguales.\")\n    numero = int(input(\"Ingresa un n\u00famero distinto: \"))\n\nif numero &gt; edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es mayor a tu edad (\" + str(edad) + \").\")\nelse:\n    print(\"El n\u00famero (\" + str(numero) + \") es menor a tu edad (\" + str(edad) + \").\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nIngresa un n\u00famero cualquiera: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 52\n\nEl n\u00famero (52) es mayor a tu edad (45).\n</code></pre> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Agrega el c\u00f3digo que sirve para simular una pausa.  </p> <p>Luego agrega el c\u00f3digo que sirve para limpiar la pantalla.  </p> <p>Agrega el c\u00f3digo con las estructuras y variables necesarias para imprimir la secuencia de n\u00fameros desde tu edad hasta el segundo n\u00famero ingresado. Ten en cuenta que puede ser una secuencia ascendente o descendente. </p> <p>Por ejemplo si tu edad es 5 y el segundo n\u00famero ingresado es 10, la secuencia a imprimir ser\u00e1:</p> Terminal (Entrada/Salida)<pre><code>5 6 7 8 9 10\n</code></pre> <p>Pero si tu edad es 10 y el segundo n\u00famero ingresado es 5, la secuencia a imprimir ser\u00e1:</p> Terminal (Entrada/Salida)<pre><code>10, 9, 8, 7, 6, 5  \n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnumero = int(input(\"Ingresa un n\u00famero cualquiera: \"))\n\nwhile numero == edad:\n    print(\"El n\u00famero ingresado (\" + str(numero) + \") es igual a tu edad (\" + str(edad) + \"), pero no pueden ser iguales.\")\n    numero = int(input(\"Ingresa un n\u00famero distinto: \"))\n\nif numero &gt; edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es mayor a tu edad (\" + str(edad) + \").\")\n\n    paso = 1 # Esta ser\u00e1 la variable que controle el incremento o decremento de valores que imprimir\u00e1 el ciclo\n\nelse:\n    print(\"El n\u00famero (\" + str(numero) + \") es menor a tu edad (\" + str(edad) + \").\")\n\n    paso = -1 # Esta ser\u00e1 la variable que controle el incremento o decremento de valores que imprimir\u00e1 el ciclo\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nfor n in range(edad, numero + paso, paso):\n    print(n, end= \" \")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nIngresa un n\u00famero cualquiera: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 52\n\nEl n\u00famero (52) es mayor a tu edad (45).\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\n45 46 47 48 49 50 51 52\n</code></pre> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/introduccion-a-las-estructuras-de-datos/","title":"Introducci\u00f3n a las estructuras de datos","text":""},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/introduccion-a-las-estructuras-de-datos/#introduccion","title":"Introducci\u00f3n","text":"<p>Una estructura de datos o tipo de dato estructurados es un tipo de dato construido a partir de otros tipos de dato.</p> <p>As\u00ed, a estos tipos de dato se los suelen denominar complejos. </p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/","title":"Tipos de estructuras de datos","text":""},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#tipos-de-dato-reconocidos-por-la-computadora","title":"tipos de dato reconocidos por la computadora","text":""},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#que-es-una-estructura-de-datos","title":"\u00bfQu\u00e9 es una estructura de datos?","text":"<p>Las estructuras de datos son formas de organizar y almacenar datos en un programa de computadora para que puedan ser utilizados de manera eficiente. Algunos de los tipos m\u00e1s comunes de estructuras de datos incluyen:</p> <ul> <li> <p>Cadenas de caracteres (Strings): Representan una secuencia de caracteres. En muchos lenguajes de programaci\u00f3n se definen usando comillas simples (') o dobles (\").</p> </li> <li> <p>Arreglos (Arrays): Una colecci\u00f3n de elementos identificados por \u00edndices o claves. Todos los elementos son del mismo tipo.</p> </li> <li> <p>Listas: Similar a un arreglo, pero puede cambiar de tama\u00f1o y puede contener elementos de diferentes tipos.</p> </li> <li> <p>Tuplas: Similar a una lista, pero es inmutable, lo que significa que no puede cambiar una vez que se ha creado.</p> </li> <li> <p>Conjuntos (Sets): Una colecci\u00f3n de elementos \u00fanicos, es decir, no permite duplicados.</p> </li> <li> <p>Diccionarios: Una colecci\u00f3n de pares clave-valor. Las claves son \u00fanicas y los valores pueden ser de cualquier tipo.</p> </li> <li> <p>Pilas (Stacks): Una colecci\u00f3n de elementos con dos operaciones principales: push (agregar un elemento al final) y pop (eliminar el \u00faltimo elemento).</p> </li> <li> <p>Colas (Queues): Similar a una pila, pero los elementos se agregan al final y se eliminan del principio.</p> </li> <li> <p>\u00c1rboles: Una estructura de datos no lineal que tiene un nodo ra\u00edz y un conjunto de nodos secundarios que forman un sub\u00e1rbol.</p> </li> <li> <p>Grafos: Una colecci\u00f3n de nodos y aristas que conectan los nodos. Puede ser dirigido (las aristas tienen una direcci\u00f3n) o no dirigido.</p> </li> </ul> <p>Cada una de estas estructuras de datos tiene sus propias ventajas y desventajas, y se utilizan en diferentes situaciones dependiendo de las necesidades del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#listas","title":"Listas","text":"<p>Una lista (list) es una colecci\u00f3n de datos. Seg\u00fan el lenguaje de programaci\u00f3n, esa lista estar\u00e1 conformada por los mismos o por diferentes tipos de dato.</p> <pre><code>lista_de_datos_de_diferente_tipo = [1, \"Hola\", True, 3.14]\nlista_de_datos_de_igual_tipo = [10, -5, 0]\n</code></pre> <p>''' warning \"\u00a1Para recordar!\"     Es importante tener en cuenta que, aunque las listas pueden contener elementos de diferentes tipos de dato, esto puede hacer que sea m\u00e1s dif\u00edcil de manejar y procesar. </p> <pre><code>En general, es mejor mantener los elementos de una lista del mismo tipo de dato siempre que sea posible para evitar confusiones y errores.\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo","title":"Ejemplo","text":"<p>En este ejemplo, crearemos una lista llamada mi_lista que contiene los n\u00fameros del 1 al 5. Luego, accederemos a algunos elementos de la lista utilizando sus \u00edndices y modificaremos y agregaremos elementos.  Finalmente, eliminaremos un elemento y obtendremos la longitud de la lista (n\u00famero de elementos en ella).</p> Python<pre><code># creaci\u00f3n de una lista\nmi_lista = [1, 2, 3, 4, 5]\n\n# acceso a elementos de la lista\nprimer_elemento = mi_lista[0]  # el primer elemento es 1\ntercer_elemento = mi_lista[2]  # el tercer elemento es 3\n\n# modificaci\u00f3n de elementos de la lista\nmi_lista[4] = 6  # cambiamos el \u00faltimo elemento de 5 a 6\n\n# agregando elementos a la lista\nmi_lista.append(7)  # agrega el n\u00famero 7 al final de la lista\n\n# eliminando elementos de la lista\nmi_lista.remove(2)  # elimina el n\u00famero 2 de la lista\n\n# longitud de la lista\nlongitud = len(mi_lista)  # longitud de la lista es 4\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#pilas","title":"Pilas","text":"<p>Completar</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#colas","title":"Colas","text":"<p>Completar</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#matrices","title":"Matrices","text":"<p>Una matr\u00edz (matrix) es una lista de listas. Cada lista interna representa una fila de la matriz. Cada elemento de cada lista representa una columna de la matriz.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_1","title":"Ejemplo","text":"<p>En este ejemplo, matriz ser\u00e1 una lista de tres elementos, cada uno de los cuales ser\u00e1 a su vez una lista de tres elementos. Cada lista interna representar\u00e1 una fila de la matriz, y cada elemento de la lista interna representar\u00e1 una columna de la matriz.  </p> Python<pre><code># creaci\u00f3n de una matriz de 3x3\nmatriz = [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n         ]\n\n# devuelve el elemento en la fila 0, columna 1\nprint(matriz[0][1]) // salida: 2\n</code></pre> <p>Este ejemplo debiera ir luego de explicar ciclos</p> <p>Podreemos acceder a los elementos individuales de la matriz utilizando la sintaxis de \u00edndice. As\u00ed, <code>matriz[0][1]</code> devolver\u00e1 el elemento en la fila 0 y la columna 1 de la matriz, que es el valor 2. </p> <p>Ahora, podremos recorrer la matriz utilizando bucles <code>for</code> anidados para acceder a cada elemento de la matriz.  </p> Python<pre><code>matriz = [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n         ]\n\nfor fila in matriz:\n    for columna as elemento in fila:\n        print(columna, end=\" \") # imprime el valor almacenado en cada columna (elemento)\n    print() # imprime un salto de linea\n</code></pre> Terminal (Entrada/Salida)<pre><code>1 2 3 \n4 5 6 \n7 8 9 \n</code></pre> <p>En este ejemplo, el programa itera sobre cada fila de la matriz, que a su vez itera sobre cada columna de cada fila e imprime el valor almacenado.    Al finalizar la iterac\u00f3n de cada fila, el programa imprime un salto de l\u00ednea y vuelve a repetir la ejecuci\u00f3n de iterarci\u00f3n en la siguiente fila.</p> <p>\u00a1Para recordar! si trabajas con matrices en Python</p> <p>En Python, la longitud de cada fila de la matriz no tiene por qu\u00e9 ser la misma. Esto permite representar matrices irregulares, donde cada fila puede tener una longitud diferente.</p> <p>Sin embargo, trabajar con matrices irregulares puede ser m\u00e1s complicado que trabajar con matrices regulares de tama\u00f1o fijo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#tuplas","title":"Tuplas","text":"<p>Una tupla (tuple) es similar a una lista, aunque sus elementos son inmutables. Es decir, no pueden ser modificados una vez que la tupla sea creada.</p> <pre><code>mi_tupla = (1, 2, 3, 4, 5)\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplos","title":"Ejemplos","text":"<p>Crearemos una tupla llamada mi_tupla que contendr\u00e1 los n\u00fameros del 1 al 5. Luego, accederemos a algunos elementos de la tupla utilizando sus \u00edndices y obtendremos la longitud de la tupla.  </p> Python<pre><code># creaci\u00f3n de una tupla\nmi_tupla = (1, 2, 3, 4, 5)\n\n# acceso a elementos de la tupla\nprimer_elemento = mi_tupla[0]  # el primer elemento es 1\ntercer_elemento = mi_tupla[2]  # el tercer elemento es 3\n\n# longitud de la tupla\nlongitud = len(mi_tupla)  # longitud de la tupla es 5\n\n# la siguiente generar\u00e1 un error ya que las tuplas son inmutables\nmi_tupla[4] = 6 # no se pueden modificar elementos de la tupla\n</code></pre> <p>Sin embargo, cuando intentamos modificar un elemento de la tupla, se produce un error ya que las tuplas son inmutables y no se pueden modificar sus elementos despu\u00e9s de su creaci\u00f3n.</p> Terminal (Entrada/Salida)<pre><code>Traceback (most recent call last):\n  File \"c:\\ejemplo.py\", line 12, in &lt;module&gt;\n    mi_tupla[4] = 6\n    ~~~~~~~~^^^\nTypeError: 'tuple' object does not support item assignment\n</code></pre> <p>Otro ejemplo de gran aplicaci\u00f3n pr\u00e1ctica es el intercambio de valores almacenados en dos variables sin necesidad de una tercera variable temporal:</p> Python<pre><code>a = 1\nb = 2\n\nprint(\"El valor que tiene almacenado `a` es\", a)\nprint(\"El valor que tiene almacenado `b` es\", b)\n\nprint(\"Ahora se ejecuta la instrucci\u00f3n `a, b = b, a`\")\na, b = b, a\n\nprint(\"El valor que tiene almacenado ahora `a` es\", a)\nprint(\"El valor que tiene almacenado ahora `b` es\", b)\n</code></pre> <p>En Python, <code>a, b = b, a</code> es una forma de intercambiar los valores de las variables <code>a</code> y <code>b</code>.</p> Terminal (Entrada/Salida)<pre><code>El valor que tiene almacenado `a` es 1\nEl valor que tiene almacenado `b` es 2\n\nAhora se ejecuta la instrucci\u00f3n `a, b = b, a`\n\nEl valor que tiene almacenado ahora `a` es 2\nEl valor que tiene almacenado ahora `b` es 1\n</code></pre> <p>Inicialmente, <code>a</code> es 1 y <code>b</code> es 2. Despu\u00e9s de <code>a, b = b, a</code>, <code>a</code> ser\u00e1 2 y <code>b</code> ser\u00e1 1.</p> <p>Esto es posible gracias a la capacidad de Python para empaquetar y desempaquetar tuplas.  </p> <p>Python primero empaqueta los valores de <code>b</code> y <code>a</code> en una tupla (2, 1), para luego desempaquetar esa tupla almacenando los valores en <code>a</code> y <code>b</code> respectivamente.  </p> <p>\u00bfC\u00f3mo funciona la cosa?</p> <p>Respetando el orden de empaquetado y desempaquetado es como se produce el intercambio de valores.</p> <p>En realidad no es un intercambio si no una asignaci\u00f3n de valores a las variables que previamente hab\u00edan provisto dichos valores pero en orden de acceso inverso.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#arreglos","title":"Arreglos","text":"<p>Un arreglo (array) se puede utilizar para almacenar una secuencia de elementos del mismo tipo de dato. A diferencia de las listas, los arrays est\u00e1n dise\u00f1ados para ser m\u00e1s eficientes en t\u00e9rminos de espacio y tiempo de procesamiento para operaciones num\u00e9ricas y matem\u00e1ticas.</p> <p>\u00a1Para recordar!</p> <p>En algunos lenguajes, los arreglos pueden contener elementos de diferentes tipos de dato. Esto puede hacer que sea m\u00e1s dif\u00edcil de manejar y procesar. </p> <p>En general, es mejor mantener los elementos de un array del mismo tipo de dato siempre que sea posible para evitar confusiones y errores.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_2","title":"Ejemplo","text":"<p>Crearemos un arreglo llamado mi_array que contendr\u00e1 3 n\u00fameros enteros (1, 2 y 3) como elementos. El primer argumento del m\u00e9todo <code>array()</code> especificar\u00e1 el tipo de dato de los elementos del arreglo.</p> <p>Para utilizar arreglos en Python, primero debemos importar el m\u00f3dulo array. Si bien esta operaci\u00f3n, en general se denomina importaci\u00f3n de librer\u00eda, en Python no existen las librer\u00edas y en su lugar existen los m\u00f3dulos. Luego, podremos crear un nuevo arreglo utilizando la funci\u00f3n <code>array()</code> y pasando como argumentos el tipo de dato de los elementos y una secuencia de valores. </p> Python<pre><code>import array\n\nmi_array = array.array('i', [1, 2, 3])\n\nprint(mi_array)  # Output: array('i', [1, 2, 3])\n</code></pre> <p>'i' significa que los elementos que almacenar\u00e1 el arreglo ser\u00e1n n\u00fameros enteros.</p> <p>Ahora, Podemos acceder a los elementos del arreglo utilizando su \u00edndice, de la misma manera que lo hac\u00edamos con las listas:</p> Python<pre><code>print(mi_array[0])  # Output: 1\nprint(mi_array[1])  # Output: 2\nprint(mi_array[2])  # Output: 3\n</code></pre> <p>Tambi\u00e9n podemos modificar los elementos del arreglo asignando nuevos valores a sus \u00edndices:</p> Python<pre><code>mi_array = array.array('i', [1, 2, 3]) \nmi_array[1] = 4\nprint(mi_array)  # Output: array('i', [1, 4, 3]) \n</code></pre> <p>En este ejemplo, estamos modificando el segundo elemento del arreglo (mi_array[1]) y asign\u00e1ndole un nuevo valor (4).  El array resultante se imprimir\u00e1 en la consola como  array('i', [1, 4, 3]).</p> <p>Es importante tener en cuenta que los arreglos en algunos lenguajes, como Python, est\u00e1n limitados a un solo tipo de dato, lo que significa que no podemos mezclar diferentes tipos de dato en un solo arreglo.</p> <p>Adem\u00e1s, los arreglos en Python son est\u00e1ticos, lo que significa que no pueden cambiar de tama\u00f1o una vez que se han creado. </p> <p>Si necesitamos un tipo de dato que pueda cambiar de tama\u00f1o, podemos utilizar una lista en su lugar.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#diccionarios","title":"Diccionarios","text":"<p>Un diccionario (dict) es una colecci\u00f3n de pares clave-valor, en la que cada valor se almacena junto con una clave que lo identifica. </p> <p>Tambi\u00e9n se los conoce como mapas.</p> <p>Buscar mapas y chequear info</p> <pre><code>mi_diccionario = {\"nombre\": \"Juan\", \"edad\": 30, \"ciudad\": \"Bs As\"}\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_3","title":"Ejemplo","text":"<p>Crearemos un diccionario llamado mi_diccionario que contiene informaci\u00f3n sobre una persona. Luego, accederemos a algunos elementos del diccionario utilizando sus claves y modificaremos y agregaremos elementos. Finalmente, eliminaremos una clave y su valor del diccionario y obtendremos la longitud del diccionario.</p> Python<pre><code># creaci\u00f3n de un diccionario\nmi_diccionario = {\"nombre\": \"Juan\", \"edad\": 30, \"ciudad\": \"Bs As\"}\n\n# acceso a elementos del diccionario\nnombre = mi_diccionario[\"nombre\"]  # el valor de \"nombre\" es \"Juan\u201d\nedad = mi_diccionario[\"edad\"]  # el valor de \"edad\" es 30\n\n# modificaci\u00f3n de elementos del diccionario\nmi_diccionario[\"edad\"] = 31  # cambiamos el valor de \"edad\" a 31\n\n# agrega un nuevo par clave-valor (elemento) al diccionario\nmi_diccionario[\"trabajo\"] = \"programador\"\n\n# elimina la clave \"ciudad\" y su valor (elemento) del diccionario\ndel mi_diccionario[\"ciudad\"]\n\n# longitud del diccionario\nlongitud = len(mi_diccionario)  # longitud del diccionario es 3\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#conjuntos","title":"Conjuntos","text":"<p>Un conjunto (set) es una colecci\u00f3n de valores \u00fanicos. Es decir que no hay elementos duplicados en un conjunto.</p> <pre><code>mi_set = {1, 2, 3, 3, 4, 5, 5} # creaci\u00f3n de un set con elementos duplicados\nprint(mi_set) # imprime {1, 2, 3, 4, 5} eliminando los duplicados\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_4","title":"Ejemplo","text":"<p>Crearemos un conjunto llamado mi_set y le asignaremos los siguientes valores: 1, 2, 3, 3, 4, 5, 5</p> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que los conjuntos son colecciones no ordenadas y no permiten elementos duplicados. En caso de asignarle elementos duplicados, estos ser\u00e1n eliminados autom\u00e1ticamente.</p> <p>Luego, agregaremos un nuevo elemento al conjunto y eliminaremos otro. Tambi\u00e9n comprobaremos si un valor determinado est\u00e1 en el conjunto utilizando el operador <code>in</code>.  Finalmente, obtendremos la longitud del conjunto. </p> Python<pre><code># creaci\u00f3n de un conjunto con elementos duplicados\nmi_set = {1, 2, 3, 3, 4, 5, 5}\n\n# imprimiendo el conjunto\nprint(mi_set)  # Output: {1, 2, 3, 4, 5}\n\n# agregando elementos al conjunto\nmi_set.add(6)  # agrega el n\u00famero 6 al conjunto\n\n# comprobando si un elemento est\u00e1 en el conjunto\nesta_en_conjunto = 4 in mi_set # devuelve True ya que 4 est\u00e1 en el conjunto\n\n# eliminando elementos del conjunto\nmi_set.remove(3)  # elimina el n\u00famero 3 del conjunto\n\n# longitud del conjunto\nlongitud = len(mi_set)  # longitud del conjunto es 5\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#arboles","title":"\u00c1rboles","text":"<p>Falta</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#funciones","title":"Funciones","text":"<p>Dejamos esto aca?</p> <p>En algunos lenguajes, las funciones son consideradas como un tipo de dato y pueden ser asignadas a variables de la misma manera que asignamos otros tipos de dato, como una cadena o un n\u00famero entero. Para hacerlo, simplemente escribimos el nombre de la variable, seguido del signo igual (=) y el nombre de la funci\u00f3n sin par\u00e9ntesis.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_5","title":"Ejemplo","text":"Python<pre><code>def sumar(a, b):  // la funci\u00f3n sumar toma dos n\u00fameros como argumentos y devuelve la suma de esos n\u00fameros\n    resultado = a + b\n    return resultado\n\nmi_funcion = sumar\nresultado = mi_funcion(2, 3)\n\nprint(resultado)  # Output: 5\n</code></pre> <p>Aqu\u00ed se define una funci\u00f3n llamada sumar que luego es asignada a la variable mi_funcion. M\u00e1s tarde, se llama a la funci\u00f3n a trav\u00e9s de la variable, pasando los dos argumentos necesarios para realizar la operaci\u00f3n de suma dentro de la funci\u00f3n; y esta devuelve el resultado que es finalmente almacenado en la variable resultado que luego es impresa por pantalla.</p> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que, cuando asignamos una funci\u00f3n a una variable, estamos asignando la funci\u00f3n en s\u00ed misma, no el resultado de la funci\u00f3n. Esto significa que podemos llamar a la funci\u00f3n en cualquier momento simplemente utilizando la variable a la que se ha asignado, con argumentos diferentes, si es preciso, para obtener diferentes resultados.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#objeto-como-instancia-de-una-clase","title":"Objeto como instancia de una clase","text":"<p>Dejamos esto aca?</p> <p>Una clase es un tipo de dato personalizado que define un conjunto de atributos y m\u00e9todos que se pueden utilizar para crear objetos.</p> <p>Por ejemplo, podemos definir una clase Persona que tenga atributos como nombre, edad y ocupaci\u00f3n, y m\u00e9todos como caminar(), correr() y hablar().</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_6","title":"Ejemplo","text":"<p>Definiremos la clase Persona con un constructor que toma tres par\u00e1metros (nombre, edad y ocupacion) y dos m\u00e9todos (__init__() y hablar()).  Luego, crearemos el objeto persona1 de la clase Persona y le pasaremos algunos valores para los atributos nombre, edad y ocupacion.  Finalmente, llamaremos al m\u00e9todo hablar() en el objeto persona1.</p> <p>\u00a1 Muy importante!</p> <p>Hay que tener en cuenta que en Python, todo es un objeto, incluso los tipos de dato b\u00e1sicos como enteros, flotantes y cadenas. Por lo tanto, podemos tratarlos como objetos y llamar a sus m\u00e9todos y atributos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/tipos-de-estructuras-de-datos/#objeto-como-variable","title":"Objeto como variable","text":"<p>Como bien dijimos, en algunos lenguajes como Python todo es un objeto, incluso las variables.</p> <p>Ya que una variable es simplemente una referencia a un objeto, cuando creamos una variable y le asignamos un valor, lo que realmente estamos haciendo es crear un objeto y asignar una referencia a ese objeto a la variable. </p> Python<pre><code># creaci\u00f3n de un objeto entero y asignaci\u00f3n a una variable\nmi_variable = 42\n\n# creaci\u00f3n de una lista y asignaci\u00f3n a una variable\nmi_otra_variable = [1, 2, 3]\n</code></pre> <p>En el ejemplo anterior, creamos dos objetos:      * un objeto entero con un valor de 42; y      * una lista con tres elementos. </p> <p>Luego, asignamos referencias a esos objetos a dos variables diferentes: mi_variable y mi_otra_variable, respectivamente.</p> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que, en Python, las variables no tienen un tipo de dato asociado, sino que los objetos a los que hacen referencia s\u00ed lo tienen. Por lo tanto, una variable puede referenciar a un objeto de cualquier tipo de dato en cualquier momento, incluso si anteriormente se referenciaba a un objeto de otro tipo de dato.</p>"},{"location":"unidades/fundamentos-de-la-programacion/estructuras-de-datos/ejercitacion/ejercitacion-listas/","title":"Ejercitacion listas","text":"<ol> <li> <p>Ejercicios de listas:</p> <ol> <li> <p>Escribir un programa que contenga una funci\u00f3n que reciba una lista con valores num\u00e9ricos enteros como argumento para calcular y devolver el promedio de dichos n\u00fameros.</p> Python<pre><code>def calcular_promedio(numeros):\n    total = 0\n    contador = 0\n\n    for num in numeros:\n        total += num\n        contador += 1\n\n    promedio = total / contador\n    return promedio\n\nlista_numeros = [5, 10, 15, 20]\nresultado = calcular_promedio(lista_numeros)\nprint(\u201dPromedio: \", resultado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Promedio: 12.5\n</code></pre> <p>En este ejercicio, la funci\u00f3n calcular_promedio() calcula el promedio de una lista de n\u00fameros pasada como argumento.  Se utilizan las variables locales total, contador y promedio para realizar los c\u00e1lculos dentro de la funci\u00f3n.</p> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/bloques-de-sentencias-de-un-programa/","title":"Bloques de sentencias de un programa","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/bloques-de-sentencias-de-un-programa/#que-es-un-bloque-de-sentencias-block-statements","title":"\u00bfQu\u00e9 es un bloque de sentencias (block statements)?","text":"<p>Definici\u00f3n</p> <p>Un bloque de sentencias es una secci\u00f3n de un programa que est\u00e1 agrupada por cero o m\u00e1s sentencias, delimitada por un conjunto de llaves equilibradas ( { } ), o \u201cindentados\u201d, es decir, visualmente alineadas y desplazadas hacia la derecha mediante espacios o tabulaciones (creando una estructura jer\u00e1rquica y facilitando la legibilidad del c\u00f3digo), o mediante palabras clave espec\u00edficas del lenguaje de programaci\u00f3n utilizado. </p> <p>Estos bloques pueden contener una o m\u00e1s sentencias o instrucciones que se ejecutan secuencialmente cuando el programa ingresa en ellos.</p> <p>Un bloque de sentencias tambi\u00e9n puede identificarse como sentencia compuesta.</p> Bloques de sentencias utilizando llaves<pre><code>if (x &gt; 5) {\n    print(\"x es mayor que 5\");\n    print(\"Sigo dentro del bloque if\");\n}\nprint(\"Fuera del bloque if\");\n</code></pre> <p>``` py title:\"Bloques de sentencias utilizando indentaci\u00f3n\" if x &gt; 5:     print(\"x es mayor que 5\")     print(\"Sigo dentro del bloque if\") print(\"Fuera del bloque if\") <pre><code>Los bloques de c\u00f3digo se utilizan para agrupar l\u00f3gicamente un conjunto de instrucciones que deben ejecutarse juntas como una unidad. Pueden ser utilizados en diversas estructuras de control, como bucles o condicionales, y tambi\u00e9n pueden ser definidos en funciones o m\u00e9todos.\n\n!!! important \"\u00a1Para recordar!\"\n    Los bloques de sentencias ayudan a organizar y estructurar el c\u00f3digo fuente, permitiendo una mejor legibilidad y comprensi\u00f3n del programa, as\u00ed como tambi\u00e9n facilitan la reutilizaci\u00f3n de fragmentos de c\u00f3digo y el control del flujo de ejecuci\u00f3n.\n\n### \u00bfQu\u00e9 es la indentaci\u00f3n?\n\nLa indentaci\u00f3n en programaci\u00f3n es un concepto y una convenci\u00f3n. Es un aspecto del estilo de codificaci\u00f3n que implica agregar espacios en blanco al comienzo de las l\u00edneas de c\u00f3digo para indicar bloques de c\u00f3digo y mejorar la legibilidad.\n\nEs decir, que se utiliza para estructurar visualmente el c\u00f3digo y hacerlo m\u00e1s legible, indicando el comienzo y el final de los bloques de c\u00f3digo, como las declaraciones de funciones, bucles, condicionales, entre otros.\n\nEn algunos lenguajes de programaci\u00f3n, como Python, la indentaci\u00f3n es una parte fundamental de la sintaxis del lenguaje y se utiliza para indicar bloques de c\u00f3digo, como las funciones, los bucles y las declaraciones condicionales, y definir el alcance de estos.\n\nAqu\u00ed hay un ejemplo:\n\n``` py title=\"Python\"\ndef funcion():\n    print(\"Esta l\u00ednea est\u00e1 indentada, por lo que forma parte de la funci\u00f3n.\")\n\nprint(\"Esta l\u00ednea no est\u00e1 indentada. A partir de esta l\u00ednea inclusive, el resto de las l\u00edneas no forman parte de la funci\u00f3n.\")\n</code></pre></p> <p>Por otro lado, en lenguajes como Java o C++, la indentaci\u00f3n no afecta la funcionalidad del c\u00f3digo, pero es una buena pr\u00e1ctica seguir convenciones de indentaci\u00f3n para hacer que el c\u00f3digo sea m\u00e1s legible y f\u00e1cil de mantener.</p> <p>Por ejemplo:</p> Java<pre><code>public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Esta l\u00ednea est\u00e1 indentada, por lo que se puede ver que forma parte de la funci\u00f3n main.\");\n    }\n}\n</code></pre> <p>En ambos ejemplos, la l\u00ednea que imprime el mensaje est\u00e1 indentada para indicar que forma parte de la funci\u00f3n.</p> <p>Definici\u00f3n</p> <p>Por lo tanto, puedes pensar en la indentaci\u00f3n como un sistema para organizar y estructurar tu c\u00f3digo de una manera que sea f\u00e1cil de leer y entender.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/","title":"Expresiones","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#introduccion","title":"Introducci\u00f3n","text":"<p>Y un programa consiste en una o m\u00e1s sentencias que al ejecutarse resuelven un problema procesando datos para convertirlos en informaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#que-es-una-expresion","title":"\u00bfQu\u00e9 es una expresi\u00f3n?","text":"<p>Definici\u00f3n</p> <p>Una expresi\u00f3n est\u00e1 conformada por un operando (variable, constante literal o resultado de una llamada a funci\u00f3n o m\u00e9todo) o la combinaci\u00f3n de uno o m\u00e1s operandos y operadores (aritm\u00e9ticos, l\u00f3gicos o relacionales), construida de acuerdo con la sintaxis del lenguaje, que, al ser procesada (evaluada o sometida a un c\u00e1lculo u operaci\u00f3n), devuelve como resultado un valor.</p> <p>Este valor puede ser un n\u00famero, un caracter, un booleano, una cadena de caracteres, un objeto, etc., dependiendo del lenguaje de programaci\u00f3n y de la expresi\u00f3n.  </p> <p>M\u00e1s simplificadamente, una expresi\u00f3n es cualquier palabra o grupo de palabras o s\u00edmbolos que representan un valor; o una instrucci\u00f3n que se ejecuta y termina siendo un valor.</p> <p>Es necesario entender que un valor es \u00fanico. Por ejemplo, const, let, 2, 4, s, a, true, false y \"mundo\" son valores porque cada uno de ellos es \u00fanico en significado o car\u00e1cter.</p> <p>Cualquier expresi\u00f3n v\u00e1lida puede ser tan simple como una variable, constante literal o resultado de una llamada a funci\u00f3n o m\u00e9todo; o tan compleja como una combinaci\u00f3n de m\u00faltiples operadores y operandos de todo tipo:</p> Expresi\u00f3n de c\u00e1lculo simple<pre><code>(x + 3) * 2\n</code></pre> Expresi\u00f3n de c\u00e1lculo complejo<pre><code>(calcular_factorial(y) * COEF_CORRECCION) &gt; (valor % 4) &amp;&amp; !(vol1 == vol2 || distorsi\u00f3n ** (1/y)) \n</code></pre> <p>El ejemplo anterior es a modo referencial para demostrar como puede ser de compleja una expresi\u00f3n.</p> <p>Como se puede observar en el ejemplo de expresi\u00f3n compleja, tambi\u00e9n puede haber una expresi\u00f3n como parte de otra, o como argumento de una funci\u00f3n. Esto se denomina anidamiento de expresiones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#si-devuelve-un-valor-es-un-operador-tambien","title":"Si devuelve un valor, \u00bfes un operador tambi\u00e9n?","text":"<p>Un operador es un s\u00edmbolo que realiza una operaci\u00f3n espec\u00edfica en uno, dos o tres operandos y produce un resultado. Las operaciones son cosas como la suma, la multiplicaci\u00f3n, la comparaci\u00f3n, las operaciones l\u00f3gicas, etc. Ejemplos de operadores incluyen +, -, *, /, ==, !=, &amp;&amp;, ||, etc.</p> <p>Por otro lado, una expresi\u00f3n es una combinaci\u00f3n de uno o m\u00e1s operandos y cero o m\u00e1s operadores que el lenguaje de programaci\u00f3n interpreta (o eval\u00faa) para producir un valor. Esto significa que cada expresi\u00f3n, cuando se ejecuta, produce un valor. Por ejemplo, 2 + 2 es una expresi\u00f3n que se eval\u00faa a 4. x * y es una expresi\u00f3n que, cuando se eval\u00faa, produce el producto de los valores de x e y.</p> <p>Por lo tanto, aunque tanto los operadores como las expresiones pueden producir un valor, un operador es solo una parte de una expresi\u00f3n, y es la expresi\u00f3n en su conjunto la que produce el valor final.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#operandos-y-operadores-aplicados-en-expresiones","title":"Operandos y operadores aplicados en expresiones","text":"<ul> <li>Expresiones con operadores de asignaci\u00f3n:<ul> <li>x = 5 asigna el valor 5 a la variable x</li> <li>x += 3 es equivalente a x = x + 3</li> </ul> </li> <li>Expresiones con operadores aritm\u00e9ticos: <ul> <li>5 + 3 devuelve 8</li> <li>10 / 2 devuelve 5</li> <li>7 % 3 devuelve 1 y equivale al residuo o resto de la divisi\u00f3n de 7 entre 3</li> </ul> </li> <li>Expresiones con operadores de comparaci\u00f3n:<ul> <li>5 == 5 devuelve verdadero (True)</li> <li>10 != 5 devuelve verdadero (True)</li> <li>7 &gt; 3 devuelve verdadero (True)</li> <li>4 &lt; 2 devuelve falso (False)</li> <li>5 &gt;= 5 devuelve verdadero (True)</li> <li>2 &lt;= -1 devuelve falso (False)</li> </ul> </li> <li>Expresiones con operadores de concatenaci\u00f3n:<ul> <li>\"Hola\" + \" \" + \"Mundo!\" \uf0e0 \"Hola Mundo!\"</li> </ul> </li> <li>Expresiones con Operadores de repetici\u00f3n:<ul> <li>\"Hola \" * 3 -&gt; \"Hola Hola Hola\"</li> </ul> </li> <li>Expresiones con operadores l\u00f3gicos:<ul> <li>True &amp;&amp; True devuelve verdadero (True)</li> <li>True &amp;&amp; False devuelve falso (False)</li> <li>False &amp;&amp; True devuelve falso (False)</li> <li>False &amp;&amp; False devuelve falso (False)</li> <li>True || True devuelve verdadero (True)</li> <li>True || False devuelve verdadero (True)</li> <li>False || True devuelve verdadero (True)</li> <li>False || False devuelve falso (False)</li> <li>!True devuelve falso (False)</li> <li>!False devuelve verdadero (True)</li> </ul> </li> <li>Expresiones con operadores de pertenencia:<ul> <li>in devuelve True si un valor se encuentra en la secuencia y False de lo contrario</li> <li>not in devuelve True si un valor no se encuentra en la secuencia y False de lo contrario.</li> </ul> </li> <li>Expresiones con operadores de incremento:<ul> <li>x++ devuelve el siguiente valor de x (le suma 1)</li> </ul> </li> <li>Expresiones con operadores de decremento:<ul> <li>X-- devuelve el anterior valor de x (le resta 1)</li> </ul> </li> </ul> <p>Estos son solo ejemplos simples de expresiones en programaci\u00f3n. Ten en cuenta que las expresiones pueden volverse m\u00e1s complejas y combinar diferentes operadores y elementos para realizar c\u00e1lculos y tomar decisiones en tus programas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-literales","title":"Expresiones literales","text":"<p>De una manera simplificada, una expresi\u00f3n siempre devuelve un valor:</p> C\u00f3digo generalizado<pre><code>2+2 // devuelve 4\ntrue &amp;&amp; false  // devuelve el resultado de la conjunci\u00f3n (AND)\nllamada_a_funcion() // devuelve el valor retornad por la funci\u00f3n llamada_a_funcion()\nvariable_declarada // devuelve el valor actual almacenado en la variable\n</code></pre> <p>Existe otro tipo de expresiones:</p> C\u00f3digo generalizado<pre><code>\"foo\"\n{foo:'bar'}\n[1,2,3,4]\n53\ntrue\n</code></pre> <p>Como se puede observar, estas expresiones no son variables, ni constantes, ni llamadas a funciones. Tampoco poseen operadores.</p> <p>Definici\u00f3n</p> <p>A estas expresiones las llamamos expresiones literales y son el ejemplo m\u00e1s simple de expresi\u00f3n porque representan directamente a su valor. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-compuestas-tipo-de-dato-y-precedencia-de-operadores","title":"Expresiones compuestas, tipo de dato y precedencia de operadores","text":"<p>Cada lenguaje de programaci\u00f3n permite construir expresiones compuestas y sentencias a partir de varias expresiones m\u00e1s peque\u00f1as siempre que el tipo de dato requerido por una parte de la expresi\u00f3n coincida con el tipo de dato de la otra. He aqu\u00ed un ejemplo de una expresi\u00f3n compuesta:</p> C\u00f3digo generalizado<pre><code>x * y * z\n</code></pre> <p>En este ejemplo particular, el orden en que se eval\u00faa la expresi\u00f3n no es importante porque los resultados de la multiplicaci\u00f3n son independientes del orden; el resultado es siempre el mismo, sin importar el orden en que apliques las multiplicaciones. </p> <p>Sin embargo, esto no es cierto para todas las expresiones. Por ejemplo, la siguiente expresi\u00f3n da resultados diferentes, dependiendo de si se realiza primero la operaci\u00f3n de suma o de divisi\u00f3n:</p> C\u00f3digo generalizado<pre><code>x + y / 100 \n</code></pre> <p>Aqu\u00ed, si no conoci\u00e9ramos la precedencia de operadores, no podr\u00edamos indicar si se efect\u00faa primero la suma o la divisi\u00f3n.</p> <p>Por otra parte, podemos especificar exactamente c\u00f3mo deseamos que se eval\u00fae una expresi\u00f3n, utilizando par\u00e9ntesis equilibrados. </p> <p>Por ejemplo, para cambiar el orden de c\u00e1lculo en la expresi\u00f3n anterior, podr\u00edamos escribir:</p> C\u00f3digo generalizado<pre><code>(x + y) / 100 \n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#reglas-de-precedencia","title":"Reglas de precedencia","text":"<p>Los par\u00e9ntesis indican la precedencia de operadores, eliminando un posible resultado ambiguo.</p> <p>Si no indicamos expl\u00edcitamente el orden en el que deseamos que se realicen las operaciones en una expresi\u00f3n compuesta, el orden ser\u00e1 determinado por la precedencia asignada a los operadores en uso dentro de la expresi\u00f3n. Los operadores con una precedencia m\u00e1s alta se eval\u00faan primero. </p> <p>Las reglas de precedencia y asociatividad definen el orden en el cual se eval\u00faan los operadores en una expresi\u00f3n. Estas reglas son importantes para comprender c\u00f3mo se realizar\u00e1n las operaciones y para evitar ambig\u00fcedades en el resultado final.  A continuaci\u00f3n, se presentan las reglas generales de precedencia y asociatividad que se aplican en muchos lenguajes de programaci\u00f3n:</p> <p>Precedencia de operadores: establece el orden en el cual se eval\u00faan los operadores en una expresi\u00f3n. </p> <p>Los operadores con mayor precedencia se eval\u00faan antes que los operadores con menor precedencia. </p> <p>Por ejemplo, en la expresi\u00f3n <code>3 + 4 * 2</code> la multiplicaci\u00f3n tiene mayor precedencia que la suma, por lo tanto, se eval\u00faa primero la multiplicaci\u00f3n y luego la suma.</p> <p></p> <p>Importante</p> <p>Hay que tener en cuenta que estas reglas pueden variar ligeramente dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando. Por lo tanto, es recomendable consultar la documentaci\u00f3n del lenguaje para obtener las reglas de precedencia exactas que se aplican en ese contexto.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#ejemplos","title":"Ejemplos","text":"<p>Por ejemplo, el operador de divisi\u00f3n tiene mayor precedencia que el operador de suma. Por lo tanto, las dos declaraciones siguientes son equivalentes:</p> C\u00f3digo generalizado<pre><code>x + y / 100\nx + (y / 100)\n</code></pre> <p>En este ejemplo particular, si el prop\u00f3sito del c\u00e1lculo es realizar la divisi\u00f3n primero, y luego efectuar la suma, el uso de par\u00e9ntesis es innecesario.</p> <ul> <li>Los operadores con mayor precedencia se eval\u00faan antes que los operadores con una precedencia relativamente menor. </li> <li>Los operadores en la misma l\u00ednea tienen la misma precedencia. Cuando aparecen operadores de igual precedencia en la misma expresi\u00f3n, una regla debe regir cu\u00e1l se eval\u00faa primero. </li> <li>Todos los operadores binarios excepto los operadores de asignaci\u00f3n se eval\u00faan de izquierda a derecha. </li> <li>Los operadores de asignaci\u00f3n se eval\u00faan de derecha a izquierda.</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#reglas-de-asociatividad","title":"Reglas de asociatividad","text":"<p>Es importante recordar que, a diferencia de otras ciencias exactas como la matem\u00e1tica, se reemplaza la precedencia de par\u00e9ntesis, corchetes y llaves solamente por par\u00e9ntesis, resolvi\u00e9ndose desde el par\u00e9ntesis m\u00e1s interno hacia el m\u00e1s externo: </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#asociatividad-de-operadores","title":"Asociatividad de operadores","text":"<p>Define el orden en el cual se eval\u00faan los operadores del mismo nivel de precedencia cuando no hay par\u00e9ntesis para establecer un orden expl\u00edcito. La asociatividad puede ser izquierda o derecha:</p> <ul> <li> <p>Asociatividad izquierda: cuando los operadores tienen asociatividad izquierda, se eval\u00faan de izquierda a derecha. Por ejemplo, en la expresi\u00f3n 4 - 2 - 1, se eval\u00faa primero 4 - 2 y luego se resta 1 al resultado.</p> </li> <li> <p>Asociatividad derecha: cuando los operadores tienen asociatividad derecha, se eval\u00faan de derecha a izquierda.  Por ejemplo, en la expresi\u00f3n 2 ** 3 ** 2, se eval\u00faa primero 3 elevado al cuadrado y, luego, se eleva al cuadrado a ese resultado.</p> </li> </ul> <p>Es importante recordar que, a diferencia de otras ciencias exactas como la matem\u00e1tica, se reemplaza la precedencia de par\u00e9ntesis, corchetes y llaves solamente por par\u00e9ntesis, resolvi\u00e9ndose desde el par\u00e9ntesis m\u00e1s interno hacia el m\u00e1s externo: </p> <pre><code>52 / { 2 * [ 3 + 5 * ( 6 \u2013 4 ) ] }   \u2192   52 / ( 2 * ( 3 + 5 * ( 6 \u2013 4 ) ) )\n                                                              ---------\n                                                                  \u2193   \n                                         52 / ( 2 * ( 3 + 5 *     2     ) )\n                                                            \u2193\n                                         52 / ( 2 * ( 3 +   10          ) ) \n                                                    ---------------------\n                                                              \u2193 \n                                         52 / ( 2 *           13          )\n                                              -----------------------------\n                                                            \u2193 \n                                         52 /               26\n                                            \u2193 \n                                            2\n</code></pre> <p>La asociatividad puede ser relevante cuando hay operadores con la misma precedencia en una expresi\u00f3n. </p> <p>Si los operadores tienen la misma precedencia y asociatividad, la evaluaci\u00f3n se realiza de izquierda a derecha.</p> <p>Es importante tener en cuenta que las reglas de precedencia y asociatividad pueden modificarse utilizando par\u00e9ntesis para establecer un orden expl\u00edcito de evaluaci\u00f3n en una expresi\u00f3n.</p> <p>Veamos un ejemplo mucho m\u00e1s complejo:</p> <p>Consideremos la siguiente expresi\u00f3n, con n = 2:</p> <pre><code>15 + 59 * 75 / 9 &lt; 2 ** 3 ** 2 and (15 + 59) * 75 % n == 1\n                          \u2193  \n15 + 59 * 75 / 9 &lt; 2 **   9    and (15 + 59) * 75 % n == 1\n                     \u2193\n15 + 59 * 75 / 9 &lt;   512       and (15 + 59) * 75 % n == 1\n        \u2193\n15 +    4425 / 9 &lt;   512       and (15 + 59) * 75 % n == 1\n             \u2193\n15 +         491 &lt;   512       and (15 + 59) * 75 % n == 1\n   \u2193\n   506           &lt;   512       and (15 + 59) * 75 % n == 1\n                 \u2193\n                 False         and (15 + 59) * 75 % n == 1\n                                   ---------\n                                       \u2193\n                 False         and     74    * 75 % n == 1\n                                             \u2193\n                 False         and           5550 % n == 1\n                                                    \u2193\n                 False         and           5550 % 2 == 1\n                                                  \u2193\n                 False         and                0   == 1\n                                                      \u2193\n                 False         and                    False\n                               \u2193\n                               False\n</code></pre> <p>La operaci\u00f3n entre par\u00e9ntesis (15 + 59) debe ser evaluada antes de la multiplicaci\u00f3n por 75, ya que es necesario conocer su resultado para poder calcular el producto. El momento preciso en que ello ocurre no es importante.</p> <p>Lo mismo ocurre con la evaluaci\u00f3n de la variable n: s\u00f3lo importa que sea evaluada antes de ser usada por el operador de m\u00f3dulo.</p> <p>En el ejemplo, ambos casos fueron evaluados inmediatamente antes de que su valor sea necesario. El resultado de la expresi\u00f3n es False.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-simples-vs-expresiones-compuestas","title":"Expresiones simples vs. expresiones compuestas","text":"Expresiones simples<pre><code>// Expresi\u00f3n de asignaci\u00f3n:\nx = 10\n\n// Expresi\u00f3n aritm\u00e9tica:\n5 + 3\n\n// Expresi\u00f3n booleana:\ntrue &amp;&amp; false\n\n// Expresi\u00f3n de concatenaci\u00f3n de cadenas:\n\"Hola\" + \" \" + \"mundo\"\n\n// Expresi\u00f3n de comparaci\u00f3n:\n7 &gt; 3\n</code></pre> Expresiones compuestas<pre><code>// Expresi\u00f3n compuesta de asignaci\u00f3n:\nresultado = (x + y) * z\n\n// Expresi\u00f3n compuesta aritm\u00e9tica:\n(5 + 3) * (2 - 1)\n\n// Expresi\u00f3n compuesta booleana:\n(x &gt; 0) &amp;&amp; (y &lt; 10) || (z == 5)\n\n// Expresi\u00f3n compuesta de concatenaci\u00f3n de cadenas:\n\"Hola, \" + nombre + \". Tienes \" + edad + \" a\u00f1os.\"\n\n// Expresi\u00f3n compuesta de comparaci\u00f3n:\n(a &gt; b) &amp;&amp; (c != d) || (e &lt;= f)\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#preguntas-importantes-sobre-el-uso-de-parentesis-en-expresiones-compuestas","title":"Preguntas importantes sobre el uso de par\u00e9ntesis en expresiones compuestas","text":"<p>\u00a1Recordemos, pensemos!</p> <p>\u00bfQu\u00e9 significa linealizar una expresi\u00f3n? \u00bfPorqu\u00e9 se deben linealizar las expresiones? Linealizar una expresi\u00f3n significa expresarla en una sola l\u00ednea para lo cual se hace imprescindible la buena utilizaci\u00f3n de par\u00e9ntesis. Esta es una buena pr\u00e1ctica, debido a que los lenguajes de programaci\u00f3n a\u00fan no tienen integrada la facilidad de entender las expresiones tal como nosotros las entendemos. Por esta raz\u00f3n deben escribirse en una sola l\u00ednea para que puedan ser procesadas apropiadamente.</p> <p>\u00bfQu\u00e9 papel juegan los par\u00e9ntesis en la alteraci\u00f3n de jerarqu\u00eda de operadores en una expresi\u00f3n? Permiten la alteraci\u00f3n de la jerarqu\u00eda de operadores establecida para la resoluci\u00f3n de la expresi\u00f3n original de manera tal que se resuelvan las operaciones en un orden diferente, al dividirla en grupos de expresiones m\u00e1s peque\u00f1as que se resuelven primero, facilitando el entendimiento y la interpretaci\u00f3n global.</p> <p>Entonces, \u00bfCu\u00e1ndo se deben utilizar par\u00e9ntesis en una expresi\u00f3n? Toda vez que necesitemos alterar la jerarqu\u00eda original de operadores para que la computadora resuelva la expresi\u00f3n en un orden distinto al que se dar\u00eda con la aplicaci\u00f3n de la jerarqu\u00eda original.</p> <p>\u00bfCu\u00e1ntos par\u00e9ntesis se pueden involucrar en una expresi\u00f3n? Todos los que se necesiten. </p> <p>\u00bfQu\u00e9 pasa cuando faltan o sobran par\u00e9ntesis en una expresi\u00f3n? Se tiene un alto riesgo de que la computadora interprete la expresi\u00f3n de una manera diferente y resuelva las operaciones en un orden distinto al pensado. Debe tenerse en cuenta que en una expresi\u00f3n si sobran par\u00e9ntesis es muy posible que eso no genere dificultades en la interpretaci\u00f3n de la expresi\u00f3n, el gran problema se presentar\u00e1 si faltan.</p> <p>\u00bfC\u00f3mo se resuelve una expresi\u00f3n que contenga par\u00e9ntesis? Se resuelve comenzando desde los par\u00e9ntesis mas internos y aplicando dentro de ellos toda la jerarqu\u00eda est\u00e1ndar y, a medida que se van obteniendo valores parciales y por tanto se van eliminando los par\u00e9ntesis, se van resolviendo los par\u00e9ntesis externos con la misma filosof\u00eda de la jerarqu\u00eda de operadores est\u00e1ndar.</p> <p>\u00bfC\u00f3mo se resuelve la peque\u00f1a expresi\u00f3n que se encuentra dentro de un par\u00e9ntesis? Aplicando la jerarqu\u00eda est\u00e1ndar de operadores (revisa la tabla de jerarqu\u00edas si no la \u00a1Para recordar!s o tienes dudas).</p> <p>\u00a1Para recordar!</p> <p>Al escribir expresiones compuestas, debe ser expl\u00edcito e indicar entre par\u00e9ntesis qu\u00e9 operadores deben evaluarse primero. Esta pr\u00e1ctica har\u00e1 que tu c\u00f3digo sea m\u00e1s f\u00e1cil de leer y mantener.</p> <p>Tambi\u00e9n recuerda que las expresiones se eval\u00faan siguiendo ciertas reglas de precedencia y asociatividad. </p> <p>Es importante tener en cuenta estas reglas para obtener los resultados deseados al combinar diferentes operadores y expresiones en tus programas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-y-sentencias","title":"Expresiones y sentencias","text":"<p>Una expresi\u00f3n es siempre parte de una sentencia, tambi\u00e9n conocida como instrucci\u00f3n o declaraci\u00f3n. Incluso si es una sola expresi\u00f3n \u00fanicamente.</p> <p>Por lo tanto, las expresiones realizan el trabajo de un programa.  Entre otras cosas, las expresiones se utilizan para calcular y asignar valores a las variables y para ayudar a controlar el flujo de ejecuci\u00f3n del programa. </p> <p>El trabajo de una expresi\u00f3n es doble:  1. realizar el c\u00e1lculo indicado por los elementos de la expresi\u00f3n; y  1. devolver un valor que es el resultado de dicho c\u00e1lculo.</p> <p>Asi, cada expresi\u00f3n realiza una operaci\u00f3n y devuelve un valor:</p> Expresi\u00f3n Acci\u00f3n Valor devuelto char letra = \"S\u201d Asigna el caracter \"S\" a la variable letra El valor de letra luego de la asignaci\u00f3n esMayusculas(letra) llama a la funci\u00f3n esMayusculas con el argumento letra El valor de retorno: true \"La nota es \" + letra Concatena la cadena \"La nota es \" y el valor de letra La cadena resultante: \"La nota es S\" <p>El tipo de dato del valor devuelto por una expresi\u00f3n depender\u00e1 de los elementos utilizados en la expresi\u00f3n. La primera expresi\u00f3n devolver\u00e1 un caracter porque el operador de asignaci\u00f3n devuelve un valor del mismo tipo de dato que sus operandos. Como se puede ver en las otras expresiones, una expresi\u00f3n podr\u00e1 devolver un valor booleano o una cadena, entre otros resultados.</p> Python<pre><code>x = 5                    # Asignaci\u00f3n de un valor a la variable x\ny = 10                   # Asignaci\u00f3n de un valor a la variable y\nx = 5 + 3                # Suma\ny = 10 - 2               # Resta\nz = 4 * 6                # Multiplicaci\u00f3n\nw = 15 / 3               # Divisi\u00f3n\nz = x &gt; y                # Comprobaci\u00f3n si x es mayor que y\ny += 5                   # Incremento de la variable y en 5\nz = (x &gt; 0) and (y &lt; 20) # Comprobaci\u00f3n si x es mayor que 0 y sy y es menor que 20\n</code></pre> <p>\u00a1Para recordar!</p> <p>Cada operaci\u00f3n tiene su propia sintaxis y reglas de uso espec\u00edficas. </p> <p>Algunos lenguajes pueden tener reglas espec\u00edficas sobre el redondeo y el tratamiento de los n\u00fameros negativos.</p> <p>Es importante consultar la documentaci\u00f3n del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando para obtener informaci\u00f3n precisa sobre las operaciones disponibles y c\u00f3mo utilizarlas correctamente en tu programa. </p> <p>A continuaci\u00f3n, estudiaremos cada operador y como se comporta dentro de una determinada expresi\u00f3n. </p> <p>Veamos un ejemplo:</p> <pre><code>const precio = 500;\n</code></pre> <p>A juzgar por el c\u00f3digo anterior, const, precio, el s\u00edmbolo igual (=) y 500 son expresiones porque cada una de ellas tiene un significado o valor definido y \u00fanico. Pero si los tomamos todos juntos const price = 500, entonces tenemos una sentencia.</p> <p>Veamos otro ejemplo:</p> <pre><code>let multiplicar = function (numeroUno, numeroDos) {\n    return numeroUno * numeroDos;\n}\n</code></pre> <p>Mirando el c\u00f3digo anterior, podemos ver que una funci\u00f3n an\u00f3nima est\u00e1 asignada a una variable. A\u00fan no sabemos que es una funci\u00f3n, y adelant\u00e1ndote que cualquier funci\u00f3n es una sentencia, \u00bfpuede ser tambi\u00e9n una expresi\u00f3n?</p> <p>\u00a1Por supuesto! </p> <p>Una funci\u00f3n y una clase (veremos ambos conceptos m\u00e1s adelante) son sentencias y expresiones porque pueden realizar acciones (hacer o no hacer tareas) y aun as\u00ed ejecutarse y retornar un valor.</p> <p>Este concepto nos lleva a las sentencias. </p> <p>Entonces, \u00bfqu\u00e9 son las sentencias? Las veremos pr\u00f3ximamente. Por ahora, nos enfocaremos en las expresiones, aunque precisaremos interactuar con sentencias para poder entender perfectamente el rol que cumplen las expresiones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-con-operandos-con-diferentes-tipos-de-dato-casting","title":"Expresiones con operandos con diferentes tipos de dato (casting)","text":"<p>Algunas operaciones se llevan a cabo de manera directa y otras mediante una conversi\u00f3n (casting) impl\u00edcita de los tipos de dato, si es necesario, dependiendo de las reglas del lenguaje espec\u00edfico. </p> <p>As\u00ed, La manera en que se realizan las asignaciones puede variar seg\u00fan las operaciones y el tipo de dato utilizado.</p> Python<pre><code>x = 5\nx *= 3\nprint(x)  # Output: 15\n</code></pre> <p>En este ejemplo, se inicializa la variable x con el valor 5. Luego, se utiliza el operador (*=) para multiplicar x por 3 y almacenar el resultado nuevamente en x. Despu\u00e9s de la operaci\u00f3n, el valor de x se actualiza a 15.</p> Python<pre><code>x = 10\nx /= 2\nprint(x)  # Output: 5.0\n</code></pre> <p>En este ejemplo, se inicializa la variable x con el valor 10. Luego, se utiliza el operador (/=) para dividir x entre 2 y almacenar el resultado nuevamente en x. Despu\u00e9s de la operaci\u00f3n, el valor de x se actualiza a 5.0, ya que la divisi\u00f3n de dos enteros en Python produce un resultado en punto flotante.</p> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que estos operadores se pueden utilizar con diferentes tipos de dato, valores num\u00e9ricos o expresiones v\u00e1lidas que el lenguaje de programaci\u00f3n permita. </p> <p>Por ejemplo, en Python, se puede utilizar con n\u00fameros, cadenas de caracteres y listas, entre otros tipos de dato.</p> <p>Elaborar el siguiente material</p> <ul> <li>Expresiones condicionales</li> <li>Operador ternario (condici\u00f3n ? expresi\u00f3n1 : expresi\u00f3n2)</li> <li>Expresiones y evaluaci\u00f3n de expresiones</li> <li>Composici\u00f3n de expresiones utilizando operadores y variables</li> <li>Orden de evaluaci\u00f3n de operaciones</li> <li>Operadores bit a bit</li> <li>Operador AND bit a bit (&amp;)</li> <li>Operador OR bit a bit (|)</li> <li>Operador XOR bit a bit (^)</li> <li>Operador desplazamiento a la izquierda (&lt;&lt;)</li> <li>Operador desplazamiento a la derecha (&gt;&gt;)</li> </ul> <p>Ejemplos:</p> <p>Expresi\u00f3n de llamada a funci\u00f3n: calcularPromedio(80, 95, 75) Expresi\u00f3n de acceso a elemento: array[2]</p> <p>\u00a1Para recordar!</p> <p>Estos son solo ejemplos simples de expresiones en programaci\u00f3n. recuerda que las expresiones pueden volverse m\u00e1s complejas y combinar diferentes operadores y elementos para realizar c\u00e1lculos y tomar decisiones en tus programas.</p> <p>Las expresiones compuestas son combinaciones m\u00e1s complejas de expresiones simples que se utilizan para realizar operaciones m\u00e1s avanzadas:</p> <p>Expresi\u00f3n compuesta de bucle while: while (i &lt; 10 &amp;&amp; !terminado) {   // c\u00f3digo a repetir mientras se cumpla la condici\u00f3n   i++ }</p> <p>Expresi\u00f3n compuesta de llamada a funci\u00f3n: calcularPromedio(nota(\"Matem\u00e1ticas\"), nota(\"F\u00edsica\")) Expresi\u00f3n compuesta de acceso a elemento: valor = array[indice] + matriz[fila][columna]</p> <p>Expresi\u00f3n compuesta condicional (if-else): if (x &gt; 0 &amp;&amp; y &lt; 10) {   // c\u00f3digo a ejecutar si se cumple la condici\u00f3n } else {   // c\u00f3digo a ejecutar si no se cumple la condici\u00f3n }</p> <p>\u00a1Para recordar!</p> <p>Estos son solo ejemplos de expresiones compuestas en programaci\u00f3n. Puedes combinar expresiones simples utilizando operadores y agrupando las expresiones con par\u00e9ntesis para obtener resultados m\u00e1s complejos y realizar tareas m\u00e1s avanzadas en tus programas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#ejercicios-de-aplicacion","title":"Ejercicios de aplicaci\u00f3n","text":"<ol> <li> <p>Escribe un programa que escriba en la pantalla el resultado de sumar 3 + 5.</p> Ver soluci\u00f3n propuesta Python<pre><code># Ejemplo 1\nsuma = 3 + 5\nprint(suma)\n\n# Ejemplo 2\nprint(\"Suma 3 + 5 = \", 3 + 5)\n\n# Ejemplo 3\nprint(\"Resultado de sumar 3 + 5:\", end=\"\")\nprint(3 + 5)\n\n# Ejemplo 4\nprint(\"Resultado de sumar 3 + 5: \" + str(3 + 5))\n</code></pre> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/introduccion-expresiones-sentencias-bloques/","title":"Expresiones, sentencias y bloques de sentencias","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/introduccion-expresiones-sentencias-bloques/#introduccion","title":"Introducci\u00f3n","text":"<p>Los operandos (variables, constantes literales o resultados de una llamada a funci\u00f3n o m\u00e9todo) y los operadores son componentes b\u00e1sicos de un programa. </p> <p>Solos, o al combinarlos con operadores se pueden formar expresiones: segmentos de c\u00f3digo que realizan c\u00e1lculos y devuelven valores. </p> <p>Los operadores son s\u00edmbolos especiales que se utilizan para realizar diferentes operaciones con los datos.</p> <p>Entonces, las expresiones est\u00e1n formadas por una combinaci\u00f3n de valores, variables y operadores que se eval\u00faan para producir un resultado.</p> <p>Ciertas expresiones se pueden convertir en sentencias: unidades completas de ejecuci\u00f3n que permiten ejecutar una determinada acci\u00f3n. </p> <p>Seg\u00fan el lenguaje de programaci\u00f3n, al agrupar sentencias entre llaves { } o indentando (tabulando) un grupo de sentencias se crean bloques de c\u00f3digo dentro de un programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/introduccion-expresiones-sentencias-bloques/#expresiones-o-sentencias","title":"\u00bfExpresiones o sentencias?","text":"<p>Aprender la sintaxis de un lenguaje de programaci\u00f3n es clave si desea utilizar ese lenguaje de manera efectiva. </p> <p>Esto es cierto tanto para los desarrolladores nuevos como para los experimentados.</p> <p>Y una de las cosas m\u00e1s importantes a las que debe prestar atenci\u00f3n mientras aprende un lenguaje de programaci\u00f3n es si el c\u00f3digo con el que est\u00e1 tratando es una expresi\u00f3n o una sentencia.</p> <pre><code>const\nlet\nlet multiplicar = function (numeroUno, numeroDos) {\n    return numeroUno * numeroDos;\n}\ntrue, false\n2, 4, s, a\nconst price = 500;\n</code></pre> <p>A veces puede ser confuso diferenciar entre sentencias y expresiones en programaci\u00f3n. Por lo tanto, trataremos de simplificar las diferencias para que puedas mejorar tus habilidades de programaci\u00f3n y convertirte en un mejor desarrollador de software.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/resumen-de-expresiones-sentencias-bloques/","title":"Expresiones, sentencias y bloques de sentencias: resumen","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/resumen-de-expresiones-sentencias-bloques/#expresiones","title":"Expresiones","text":"<p>Una expresi\u00f3n est\u00e1 conformada por un operando (variable, constante literal o resultado de una llamada a funci\u00f3n o m\u00e9todo) o la combinaci\u00f3n de uno o m\u00e1s operandos y operadores (aritm\u00e9ticos, l\u00f3gicos o relacionales), construida de acuerdo con la sintaxis del lenguaje, que, al ser procesada (evaluada o sometida a un c\u00e1lculo u operaci\u00f3n), devuelve como resultado un valor.</p> <p>Por lo tanto, el resultado de una expresi\u00f3n se puede calcular realizando las operaciones en el orden dictado por la precedencia de los operadores.</p> <p>Las expresiones realizan el trabajo de un programa. Entre otras cosas, las expresiones se utilizan para calcular y asignar valores a las variables y para ayudar a controlar el flujo de ejecuci\u00f3n de un programa. </p> <p>El trabajo de una expresi\u00f3n es doble:  * realizar el c\u00e1lculo indicado por los elementos de la expresi\u00f3n; y  * devolver un valor que es el resultado de dicho c\u00e1lculo.</p> <p>Una expresi\u00f3n v\u00e1lida puede ser simple o compleja. Tambi\u00e9n puede haber una expresi\u00f3n como parte de otra, o como argumento de una funci\u00f3n. Esto se denomina anidamiento de una expresi\u00f3n.</p> <ul> <li>Expresiones con operadores de asignaci\u00f3n</li> <li>Expresiones con operadores aritm\u00e9ticos</li> <li>Expresiones con operadores de comparaci\u00f3n</li> <li>Expresiones con operadores de concatenaci\u00f3n</li> <li>Expresiones con operadores de repetici\u00f3n</li> <li>Expresiones con operadores l\u00f3gicos</li> <li>Expresiones con operadores de incremento</li> <li>Expresiones con operadores de decremento</li> </ul> <p>Puede escribir expresiones compuestas combinando expresiones siempre que los tipos de dato requeridos por todos los operadores involucrados en la expresi\u00f3n compuesta sean correctos. </p> <p>Al escribir expresiones compuestas, debe ser expl\u00edcito e indicar entre par\u00e9ntesis qu\u00e9 operadores deben evaluarse primero. Si elige no usar par\u00e9ntesis, se eval\u00faa la expresi\u00f3n compuesta en el orden dictado por la precedencia del operador. </p> <p>Puedes combinar expresiones simples utilizando operadores y agrupando las expresiones con par\u00e9ntesis para obtener resultados m\u00e1s complejos y realizar tareas m\u00e1s avanzadas en tus programas.</p> <p>Llamamos expresiones literales al ejemplo m\u00e1s simple de expresi\u00f3n que representa directamente a su valor. </p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis aunque los conceptos b\u00e1sicos se mantienen consistentes en la mayor\u00eda de los casos.</p> <p>Cuando las expresiones contienen operandos de diferentes tipos de dato, algunas operaciones se llevan a cabo de manera directa y otras mediante una conversi\u00f3n (casting) impl\u00edcita de estos tipos de dato, si es necesario, dependiendo de las reglas del lenguaje espec\u00edfico. As\u00ed, La manera en que se realizan las asignaciones puede variar seg\u00fan las operaciones y el tipo de dato utilizado.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/resumen-de-expresiones-sentencias-bloques/#sentencias","title":"Sentencias","text":"<p>Una expresi\u00f3n es siempre parte de una sentencia, tambi\u00e9n conocida como instrucci\u00f3n o declaraci\u00f3n. Incluso si es solo una expresi\u00f3n \u00fanicamente.</p> <p>Una sentencia es un conjunto de expresiones que permiten ejecutar una determinada acci\u00f3n y, dependiendo del lenguaje de programaci\u00f3n, es necesario que termine con un punto y coma. </p> <p>Las sentencias m\u00e1s comunes son:  * sentencias de declaraci\u00f3n * sentencias de expresi\u00f3n * sentencias de flujo de control</p> <p>En t\u00e9rminos generales, una sentencia es una unidad de instrucciones con significado completo (tambi\u00e9n llamada l\u00ednea de c\u00f3digo), que puede ser comprendida en el contexto del lenguaje natural o interpretada y ejecutada por un programa inform\u00e1tico, cuya acci\u00f3n resuelve una parte o la totalidad de un problema.  Cada sentencia, siempre, contiene una o m\u00e1s expresiones.</p> <ul> <li>Las expresiones que son procesadas siempre retornan un valor. </li> <li>Cada sentencia, siempre, contiene una o m\u00e1s expresiones.</li> <li>Un programa consiste en una serie de sentencias.</li> </ul> <p>Estos son algunos de los tipos de sentencias m\u00e1s utilizados en programaci\u00f3n:</p> <ul> <li>Sentencias de declaraci\u00f3n (declaration statements)  </li> <li>Sentencias de inicializaci\u00f3n (inline initialization statements)  </li> <li>Sentencias de asignaci\u00f3n (assignment statements)  </li> <li>Sentencias de expresi\u00f3n (expression statements) </li> <li>Sentencias de control de flujo (flow control statements)<ul> <li>Sentencias de selecci\u00f3n (selection statements) </li> <li>Sentencias de iteraci\u00f3n (iteration statements) </li> <li>Sentencias de salto (jump statements) </li> <li>Sentencias de manejo de excepciones (exception handling statements)</li> </ul> </li> <li>Sentencias etiquetadas (labeled statements) </li> <li>Sentencias de llamada a funci\u00f3n (function call statements)</li> <li>sentencias compuestas (compound statements) </li> </ul> <p>\u00a1Para recordar!</p> <p>Puedes agrupar dos o m\u00e1s sentencias juntas en un bloque con llaves ( { } ) o indentando (tabulando), seg\u00fan el lenguaje de programaci\u00f3n en cuesti\u00f3n, formando el bloque de sentencias correspondiente.</p> <p>Aunque no es obligatorio, se recomienda usar bloques en las sentencias de control de flujo, a\u00fan si solo hay una sentencia en el bloque. Esto permite una lectura m\u00e1s agil y ordenda del programa.</p> <p>Es importante siempre consultar la documentaci\u00f3n del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando para obtener informaci\u00f3n precisa sobre las operaciones disponibles y c\u00f3mo utilizarlas correctamente en tu programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/","title":"Sentencias de un programa","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#introduccion","title":"Introducci\u00f3n","text":"<p>En programaci\u00f3n, una sentencia significa cualquier l\u00ednea de c\u00f3digo que instruye al compilador para realizar una tarea espec\u00edfica. </p> <p>Un programa de computadora es un conjunto de sentencias. </p> <p>Tambi\u00e9n se las llama instrucciones (y hasta declaraciones).</p> <p>Puede haber varios tipos de sentencias en un c\u00f3digo que controlen la entrada y salida de las acciones y los procesos para los que est\u00e1 dise\u00f1ado un programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#que-es-una-sentencia","title":"\u00bfQu\u00e9 es una sentencia?","text":"<p>Definici\u00f3n</p> <p>Las sentencias (en ingl\u00e9s statements) son aproximadamente equivalentes a oraciones en lenguajes naturales. Tambi\u00e9n se las conoce como instrucciones (y en algunos casos, hasta como declaraciones) y cada una forma una unidad completa de ejecuci\u00f3n. </p> <p>As\u00ed, una sentencia es un conjunto de expresiones que permiten ejecutar una determinada acci\u00f3n.</p> <p>M\u00e1s simplificadamente, una sentencia es un grupo de expresiones y/o sentencias que es dise\u00f1ada para llevar a cabo una tarea o una acci\u00f3n.</p> <p>Una sentencia es una declaraci\u00f3n completa y coherente que expresa una idea o un comando en un lenguaje de programaci\u00f3n o en lenguaje natural.</p> <p>En el contexto de la programaci\u00f3n, una sentencia es una unidad b\u00e1sica de ejecuci\u00f3n que realiza una acci\u00f3n o produce un resultado. Puede ser una instrucci\u00f3n simple, como asignar un valor a una variable o mostrar un mensaje en pantalla, o una instrucci\u00f3n m\u00e1s compleja, como una estructura de control (por ejemplo, un bucle o una declaraci\u00f3n condicional) que controla el flujo de ejecuci\u00f3n del programa.</p> <p>En el contexto del lenguaje natural, una sentencia es una expresi\u00f3n gramaticalmente completa que comunica una idea o informaci\u00f3n espec\u00edfica. Por ejemplo, \"El perro est\u00e1 corriendo\" o \"Me gustar\u00eda una taza de caf\u00e9\". En este caso, una sentencia puede constar de una o varias oraciones.</p> <p>Cuando escribimos un programa, lo que hacemos es dar instrucciones a la computadora para que resuelva un problema de una manera determinada. </p> <p>Cada l\u00ednea de c\u00f3digo que escribimos (salvo unas cuantas excepciones) no es m\u00e1s que la instrucci\u00f3n u orden que damos para que se lleve a cabo una acci\u00f3n determinada. Es por eso que sentencia e instrucci\u00f3n suelen utilizarse para referirse a lo mismo.</p> <p>Es el programa de computadora que le dice a la computadora que realice o tome acci\u00f3n. Una declaraci\u00f3n puede ser un conjunto de s\u00edmbolos, n\u00fameros o mnem\u00f3nico utilizados en un programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#cual-es-el-rol-de-una-sentencia-en-un-programa","title":"\u00bf Cu\u00e1l es el rol de una sentencia en un programa?","text":"<p>Un lenguaje en mnem\u00f3nico o lista de instrucciones consiste en un conjunto de c\u00f3digos simb\u00f3licos, cada uno de los cuales corresponde a una instrucci\u00f3n en lenguaje de m\u00e1quina. Es de aqu\u00ed de donde se aplica el concepto de lenguaje ensamblador.</p> <p></p> <p>\u00a1Para recordar!</p> <p>Cuando escribimos un programa, lo que hacemos es dar instrucciones a la computadora para que resuelva un problema de una manera determinada. </p> <p>Cada l\u00ednea de c\u00f3digo que escribimos (salvo unas cuantas excepciones) no es m\u00e1s que la instrucci\u00f3n u orden que damos para que se lleve a cabo una acci\u00f3n determinada. Es por eso que sentencia e instrucci\u00f3n suelen utilizarse para referirse a lo mismo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-por-todos-lados-donde","title":"Sentencias por todos lados\u2026 \u00bfd\u00f3nde?","text":"<p>Las sentencias se ense\u00f1an en diferentes temas relacionados con la programaci\u00f3n. Algunos de estos temas son:</p> <ul> <li>Introducci\u00f3n a la programaci\u00f3n: se ense\u00f1an como parte fundamental del lenguaje de programaci\u00f3n, aprendiendo c\u00f3mo escribir y utilizar sentencias b\u00e1sicas como la declaraci\u00f3n de variables, la asignaci\u00f3n de valores y la ejecuci\u00f3n de operaciones aritm\u00e9ticas y de comparaci\u00f3n.</li> <li>Estructuras de control: las sentencias de control de flujo condicional (if, else, else if, switch) y de bucles (for, while) se ense\u00f1an para tomar decisiones y repetir bloques de c\u00f3digo seg\u00fan ciertas condiciones, aprendiendo como guiar y controlar el flujo de ejecuci\u00f3n de un programa.</li> <li>Funciones y procedimientos: estas sentencias se ense\u00f1an en el contexto de definir y utilizar funciones y procedimientos, aprendiendo a escribir sentencias dentro de funciones para realizar tareas espec\u00edficas y reutilizables a lo largo de la ejecuci\u00f3n de un programa.</li> <li>Estructuras de datos: en el contexto de las estructuras de datos, las sentencias se ense\u00f1an en relaci\u00f3n con la manipulaci\u00f3n y el acceso a los elementos de una estructura de datos, como listas, arrays o diccionarios, aprendiendo a utilizar sentencias para agregar, eliminar, buscar y modificar elementos en estas estructuras.</li> <li>Programaci\u00f3n orientada a objetos: en la programaci\u00f3n orientada a objetos, estas sentencias se ense\u00f1an en relaci\u00f3n con la definici\u00f3n y el uso de clases y objetos, aprendiendo a escribir sentencias dentro de m\u00e9todos de clase para describir el comportamiento y las acciones de los objetos.</li> <li>Gesti\u00f3n de errores y excepciones: estas sentencias se ense\u00f1an en relaci\u00f3n con la gesti\u00f3n de errores y excepciones en un programa, aprendiendo a utilizar sentencias como try, except y finally para manejar situaciones excepcionales y evitar que un error interrumpa la ejecuci\u00f3n del programa.</li> </ul> <p>Estos son solo algunos de los temas principales en los que se ense\u00f1an las sentencias en programaci\u00f3n, existiendo otros temas adicionales donde se aborden las sentencias de manera m\u00e1s espec\u00edfica y avanzada.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#tipos-de-sentencias","title":"Tipos de sentencias","text":"<p>Las sentencias puede ser de dos clases: * Sentencias que hacen tareas * Sentencias que no hacen tareas</p> <p>Pero a su vez, un programa consta de varios tipos de sentencias.  </p> <p>Mientras que las sentencias de asignaci\u00f3n y declaraci\u00f3n ayudan a una variable a comprender su tipo de dato y asignar su valor, las sentencias de control de flujo dirigen la secuencia de ejecuci\u00f3n del programa.  </p> <p>Cada lenguaje de programaci\u00f3n tiene su propio formato y sintaxis que debe seguir el programador mientras escribe el c\u00f3digo. Hay esencialmente nueve tipos de declaraciones de programaci\u00f3n. Echemos un vistazo:</p> <ul> <li>Sentencias de declaraci\u00f3n (declaration statements)  </li> <li>Sentencias de inicializaci\u00f3n (inline initialization statements)  </li> <li>Sentencias de asignaci\u00f3n (assignment statements)  </li> <li>Sentencias de expresi\u00f3n (expression statements) </li> <li>Sentencias de control de flujo (flow control statements)<ul> <li>Sentencias de selecci\u00f3n (selection statements) </li> <li>Sentencias de iteraci\u00f3n (iteration statements) </li> <li>Sentencias de salto (jump statements) </li> <li>Sentencias de manejo de excepciones (exception handling statements)</li> </ul> </li> <li>Sentencias etiquetadas (labeled statements) </li> <li>Sentencias de llamada a funci\u00f3n (function call statements)</li> <li>sentencias compuestas (compound statements) </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-declaracion","title":"Sentencias de declaraci\u00f3n","text":"<p>Se utilizan para declarar una variable o una constante en el programa.</p> C\u00f3digo generalizado<pre><code>let variable_declarada; // una declaraci\u00f3n de una variable es una sentencia\nint age;\nconst PI = 3.14159;\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-inicializacion","title":"Sentencias de inicializaci\u00f3n","text":"<p>Se utilizan para inicializar una variable en el programa. Este tipo de sentencias se encuentra dentro de las sentencias de declaraci\u00f3n.</p> C\u00f3digo generalizado<pre><code>let otra_variable_declarada = 0; // una inicializaci\u00f3n de variable tambi\u00e9n es una sentencia\nint age = 15;\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-asignacion","title":"Sentencias de asignaci\u00f3n","text":"<p>Se utilizan para asignar un valor a una variable. </p> C\u00f3digo generalizado<pre><code>x = 5;\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-expresion","title":"Sentencias de expresi\u00f3n","text":"<p>Se utilizan para realizar una operaci\u00f3n o proceso o evaluar una expresi\u00f3n. </p> <p>Los comandos de entrada/salida, como las declaraciones print e input, son un ejemplo t\u00edpico de declaraciones de expresi\u00f3n. </p> C\u00f3digo generalizado<pre><code>y = x + 3;\nprint(\"El resultado de x + 3 es \u201d + y);\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-control-de-flujo","title":"Sentencias de control de flujo","text":"<p>Las sentencias de control de flujo modifican la ejecuci\u00f3n secuencial de las sentencias que forman el programa.</p> <p>Las estudiaremos en profundidad m\u00e1s adelente. Por el momento, solo haremos una breve menci\u00f3n.</p> <p>Se clasifican en cuatro grupos:</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-seleccion","title":"Sentencias de selecci\u00f3n","text":"<p>Se utilizan para ejecutar selectivamente un conjunto de sentencias, seg\u00fan se satisfaga o no una condici\u00f3n.</p> <ul> <li> <p>control de flujo condicional if | if \u2026 else | if \u2026 else anidada</p> C\u00f3digo generalizado<pre><code>if (x &gt; 10) {\nprint (\"El n\u00famero es mayor a 10.\")\n}\n\nif (x &gt; 10) {\nprint (\"El n\u00famero es mayor a 10.\")\n} else {\nprint (\"El n\u00famero no es mayor a 10.\")\n}\n\nif (x &gt; 10) {\nprint (\"El n\u00famero es mayor a 10.\")\n} else if (x == 10) {\nprint (\"El n\u00famero es igual a 10.\")\n} else {\nprint (\"El n\u00famero no es mayor y no es igual a 10. Es menor.\")\n}\n</code></pre> </li> <li> <p>control de flujo condicional switch</p> C\u00f3digo generalizado<pre><code>int opcion = 2;\n\nswitch (opcion) {\n    case 1:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 1.\");\n        break;\n\n    case 2:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 2.\");\n\n    default:\n        print(\"Esta rama de flujo del programa se recorre por defecto si no hay una opci\u00f3n case que concuerde.\");\n        break;   \n}   \n</code></pre> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-iteracion","title":"Sentencias de iteraci\u00f3n","text":"<p>Se utilizan para seguir ejecutando una sentencia o un bloque de sentencias mientras se cumpla o hasta que se cumpla una cierta condici\u00f3n. </p> <ul> <li> <p>bucle o ciclo cerrado for \u2026 next </p> C\u00f3digo generalizado<pre><code>for (i = 1; i &lt;= 5; i++) {\n    print (i);\n} // la llave cerrada representa next i\n</code></pre> </li> <li> <p>bucle o ciclo abierto while \u2026 loop | until \u2026 loop | do \u2026 loop while | do \u2026 loop until</p> C\u00f3digo generalizado<pre><code>j = 0;\nwhile (j &lt; 5) {\n    print (j);\n    j++;\n} // la llave cerrada representa loop\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\nj = 0;\nuntil (j &gt;= 5) {\n    print (j);\n    j++;\n} // la llave cerrada representa loop    \n</code></pre> C\u00f3digo generalizado<pre><code>do {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop while (n != 0)\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\ndo {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop until (n == 0)\n</code></pre> <p>Como se puede observar, la palabra reservada <code>while</code> est\u00e1 de un color mientras que <code>until</code> no lo est\u00e1. Esto se debe a que no es com\u00fan encontrar disponible la segunda opci\u00f3n en la mayor\u00eda de los lenguajes. Sin embargo, corresponde informar acerca de su existencia ya que en caso de existir, es v\u00e1lido utilizarla si con ella se mejora la formulaci\u00f3n de la condici\u00f3n de repitancia del ciclo.</p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-salto","title":"Sentencias de salto","text":"<p>Tambi\u00e9n conocidas como sentencias de decisi\u00f3n o branching, se utilizan para salir de un bucle o de una funci\u00f3n antes de que se complete; o para transferir el control de flujo a otro punto del programa.</p> <p>Es decir, que se utilizan para alterar de manera incondicional el orden de ejecuci\u00f3n de las sentencias de un programa. S\u00f3lo deber\u00edan utilizarse con el fin de simplificar o mejorar los algoritmos.</p> <ul> <li> <p>break | continue</p> C\u00f3digo generalizado<pre><code>for (i = 1; i &lt;= 5; i++) {\nif (i == 3) break\nprint (i)\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\n</code></pre> C\u00f3digo generalizado<pre><code>C\u00f3digo generalizado\nfor (i = 1; i &lt;= 5; i++) {\nif (i == 3) continue\nprint (i)\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\n4\n5\n</code></pre> </li> <li> <p>goto</p> C\u00f3digo generalizado<pre><code>ejecutar_salto = true;\nif (ejecutar_salto) {\ngoto etiqueta_de_salto; \n}\netiqueta_de_salto:\n    print(\"El salto se efectu\u00f3 con \u00e9xito!\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>El salto se efectu\u00f3 con \u00e9xito!\n</code></pre> </li> <li> <p>return</p> C\u00f3digo generalizado<pre><code>a = 3, b = 4;\nresultado = multiplicar(a, b);\nprint(\"El resultado de de 3 x 4 es \u201d + resultado);\nfunction multiplicar(a, b) {\nreturn a * b;\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>El resultado de de 3 x 4 es 12\n</code></pre> <p>!Muy importante \u00a1Para recordar!!</p> <p>Al usar sentencias de salto, todo programador debe tener en cuenta que cuando el control salta fuera de un bloque o bucle, puede implicar la destrucci\u00f3n que todo lo que se haya declarado en el \u00e1mbito local. </p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-manejo-de-excepciones","title":"Sentencias de manejo de excepciones","text":"<p>El manejo de excepciones es un tipo de t\u00e9cnica de programaci\u00f3n que se utiliza para tratar los errores de ejecuci\u00f3n. Consiste en detectar cualquier error que se produzca durante la ejecuci\u00f3n del programa y responder adecuadamente en lugar de finalizar abruptamente y de manera inadecuada el programa.</p> <ul> <li> <p>try \u2026 catch \u2026 finally</p> <p><code>js title=\"</code></p> </li> <li> <p>throw</p> <p><code>js title=\"</code></p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-etiquetadas","title":"Sentencias etiquetadas","text":"<p>Suelen contener una etiqueta y se utilizan para dirigir el flujo de ejecuci\u00f3n de un programa. </p> <p>Las etiquetas se utilizan para identificar una ubicaci\u00f3n en el c\u00f3digo, solicitada a partir del redireccionamiento del control de flujo. </p> <p>Puede ser una etiqueta de caso (case) o una etiqueta predeterminada (default) en una declaraci\u00f3n switch. </p> <p>Dependiendo del lenguaje de programaci\u00f3n, generalmente se utilizan los dos puntos ( : ) para definirlas. </p> C\u00f3digo generalizado<pre><code>int opcion = 2;\nswitch (opcion) {\n    case 1:\n      print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 1.\");\n      break;\n\n    case 2:\n      print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 2.\");\n      goto end_switch;\n\n    default:\n      print(\"Esta rama de flujo del programa se recorre por defecto si no hay una opci\u00f3n case que concuerde.\");\n      break;   \n}  \nend_switch:\n    print(\"Declaraci\u00f3n switch completada!\");\n</code></pre> <p>Aqu\u00ed, el control del programa saltar\u00e1 a case 2 y luego saltar\u00e1 a la etiqueta end_switch.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-llamada-a-funcion","title":"Sentencias de llamada a funci\u00f3n","text":"<p>Se utilizan para llamar a una funci\u00f3n, con la posibilidad de pasarle argumentos para realizar una acci\u00f3n determinada y luego recibir un valor retornado desde dicha funci\u00f3n para ser utilizado de alguna manera.</p> C\u00f3digo generalizado<pre><code>function una_funcion_cualquiera() { \u2026 } // una declaraci\u00f3n de funci\u00f3n es una sentencia\n\nprint (variable_declarada) // una funci\u00f3n predefinida (palabra reservada) del lenguaje es una sentencia\n\nfunction calcular_promedio(lista_de_valores) {\n   int suma_de_valores = 0\n\n   for (valor in lista_de_valores) {\n      suma_de_valores += valor  \n   }\n\n   // esta l\u00ednea devuelve la suma de valores dividida por la cantidad de valores    \n   return suma_de_valores / lista_de_valores.length()\n}\n\n\u2026\n\npromedio = calcular_promedio([2, 4, 6, 8])\n\nprint(\"El promedio de 2, 4, 6 y 8 es \" + promedio)\n</code></pre> Terminal (Entrada/Salida)<pre><code>El promedio de 2, 4, 6 y 8 es 5\n</code></pre> <p>length() es un m\u00e9todo que devuelve la cantidad de elementos que contiene. Por el momento no te preocupes por la terminolog\u00eda o su funcionamiento.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-compuestas","title":"sentencias compuestas","text":"<p>chequear este item</p> <p>Es un grupo de sentencias combinadas, tambi\u00e9n conocido como bloque de sentencias (statement block). Los programas generalmente necesitan llaves para vincular m\u00e1s de una declaraci\u00f3n, formando una sentencia compuesta.  </p> <p>Pueden contener (secuencias de) declaraciones, anidadas a cualquier profundidad razonable, y generalmente involucran pruebas para decidir si obedecer o repetir estas declaraciones contenidas.</p> <p>Adem\u00e1s, las variables que se declaran entre llaves tienen un alcance limitado solo a ese bloque.  </p> C\u00f3digo generalizado<pre><code>y = x + 3;\nprint(\"El resultado de x + 3 es \u201d + y);\n</code></pre> <p>Esto est\u00e1 bien?</p> <p>Cualquier sentencia que pueda devolver un valor se califica autom\u00e1ticamente como una expresi\u00f3n. Es por eso que una funci\u00f3n o  clase puede ser una sentencia y tambi\u00e9n una expresi\u00f3n.</p> <pre><code>let multiplicar = function (numeroUno, numeroDos) {\n    return numeroUno * numeroDos;\n}\n</code></pre> <p>Si se observa el ejemplo anterior, se puede ver que se asigna y ejecuta a un valor pasado a una variable. Por eso es una expresi\u00f3n en ese caso.</p> <p>\u00a1Para recordar!</p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis y conjunto de sentencias disponibles, pudiendo existir otros tipos m\u00e1s especializados y propios de cada lenguaje; aunque los conceptos b\u00e1sicos se mantienen consistentes en la mayor\u00eda de los casos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#que-es-el-terminador-de-sentencias","title":"\u00bfQu\u00e9 es el terminador de sentencias?","text":"<p>El t\u00e9rmino terminador de sentencias generalmente se refiere a un car\u00e1cter especial o secuencia de caracteres utilizados para indicar el final de una sentencia en un lenguaje de programaci\u00f3n o en un lenguaje de consulta. </p> <p>Para recordar</p> <p>El terminador de sentencias se coloca al final de cada sentencia para indicar que se ha completado su ejecuci\u00f3n y que la siguiente sentencia puede comenzar a ejecutarse.</p> <p>Algunos ejemplos comunes de terminadores de sentencias son:</p> <ul> <li> <p>Punto y coma: es utilizado en lenguajes como C, C++, Java y JavaScript para finalizar y separar las sentencias.</p> JavaScript<pre><code>var x = 5;\nconsole.log(x);\n</code></pre> </li> <li> <p>Salto de l\u00ednea: en lenguajes como Python y Ruby, no es necesario un terminador de sentencias expl\u00edcito.  En su lugar, se utiliza un salto de l\u00ednea para indicar el final de una sentencia.</p> Python<pre><code>x = 5\nprint(x)\n</code></pre> </li> </ul> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que el uso del terminador de sentencias puede variar seg\u00fan el lenguaje de programaci\u00f3n o consulta que est\u00e9s utilizando. Algunos lenguajes pueden tener reglas espec\u00edficas para el uso del terminador de sentencias, mientras que otros pueden ser m\u00e1s flexibles en cuanto a su presencia o ausencia. </p> <p>Es recomendable consultar la documentaci\u00f3n del lenguaje espec\u00edfico que est\u00e9s utilizando para comprender c\u00f3mo se utiliza el terminador de sentencias en ese contexto.</p> <p>Para recordar</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, dependiendo de su sintaxis, se debe colocar un punto y coma ( ; ) al final de cada sentencia para indicar su finalizaci\u00f3n.  Pero en otros no es obligatorio. Simplemente, con un salto de l\u00ednea alcanza.</p> <p>Para saber si debemos hacerlo, ser\u00e1 necesario consultar el manual del lenguaje en cuesti\u00f3n. </p> <p>Es importante recordar que NO se coloca el punto y coma (;) cuando la l\u00ednea de comandos abre o cierra un bloque de c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#que-es-una-sentencias-en-linea-inline-statement","title":"\u00bfQu\u00e9 es una sentencias en l\u00ednea (inline statement)?","text":"<pre><code>let cantidad = 2000;\n</code></pre> <p>Todo el c\u00f3digo anterior es una sentencia porque lleva a cabo la tarea de asignar el valor 2000 a la variable cantidad. Es seguro decir que una l\u00ednea de c\u00f3digo es una sentencia porque la mayor\u00eda de los compiladores o int\u00e9rpretes no ejecutan ninguna expresi\u00f3n de manera independiente.</p> <p>Una sentencia de declaraci\u00f3n declara una variable:</p> <pre><code>int valor; // Declaraci\u00f3n una variable llamada valor de tipo entero\n</code></pre> <p>Los siguientes tipos de expresiones se pueden convertir en una sentencia terminando la expresi\u00f3n con un punto y coma:</p> <pre><code>valor = 45; // Expresiones de asignaci\u00f3n\nvalor++; // Uso de operadores incrementales (++) o decrementales (--)\nimprimir_en_pantalla(valor); // Llamadas a m\u00e9todos\nint objetoEntero = new ObjetoEntero(valor); // Expresiones de creaci\u00f3n de objetos\n</code></pre> <p>Una sentencia de flujo de control regula el orden en que se ejecutan las declaraciones. Los ciclos y las alternativas condicionales son ejemplos de sentencias de flujo de control. Estas, por su sintaxis, requieren ser escritas utilizando bloques de sentencias.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/ejercitacion/ejercitacion-basica-expresiones/","title":"Expresiones: ejercitaci\u00f3n b\u00e1sica","text":"<p>Estos ejercicios deber\u00edan ayudarte a familiarizarte con los operadores y las expresiones. \u00a1Buena suerte!</p> <ol> <li> <p>Resuelve las siguientes expresiones indicando el valor que ser\u00e1 almacenado en x:</p> <pre><code>x = 5 + 3   Ver resultado#(1)!\n\nx = (5 + 3) * (2 - 1)   Ver resultado#(2)!\n\nx = 2 ** 3   Ver resultado#(3)!\n\nx = 16 ** (1/2)   Ver resultado#(4)!\n\nx = 10 // 3   Ver resultado#(5)!\n\nx = 10 % 3   Ver resultado#(6)!\n\nx = 10\nx = x + 5   Ver resultado#(7)!\n\nx = 10\nx = x / 2   Ver resultado#(8)!\n\nx = 10\nx += 5   Ver resultado#(9)!\n\nx = 10\nx /= 2   Ver resultado#(10)!\n\nx = \"Hola\" + \" \" + \"Mundo!\"   Ver resultado#(11)!\n\nx = \"40\" + \"35\"   Ver resultado#(12)!\n\nx = 10\nx++   Ver resultado#(13)!\n\nx = 10\nx--   Ver resultado#(14)!\n\nx = True &amp;&amp; True   Ver resultado#(15)!\n\nx = True &amp;&amp; False   Ver resultado#(16)!\n\nx = False &amp;&amp; True   Ver resultado#(17)!\n\nx = False &amp;&amp; False   Ver resultado#(18)!\n\nx = True || True   Ver resultado#(19)!\n\nx = True || False   Ver resultado#(20)!\n\nx = False || True   Ver resultado#(21)!\n\nx = False || False   Ver resultado#(22)!\n\nx = !(True)   Ver resultado#(23)!\n\nx = !(False)   Ver resultado#(24)!\n\na = 2, b = 10, c = 5\nx = (a &gt; 0) &amp;&amp; (b &lt; 10) || (c == 5) || !(False)   Ver resultado#(25)!\n</code></pre> <ol> <li> x =     8</li> <li> x = 8</li> <li> x = 8</li> <li> x = 4</li> <li> x = 3     </li> <li> x = 1     </li> <li> x = 15     </li> <li> x = 5    </li> <li> x = 15</li> <li> x = 5    </li> <li> x = \"Hola Mundo!\"    </li> <li> x = \"4035\"    </li> <li> x = 11</li> <li> x = 9</li> <li> x = True</li> <li> x = False</li> <li> x = False</li> <li> x = False</li> <li> x = True</li> <li> x = True</li> <li> x = True</li> <li> x = False</li> <li> x = False</li> <li> x = True</li> <li> x = True</li> </ol> </li> <li> <p>\u00bfCu\u00e1l ser\u00e1 el valor almacenado en la variable correspondiente en cada caso?</p> <pre><code>a = 5\nb = 3\nresultado = a + b \n</code></pre> <p>??? example \"Ver soluci\u00f3n propuesta\"    El operador de suma (+) se utiliza para sumar los valores de las variables a y b, y el resultado se asigna a la variable resultado. En este caso, ser\u00e1 8.</p> <pre><code>a = 5\nb = 3\nresultado = a &gt; b\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, el operador de comparaci\u00f3n mayor que (&gt;) compara los valores de a y b y devuelve verdadero si a es mayor que b. El resultado se asigna a la variable resultado, que contendr\u00e1 el valor booleano verdadero.</li> </ol> <pre><code>a = 5\nb = 3\nresultado = (a &gt; b) &amp;&amp; (b != 0)\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, el operador de comparaci\u00f3n mayor que (&gt;) compara los valores de a y b, y el operador de desigualdad (!=) verifica si b no es igual a cero. El operador de conjunci\u00f3n l\u00f3gica (&amp;&amp;) combina estas dos expresiones y devuelve verdadero solo si ambas son verdaderas. El resultado se asigna a la variable resultado.</li> </ol> <pre><code>x = 5\nx += 3 \nx?\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, la variable x se inicializa con el valor 5. Luego, se utiliza el operador (+=) para sumar 3 al valor actual de x. La operaci\u00f3n x += 3 es equivalente a x = x + 3. Como resultado, el valor de x se actualiza a 8.</li> </ol> <pre><code>cadena = \"Hola\"\ncadena += \" mundo\"\ncadena?\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, el operador (+=) tambi\u00e9n se puede utilizar con otros tipos de dato, como cadenas de caracteres, para realizar operaciones de concatenaci\u00f3n. El resultado almacenado en cadena es \"Hola mundo\".</li> </ol> <pre><code>lista = [1, 2, 3]\nlista += [4, 5]\nlista?\n</code></pre> <p>??? example \"Ver soluci\u00f3n propuesta\"    En este caso, el operador (+=) tambi\u00e9n se puede utilizar con otros tipos de dato, como listas, para realizar operaciones de agregaci\u00f3n de elementos. El resultado almacenado en lista es [1, 2, 3, 4, 5].</p> </li> <li> <p>Escribe el pseudoc\u00f3digo o el c\u00f3digo en un lenguaje de programaci\u00f3n v\u00e1lido, de los siguientes ejercicios.    En cada caso, si hay entrada de datos debe efectuarse por teclado y la salida de resultados debe efectuarse por pantalla:</p> <ol> <li> <p>Ejercicios con operadores de asignaci\u00f3n:  </p> <ol> <li>Escribe un programa que, dada la variable x = 4, calcule cada expresi\u00f3n utilizando el operador de asignaci\u00f3n simple, una por l\u00ednea de c\u00f3digo:</li> <li>Aumente el n\u00famero en 5.</li> <li>Multiplique el resultado por 2.</li> <li>Divida el resultado entre 3.</li> <li>Reste 4 al resultado.</li> <li> <p>Imprima el resultado final.</p> </li> <li> <p>Escribe un programa que, dada la variable x = 4, calcule cada expresi\u00f3n utilizando el operador de asignaci\u00f3n compuesta, una por l\u00ednea de c\u00f3digo:</p> </li> <li>Multiplique el n\u00famero por 3.</li> <li>Sume 7 al resultado.</li> <li>Divida el resultado entre 2.</li> <li> <p>Imprima el resultado final.</p> </li> <li> <p>Escribe un programa que:</p> </li> <li>Solicite al usuario un n\u00famero entero</li> <li>Le sume 5 utilizando el operador de asignaci\u00f3n compuesta. </li> <li>Luego, muestre el resultado por pantalla.</li> </ol> </li> <li> <p>Ejercicios con operadores aritm\u00e9ticos:  </p> <ol> <li> <p>Escribe un programa que solicite al usuario dos n\u00fameros enteros y muestre por pantalla la suma, la resta, la multiplicaci\u00f3n, la divisi\u00f3n, la divisi\u00f3n entera y el m\u00f3dulo de ambos n\u00fameros.    Cuidado, en el caso de las divisiones y del m\u00f3dulo, el divisor debe ser el menor valor.</p> <p>imprimir(nombre + apellido)         2. Escribe un programa que solicite al usuario un n\u00famero y realice las siguientes operaciones:   * Calcule el cuadrado del n\u00famero.   * Calcule la ra\u00edz cuadrada del n\u00famero.</p> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese la base y la altura para calcular el \u00e1rea de un rect\u00e1ngulo utilizando la f\u00f3rmula:        <pre><code>area = base * altura\n</code></pre></p> </li> <li> <p>Escribe un programa similar al anterior, que calcule el \u00e1rea de un tri\u00e1ngulo. Piensa que f\u00f3rmula utilizar. </p> </li> </ol> </li> <li> <p>Ejercicios con operadores de concatenaci\u00f3n de cadenas de caracteres:</p> <ol> <li> <p>\u00bfQu\u00e9 resultado tendr\u00e1 el siguiente ejercicio? \u00bfPor qu\u00e9?</p> <pre><code>nombre = \"Juan\", apellido = \"P\u00e9rez\"\n</code></pre> </li> <li> <p>\u00bfY si la instrucci\u00f3n de impresi\u00f3n fuera la siguiente? \u00bfPor qu\u00e9?</p> <pre><code>nombre = \"Juan\", apellido = \"P\u00e9rez\"\nimprimir(nombre + \" \" + apellido)\n</code></pre> </li> <li> <p>Escribe un programa que solicite al usuario su nombre y su edad, y luego muestre un mensaje que diga </p> Terminal (Entrada/Salida)<pre><code>Hola, [nombre]. Tienes [edad] a\u00f1os.\n</code></pre> <p>Cuando queremos mencionar variables en una cadena de texto, lo hacemos entre corchetes. Esto significa que durante la ejecuci\u00f3n del programa, estas variables deber\u00e1n ser reemplazadas por el valor almacenado en cada una de ellas.</p> </li> <li> <p>Escribe un programa similar al anterior pero, en lugar de la edad, debe solicitar el a\u00f1o de nacimiento. El mensaje de salida debe ser el mismo. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>\u00bfC\u00f3mo se te ocurre que puedes resolver el problema a partir del a\u00f1o de nacimiento?</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>anio_actual = 2023\n\nnombre_completo = input(\"Ingresa tu nombre completo: \")\nanio_nacimiento = int(input(\"Ingresa tu a\u00f1o de nacimiento: \"))\n\nedad = anio_actual - anio_nacimiento\n\nmensaje = \"Hola, \" + nombre_completo + \". Tienes \" + str(edad) + \" a\u00f1os.\"\n\nprint(mensaje)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite al usuario dos palabras. Luego, que las imprima en orden alfab\u00e9tico y, luego, en orden alfab\u00e9tico inverso. </p> </li> <li> <p>Escribe un programa que solicite al usuario cuatro cadenas de caracteres y las muestre concatenadas.</p> </li> <li> <p>Escribe un programa que solicite al usuario cuatro cadenas de caracteres y con ellas arme y muestre una oraci\u00f3n (piensa en las reglas ortogr\u00e1ficas).</p> </li> <li> <p>Escribe un programa que solicite al usuario dos cadenas de caracteres y que informe que cadena es m\u00e1s larga y por cuantos caracteres de m\u00e1s.</p> </li> <li> <p>Escribe un programa que solicite al usuario su nombre completo. Luego que solo muestre las iniciales de cada palabra en may\u00fasculas separadas por un espacio.</p> </li> </ol> <p>Por ejemplo:</p> <pre><code>``` title=\"Entrada\"\npablo martinez roca\n```\n\n``` title=\"Terminal (Entrada/Salida)\"\nP M R\n```\n\nVer resultado (1)\n{ .annotate }\n\n1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    # Bloque principal del programa\n    nombre_completo = input(\"Ingresa tu nombre completo: \")\n    iniciales = \"\"\n\n    palabras = nombre_completo.split()\n\n    for palabra in palabras:\n        iniciales += palabra[0].upper() + \" \"\n    print(\"Las iniciales son:\", iniciales)\n\n    ```\n</code></pre> <ol> <li>Escribe un programa que solicite una frase y muestre solo las palabras que empiezan con 'a' en una nueva cadena separadas por comas.</li> </ol> <p>Por ejemplo:</p> <pre><code>``` title=\"Terminal (Entrada/Salida)\"\n\n```\n\nVer resultado (1)\n{ .annotate }\n\n1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    # Bloque principal del programa\n    frase = input(\"Ingresa una frase: \")\n\n    palabras = frase.split()\n\n    palabras_con_a = []\n\n    for palabra in palabras:\n        if palabra[0].lower() == 'a':\n            palabras_con_a.append(palabra)\n\n    palabras_con_a_str = \", \".join(palabras_con_a)\n\n    print(\"Palabras que empiezan con 'a':\", palabras_con_a_str)\n    ```\n\n    ``` js title=\"JavaScript\"\n    // Bloque principal del programa\n    var frase = prompt(\"Ingresa una frase:\");\n\n    var palabras = frase.split(\" \");\n    var palabrasConA = \"\";\n\n    for (var i = 0; i &lt; palabras.length; i++) {\n        if (palabras[i][0].toLowerCase() === 'a') {\n            palabrasConA += palabras[i] + \",\";\n        }\n    }\n\n    palabrasConA = palabrasConA.slice(0, -1);\n\n    console.log(\"Palabras que empiezan con 'a':\", palabrasConA);               \n    ```\n</code></pre> <ol> <li> <p>Escribe un programa que solicite al usuario una cadena de caracteresy muestre la primera y \u00faltima palabra separadas por un guion. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\ncadena = input(\"Ingresa una cadena de texto: \")\n\npalabras = cadena.split()\n\nprimera_palabra = palabras[0]\nultima_palabra = palabras[-1]\n\nresultado = primera_palabra + \"-\" + ultima_palabra\n\nprint(\"Primera y \u00faltima palabra:\", resultado)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite al usuario una oraci\u00f3n y luego  indique si las palabras est\u00e1n, o no, ordenadas en orden alfab\u00e9tico. </p> </li> <li> <p>Escribe un programa que tenga una lista de palabras predefinidas. El programa debe seleccionar una palabra al azar y solicitar al usuario que la adivine. El usuario tiene un n\u00famero limitado de intentos. El programa debe indicar si la palabra del usuario es mayor o menor alfab\u00e9ticamente que la palabra seleccionada, y continuar pidiendo al usuario que adivine hasta que acierte o se agoten los intentos.</p> </li> <li> <p>Verificar validez de una expresi\u00f3n matem\u00e1tica:</p> </li> </ol> <p>Escribe un programa que solicite al usuario una expresi\u00f3n matem\u00e1tica que incluya par\u00e9ntesis, corchetes y llaves. El programa debe verificar si los s\u00edmbolos de apertura y cierre est\u00e1n correctamente balanceados. Por ejemplo, \"(2 + [3 * {5 - 1}])\" es una expresi\u00f3n v\u00e1lida, mientras que \"(2 + [3 * {5 - 1])\" no lo es.</p> <ol> <li>Juego de piedra, papel o tijera:</li> </ol> <p>Escribe un programa que permita al usuario jugar piedra, papel o tijera contra la computadora. El programa debe solicitar la opci\u00f3n del usuario, generar una opci\u00f3n aleatoria para la computadora y determinar qui\u00e9n gana seg\u00fan las reglas del juego.</p> <ol> <li>Validaci\u00f3n de tarjeta de cr\u00e9dito:</li> </ol> <p>Escribe un programa que solicite al usuario un n\u00famero de tarjeta de cr\u00e9dito y verifique si es v\u00e1lido utilizando el algoritmo de Luhn. El programa debe imprimir un mensaje indicando si la tarjeta es v\u00e1lida o no.</p> <ol> <li>Juego del ahorcado:  Escribe un programa que seleccione una palabra al azar de una lista predefinida. El programa debe permitir al usuario adivinar letras de la palabra y mostrar su progreso. El usuario tiene un n\u00famero limitado de intentos para adivinar la palabra completa. El programa debe indicar si las letras adivinadas por el usuario est\u00e1n en la palabra y mostrar el progreso actualizado.</li> </ol> </li> <li> <p>Ejercicios con operadores de incremento y decremento:</p> <ol> <li> <p>\u00bfPara qu\u00e9 se utiliza el operador ++?</p> <p>Ver resultado (1)</p> <ol> <li> Este operador incrementa el valor de la variable en 1.   </li> </ol> </li> <li> <p>\u00bfPara qu\u00e9 se utiliza el operador --?</p> <p>Ver resultado (1)</p> <ol> <li> Este operador decrementa el valor de la variable en 1.</li> </ol> </li> <li> <p>\u00bfQu\u00e9 valor se le asigna a la variable y si se utiliza el operador como sufijo? \u00bfC\u00f3mo operar\u00eda el sufijo en la expresi\u00f3n?</p> <pre><code>int x = 5\nint y = x++\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> Este operador incrementa el valor de la variable despu\u00e9s de utilizar su valor actual en la expresi\u00f3n. Es \u00fatil cuando se desea utilizar el valor original de la variable en una operaci\u00f3n y luego incrementarla. El valor de y es 5. </li> </ol> </li> <li> <p>\u00bfQu\u00e9 valor se le asigna a la variable y si se utiliza el operador como prefijo? \u00bfC\u00f3mo operar\u00eda el prefijo en la expresi\u00f3n?</p> <pre><code>int x = 5\nint y = ++x\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> Este operador incrementa el valor de la variable antes de utilizar su valor en la expresi\u00f3n. Es \u00fatil cuando se desea utilizar el valor incrementado de la variable inmediatamente. El valor de y es 6.</li> </ol> </li> </ol> </li> <li> <p>Ejercicios con operadores de comparaci\u00f3n:</p> <pre><code>1. Escribe un programa que tome un n\u00famero del usuario y verifique si es positivo, negativo o igual a cero.\n\n2. Escribe un programa que solicite al usuario dos n\u00fameros enteros y determine si el primero es mayor que el segundo.\n\n3. Escribe un programa que solicite al usuario dos n\u00fameros enteros y determine si ambos son pares.\n\n4. Escribe un programa que solicite al usuario un n\u00famero entero y determine si es par y positivo al mismo tiempo.\n\n5.  Escribe un programa que solicite al usuario un n\u00famero entero y determine si es divisible por 3 y 5 al mismo tiempo.\n\n6.  Escribe un programa que solicite al usuario un n\u00famero entero y determine si dicho n\u00famero es impar y m\u00faltiplo de 3 al mismo tiempo.\n\n7. Escribe un programa que pida al usuario dos n\u00fameros enteros y verifique si al menos uno de ellos es positivo y el otro es negativo.\n\n8. Escribe un programa que solicite al usuario un n\u00famero y verifique si est\u00e1 dentro de un rango dado.\n\n9. Escribe un programa que solicite al usuario su nombre y lo compare con el nombre \"Juan\". Si son iguales, que diga \"Hola Juan\".\n\n10. Escribe un programa que solicite al usuario una contrase\u00f1a y verifique si coincide con una contrase\u00f1a predefinida.\n\n11. Escribe un programa que genere un n\u00famero aleatorio entre 1 y 100.  \nLuego, que solicite al usuario que adivine el n\u00famero generado.  \nEl programa debe indicar si el n\u00famero del usuario es mayor o menor que el n\u00famero generado, y continuar pidiendo al usuario que adivine hasta que acierte. Al acertar, debe indicar en cuantos intentos lo hizo.\n\n12. Modificar el programa anterior para que tenga un n\u00famero m\u00e1ximo de intentos.\n\n13. Modificar el programa anterior para que tenga una tabla de puntuaciones m\u00e1s altas (high scores).\n</code></pre> </li> <li> <p>Ejercicios con operadores l\u00f3gicos (booleanos):</p> <ol> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos (verdadero o falso) y realice las siguientes operaciones:</p> <ul> <li>mostrar la operaci\u00f3n l\u00f3gica AND entre los dos valores.</li> <li>mostrar la operaci\u00f3n l\u00f3gica OR entre los dos valores.</li> <li>mostrar la operaci\u00f3n l\u00f3gica NOT del primer valor y del segundo valor.</li> </ul> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si ambos son iguales. </p> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si ambos son diferentes.   Es decir, uno es True y el otro es False, o viceversa.</p> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si ambos son verdaderos o si son falsos.</p> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si al menos uno de ellos es verdadero.</p> </li> </ol> </li> <li> <p>Ejercicio de operaciones de conversi\u00f3n de tipos:         1. Escribe un programa que solicite al usuario un n\u00famero entero y un n\u00famero decimal, y realice las siguientes operaciones:            1. Convierte el n\u00famero entero a decimal.            2. Convierte el n\u00famero decimal a entero.</p> </li> <li> <p>Ejercicio de expresiones condicionales (if-else):         1. Escribe un programa que solicite al usuario su edad y determine si es mayor de edad (18 a\u00f1os o m\u00e1s). Muestra el resultado por pantalla.         2. Escribe un programa que solicite al usuario un n\u00famero entero y determine si es positivo, negativo o cero. Muestra el resultado por pantalla.</p> </li> <li> <p>Ejercicio de expresiones de bucles:         1. Escribe un programa que solicite al usuario un n\u00famero entero y muestre por pantalla todos los n\u00fameros desde 1 hasta ese n\u00famero utilizando un bucle while.         2. Escribe un programa que solicite al usuario un n\u00famero entero y muestre por pantalla todos los n\u00fameros pares desde 0 hasta ese n\u00famero utilizando un bucle for.</p> </li> <li> <p>Ejercicio de llamadas a funciones:         1. Escribe una funci\u00f3n llamada \"calcular_promedio\" que reciba tres n\u00fameros como argumentos y devuelva el promedio de esos n\u00fameros. Luego, utiliza la funci\u00f3n para calcular el promedio de tres n\u00fameros ingresados por el usuario.         2. Escribe un programa que solicite al usuario un n\u00famero entero y calcule su factorial utilizando una funci\u00f3n recursiva. Muestra el resultado por pantalla.</p> </li> <li> <p>Ejercicio de acceso a elementos:         1. Escribe un programa que solicite al usuario una lista de palabras separadas por comas. Luego, muestra por pantalla la primera y la \u00faltima palabra de la lista.         2. Escribe un programa que solicite al usuario una lista de n\u00fameros separados por comas. Luego, encuentra el n\u00famero m\u00e1s grande y el n\u00famero m\u00e1s peque\u00f1o de la lista y mu\u00e9stralos por pantalla.         3. Escribe un programa que compare dos listas y determine si son iguales (es decir, si contienen los mismos elementos en el mismo orden).         4. Escribe un programa que encuentre el valor m\u00e1ximo en una lista de n\u00fameros.         5. Escribe un programa que solicite al usuario una lista de n\u00fameros y los ordene de menor a mayor utilizando el algoritmo de ordenamiento de burbuja. Luego, muestra la lista ordenada al usuario.         6. Escribe un programa que solicite al usuario el n\u00famero de estudiantes en una clase, y luego pida al usuario ingresar las notas de cada estudiante. El programa debe calcular el promedio de las notas y determinar cu\u00e1ntos estudiantes obtuvieron una nota por encima del promedio.</p> </li> </ol> </li> <li> <p>Problemas complejos para resolver:</p> <ol> <li> <p>Escribe un programa que genere un n\u00famero aleatorio entre 1 y 1000. El programa debe permitir al usuario adivinar el n\u00famero, pero esta vez proporcionando pistas. Despu\u00e9s de cada intento, el programa debe indicar si el n\u00famero del usuario es mayor o menor que el n\u00famero generado, y tambi\u00e9n indicar qu\u00e9 tan cerca est\u00e1 el n\u00famero del usuario del n\u00famero generado (por ejemplo, \"Est\u00e1s a menos de 50 unidades de distancia\"). El usuario tiene un n\u00famero limitado de intentos para adivinar el n\u00famero correcto.</p> </li> <li> <p>Ordenar una lista de objetos personalizados: Escribe un programa que solicite al usuario ingresar informaci\u00f3n sobre varias personas, como su nombre, edad y altura. Luego, el programa debe ordenar la lista de personas en funci\u00f3n de alg\u00fan criterio, como la edad o la altura, utilizando operadores de comparaci\u00f3n personalizados.</p> </li> <li> <p>Juego del laberinto: Escribe un programa que represente un laberinto como una matriz bidimensional. El programa debe permitir al usuario moverse por el laberinto utilizando comandos de direcci\u00f3n (arriba, abajo, izquierda, derecha) y verificar si el usuario ha llegado a la salida del laberinto.</p> </li> <li> <p>Juego de estrategia basado en turnos: Escribe un programa que simule un juego de estrategia basado en turnos. El programa debe permitir a dos jugadores realizar acciones, como mover unidades o atacar, y verificar el resultado de cada acci\u00f3n utilizando operadores de comparaci\u00f3n para determinar el \u00e9xito del ataque o la efectividad de las defensas.</p> </li> <li> <p>An\u00e1lisis de datos complejos: Escribe un programa que lea un archivo de datos complejos, como datos de sensores o registros m\u00e9dicos, y realice an\u00e1lisis utilizando operadores de comparaci\u00f3n. Por ejemplo, puedes encontrar valores at\u00edpicos, identificar tendencias o realizar c\u00e1lculos basados en ciertos criterios de comparaci\u00f3n.4</p> </li> <li> <p>Crea un programa que solicite al usuario una contrase\u00f1a y verifique si cumple con los siguientes requisitos: debe tener al menos 8 caracteres, contener al menos una letra min\u00fascula, una letra may\u00fascula y un n\u00famero.</p> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/_resumen-de-operandos-y-operadores/","title":"Operandos y operadores: resumen","text":"<p>Revisar todo el resumen. Hay cosas mezcladas</p> <p>En una expresi\u00f3n, un operando es un t\u00e9rmino utilizado en programaci\u00f3n para referirse a un dato o conjunto de datos a los que se les aplican operadores para realizar una operaci\u00f3n y devolver un resultado.</p> <p>Estos datos pueden ser variables que contienen valores almacenados en la memoria, valores literales (num\u00e9ricos, cadenas de caracteres, booleanos, etc.), constantes que se especifican en el c\u00f3digo directamente, llamadas a funciones o incluso expresiones m\u00e1s complejas que combinan m\u00faltiples operandos y operadores. </p> <p>Existen diferentes tipos de operandos cuya disponibilidad y variedad puede variar seg\u00fan el lenguaje:</p> <ul> <li>N\u00fameros (enteros  y de punto flotante)</li> <li>cadenas de caracteres</li> <li>Booleanos (valor l\u00f3gico true o false)</li> <li>Variables (incluyendo a todos sus tipos de dato)</li> <li>Arrays </li> <li>Listas</li> <li>Objetos</li> <li>Expresiones</li> </ul> <p>En programaci\u00f3n, los operadores son s\u00edmbolos especiales que se utilizan para realizar diferentes operaciones (c\u00e1lculos matem\u00e1ticos, comparaciones de valores, asignaciones de un valor a una variable, combinar cadenas de caracteres, etc.) con los datos.</p> <p>Existen diferentes tipos de operadores cuya disponibilidad y variedad puede variar seg\u00fan el lenguaje:</p> <ul> <li>Operadores de asignaci\u00f3n (simple y compuesta)</li> <li>Operadores aritm\u00e9ticos</li> <li>Operadores de concatenaci\u00f3n</li> <li>Operadores de incremento y de decremento (utiliz\u00e1ndolos con sufijo x++ o prefijo ++x)</li> <li>Operadores de comparaci\u00f3n</li> <li>Operadores l\u00f3gicos</li> </ul> <p>Las operaciones pueden tener reglas de precedencia y asociatividad que determinen el orden en que se eval\u00faan las expresiones. </p> <p>Precedencia de operadores: establece el orden en el cual se eval\u00faan los operadores en una expresi\u00f3n. </p> <p></p> <p>Asociatividad de operadores: define el orden en el cual se eval\u00faan los operadores del mismo nivel de precedencia cuando no hay par\u00e9ntesis para establecer un orden expl\u00edcito. La asociatividad puede ser izquierda o derecha. Si los operadores tienen la misma precedencia y asociatividad, la evaluaci\u00f3n se realiza de izquierda a derecha.</p> <p>Estas reglas pueden variar ligeramente dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que se est\u00e9 utilizando. Por lo tanto, es recomendable consultar la documentaci\u00f3n del lenguaje para obtener las reglas de precedencia exactas que se aplican en ese contexto.</p> <p>En resumen, cada lenguaje de programaci\u00f3n tiene su propio conjunto de operadores con reglas y funcionalidades espec\u00edficas que pueden variar entre los diferentes lenguajes. </p> <p>Por ejemplo, algunos lenguajes pueden tener reglas espec\u00edficas sobre el redondeo y el tratamiento de los n\u00fameros negativos.</p> <p>Por lo tanto, cada operaci\u00f3n tiene su propia sintaxis y reglas de uso espec\u00edficas. </p> <p>Consulta la documentaci\u00f3n para obtener informaci\u00f3n detallada sobre los operadores disponibles y c\u00f3mo se utilizan.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/","title":"Operandos y operadores","text":"<p>Rev. 18/01/2024</p> <p>En programaci\u00f3n, los operandos y operadores son elementos fundamentales que conforman una expresi\u00f3n.</p> <p>\u00bfQu\u00e9 es una expresi\u00f3n?</p> <p>Una expresi\u00f3n es una combinaci\u00f3n de uno o m\u00e1s operandos y operadores que son interpretados (calculados) por el compilador o int\u00e9rprete del lenguaje de programaci\u00f3n para producir otro valor (un resultado). Este valor puede ser un n\u00famero, un caracter, un booleano, una cadena de caracteres, un objeto, etc., dependiendo del lenguaje de programaci\u00f3n y de la expresi\u00f3n en particular.  </p> <p>Ya hablaremos de expresiones m\u00e1s adelante. Por el momento qued\u00e9monos con esta definici\u00f3n para entender como se relacionan los operandos y operadores entre s\u00ed.</p> <p>Los operandos son los valores (ya veremos los diversos tipos) sobre los que se realizan las operaciones para obtener un resultado.</p> <p>Analicemos el siguiente ejemplo:</p> <pre><code>5 + 3\n</code></pre> <p>En la expresi\u00f3n <code>5 + 3</code>, 5 y 3 son operandos.</p> <p>Los operadores son los s\u00edmbolos, en una expresi\u00f3n, que indican qu\u00e9 operaci\u00f3n se debe realizar entre los operandos. </p> <p>Si continuamos analizando el ejemplo anterior:</p> <pre><code>5 + 3\n</code></pre> <p>En la misma expresi\u00f3n <code>5 + 3</code>, el <code>+</code> es un operador que indica que se deben sumar los operandos 5 y 3.</p> <p>Un operador lleva a cabo operaciones sobre uno (operador unario), dos (operador binario) o tres (operador ternario) operandos devolviendo un valor determinado. El tipo de valor devuelto tras su evaluaci\u00f3n depende del operador y del tipo de los operandos. Por ejemplo, los operadores aritm\u00e9ticos trabajan con operandos num\u00e9ricos, llevan a cabo operaciones aritm\u00e9ticas b\u00e1sicas y devuelven el valor num\u00e9rico correspondiente.</p> <p>Parece complicado, pero cuando estudiemos todos estos temas en mayor profundidad y te familiarices con ellos, ver\u00e1s que resultar\u00e1 simple su entendimiento. </p> <p>\u00a1Vamos!</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operandos/","title":"Operandos","text":"<p>Rev. 18/01/2024</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operandos/#que-es-un-operando","title":"\u00bfQu\u00e9 es un operando?","text":"<p>Definici\u00f3n</p> <p>Los operandos son elementos fundamentales que conforman una expresi\u00f3n<sup>1</sup> y consisten en un valor literal -como 2, 3.14, \"hola\", True-, una constante o una variable que contiene un valor, o una llamada a funci\u00f3n que devuelve un valor, sobre los que se realizan las operaciones definidas por los operadores<sup>2</sup> para obtener un resultado.</p> <p>Podemos ver el siguiente ejemplo:</p> <pre><code>5 + 3\n</code></pre> <p>En la expresi\u00f3n <code>5 + 3</code>, 5 y 3 son operandos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operandos/#tipos-de-operandos","title":"Tipos de operandos","text":"<p>Los operandos pueden ser de varios tipos, dependiendo del lenguaje de programaci\u00f3n que est\u00e9s utilizando. Aqu\u00ed hay algunos tipos comunes de operandos:</p> <ul> <li> <p>Valores literales: Estos son valores fijos que se escriben directamente en el c\u00f3digo, como 2, 3.14, 'hola', True, None, etc.</p> </li> <li> <p>Variables: Son nombres que representan valores en la memoria. Por ejemplo, <code>x</code>, <code>y</code>, <code>nombre</code>, etc. son operandos que pueden contener valores num\u00e9ricos, cadenas de caracteres, valores booleanos u otros tipos de dato.</p> </li> <li> <p>Llamadas a funciones: Son invocaciones a funciones que devuelven un valor. Por ejemplo, <code>sqrt(x)</code>, <code>str.length()</code>, etc.</p> </li> <li> <p>Objetos: En la programaci\u00f3n orientada a objetos, un objeto es una instancia de una clase y puede ser un operando, por lo que es posible realizar operaciones con ellos llamando a sus m\u00e9todos o accediendo a sus propiedades. Por ejemplo, en <code>miObjeto.metodo()</code>, <code>miObjeto</code> es un operando cuyo valor ser\u00e1 devuelto por su m\u00e9todo <code>metodo</code>.</p> </li> <li> <p>Elementos de una matriz o lista: En lenguajes que soportan estructuras de datos complejas, un elemento de una matriz o lista puede ser un operando. Por ejemplo, en <code>miLista[0]</code>, el primer elemento de la lista <code>miLista[]</code> es un operando.</p> </li> <li> <p>Expresiones: Una subexpresi\u00f3n se refiere a una expresi\u00f3n matem\u00e1tica m\u00e1s peque\u00f1a dentro de una m\u00e1s grande, generalmente contenida entre par\u00e9ntesis o corchetes. Por ejemplo, en la expresi\u00f3n <code>(2 + 3) * 4</code>, la subexpresi\u00f3n <code>(2 + 3)</code> se eval\u00faa antes de ser multiplicada por 4. Por lo tanto, los operandos pueden ser subexpresiones (expresiones completas) que deben evaluarse antes de que se realice una operaci\u00f3n con su resultado en otra expresi\u00f3n que la contenga, y as\u00ed sucesivamente hasta llegar a la expresi\u00f3n principal.</p> </li> <li> <p>Miembros de un objeto o estructura: En lenguajes que soportan programaci\u00f3n orientada a objetos o estructuras, un miembro de un objeto o estructura puede ser un operando. Por ejemplo, en <code>miObjeto.miembro</code>, <code>miObjeto.miembro</code> es un operando.</p> </li> </ul> <p>Estos son solo algunos ejemplos y pueden haber m\u00e1s tipos de operandos dependiendo del lenguaje de programaci\u00f3n espec\u00edfico.  </p> <p>Pero, independientemente de cual sea el tipo de operando, su valor ser\u00e1 de alguno de los tipos de datos conocidos, que puedes repasar haciendo clic aqu\u00ed.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operandos/#ejemplos-de-uso-de-operandos-en-expresiones","title":"Ejemplos de uso de operandos en expresiones","text":"Python<pre><code>x = 10  # x es una variable a la que se le asigna el operando literal 10\ny = 5   # y es otra variable a la que se le asigna el operando literal 5\n\n# x e y son operandos de la expresi\u00f3n que los suma \n# suma es la variable que almacenar\u00e1 el valor obtenido al calcular la expresi\u00f3n\nsuma = x + y\n\n# Imprime el valor almacenado en la variable suma\nprint(suma)\n</code></pre> Terminal (Entrada/Salida)<pre><code>15\n</code></pre> <p>En este ejemplo, tanto la variable <code>x</code> como la variable <code>y</code> son operandos de las dos expresiones de asignaci\u00f3n (l\u00edneas 1 y 2). Y tambi\u00e9n son operandos de la expresi\u00f3n que realiza una suma de sus valores almacenados, asignando el resultado en la variable <code>suma</code> (l\u00ednea 6).</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operandos/#pon-en-practica-lo-aprendido","title":"Pon en pr\u00e1ctica lo aprendido","text":"<p>\u00bfCu\u00e1ntos operandos y de que tipo puedes identificar en la l\u00ednea resaltada?</p> Python<pre><code>resultado = 3 + 5\nprint(resultado)  # Imprime 8\n</code></pre> Ver respuesta <p>Operandos literales: Son valores fijos en el c\u00f3digo. Aqu\u00ed, en la expresi\u00f3n <code>3 + 5</code>, 3 y 5 son operandos literales.</p> <p>\u00bfCu\u00e1ntos operandos y de que tipo puedes identificar en la l\u00ednea resaltada?</p> Python<pre><code>x = 7\ny = 2\n\nresultado = x * y\nprint(resultado)  # Imprime 14\n</code></pre> Ver respuesta <p>Variables como operandos: Las variables que contienen valores tambi\u00e9n pueden ser operandos. Aqu\u00ed, <code>x</code> e <code>y</code> son operandos en la expresi\u00f3n <code>x * y</code>.</p> <p>\u00bfCu\u00e1ntos operandos y de que tipo puedes identificar en la l\u00ednea resaltada?</p> Python<pre><code>import math\n\nx = 9\n\nresultado = math.sqrt(x)\nprint(resultado)  # Imprime 3.0\n</code></pre> Ver respuesta <p>Llamadas a funciones como operandos: Las llamadas a funciones que devuelven un valor tambi\u00e9n pueden ser operandos.  Aqu\u00ed, <code>math.sqrt(x)</code> es un operando en la expresi\u00f3n <code>resultado = math.sqrt(x)</code>.</p> <p>\u00bfCu\u00e1ntos operandos y de que tipo puedes identificar en la l\u00ednea resaltada?</p> Python<pre><code>x = 5\ny = 2\n\nresultado = (x + y) * y\nprint(resultado)  # Imprime 14\n</code></pre> Ver respuesta <p>Expresiones como operandos: Las expresiones m\u00e1s complejas pueden contener subexpresiones como operandos.    Aqu\u00ed, <code>(x + y)</code> e <code>y</code> son operandos en la expresi\u00f3n <code>(x + y) * y</code>. A su vez, <code>x</code> e <code>y</code> son operandos de la subexpresi\u00f3n <code>(x + y)</code> en <code>(x + y) * y</code>.</p> <p>\u00a1Para recordar!</p> <p>Un operando es un t\u00e9rmino general que se refiere a un valor que se manipula en una expresi\u00f3n mediante la aplicaci\u00f3n de operadores para realizar una operaci\u00f3n y obtener un resultado.</p> <p>La disponibilidad y los tipos de operandos pueden variar seg\u00fan el lenguaje de programaci\u00f3n en el que te encuentres programando.</p> <p>Referencias</p> <ol> <li> <p>Una expresi\u00f3n es una combinaci\u00f3n de uno o m\u00e1s operandos y operadores que son interpretados (calculados) por el compilador o int\u00e9rprete del lenguaje de programaci\u00f3n para producir otro valor (un resultado).\u00a0\u21a9</p> </li> <li> <p>Los operadores son los s\u00edmbolos, en una expresi\u00f3n, que indican qu\u00e9 operaci\u00f3n se debe realizar entre los operandos.\u00a0\u21a9</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/que-es-un-operador/","title":"\u00bfQu\u00e9 es un operador?","text":"<p>Rev. 18/01/2024</p> <p>Definici\u00f3n</p> <p>Los operadores son s\u00edmbolos especiales que conforman una expresi\u00f3n<sup>1</sup> y que realizan operaciones espec\u00edficas en uno o m\u00e1s operandos<sup>2</sup> y luego devuelven un resultado. </p> <p>Podemos ver el siguiente ejemplo:</p> <pre><code>5 + 3\n</code></pre> <p>En la expresi\u00f3n <code>5 + 3</code>, el <code>+</code> es un operador aritm\u00e9tico que indica que se deben sumar los operandos 5 y 3.</p> <p>Un operador no solo realiza una operaci\u00f3n, sino que tambi\u00e9n devuelve un valor. Es decir, que un operador realiza una operaci\u00f3n en sus operandos y devuelve un valor.  </p> <p>Este valor devuelto, as\u00ed como su tipo de dato, dependen tanto del operador utilizado como del tipo de dato de los operandos involucrados. Es decir, que el tipo de valor que devuelve el operador depende tanto de si mismo como de los tipos de los operandos involucrados. </p> <p>Por ejemplo, si usas el operador (+) en dos n\u00fameros enteros, obtendr\u00e1s un n\u00famero entero como resultado. En este contexto, (+) es un operador aritm\u00e9tico y realiza la suma de ambos n\u00fameros:</p> <pre><code>resultado = 4 + 4  # Se asigna 8 a la variable\n</code></pre> <p>Pero si usas el operador (+) en dos cadenas de caracteres, obtendr\u00e1s una cadena de caracteres como resultado. En este contexto, (+) es un operador de concatenaci\u00f3n y realiza la concatenaci\u00f3n de ambas cadenas:</p> <pre><code>resultado = \"4\" + \"4\"  # Se asigna 44 a la variable (cuatro cuatro, no cuarenta y cuatro)\n</code></pre> <p>As\u00ed, el tipo de dato del resultado depende del tipo de dato de los operandos. A este proceso se le conoce como la evaluaci\u00f3n del resultado de una operaci\u00f3n.</p> <p>Por lo tanto, es correcto decir que una operaci\u00f3n \"eval\u00faa\" a su resultado. Esto significa que el operador toma los operandos, realiza la operaci\u00f3n, y el resultado de esa operaci\u00f3n es el valor que se \"eval\u00faa\".</p> <p>Referencias</p> <ol> <li> <p>Una expresi\u00f3n es una combinaci\u00f3n de uno o m\u00e1s operandos y operadores que son interpretados (calculados) por el compilador o int\u00e9rprete del lenguaje de programaci\u00f3n para producir otro valor (un resultado).\u00a0\u21a9</p> </li> <li> <p>Los operandos son los valores, en una expresi\u00f3n, sobre los que se realizan las operaciones para obtener un resultado.\u00a0\u21a9</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/","title":"Tipos de operadores","text":"<p>Rev. 18/01/2024</p> <p>Los tipos de operadores en la mayor\u00eda de los lenguajes de programaci\u00f3n permiten realizar operaciones aritm\u00e9ticas, realizar operaciones l\u00f3gicas y de comparaci\u00f3n, asignar valores, combinar cadenas de caracteres y operar la manipulaci\u00f3n de bits, entre otras operaciones.</p> <p>\u00a1Para recordar!</p> <p>Cada lenguaje de programaci\u00f3n tiene su propio conjunto de operadores con s\u00edmbolos, reglas y funcionalidades espec\u00edficas que pueden variar entre los diferentes lenguajes. </p> <p>Es fundamental que consultes la bibliograf\u00eda para asegurarte que la sintaxis de tu c\u00f3digo sea la correcta y que los s\u00edmbolos empleados cumplan con la funci\u00f3n de operador correspondiente.</p> <p>Los operadores se clasifican en diferentes categor\u00edas seg\u00fan el tipo de operaci\u00f3n que realizan. Vamos a analizarlas en profundidad:</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operaciones-con-los-datos","title":"Operaciones con los datos","text":"<p>Estas operaciones pueden tener reglas de precedencia y asociatividad que determinen el orden en que se eval\u00faan las expresiones. </p> <p>Es importante entender las reglas para obtener los resultados esperados en tus programas. Por ello, las estudiaremos m\u00e1s adelante. </p> <p>Pero antes recuerda que estas son reglas generales y pueden variar dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando. Es recomendable consultar la documentaci\u00f3n del lenguaje para obtener informaci\u00f3n precisa sobre las reglas de precedencia y asociatividad que se aplican en ese contexto particular.</p> <p>Ten en cuenta</p> <p>Siempre consulta la documentaci\u00f3n para obtener informaci\u00f3n detallada sobre cada tema.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operador-unario-binario-y-ternario","title":"Operador unario, binario y ternario","text":"<ul> <li> <p>Un operador que requiere un operando (un argumento) se llama operador unario. </p> <p>Por ejemplo, <code>op1++</code> es un operador unario que incrementa el valor de su operando en 1. Ya lo estudiaremos m\u00e1s adelante.</p> </li> <li> <p>Un operador que requiere dos operandos (dos argumentos) es un operador binario.</p> <p>Aqu\u00ed, <code>op1 = op2</code> es un operador binario que asigna el valor de su operando de la derecha a su operando de la izquierda. </p> </li> <li> <p>Y finalmente, un operador ternario es aquel que requiere tres operandos (tres argumentos). </p> <p>Por ejemplo, la sentencia abreviada if-else <code>op1 ? op2 : op3</code></p> </li> </ul> <p>Es importante entender estas reglas para obtener los resultados esperados en tus programas. Y es por ello que las estudiaremos m\u00e1s adelante. </p> <p>\u00a1Para recordar!</p> <p>La siguientes son reglas generales y pueden variar dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando. </p> <p>Es recomendable consultar la documentaci\u00f3n del lenguaje para obtener informaci\u00f3n precisa sobre las reglas de precedencia y asociatividad que se aplican en ese contexto particular.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<p>El operador de asignaci\u00f3n ( = ), es un operador binario que asigna el valor del t\u00e9rmino de la derecha al operando de la izquierda. El operando de la izquierda suele ser el identificador de una variable. El t\u00e9rmino de la derecha es, en general, una expresi\u00f3n de un tipo de dato compatible; en particular puede ser una constante u otra variable. Como caso particular, y a diferencia de los dem\u00e1s operadores, este operador no se eval\u00faa devolviendo un determinado valor.</p> <ul> <li> <p>Asignaci\u00f3n simple: el s\u00edmbolo ( = ), se utiliza para asignar un valor a una variable. </p> <pre><code>x = 3\n</code></pre> </li> <li> <p>Asignaci\u00f3n compuesta: existen operadores compuestos que combinan una operaci\u00f3n y una asignaci\u00f3n en un solo paso:</p> <ul> <li>suma y asignaci\u00f3n o adici\u00f3n compuesta ( += ) se suma el valor del lado derecho del operador al valor actual de la variable del lado izquierdo del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n.  En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de suma y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x += 3 # equivale a x = x + 3\n</code></pre> <ul> <li>resta y asignaci\u00f3n o sustracci\u00f3n compuesta ( -= ) se resta el valor del lado derecho del operador al valor actual de la variable del lado izquierdo del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n. En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de resta y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x -= 3 # equivale a x = x - 3\n</code></pre> <ul> <li>multiplicaci\u00f3n y asignaci\u00f3n o multiplicaci\u00f3n compuesta ( *= ) se multiplica el valor del lado derecho del operador al valor actual de la variable del lado izquierdo del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n. En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de multiplicaci\u00f3n y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x *= 3 # equivale a x = x * 3\n</code></pre> <ul> <li>divisi\u00f3n y asignaci\u00f3n o divisi\u00f3n compuesta ( /= ) se divide el valor la variable del lado izquierdo del operador por el valor del lado derecho del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n. En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de divisi\u00f3n y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x /= 3 # equivale a x = x / 3\n</code></pre> </li> </ul> <p>\u00a1Para recordar!</p> <p>Para conocer los distintos operadores de asignaci\u00f3n compuesta disponibles para un lenguaje de programaci\u00f3n particular, te recomiendo que revises la documentaci\u00f3n existente del lenguaje en cuesti\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Se utilizan para realizar operaciones matem\u00e1ticas b\u00e1sicas:</p> <ul> <li>suma ( + ) </li> <li>resta ( - )</li> <li>multiplicaci\u00f3n ( * )</li> <li>divisi\u00f3n ( / )</li> <li>divisi\u00f3n entera ( // ) Se utiliza para realizar una divisi\u00f3n entera entre dos n\u00fameros y obtener el cociente redondeado hacia abajo al n\u00famero entero m\u00e1s cercano. Se lo conoce como Floor Division y es especialmente \u00fatil cuando se desea obtener solo la parte entera del cociente de una divisi\u00f3n y descartar la parte decimal.</li> <li>m\u00f3dulo ( % )</li> <li>exponenciaci\u00f3n ( ** ) o ( ^ ) Tambi\u00e9n existen funciones como pow(base, exponente), dependiendo del lenguaje de programaci\u00f3n.</li> <li>radicaci\u00f3n ( ** (1/x) ) o ( ^ (1/x) ) En muchos lenguajes de programaci\u00f3n, no existe un operador espec\u00edfico para la operaci\u00f3n de radicaci\u00f3n (c\u00e1lculo de ra\u00edces). En su lugar, se utiliza el operador de potenciaci\u00f3n junto con expresiones matem\u00e1ticas para calcular ra\u00edces.  Tambi\u00e9n existen funciones como math.sqrt(), dependiendo del lenguaje de programaci\u00f3n.</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operadores-aritmeticos-de-incremento-y-de-decremento","title":"Operadores aritm\u00e9ticos de incremento y de decremento","text":"<p>Son \u00fatiles en situaciones donde se necesita aumentar o disminuir el valor de una variable de manera r\u00e1pida y sencilla:</p> <ul> <li> <p>incremento ( ++ ) aumenta el valor de una variable en 1.</p> <pre><code>x++ # es equivalente a x = x + 1\n</code></pre> </li> <li> <p>decremento ( -- ) disminuye el valor de una variable en 1.</p> <pre><code>y-- # es equivalente a y = y \u2013 1\n</code></pre> </li> </ul> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que los operadores de incremento y decremento tambi\u00e9n se pueden utilizar con otros tipos de dato como enteros, n\u00fameros decimales o incluso caracteres en algunos lenguajes. </p> <p>Sin embargo, su comportamiento podr\u00eda variar dependiendo del lenguaje de programaci\u00f3n que est\u00e9s utilizando, por lo que es recomendable consultar la documentaci\u00f3n espec\u00edfica del lenguaje para obtener m\u00e1s informaci\u00f3n sobre su uso y posibles limitaciones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#sufijo-y-prefijo","title":"Sufijo y prefijo","text":"<p>Pueden ser utilizados en dos maneras diferentes: sufijo y prefijo. Depender\u00e1 de c\u00f3mo desees que se realicen las operaciones en tu c\u00f3digo.</p> <ul> <li> <p>Sufijo (x++, x--): cuando utilizas el operador con sufijo, la notaci\u00f3n de sufijo significa que el operador de incremento o de decremento se coloca despu\u00e9s del operando, es decir, despu\u00e9s del nombre de la variable. </p> <p>As\u00ed, al ejecutarse la sentencia, primero se asigna el valor actual almacenado en la variable de referencia a la variable de almacenamiento y luego se realiza el incremento o decremento de dicho valor. </p> Ejemplo de sufijo incremental<pre><code>x = 5\ny = x++\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>6\n5\n</code></pre> <p>Si tienes una variable x con valor 5 y se ejecuta <code>y = x++</code>, se asignar\u00e1 el valor actual de x a y, y luego se incrementar\u00e1 el valor de x en 1.  Por lo tanto, la variable y tendr\u00e1 almacenado un 5 y la variable x tendr\u00e1 almacenado un 6 despu\u00e9s de la operaci\u00f3n.</p> Ejemplo de sufijo decremental<pre><code>x = 5\ny = x--\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>4\n5\n</code></pre> <p>Si tienes una variable x con valor 5 y ejecuta <code>y = x--</code>, se asignar\u00e1 el valor actual de x a y, y luego se decrementar\u00e1 el valor de x en 1.  Por lo tanto, la variable y tendr\u00e1 almacenado un 5 y la variable x tendr\u00e1 almacenado un 4 despu\u00e9s de la operaci\u00f3n.</p> </li> <li> <p>Prefijo (++x, --x): por otro lado, cuando utilizas el operador con prefijo, la notaci\u00f3n de prefijo significa que el operador de incremento o de decremento se coloca antes de su operando, es decir, antes del nombre de la variable.</p> <p>As\u00ed, al ejecutarse la sentencia, primero se realiza el incremento o decremento del valor almacenado en la variable de referencia y luego se asigna el nuevo valor de dicha variable a la variable de almacenamiento. </p> Ejemplo de prefijo incremental<pre><code>x = 5\ny = ++x\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>6\n6\n</code></pre> <p>Si tienes una variable x con valor 5 y ejecuta <code>y = ++x</code>, primero se incrementar\u00e1 el valor de la variable x en 1 y luego se asignar\u00e1 el nuevo valor de x a la variable y.  En este caso, la variable y tendr\u00e1 almacenado un 6 y la variable x tambi\u00e9n tambi\u00e9n tendr\u00e1 almacenado 6 despu\u00e9s de la operaci\u00f3n.</p> Ejemplo de prefijo incremental<pre><code>x = 5\ny = --x\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>4\n4\n</code></pre> <p>Si tienes una variable x con valor 5 y se ejecuta <code>y = --x</code>, primero se decrementar\u00e1 el valor de la variable x en 1 y luego se asignar\u00e1 el nuevo valor de x a la varianble y.  En este caso, la variable y tendr\u00e1 almacenado un 4 y la variable x tambi\u00e9n tambi\u00e9n tendr\u00e1 almacenado 6 despu\u00e9s de la operaci\u00f3n.</p> </li> </ul> <p>En resumen, la elecci\u00f3n entre el sufijo y el prefijo depender\u00e1 de si deseas utilizar el valor original o el nuevo valor de la variable en una operaci\u00f3n. </p> <p>Ambos tienen sus usos en diferentes situaciones y depender\u00e1 de tus necesidades espec\u00edficas en el c\u00f3digo que est\u00e9s escribiendo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operador-de-concatenacion-de-cadenas","title":"Operador de concatenaci\u00f3n de cadenas","text":"<p>Se utiliza para unir dos cadenas de caracteres:</p> <ul> <li> <p>concatenaci\u00f3n ( + ) opera con cadenas de caracteres.</p> <pre><code>print(\"Hola\" + \" \" + \"Mundo!\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola Mundo!\n</code></pre> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operador-de-repeticion-repetition-operator","title":"Operador de repetici\u00f3n (repetition operator)","text":"<p>El operador ( * ) en Python se llama operador de repetici\u00f3n cuando se usa con cadenas de caracteres.</p> Python<pre><code>cadena = \"Ay \"\ncadena_repetida = cadena * 3\nprint(cadena_repetida)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ay Ay Ay\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operador-de-desempaquetado-unpacking-operator","title":"Operador de desempaquetado (unpacking operator)","text":"<p>Ver https://towardsdatascience.com/unpacking-operators-in-python-306ae44cd480</p> <p>El operador ( * ) en Python se llama operador de desempaquetado cuando se usa para desempaquetar colecciones en variables individuales</p> Python<pre><code># Tenemos una lista de tres elementos\nnumeros = [1, 2, 3]\n\n# Usamos el operador * para desempaquetar los elementos de la lista\na, b, c = numeros\n\n# Ahora las variables a, b y c contienen los valores de la lista\nprint(a)  \nprint(b)  \nprint(c)  \n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\n3\n</code></pre> <p>En este c\u00f3digo, <code>a, b, c = numeros</code> desempaqueta los elementos de la lista <code>numeros</code> en las variables <code>a</code>, <code>b</code> y <code>c</code>. Despu\u00e9s de esta l\u00ednea, <code>a</code> contiene el primer elemento de la lista, <code>b</code> contiene el segundo elemento y <code>c</code> contiene el tercer elemento.</p> <p>En el ejemplo anterior, el desempaquetado es impl\u00edcito y no precisa incluir al operador.</p> <p>Pero existen casos donde esta sintaxis no es posible y entonces resulta necesario aplicar el operador:</p> <pre><code>Aqu\u00ed tienes un ejemplo donde se aplica el operador de desempaquetado ( * ) para pasar los elementos de una lista como argumentos a una funci\u00f3n:\n\n```py title=\"Python\"\ndef suma(a, b, c):\n    return a + b + c\n\n# Tenemos una lista de tres elementos\nnumeros = [1, 2, 3]\n\n# Usamos el operador * para desempaquetar los elementos de la lista y pasarlos como argumentos a la funci\u00f3n suma\nresultado = suma(*numeros)\n\nprint(resultado)\n```\n\n``` title=\"Terminal (Entrada/Salida)\"\n6\n```\n\n&gt; En este c\u00f3digo, `suma(*numeros)` desempaqueta los elementos de la lista `numeros` y los pasa como argumentos a la funci\u00f3n `suma()`.  \nLa funci\u00f3n `suma()` luego suma estos argumentos y retorna el resultado.\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operadores-de-relacion","title":"Operadores de relaci\u00f3n","text":"<p>Se utilizan para comparar dos valores y devolver un resultado de tipo l\u00f3gico o booleano (verdadero / True o falso / False):</p> <ul> <li>igualdad ( == ) compara si dos valores son iguales</li> <li>desigualdad ( != ) compara si dos valores son diferentes</li> <li>mayor que ( &gt; ) compara si el valor a la izquierda es mayor</li> <li>menor que ( &lt; ) compara si el valor a la izquierda es menor</li> <li>mayor o igual que ( &gt;= ) compara si el valor a la izquierda es mayor o igual</li> <li>menor o igual que ( &lt;= ) compara si el valor a la izquierda es menor o igual</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operadores-logicos-booleanos","title":"Operadores l\u00f3gicos (booleanos)","text":"<p>Se utilizan para combinar o negar expresiones l\u00f3gicas o booleanas, es decir, para realizar pruebas condicionales y tomar decisiones en un programa:</p> <ul> <li>negaci\u00f3n l\u00f3gica NOT ( ! ) invierte el valor de verdad de una expresi\u00f3n</li> <li>conjunci\u00f3n l\u00f3gica AND ( &amp;&amp; ) devuelve true si ambos operandos son true </li> <li>disyunci\u00f3n l\u00f3gica OR ( || ) devuelve true si al menos uno de los operandos es true</li> </ul> <p></p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#operadores-de-pertenencia","title":"Operadores de pertenencia","text":"<p>Los operadores de pertenencia se utilizan para verificar si un valor o variable se encuentra en una secuencia, como una lista, una tupla, un diccionario, un conjunto o una cadena.</p> <ul> <li>in devuelve True si un valor se encuentra en la secuencia y False de lo contrario.</li> <li>not in devuelve True si un valor no se encuentra en la secuencia y False de lo contrario.</li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5]\n\nprint(3 in lista)  # Output: True\nprint(6 in lista)  # Output: False\n\nprint(3 not in lista)  # Output: False\nprint(6 not in lista)  # Output: True\n\ncadena = \"Hola, mundo!\"\n\nprint(\"mundo\" in cadena)  # Output: True\nprint(\"adios\" in cadena)  # Output: False\n\nprint(\"mundo\" not in cadena)  # Output: False\nprint(\"adios\" not in cadena)  # Output: True\n</code></pre> <p>Estos operadores son muy \u00fatiles para verificar la presencia de un elemento en una secuencia sin tener que recorrerla expl\u00edcitamente.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/operadores/tipos-de-operadores/#el-operador-coma-y-las-expresiones-compuestas","title":"El operador coma y las expresiones compuestas","text":"<p>El operador coma ( , ) es utilizado en varios lenguajes de programaci\u00f3n para unir, combinar, m\u00faltiples expresiones en una sola expresi\u00f3n m\u00e1s grande. Este eval\u00faa cada una de las expresiones en orden, de izquierda a derecha, y devuelve el resultado de la \u00faltima expresi\u00f3n (pero puede depender de la evaluaci\u00f3n de las otras expresiones).</p> <p>El operador coma es el operador de menor precedencia.</p> <p>Declaraciones de variables:  El operador coma se puede utilizar en la declaraci\u00f3n de variables para inicializar m\u00faltiples variables en una sola sentencia.  </p> <p>En el siguiente ejemplo, se declaran e inicializan las variables a, b y c en una sola l\u00ednea separando cada inicializaci\u00f3n con el operador coma.</p> JavaScript<pre><code>int a = 1, b = 2, c = 3;\n</code></pre> <p>Secuencia de expresiones:  El operador coma se puede utilizar para separar varias expresiones en una secuencia. Cada expresi\u00f3n se eval\u00faa, pero solo el resultado de la \u00faltima expresi\u00f3n se toma como resultado final.</p> <p>En el siguiente ejemplo, las expresiones (a++, b++, c++) forman una secuencia donde los valores de a, b y c se incrementan en 1. La variable resultado almacena el valor de c antes del incremento en la \u00faltima expresi\u00f3n de la secuencia, es decir, 3. Luego, vemos como x adopta, en ambos casos, el valor de la \u00faltima expresi\u00f3n, pero la variable y va cambiando de valor en las expresiones previas.</p> JavaScript<pre><code>let a = 1, b = 2, c = 3; let resultado = (a++, b++, c++); console.log(resultado); // Imprime 3\nlet m = (n = 3, n + 1); console.log(m); // m vale 4\nlet x = (y = 20, y = y - 5, 30/y) console.log(x) // x vale 2\n</code></pre> <p>Bucles y funciones: el operador coma se puede utilizar en bucles y funciones para combinar m\u00faltiples expresiones en un solo lugar.  </p> <p>En el siguiente ejemplo, se utiliza el operador coma para combinar las expresiones i++ y j-- en el incremento y decremento de las variables i y j, respectivamente, dentro del bucle for. El bucle se va a repetir, imprimiendo los valores almacenados en i y en j mientras que el valor de i sea menor que el valor de j.</p> JavaScript<pre><code>for (i = 0, j = 10; i &lt; j; i++, j--) {\n    console.log(i, j);\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>0 10\n1 9\n2 8\n3 7\n4 6\n</code></pre> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que el uso del operador coma debe hacerse con precauci\u00f3n, ya que puede complicar la legibilidad y el mantenimiento del c\u00f3digo si se utiliza en exceso o de manera confusa. </p> <p>Es recomendable utilizarlo de manera clara y comprensible para evitar confusiones.</p> <p>Referencias</p> <ol> <li> <p>Una expresi\u00f3n es una combinaci\u00f3n de uno o m\u00e1s operandos y operadores que son interpretados (calculados) por el compilador o int\u00e9rprete del lenguaje de programaci\u00f3n para producir otro valor (un resultado).\u00a0\u21a9</p> </li> <li> <p>Los operandos son los valores, en una expresi\u00f3n, sobre los que se realizan las operaciones para obtener un resultado.\u00a0\u21a9</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_conversion-de-tipos-de-datos/","title":"Conversi\u00f3n de tipos de dato","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/_conversion-de-tipos-de-datos/#definicion","title":"Definici\u00f3n","text":"<p>En la programaci\u00f3n existen situaciones en las que se necesita cambiar el tipo de dato en otro.</p> <p>Las variables tienen un tipo de dato asociado que define el tipo de valor que pueden almacenar: n\u00fameros enteros, n\u00fameros de punto flotante, cadenas de caracteres y booleanos, entre otros. A veces es necesario interpretar el tipo de dato de dicho valor como si fuera otro, para realizar ciertas operaciones o para satisfacer requisitos espec\u00edficos del programa. Esta conversi\u00f3n es necesaria cuando se desean realizar operaciones o comparaciones espec\u00edficas que requieren tipos de dato compatibles.</p> <p>Definici\u00f3n</p> <p>Para cambiar el tipo de dato de una variable en la mayor\u00eda de los lenguajes de programaci\u00f3n, puedes utilizar un proceso llamado \"casting\" o \"conversi\u00f3n de tipo\". Esto implica interpretar el tipo de dato del valor de un operando como si fuera otro tipo de dato.</p> <p>Hay dos tipos principales de conversiones de tipo de dato: impl\u00edcita y expl\u00edcita.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_conversion-de-tipos-de-datos/#ventajas-de-utilizar-casting","title":"Ventajas de utilizar casting","text":"<p>El casting o la conversi\u00f3n de tipos se utiliza por varias razones en programaci\u00f3n:</p> <ul> <li> <p>Compatibilidad de tipos: Algunas operaciones requieren que los operandos sean del mismo tipo. Si tienes datos de diferentes tipos que necesitas operar juntos, puedes usar casting para convertir uno o ambos datos al tipo requerido.</p> </li> <li> <p>Evitar errores: Algunos lenguajes de programaci\u00f3n son estrictos con los tipos de datos y lanzar\u00e1n errores si intentas realizar operaciones entre tipos incompatibles. El casting puede ser utilizado para evitar estos errores.</p> </li> <li> <p>Aprovechar caracter\u00edsticas espec\u00edficas de los tipos de datos: Algunos tipos de datos tienen caracter\u00edsticas o comportamientos espec\u00edficos que puedes querer aprovechar. Por ejemplo, la divisi\u00f3n de dos enteros en muchos lenguajes de programaci\u00f3n descarta cualquier fracci\u00f3n y devuelve un entero. Si quieres un resultado fraccionario, puedes convertir uno o ambos operandos a un tipo de dato de punto flotante.</p> </li> <li> <p>Formateo de datos: A veces, necesitas convertir datos a un tipo espec\u00edfico para su presentaci\u00f3n o salida. Por ejemplo, puedes necesitar convertir un n\u00famero a una cadena para concatenarlo con otras cadenas y mostrarlo al usuario.</p> </li> </ul> <p>\u00a1Para recordar!</p> <p>El \"casting\" es una operaci\u00f3n temporal que no cambia el valor original del operando afectado.</p> Python<pre><code>cadena = \"ESTOY EN MAYUSCULAS\"\n\nprint(cadena.lower()) # Imprime la cadena en min\u00fasculas\n\nprint(cadena) # Imprime la cadena original\n</code></pre> Terminal (Entrada/Salida)<pre><code>estoy en mayusculas\nESTOY EN MAYUSCULAS\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_conversion-de-tipos-de-datos/#conversion-implicita","title":"Conversi\u00f3n impl\u00edcita","text":"<p>Ocurre autom\u00e1ticamente cuando el lenguaje de programaci\u00f3n realiza la conversi\u00f3n de tipo de dato de forma impl\u00edcita para mantener la coherencia entre diferentes tipos de dato. </p> <p>Por ejemplo, en muchos lenguajes, se puede sumar un entero y un n\u00famero de punto flotante, y el resultado ser\u00e1 un n\u00famero de punto flotante debido a la conversi\u00f3n impl\u00edcita:</p> Python<pre><code>entero = 5\nflotante = 2.5\n\n# La conversi\u00f3n impl\u00edcita convierte 'entero' a un n\u00famero de 'punto flotante'\nresultado = entero + flotante  \n\nprint(resultado)  # imprime 7.5\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_conversion-de-tipos-de-datos/#conversion-explicita","title":"Conversi\u00f3n expl\u00edcita","text":"<p>Tambi\u00e9n conocida como \"casting expl\u00edcito\", ocurre cuando el programador especifica manualmente el tipo de conversi\u00f3n deseado. </p> <p>Esto se hace utilizando funciones o sintaxis espec\u00edficas proporcionadas por el lenguaje de programaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_conversion-de-tipos-de-datos/#sintaxis","title":"Sintaxis","text":"<p>La sintaxis para realizar un cambio de tipo de dato puede variar dependiendo del lenguaje de programaci\u00f3n utilizado. </p> <p>En Python, por ejemplo, puedes utilizar las funciones str(), int(), float(), bool() para convertir entre tipos de dato:</p> Python<pre><code># Conversi\u00f3n de entero a cadena\nnumero = 42\ncadena = str(numero)\nprint(type(cadena))  # imprime &lt;class 'str'&gt;\n\n# Conversi\u00f3n de cadena a entero\ncadena = \"42\u201d\nnumero = int(cadena)\nprint(type(numero))  # imprime &lt;class 'int'&gt;\n\n# Conversi\u00f3n de cadena a flotante\ncadena = \"3.14\u201d\nflotante = float(cadena)\nprint(type(flotante))  # imprime &lt;class 'float'&gt;\n\n# Conversi\u00f3n de entero a booleano\nnumero = 0\nbooleano = bool(numero)\nprint(type(booleano))  # imprime &lt;class 'bool'&gt;\n</code></pre> <p>En JavaScript, hay funciones como toString(), parseInt(), parseFloat(), Boolean() para realizar conversiones de tipo. La variable resultante adquiere el nuevo tipo de dato asignado:</p> JavaScript<pre><code>// Conversi\u00f3n de n\u00famero a cadena\nvar numero = 42\nvar cadena = numero.toString()\nconsole.log(typeof cadena);  // imprime string\n\n// Conversi\u00f3n de cadena a n\u00famero entero\nvar cadena = \"42\"\nvar numero = parseInt(cadena)\nconsole.log(typeof numero);  // imprime number\nconsole.log(Number.isInteger(numero));  // imprime true\n\n\n// Conversi\u00f3n de cadena a n\u00famero de punto flotante\nvar cadena = \"3.14\"\nvar flotante = parseFloat(cadena)\nconsole.log(typeof flotante);  // imprime number\nconsole.log(Number.isInteger(numero));  // imprime false\n\n// Conversi\u00f3n de valor a booleano\nvar valor = 0\nvar booleano = Boolean(valor)\nconsole.log(typeof booleano);  // imprime boolean\n</code></pre> <p>\u00a1Para recordar!</p> <p>Es importante destacar que, al igual que con la conversi\u00f3n de tipo de dato, es necesario tener en cuenta las posibles implicaciones y restricciones de la operaci\u00f3n de \"casting\". Algunos lenguajes de programaci\u00f3n pueden permitir \"casting\" impl\u00edcitos entre tipos de dato compatibles, mientras que otros requieren \"casting\" expl\u00edcitos. </p> <p>Estos son solo ejemplos b\u00e1sicos. Los m\u00e9todos y funciones espec\u00edficas para realizar el cambio de tipo de dato pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando.  Aseg\u00farate de consultar la documentaci\u00f3n del lenguaje espec\u00edfico para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo realizar cambios de tipo de dato en ese contexto.</p> <p>Ten en cuenta</p> <p>Existen diversas funciones en cada lenguaje que te ayudar\u00e1n en la conversi\u00f3n de tipo de dato.</p> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que, al realizar una conversi\u00f3n de tipo expl\u00edcita, debes asegurarte de que la operaci\u00f3n sea v\u00e1lida y que no se produzca una p\u00e9rdida de informaci\u00f3n o resultados inesperados. Por ejemplo, al convertir un n\u00famero de punto flotante a un entero, se perder\u00e1 la parte decimal del n\u00famero.</p> <p>Por lo tanto, es fundamental comprender los tipos de dato y las implicaciones de la conversi\u00f3n antes de aplicarla en el c\u00f3digo.</p> <p>Adem\u00e1s, ten en cuenta que las opciones de conversi\u00f3n de tipo pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Aseg\u00farate de consultar la documentaci\u00f3n espec\u00edfica del lenguaje para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo realizar cambios de tipo de dato en ese contexto. Algunos lenguajes de programaci\u00f3n pueden permitir casts impl\u00edcitos entre tipos de dato compatibles, mientras que otros requieren casts expl\u00edcitos. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_conversion-de-tipos-de-datos/#ejemplos-de-aplicacion","title":"Ejemplos de aplicaci\u00f3n","text":"<p>Evaluemos las siguientes conversiones:</p> Python<pre><code>valor1 = str(12)\nvalor2 = \"Hola\"\nvalor3 = float(\"14.34\")\n\nprint (\"Valor 1: \", type(valor1), \"   valor:\", valor1)\nprint (\"Valor 2: \", type(valor2), \"   valor:\", valor2)\nprint (\"Valor 3: \", type(valor3), \"   valor:\", valor3)\n\nvalor4 = int(\"14.34\") \nvalor5 = int(valor2)\n</code></pre> <p>\u00bfQu\u00e9 crees que ocurrir\u00e1 en cada caso?</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Terminal (Entrada/Salida)<pre><code>Valor 1:  &lt;class 'str'&gt;    valor: 12\nValor 2:  &lt;class 'str'&gt;    valor: Hola\nValor 3:  &lt;class 'float'&gt;    valor: 14.34\n\nTraceback (most recent call last):\n  File \" \u2026 \", line 9, in &lt;module&gt;\n    valor4 = int(\"14.34\")\n             ^^^^^^^^^^^^\nValueError: invalid literal for int() with base 10: '14.34'\n\nTraceback (most recent call last):\n  File \" \u2026 \", line 10, in &lt;module&gt;\n    valor5 = int(valor2)\n             ^^^^^^^^^^^\nValueError: invalid literal for int() with base 10: 'Hola'\n</code></pre> <p>La l\u00ednea 9 devolver\u00e1 un error de conversi\u00f3n ya que no es posible convertir un valor de punto flotante en entero, forzando la finalizaci\u00f3n del programa.</p> <p>Si la l\u00ednea 9 no devolviera un error, La l\u00ednea 10 devolver\u00e1 un error de conversi\u00f3n ya que no es posible convertir una cadena en entero, forzando la finalizaci\u00f3n del programa.</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_resumen-sobre-el-alcance-de-las-variables/","title":"Alcance de una variable: resumen","text":"<p>Un concepto muy importante en la programaci\u00f3n es el concepto de alcance.</p> <p>El alcance define en que partes del c\u00f3digo existe y puede ser accedida una variable, ya que mientras algunas variables pueden ser accedidas en cualquier parte del programa, otras solo pueden ser utilizadas en ciertas partes del c\u00f3digo.</p> <p>Se le denomina bloque de c\u00f3digo al c\u00f3digo que se encuentra delimitado entre llaves { }. </p> <p>Los bloques de c\u00f3digo nos permiten agrupar una o m\u00e1s sentencias.</p> <p></p> <p>En el alcance global, las variables se declaran fuera de los bloques de c\u00f3digo. </p> <p>Por esto mismo, como las variables no pertenecen exclusivamente a un solo bloque pueden ser utilizadas desde cualquier regi\u00f3n del c\u00f3digo. </p> <p>A estas variables se les conoce como variables globales.</p> JavaScript<pre><code>function bienvenida() {\n   console.log(\"\u00a1Hola, \" + nombre + \"!\")\n}\nfunction colorFavorito() {\n   console.log(\"Me llamo \" + nombre + \" y mi color favorito es el \" + color)\n}\n{ // Bloque principal (main)\n   var nombre = \"Juan\"\n   var color = \"azul\"\n   bienvenida()\n   colorFavorito()\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>\u00a1Hola, Juan!\nMe llamo Juan y mi color favorito es el azul\n</code></pre> <p>Como podemos ver en el ejemplo, ambas funciones pueden utilizar las variables nombre o color pues estas fueron definidas fuera de los bloques de c\u00f3digo.</p> <p>Cuando una variable es definida dentro de un bloque de c\u00f3digo, esta solo puede ser accedida por el c\u00f3digo dentro del mismo bloque o de los bloques contenidos dentro del bloque donde es definida la variable. </p> <p>Las variables que son definidas dentro de un bloque de c\u00f3digo se conocen como variables locales.</p> JavaScript<pre><code>function sumar () {\n   let a = 10\n   if(a &gt; 5) {\n      let b = 15\n      console.log(a + b)  //Se imprime en consola 25\n   }\n   return a + b; // Error\n}\n{ // Bloque principal (main)\n   sumar()\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>25\nindex.js:7\n\n  return a + b\n             ^\nReferenceError: b is not defined\n</code></pre> <p>En este caso, obtenemos un error al ejecutar la funci\u00f3n sumar(), pues, aunque la condici\u00f3n del if se cumple y dentro del bloque de c\u00f3digo (bloque verdadero) se ejecuta la inicializaci\u00f3n de la variable b con el valor 15, esta se elimina al finalizar dicho bloque, no existiendo ya fuera de las llaves (\u00e1mbito) donde fue creada, por lo que no podemos utilizarla en la l\u00ednea de retorno (return)</p> <p>Es importante recordar que los par\u00e1metros de una funci\u00f3n se inicializan como variables locales dentro del cuerpo de la funci\u00f3n.</p> JavaScript<pre><code>function ubicacion(ciudad) {\n   console.log(\"Mi ciudad favorita es: \" + ciudad)\n}\n{ // Bloque principal (main)\n   ubicacion(\"San Francisco\")\n   console.log(ciudad)  // Error\n}\n</code></pre> <p>``` js title=\"Salida Mi ciudad favorita es: San Francisco</p> <p>index.js:5   console.log(ciudad)               ^ ReferenceError: ciudad is not defined ```</p> <p>Aqu\u00ed, los argumentos que reciben estos par\u00e1metros al ser invocada la funci\u00f3n solamente existir\u00e1n mientras se ejecute dicha funci\u00f3n.</p> <p>La vida de una variable comienza cuando es declarada.</p> <p>Las variables locales son destruidas (eliminadas), y dejan de ser accesibles, cuando la ejecuci\u00f3n del programa abandona el bloque de c\u00f3digo donde han sido declaradas , mientras que las variables globales son destruidas cuando la ejecuci\u00f3n del programa termina por completo. </p> <p>Sin embargo, tambi\u00e9n es posible destruir una variable local o global en cualquier momento del ciclo de vida, con la instrucci\u00f3n de destrucci\u00f3n correspondiente.</p> <p>El t\u00e9rmino destruir hace referencia a que la direcci\u00f3n de memoria asociada a la variable pasa a estar disponible para albergar otra variable que se defina en el programa, posteriormente, y que eventualmente sobrescribir\u00e1 los bits antiguos almacenados en dicha direcci\u00f3n.</p> <p>Buenas pr\u00e1cticas</p> <p>Aunque en principio podr\u00eda parecer m\u00e1s sencillo crear a todas las variables accesibles desde cualquier \u00e1mbito para nuestro c\u00f3digo (variables globales), esto se considera una muy mala pr\u00e1ctica de programaci\u00f3n pues conforme el programa vaya creciendo esto podr\u00eda ocasionar serios problemas:</p> <ul> <li>Disminuye la legibilidad</li> <li>Su uso puede producir efectos colaterales, al producirse alteraciones no previstas de su valor en una parte del programa (un bloque de c\u00f3digo) que afectan a su uso en otra parte del programa (otro bloque de c\u00f3digo o, incluso, en el bloque principal del programa).</li> <li>Dificultan la modularidad del c\u00f3digo.</li> </ul> <p>Si bien las variables globales se justifican solamente cuando se necesitan en casi todas las partes del programa, la regla de oro es no utilizarlas.</p> <p>Es por ello que siempre debemos intentar utilizar variables locales. De esta forma no solo se pueden evitar errores o confusiones con los nombres y valores de estas variables, sino que el utilizar variables locales har\u00e1 el c\u00f3digo m\u00e1s legible pues los bloques de c\u00f3digo proporcionan una mejor organizaci\u00f3n e incluso permitir\u00e1n ahorrar espacio reservado en memoria, pues las variables dejar\u00e1n de existir en cuanto el bloque donde fueran declaradas termine de ejecutarse.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_resumen-sobre-el-identificador-de-una-variable/","title":"Identificador de una variable: resumen","text":"<p>El nombre de una variable en programaci\u00f3n debe ser descriptivo y significativo, de manera que refleje el prop\u00f3sito o contenido del valor que almacenar\u00e1 la variable. </p> <p>Cuando se nombran variables, es importante seguir algunas convenciones de nombramiento (naming convention) y conocer las restricciones de nombramiento para hacer el c\u00f3digo legible y permitir un mantenimiento \u00e1gil y simple, por ejemplo:</p> <ul> <li>Utiliza nombres que sean claros y comprensibles y evita nombres demasiado largos.</li> <li>Utiliza sustantivos para nombrar objetos y variables.</li> <li>No uses caracteres especiales como los acentuados o la \u00f1. Tampoco empieces con un n\u00famero o uses espacios.</li> <li>Elige un estilo de casing, como camel case o snake case.</li> </ul> <p>\u00a1Para recordar! que las convenciones de nombramiento pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando, as\u00ed como las directrices establecidas por la comunidad o los est\u00e1ndares de codificaci\u00f3n. </p> <p>Es importante seguir una convenci\u00f3n de casing consistente en un proyecto o c\u00f3digo fuente para mejorar la legibilidad y facilitar el entendimiento del c\u00f3digo por parte de otros desarrolladores. Adem\u00e1s, algunos lenguajes de programaci\u00f3n tienen convenciones de casing espec\u00edficas recomendadas por su comunidad o est\u00e1ndares de codificaci\u00f3n.</p> <p>Es recomendable consultar la documentaci\u00f3n o gu\u00edas de estilo correspondientes al lenguaje o entorno en el que est\u00e9s trabajando para seguir las mejores pr\u00e1cticas espec\u00edficas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_resumen-sobre-el-valor-de-una-variable/","title":"Valor asignado a una variable: resumen","text":"<p>En t\u00e9rminos simples, una variable es un contenedor que puede almacenar un valor de alg\u00fan tipo de dato.</p> <p>Antes de poder almacenar un valor, una variable debe ser declarada.</p> <p>La asignaci\u00f3n de un valor a una variable se realiza mediante una sentencia de asignaci\u00f3n en el c\u00f3digo de programaci\u00f3n, en la que se especifica el nombre de la variable seguido del valor que se le quiere asignar:</p> <p>variable \u2b05 valor_asignado</p> <p>Es importante tener en cuenta que, en algunos lenguajes, el valor asignado a una variable puede ser de diferentes tipos de dato, como n\u00fameros, texto, listas, entre otros.</p> <p>Adem\u00e1s, el valor de una variable puede cambiar durante la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_resumen-sobre-tipos-de-datos/","title":"tipos de dato: resumen","text":"<p>En programaci\u00f3n, los tipos de dato de variables se refieren al tipo de valor que puede ser almacenado en una variable. Cada tipo de dato tiene sus propias caracter\u00edsticas y restricciones.</p> <p>tipos de dato elementales o b\u00e1sicos:</p> <ul> <li>Enteros (int)</li> <li>Reales (float)</li> <li>Caracteres (char)</li> <li>L\u00f3gicos o Booleanos (bool)</li> </ul> <p>Estructuras de datos o tipos de dato complejos:</p> <ul> <li>Cadenas de caracteres (string)</li> <li>Listas (list)</li> <li>Matrices (matrix)</li> <li>Tuplas (tuple)</li> <li>Arreglos (array)</li> <li>Diccionarios (dict)</li> <li>Conjuntos (set)</li> </ul> <p>Dependiendo del lenguaje de programaci\u00f3n que se est\u00e9 utilizando, pueden existir m\u00e1s o menos \u000btipos de dato disponibles.</p> <p>Adem\u00e1s, en algunos casos depender\u00e1 de la potencia de estos lenguajes poder articular l\u00f3gicas m\u00e1s complejas que involucren diferentes tipos de dato en una misma operaci\u00f3n.</p> <p>Las variables tienen un tipo de dato asociado que define el tipo de valor que pueden almacenar. A veces es necesario interpretar el tipo de dato de dicho valor como si fuera otro, para realizar ciertas operaciones o para satisfacer requisitos espec\u00edficos del programa. </p> <p>Para cambiar el tipo de dato de una variable en la mayor\u00eda de los lenguajes de programaci\u00f3n, puedes utilizar un proceso llamado casting o conversi\u00f3n de tipo. Esto implica interpretar el tipo de dato del valor de una variable como si fuera otro tipo de dato.</p> <p>Hay dos tipos principales de conversiones de tipo de dato:     * Impl\u00edcita: ocurre autom\u00e1ticamente cuando el lenguaje de programaci\u00f3n realiza la conversi\u00f3n de tipo de dato de forma impl\u00edcita para mantener la coherencia entre diferentes tipos de dato.      * Expl\u00edcita: ocurre cuando el programador especifica manualmente el tipo de conversi\u00f3n deseado, utilizando funciones o sintaxis espec\u00edficas proporcionadas por el lenguaje de programaci\u00f3n.</p> <p>Es importante tener en cuenta que, al realizar una conversi\u00f3n de tipo expl\u00edcita, debes asegurarte de que la operaci\u00f3n sea v\u00e1lida y que no se produzca una p\u00e9rdida de informaci\u00f3n o resultados inesperados.</p> <p>Es fundamental comprender los tipos de dato y las implicaciones de la conversi\u00f3n antes de aplicarla en el c\u00f3digo.</p> <p>Algunos lenguajes de programaci\u00f3n pueden permitir castings impl\u00edcitos entre tipos de dato compatibles, mientras que otros requieren castings expl\u00edcitos. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_resumen-sobre-variables/","title":"Variables: resumen","text":"<p>\u00a1Muy importante!</p> <p>Una variable es un espacio de almacenamiento (direcci\u00f3n) reservado en la memoria (RAM) de una computadora, que tiene un nombre o identificador \u00fanico asociado dentro de su \u00e1mbito o alcance, y cuyo tama\u00f1o est\u00e1 definido por el tipo de dato asociados y que contiene un valor o una referencia a un valor.</p> <p>Por lo tanto, todo dato que vaya a ser introducido a la computadora, y todo dato que vaya a ser generado o calculado a partir de otros datos para obtener alg\u00fan resultado, debe identificarse y manejarse como variable. </p> <p>Una variable posee 4 caracter\u00edsticas:</p> <ul> <li>El alcance, que determinar\u00e1 en qu\u00e9 partes del programa (regi\u00f3n del programa) la variable podr\u00e1 ser accedida o utilizada.</li> <li>El identificador o nombre, que servir\u00e1 para referenciarla a lo largo de la ejecuci\u00f3n del programa. </li> <li>El tipo de dato, que determinar\u00e1 como va a almacenar un dato para evitar errores.</li> <li>El dato o informaci\u00f3n que se almacenar\u00e1 durante la ejecuci\u00f3n del programa.</li> </ul> <p>El ciclo de vida de una variable puede variar seg\u00fan el lenguaje de programaci\u00f3n utilizado y el alcance en el que se utiliza la variable. Por ejemplo, en algunos lenguajes, las variables pueden tener un alcance limitado a una funci\u00f3n o bloque de c\u00f3digo, mientras que en otros pueden tener un alcance global en todo el programa. Este tema lo veremos m\u00e1s adelante.</p> <p>Resumiendo, es importante destacar que los detalles espec\u00edficos de la creaci\u00f3n de variables pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Algunos lenguajes tienen reglas y convenciones adicionales para la creaci\u00f3n de variables, como restricciones en los nombres o requisitos de \u00e1mbito.</p> <p>Durante la etapa de utilizaci\u00f3n de una variable, estas se utilizan en expresiones y operaciones como asignaci\u00f3n de valores, lectura de valores, modificaci\u00f3n de valores y se tiene en cuenta el alcance y el tipo de dato de la variable. Esto permite utilizar las variables para almacenar y manipular datos en el programa de acuerdo con su prop\u00f3sito y alcance.</p> <p>Por \u00faltimo, en la etapa de destrucci\u00f3n de una variable se llevan a cabo acciones para liberar los recursos asociados a ella y finalizar su existencia en el programa. Esto puede implicar la liberaci\u00f3n de memoria asignada o la finalizaci\u00f3n del \u00e1mbito en el que se encuentra. Los detalles espec\u00edficos de la destrucci\u00f3n pueden variar seg\u00fan el lenguaje de programaci\u00f3n utilizado. Algunos lenguajes tienen mecanismos adicionales de gesti\u00f3n de memoria, como destructores o m\u00e9todos especiales, que permiten ejecutar acciones personalizadas antes de la destrucci\u00f3n de una variable, como liberar otros recursos o realizar tareas de limpieza.</p> <p>\u00a1Importante!</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, antes de que una variable pueda ser usada en un programa, esta debe ser declarada, incluyendo el tipo de dato que ser\u00e1n almacenados en ella. </p> <p>Declarar una variable significa crear una nueva variable en el programa, definiendo su identificador y reservando el espacio necesario en la memoria seg\u00fan el tipo de dato que almacenar\u00e1 durante la ejecuci\u00f3n del programa, pero sin asignarle valor.</p> <p>Para declarar una variable, se debe especificar su nombre, su tipo y su alcance, si aplica. </p> <p>Una vez que se ha declarado una variable, podemos asignarle un valor utilizando el operador de asignaci\u00f3n =</p> <p>Asignar un valor a una variable significa almacenar un valor en el espacio de memoria reservado para ella.</p> <p>Inicializar una variable significa declararla y, adem\u00e1s, asignarle un valor inicial.</p> <p>D (eclaraci\u00f3n) + A (signaci\u00f3n) = I (nicializaci\u00f3n)</p> Declaraci\u00f3n + Asignaci\u00f3n Inicializaci\u00f3n int edad int edad = 18 edad = 18 <p>\u00a1Para recordar!</p> <p>Hablando de como se lee la sintaxis en un lenguaje humanizado, cualquier lectura que lleve a la correcta interpretaci\u00f3n de la instrucci\u00f3n, es v\u00e1lida. Para que ello ocurra, no puede existir ambig\u00fcedad posible. Si la lectura puede interpretarse de dos o maneras diferentes, entonces ser\u00e1 inv\u00e1lida.</p> <p>Recordemos la sintaxis:</p> Declaraci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable\n</code></pre> Asignaci\u00f3n<pre><code>nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> Inicializaci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> <p>La estructura de la sintaxis depender\u00e1 de si la acci\u00f3n es una declaraci\u00f3n, una inicializaci\u00f3n o una asignaci\u00f3n.</p> <p>Tambi\u00e9n depender\u00e1 de como se escriba en cada lenguaje particular.</p> <p>Controlar desde ac\u00e1, lo tom\u00e9 de Identificador de variable</p> <p>En t\u00e9rminos simples, una variable es un contenedor que puede almacenar un valor de alg\u00fan tipo de dato.</p> <p>Antes de poder almacenar un valor, una variable debe ser declarada.</p> <p>La asignaci\u00f3n de un valor a una variable se realiza mediante una sentencia de asignaci\u00f3n en el c\u00f3digo de programaci\u00f3n, en la que se especifica el nombre de la variable seguido del valor que se le quiere asignar:</p> <p>variable \u2b05 valor_asignado</p> <p>Es importante tener en cuenta que, en algunos lenguajes, el valor asignado a una variable puede ser de diferentes tipos de dato, como n\u00fameros, texto, listas, entre otros.</p> <p>Adem\u00e1s, el valor de una variable puede cambiar durante la ejecuci\u00f3n del programa.</p> <p>Las variables son un concepto esencial en la programaci\u00f3n. Son elementos fundamentales en la programaci\u00f3n que nos permiten almacenar y manipular valores en la memoria durante la ejecuci\u00f3n de un programa. </p> <p>Para utilizar una variable en programaci\u00f3n, primero debemos declararla o inicializarla. En este segundo caso, significa declararla y asignarle un valor utilizando el operador de asignaci\u00f3n (=)</p> <p>Tambi\u00e9n es posible actualizar el valor de una variable asign\u00e1ndole un nuevo valor utilizando el mismo operador de asignaci\u00f3n (=)</p> <p>Si sigues las convenciones de nomenclatura y comprendes los tipos de dato y el alcance de las variables, podr\u00e1s escribir c\u00f3digo que sea m\u00e1s f\u00e1cil de leer y mantener.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_variables-especiales-segun-su-aplicacion/","title":"Variables especiales seg\u00fan su aplicaci\u00f3n","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/_variables-especiales-segun-su-aplicacion/#acumulador","title":"Acumulador","text":"<ul> <li>Es una variable cuyo valor aumenta o disminuye en una cantidad variable cada vez que se produce un determinado suceso o acci\u00f3n.</li> <li>Debe ser inicializada.</li> </ul> Python: Se desea acumular las notas de pr\u00e1cticas de un alumno.<pre><code>suma = 0 # el valor de sum es 0\nsuma = suma + 13 # el valor de sum es 13\nsuma = suma + 10 # el valor de sum es 23\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/_variables-especiales-segun-su-aplicacion/#contador","title":"Contador","text":"<ul> <li>Es un acumulador cuyo valor aumenta o disminuye en una cantidad constante cada vez que se produce un determinado suceso o acci\u00f3n.</li> <li>Se usa para contar sucesos</li> </ul> <p>``` py title\"=Python: Contar n\u00famero de aprobados.\" aprobados = 0 # la cantidad de aprobados es 0 for nota in listado_de_notas:     if (nota &gt;= 6):         aprobados = aprobados + 1 # la cantidad de aprobados se incrementa en 1 <pre><code>## Resumen\n\n!!! success \"\u00a1Muy importante!\"\n    Una variable es un espacio de almacenamiento (direcci\u00f3n) reservado en la memoria (RAM) de una computadora, que tiene un nombre o identificador \u00fanico asociado dentro de su \u00e1mbito o alcance, y cuyo tama\u00f1o est\u00e1 definido por el tipo de dato asociados y que contiene un valor o una referencia a un valor.\n\nPor lo tanto, todo dato que vaya a ser introducido a la computadora, y todo dato que vaya a ser generado o calculado a partir de otros datos para obtener alg\u00fan resultado, debe identificarse y manejarse como variable. \n\nUna variable posee 4 caracter\u00edsticas:\n\n* El alcance, que determinar\u00e1 en qu\u00e9 partes del programa (regi\u00f3n del programa) la variable podr\u00e1 ser accedida o utilizada.\n* El identificador o nombre, que servir\u00e1 para referenciarla a lo largo de la ejecuci\u00f3n del programa. \n* El tipo de dato, que determinar\u00e1 como va a almacenar un dato para evitar errores.\n* El dato o informaci\u00f3n que se almacenar\u00e1 durante la ejecuci\u00f3n del programa.\n\nEl ciclo de vida de una variable puede variar seg\u00fan el lenguaje de programaci\u00f3n utilizado y el alcance en el que se utiliza la variable. Por ejemplo, en algunos lenguajes, las variables pueden tener un alcance limitado a una funci\u00f3n o bloque de c\u00f3digo, mientras que en otros pueden tener un alcance global en todo el programa. Este tema lo veremos m\u00e1s adelante.\n\nResumiendo, es importante destacar que los detalles espec\u00edficos de la creaci\u00f3n de variables pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Algunos lenguajes tienen reglas y convenciones adicionales para la creaci\u00f3n de variables, como restricciones en los nombres o requisitos de \u00e1mbito.\n\nDurante la etapa de utilizaci\u00f3n de una variable, estas se utilizan en expresiones y operaciones como asignaci\u00f3n de valores, lectura de valores, modificaci\u00f3n de valores y se tiene en cuenta el alcance y el tipo de dato de la variable. Esto permite utilizar las variables para almacenar y manipular datos en el programa de acuerdo con su prop\u00f3sito y alcance.\n\nPor \u00faltimo, en la etapa de destrucci\u00f3n de una variable se llevan a cabo acciones para liberar los recursos asociados a ella y finalizar su existencia en el programa. Esto puede implicar la liberaci\u00f3n de memoria asignada o la finalizaci\u00f3n del \u00e1mbito en el que se encuentra. Los detalles espec\u00edficos de la destrucci\u00f3n pueden variar seg\u00fan el lenguaje de programaci\u00f3n utilizado. Algunos lenguajes tienen mecanismos adicionales de gesti\u00f3n de memoria, como destructores o m\u00e9todos especiales, que permiten ejecutar acciones personalizadas antes de la destrucci\u00f3n de una variable, como liberar otros recursos o realizar tareas de limpieza.\n\n!!! info \"\u00a1Importante!\"\n    En la mayor\u00eda de los lenguajes de programaci\u00f3n, antes de que una variable pueda ser usada en un programa, esta debe ser declarada, incluyendo el tipo de dato que ser\u00e1n almacenados en ella. \n\nDeclarar una variable significa crear una nueva variable en el programa, definiendo su identificador y reservando el espacio necesario en la memoria seg\u00fan el tipo de dato que almacenar\u00e1 durante la ejecuci\u00f3n del programa, pero sin asignarle valor.\n\nPara declarar una variable, se debe especificar su nombre, su tipo y su alcance, si aplica. \n\nUna vez que se ha declarado una variable, podemos asignarle un valor utilizando el operador de asignaci\u00f3n =\n\nAsignar un valor a una variable significa almacenar un valor en el espacio de memoria reservado para ella.\n\nInicializar una variable significa declararla y, adem\u00e1s, asignarle un valor inicial.\n\nD (eclaraci\u00f3n) + A (signaci\u00f3n) = I (nicializaci\u00f3n)\n\n|Declaraci\u00f3n + Asignaci\u00f3n | Inicializaci\u00f3n |\n|:---:|:---:|\n| int edad | int edad = 18 |\n| edad = 18 | |\n\n!!! important \"\u00a1Para recordar!\"\n    Hablando de como se lee la sintaxis en un lenguaje humanizado, cualquier lectura que lleve a la correcta interpretaci\u00f3n de la instrucci\u00f3n, es v\u00e1lida. Para que ello ocurra, no puede existir ambig\u00fcedad posible. Si la lectura puede interpretarse de dos o maneras diferentes, entonces ser\u00e1 inv\u00e1lida.\n\nRecordemos la sintaxis:\n\n``` title=\"Declaraci\u00f3n\"\n\nnombre_de_tipo_de_dato nombre_de_variable\n</code></pre></p> Asignaci\u00f3n<pre><code>nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> Inicializaci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> <p>La estructura de la sintaxis depender\u00e1 de si la acci\u00f3n es una declaraci\u00f3n, una inicializaci\u00f3n o una asignaci\u00f3n.</p> <p>Tambi\u00e9n depender\u00e1 de como se escriba en cada lenguaje particular.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/","title":"Alcance de una variable","text":"<p>Rev. 11/01/2024</p> <p>Un concepto muy importante en programaci\u00f3n es lo que llamamos alcance de una variable (variable scope).</p> <p>Definici\u00f3n</p> <p>El alcance de una variable se refiere a la parte del c\u00f3digo donde una variable existe y es accesible para poder ser utilizada por el programa. </p> <p>Hay dos tipos principales de alcance: local, limitado a la parte del c\u00f3digo donde esa variable existe y puede ser accedida; o global, accesible desde cualquier parte del c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#que-es-el-ambito-de-aplicacion","title":"\u00bfQu\u00e9 es el \u00e1mbito de aplicaci\u00f3n?","text":"<p>En el contexto de la programaci\u00f3n, los t\u00e9rminos \"\u00e1mbito\" y \"alcance\" se utilizan a menudo de manera intercambiable para referirse a la regi\u00f3n o parte de c\u00f3digo donde una variable es visible y accesible.</p> <p>Por ejemplo, si decimos que una variable tiene \"alcance local\", significa que la variable es accesible solo dentro de la regi\u00f3n o parte de c\u00f3digo donde se declara. De manera similar, si decimos que una variable est\u00e1 en el \"\u00e1mbito local\", estamos diciendo lo mismo.</p> <p>Entonces, el \u00e1mbito de aplicaci\u00f3n de una variable es el alcance que tiene la variable, que no es ni m\u00e1s ni menos que la regi\u00f3n o parte de c\u00f3digo donde la variable existe y es accesible.</p> <p>Por lo tanto, puedes usar cualquiera de los dos t\u00e9rminos para describir d\u00f3nde una variable puede ser utilizada en tu c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#ambito-global-o-ambito-local","title":"\u00bf\u00c1mbito global o \u00e1mbito local?","text":"<p>Hemos dicho que b\u00e1sicamente podemos dividir a las variables, en funci\u00f3n del \u00e1mbito de aplicaci\u00f3n donde existen y son accesibles, como locales o globales. Y que la principal diferencia entre una variable global y otra local radica en su alcance o \u00e1mbito de aplicaci\u00f3n, es decir, en la regi\u00f3n o parte de c\u00f3digo donde son visibles y accesibles.</p> <p>Evaluemos un ejemplo de utilizaci\u00f3n de variables globales y locales en Python:</p> Python<pre><code># Variable global\na = 10\n\ndef mi_funcion():\n    # Variable local\n    b = 20\n    print(a)  # Esto es v\u00e1lido, porque 'a' es global\n    print(b)  # Esto es v\u00e1lido, porque 'b' es local a esta funci\u00f3n\n\nmi_funcion()\n\nprint(a)  # Esto es v\u00e1lido, porque 'a' es global\nprint(b)  # Esto dar\u00e1 un error, porque 'b' es local a 'mi_funcion' y no existe aqu\u00ed\n</code></pre> <p>El c\u00f3digo anterior demuestra la diferencia entre las variables globales y las variables locales:</p> <p><code>a = 10</code>: Aqu\u00ed, <code>a</code> es una variable global. Se declara fuera de cualquier funci\u00f3n, por lo que es accesible desde cualquier lugar del c\u00f3digo.</p> <p><code>def mi_funcion()</code>: Esta es la definici\u00f3n de una funci\u00f3n llamada <code>mi_funcion</code>.</p> <p><code>b = 20</code>: Dentro de <code>mi_funcion</code>, se declara <code>b</code> como una variable local. Solo es accesible dentro de <code>mi_funcion</code>.</p> <p><code>print(a)</code>: Dentro de <code>mi_funcion</code>, se puede acceder a la variable global <code>a</code>. Por lo tanto, esta l\u00ednea imprimir\u00e1 el valor de <code>a</code>, que es <code>10</code>.</p> <p><code>print(b)</code>: Tambi\u00e9n se puede acceder a la variable local <code>b</code> dentro de <code>mi_funcion</code>. Esta l\u00ednea imprimir\u00e1 el valor de <code>b</code>, que es <code>20</code>.</p> <p><code>mi_funcion()</code>: Esta l\u00ednea llama a <code>mi_funcion</code>, lo que provocar\u00e1 que se impriman los valores de <code>a</code> y <code>b</code>.</p> <p><code>print(a)</code>: Despu\u00e9s de llamar a <code>mi_funcion</code>, esta l\u00ednea imprime el valor de la variable global <code>a</code> nuevamente. Esto es v\u00e1lido y imprimir\u00e1 <code>10</code>.</p> <p><code>print(b)</code>: Intenta imprimir el valor de <code>b</code>. Sin embargo, dado que <code>b</code> es una variable local a <code>mi_funcion</code>, no es accesible fuera de esa funci\u00f3n. Por lo tanto, esta l\u00ednea dar\u00e1 un error, indicando que <code>b</code> no est\u00e1 definida.</p> <p>Estudiaremos estos conceptos con mayor profundidad, a continuaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#variable-de-alcance-global","title":"Variable de alcance global","text":"<p>El \u00e1mbito donde se encuentra el c\u00f3digo principal de un programa, generalmente definido como <code>main()</code> en algunos lenguajes, se llama \u00e1mbito global. </p> <p>\u00a1Para recordar!</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, incluyendo Python, cualquier c\u00f3digo que no est\u00e1 dentro de una funci\u00f3n o clase se ejecuta en el \u00e1mbito global.</p> <p>Por lo tanto, una variable global es aquella que se define en el c\u00f3digo principal de un programa fuera de cualquier otro \u00e1mbito, como ser funciones o bloques de c\u00f3digo, por ejemplo. </p> <p>Las variables globales existen, son visibles, son accesibles y pueden ser modificadas desde cualquier parte del c\u00f3digo. Por este motivo, su uso debe ser limitado ya que puede llevar a comportamientos inesperados debido a modificaciones no controladas.</p> <p>Aqu\u00ed tenemos varios ejemplos en diferentes lenguajes:</p> Python<pre><code>variable_global = \"Soy una variable global\"\n\ndef mi_funcion():\n    print(variable_global)  # Esto es v\u00e1lido! Output : Soy una variable global\n\nmi_funcion()  \n</code></pre> JavaScript<pre><code>var variableGlobal = \"Soy una variable global\";\n\nfunction miFuncion() {\n    console.log(variableGlobal);  // Esto es v\u00e1lido! Output : Soy una variable global\n}\n\nmiFuncion();  \n</code></pre> Java<pre><code>public class Main {\n    static String variableGlobal = \"Soy una variable global\";\n\n    public static void main(String[] args) {\n        System.out.println(variableGlobal);  // Esto es v\u00e1lido! Output : Soy una variable global\n    }\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\n\nstd::string variableGlobal = \"Soy una variable global\";\n\nint main() {\n    std::cout &lt;&lt; variableGlobal;  // Esto es v\u00e1lido! Output : Soy una variable global\n    return 0;\n}\n</code></pre> <p>De todos estos c\u00f3digos, solo nos detendremos en el detalle de que la variable global se declara en el \u00e1mbito global, fuera de cualquier funci\u00f3n, y luego es accedida desde alg\u00fan \u00e1mbito, en cualquier parte del c\u00f3digo.</p> <p>\u00a1Atenci\u00f3n!</p> <p>Es importante tener cuidado al usar variables globales, ya que pueden ser modificadas desde cualquier parte del c\u00f3digo, lo que puede llevar a comportamientos inesperados. </p> Buenas pr\u00e1cticas para el uso de variables globales <p>Las mejores pr\u00e1cticas para el uso de variables globales en programaci\u00f3n son las siguientes:</p> <ol> <li> <p>Minimizar su uso: En general, es mejor evitar el uso de variables globales siempre que sea posible. Las variables globales pueden hacer que el c\u00f3digo sea dif\u00edcil de entender y mantener, ya que pueden ser modificadas desde cualquier parte del programa.</p> </li> <li> <p>Usar constantes globales: Si necesitas una variable que sea accesible desde todas partes del c\u00f3digo, a menudo es mejor hacerla una constante (es decir, un valor que no cambia una vez que se establece). Esto puede evitar muchos problemas asociados con las variables globales.</p> </li> <li> <p>Encapsulamiento en objetos o m\u00f3dulos: Si necesitas compartir un estado entre varias funciones, a menudo es mejor encapsular ese estado en un objeto o m\u00f3dulo. Esto puede hacer que el c\u00f3digo sea m\u00e1s f\u00e1cil de entender y mantener.</p> </li> <li> <p>Documentar su uso: Si debes usar una variable global, aseg\u00farate de documentar claramente d\u00f3nde y c\u00f3mo se utiliza. Esto puede ayudar a prevenir errores y hacer que el c\u00f3digo sea m\u00e1s f\u00e1cil de entender.</p> </li> <li> <p>Evitar el uso en funciones multi hilo (multi thread): Las variables globales pueden causar problemas en programas multi hilo, ya que diferentes hilos pueden intentar acceder o modificar la variable al mismo tiempo. Si est\u00e1s trabajando con hilos, es mejor evitar las variables globales.</p> </li> </ol> <p>Iremos viendo cada concepto m\u00e1s adelante. Por ahora no te preocupes por entender al m\u00e1ximo de que trata cada uno.</p> <p>Recuerda, cada lenguaje de programaci\u00f3n tiene sus propias convenciones y caracter\u00edsticas, por lo que estas pr\u00e1cticas pueden variar dependiendo del lenguaje que est\u00e9s utilizando.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#variable-de-alcance-local","title":"Variable de alcance local","text":"<p>En t\u00e9rminos generales, en la mayor\u00eda de los lenguajes de programaci\u00f3n, una variable local es una variable que se declara dentro un \u00e1mbito local como una funci\u00f3n o un bloque de c\u00f3digo. </p> <p>Esta variable solo puede ser accesible y modificada dentro de dicho \u00e1mbito, es decir, su \u00e1mbito se limita al bloque de c\u00f3digo donde se declara. Esto proporciona un control m\u00e1s estricto sobre su utilizaci\u00f3n. </p> <p>A su vez, los \u00e1mbitos que se encuentren contenidos dentro del \u00e1mbito de declaraci\u00f3n tambi\u00e9n tendr\u00e1n visibilidad y acceso a la variable en cuesti\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#que-ocurre-si-se-intenta-acceder-a-una-variable-local-fuera-de-su-alcance","title":"\u00bfQu\u00e9 ocurre si se intenta acceder a una variable local fuera de su alcance?","text":"<p>Cuando intentas acceder a una variable local fuera de su alcance, en la mayor\u00eda de los lenguajes obtendr\u00e1s un error (JavaScript, por ejemplo, posee un mecanismo que evita el error, pero es considerado mala pr\u00e1ctica). </p> <p>Debido a que una variable local tiene un alcance limitado a la regi\u00f3n o parte de c\u00f3digo donde es declarada, cuando el flujo de ejecuci\u00f3n del programa sale de dicha regi\u00f3n la variable deja de existir y ya no es visible ni accesible.</p> <p>Por lo tanto, las variables locales son aquellas que se definen dentro de una regi\u00f3n o parte de c\u00f3digo, como una funci\u00f3n o un bloque de c\u00f3digo. Solo existen dentro de ese \u00e1mbito y no son reconocibles fuera de \u00e9l.</p> <p>Por ejemplo, en Python, el siguiente c\u00f3digo devolver\u00e1 un mensaje de error:</p> Python<pre><code>def mi_funcion():\n    variable_local = \"Soy local\"\n\nprint(variable_local)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Traceback (most recent call last):\n  File \"\u2026\", line 4, in &lt;module&gt;\n    print(variable_local)\n          ^^^^^^^^^^^^^^\nNameError: name 'variable_local' is not defined\n</code></pre> <p>Este c\u00f3digo devuelve <code>NameError</code> que dice que <code>variable_local</code> no est\u00e1 definida. Esto se debe a que est\u00e1s intentando acceder a <code>variable_local</code> fuera de su alcance, que es dentro de la funci\u00f3n <code>mi_funcion</code>.</p> <p>Para resolver este problema, es necesario que la funci\u00f3n retorne el dato almacenado en la variable <code>variable_local</code> dentro de la funci\u00f3n para ser utilizado en el \u00e1mbito donde se origin\u00f3 la llamada a la funci\u00f3n:</p> Python<pre><code>def mi_funcion():\n    variable_local = \"Soy local\"\n\n    return variable_local\n\nvariable_global = mi_funcion()  # el dato retornado desde la funci\u00f3n se almacena en una variable\nprint(variable_global) # Se imprime el dato almacenado en la variable que recibi\u00f3 el dato desde la funci\u00f3n\n\nprint(mi_funcion()) # Se imprime directamente el dato retornado desde la funci\u00f3n\n</code></pre> Terminal (Entrada/Salida)<pre><code>Soy local\nSoy local\n</code></pre> <p>Este c\u00f3digo llama dos veces a la funci\u00f3n y en ambos casos la funci\u00f3n retorna el mismo dato desde la l\u00ednea 4:  </p> <ul> <li> <p>La primera llamada ocurre en la l\u00ednea 6. El dato retornado desde la funci\u00f3n se almacena en una variable que luego es impresa en la l\u00ednea 7.  </p> </li> <li> <p>La segunda llamada ocurre en la l\u00ednea 9. El dato retornado desde la funci\u00f3n se imprime directamente.  </p> </li> </ul> <p>Empleando este procedimiento es como podemos acceder y utilizar el dato almacenado en <code>variable_local</code> dentro de la funci\u00f3n, fuera de ella, sin que el programa devuelva un mensaje de error y se detenga de manera inesperada.</p> <p>\u00a1Para recordar!</p> <p>Si declaras una variable dentro de una funci\u00f3n, esa variable es local a esa funci\u00f3n. No podr\u00e1s acceder a esa variable fuera de la funci\u00f3n o desde otras funciones. </p> <p>Esto ayuda a evitar conflictos de nombres de variables y a mantener el c\u00f3digo m\u00e1s organizado y legible y m\u00e1s f\u00e1cil de mantener.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#cuales-son-los-ambitos-locales-mas-comunes","title":"\u00bfCu\u00e1les son los \u00e1mbitos locales m\u00e1s comunes?","text":"<p>Los \u00e1mbitos de aplicaci\u00f3n de una variable local pueden ser los siguientes:</p> <ol> <li> <p>\u00c1mbito de funci\u00f3n: Una variable local declarada dentro de una funci\u00f3n solo puede ser accedida dentro de esa funci\u00f3n. No es visible fuera de la funci\u00f3n.</p> Python<pre><code>def func():\n    j = 20  # Esta es una variable local\n    print(j)  # Podemos acceder a la variable local 'j'\n\nfunc()  # Output : 20\nprint(j)  # Esto dar\u00e1 un error porque 'j' no est\u00e1 definida en el \u00e1mbito global\n</code></pre> <p>En el c\u00f3digo, <code>j</code> es una variable local a la funci\u00f3n <code>func()</code>. No puede ser accedida fuera de <code>func()</code>, por lo que el intento de imprimir <code>j</code> fuera de la funci\u00f3n resulta en un error.</p> </li> <li> <p>\u00c1mbito de bloque: En algunos lenguajes de programaci\u00f3n, una variable local puede tener un \u00e1mbito limitado a un bloque espec\u00edfico de c\u00f3digo, como un bucle o una estructura condicional. </p> <p>Aqu\u00ed tienes ejemplos de c\u00f3mo se maneja el \u00e1mbito de bloque en diferentes lenguajes de programaci\u00f3n:</p> JavaScript<pre><code>for (let i = 0; i &lt; 5; i++) {\n    let x = i;  // En JavaScript, la palabra clave 'let' declara la variable como local. As\u00ed, 'x' NO es accesible fuera del bucle\n}\n\nconsole.log(x);  // Esto dar\u00e1 un error en JavaScript\n</code></pre> Java<pre><code>for (int i = 0; i &lt; 5; i++) {\n    int x = i;  // En Java, 'x' NO es accesible fuera del bucle\n}\n\nSystem.out.println(x);  // Esto dar\u00e1 un error en Java\n</code></pre> C++<pre><code>for (int i = 0; i &lt; 5; i++) {\n    int x = i;  // En C++, 'x' NO es accesible fuera del bucle\n}\n\nstd::cout &lt;&lt; x;  // Esto dar\u00e1 un error en C++\n</code></pre> <p>En los tres c\u00f3digos, donde se utilizan variables locales de bloque, estas variables solo son accesibles dentro de ese bloque.</p> \u00bfQu\u00e9 ocurre con las variables locales de bloque en Python? <p>En Python, sin embargo, las variables declaradas dentro de un bloque de c\u00f3digo como un bucle <code>for</code> o una declaraci\u00f3n <code>if</code> no son locales a ese bloque solamente. En cambio, son visibles en el alcance en el que se encuentra ese bloque. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>for i in range(5):\n    x = i  # En Python, 'x' es accesible fuera del bucle\n\nif (x &gt; 0):\n    print(\"x es mayor que 0 y vale\", x)  # Esto es v\u00e1lido! Output : x es mayor que 0 y vale 4\n    variable_en_bloque = \"Soy una variable en un bloque\"\n\nprint(variable_en_bloque)  # Esto es v\u00e1lido! Output : Soy una variable en un bloque\n</code></pre> <p>Este es un ejemplo de c\u00f3mo Python maneja el \u00e1mbito de las variables. Aqu\u00ed est\u00e1 lo que sucede paso a paso:</p> <p>El bucle <code>for</code> se ejecuta 5 veces, con <code>i</code> tomando los valores de <code>0</code> a <code>4</code>. En cada iteraci\u00f3n, <code>i</code> se asigna a <code>x</code>. Por lo tanto, al final del bucle, <code>x</code> es igual a <code>4</code>.</p> <p>Despu\u00e9s del bucle, hay una estructura alternativa <code>if</code> que comprueba si <code>x</code> es mayor que <code>0</code>. Dado que <code>x</code> es <code>4</code>, la condici\u00f3n es verdadera, por lo que se ejecuta el bloque de c\u00f3digo dentro del <code>if</code>.</p> <p>Dentro de dicho bloque, se imprime un mensaje que dice \"x es mayor que 0 y vale 4\". Luego, se declara una variable llamada <code>variable_en_bloque</code> y se le asigna la cadena \"Soy una variable en un bloque\".</p> <p>Despu\u00e9s de estructura alternativa <code>if</code>, se imprime <code>variable_en_bloque</code>. Aunque <code>variable_en_bloque</code> se declar\u00f3 dentro de la estructura alternativa <code>if</code>, todav\u00eda es accesible fuera de ella. </p> <p>Esto se debe a que Python no tiene un \u00e1mbito de bloque como algunos otros lenguajes de programaci\u00f3n; en su lugar, tiene un \u00e1mbito de funci\u00f3n.</p> <p>Por lo tanto, la salida de este c\u00f3digo ser\u00e1:</p> Terminal (Entrada/Salida)<pre><code>x es mayor que 0 y vale 4\nSoy una variable en un bloque\n</code></pre> <p>Como podemos evaluar, las variables locales de bloque en Python se comportan de manera diferente a muchos otros lenguajes de programaci\u00f3n, donde las variables declaradas dentro de un bloque de c\u00f3digo son locales a ese bloque solamente. </p> <p>\u00a1Para recordar!</p> <p>En Python, las variables son locales a las funciones, no a los bloques de c\u00f3digo.</p> </li> <li> <p>\u00c1mbito de clase (en lenguajes orientados a objetos): En lenguajes de programaci\u00f3n orientados a objetos como Python, Java, C++, etc., una variable local puede ser declarada dentro de un m\u00e9todo de una clase. Esta variable solo ser\u00e1 accesible dentro de ese m\u00e9todo.</p> Puedes analizar un ejemplo aqu\u00ed: Python<pre><code>class Mi_Clase:\n    def mi_metodo(self):\n        x = 10  # Variable local\n        print(x)  # Esto es v\u00e1lido\n\n    def otro_metodo(self):\n        print(x)  # Esto dar\u00e1 un error, 'x' no es accesible fuera de 'mi_metodo'\n\nobj = Mi_Clase()\nobj.mi_metodo()\nobj.otro_metodo()\n</code></pre> <p>Este c\u00f3digo define una clase llamada <code>Mi_Clase</code> que tiene dos m\u00e9todos: <code>mi_metodo</code> y <code>otro_metodo</code>.</p> <p>En el m\u00e9todo <code>mi_metodo</code>, se declara una variable local <code>x</code> y se le asigna el valor <code>10</code>. Luego, este valor se imprime.</p> <p>En el m\u00e9todo <code>otro_metodo</code>, se intenta imprimir la variable <code>x</code>. Sin embargo, dado que <code>x</code> es una variable local dentro del m\u00e9todo <code>mi_metodo</code>, no es accesible desde <code>otro_metodo</code>. Por lo tanto, este intento de imprimir <code>x</code> resultar\u00e1 en un error.</p> <p>Finalmente, se crea un objeto <code>obj</code> de la clase <code>Mi_Clase</code> y se llaman ambos m\u00e9todos. La llamada a <code>obj.mi_metodo()</code> imprimir\u00e1 <code>10</code>, mientras que la llamada a <code>obj.otro_metodo()</code> dar\u00e1 un error porque <code>x</code> no est\u00e1 definida en ese contexto.</p> </li> <li> <p>\u00c1mbito de objeto: En la programaci\u00f3n orientada a objetos, las variables definidas dentro de un objeto (a menudo llamadas propiedades o atributos del objeto) tienen un \u00e1mbito local al objeto.</p> Puedes analizar un ejemplo aqu\u00ed: Python<pre><code>class MiClase:\n    def __init__(self, valor):\n        self.mi_variable = valor\n\n    def muestra_variable(self):\n        print(self.mi_variable)\n\n\n# Crear un objeto de MiClase\nobjeto = MiClase(\"Hola, mundo!\")\n\n# Acceder a mi_variable a trav\u00e9s del objeto\nprint(objeto.mi_variable)  # Esto imprimir\u00e1: Hola, mundo!\n\n# Usar un m\u00e9todo del objeto para acceder a mi_variable\nobjeto.muestra_variable()  # Esto tambi\u00e9n imprimir\u00e1: Hola, mundo!   \n</code></pre> <p>En este c\u00f3digo, <code>mi_variable</code> tiene un \u00e1mbito de objeto. Solo es accesible a trav\u00e9s de una instancia de <code>MiClase</code> (en este caso, <code>objeto</code>). Dentro de la clase, puedes acceder a <code>mi_variable</code> usando <code>self.mi_variable</code>. Fuera de la clase, puedes acceder a <code>mi_variable</code> usando <code>objeto.mi_variable</code>.</p> </li> </ol> <p>Existen otros \u00e1mbitos m\u00e1s espec\u00edficos que por su utilizaci\u00f3n, solo vamos a referenciarlos:</p> <ol> <li> <p>\u00c1mbito de m\u00f3dulo o archivo: En algunos lenguajes de programaci\u00f3n como Python o JavaScript (Node.js), las variables definidas en un archivo o m\u00f3dulo son locales a ese archivo. No son accesibles desde otros archivos a menos que se exporten o se importen expl\u00edcitamente.</p> Puedes analizar un ejemplo aqu\u00ed: <p>En Python, las variables definidas en un archivo son locales a ese archivo. Aqu\u00ed tienes un ejemplo:</p> <p>Supongamos que tienes dos archivos Python: <code>archivo1.py</code> y <code>archivo2.py</code>.</p> <p>En <code>archivo1.py</code>, defines una variable:</p> Python<pre><code># archivo1.py\nmi_variable = \"Hola, mundo!\"\n</code></pre> <p>Si intentas acceder a <code>mi_variable</code> desde <code>archivo2.py</code> sin importarla expl\u00edcitamente, obtendr\u00e1s un error:</p> Python<pre><code># archivo2.py\nprint(mi_variable)  # Esto dar\u00e1 un error, mi_variable no est\u00e1 definida en este archivo\n</code></pre> <p>Para acceder a <code>mi_variable</code> desde <code>archivo2.py</code>, necesitas importarla:</p> Python<pre><code># archivo2.py\nfrom archivo1 import mi_variable\n\nprint(mi_variable)  # Esto imprimir\u00e1: Hola, mundo!\n</code></pre> <p>En este c\u00f3digo, <code>mi_variable</code> tiene un \u00e1mbito de m\u00f3dulo o archivo. Solo es accesible dentro de <code>archivo1.py</code> a menos que se importe expl\u00edcitamente en otro archivo.</p> </li> <li> <p>\u00c1mbito de espacio de nombres (namespace): En lenguajes como C++ o Python, puedes definir espacios de nombres que proporcionan \u00e1mbitos para las variables. Las variables definidas dentro de un espacio de nombres son locales a ese espacio de nombres.</p> Puedes analizar un ejemplo aqu\u00ed: <p>En Python, un espacio de nombres (namespace) es una forma de encapsular variables, funciones y clases. Un ejemplo com\u00fan de un espacio de nombres es un m\u00f3dulo. </p> <p>Supongamos que tienes dos archivos Python: <code>modulo1.py</code> y <code>modulo2.py</code>.</p> <p>En <code>modulo1.py</code>, defines una variable y una funci\u00f3n:</p> Python<pre><code># modulo1.py\nmi_variable = \"Hola, mundo!\"\n\ndef mi_funcion():\n    return \"\u00a1Hola desde modulo1!\"\n</code></pre> <p>En <code>modulo2.py</code>, puedes acceder a <code>mi_variable</code> y <code>mi_funcion()</code> import\u00e1ndolas desde <code>modulo1</code>:</p> Python<pre><code># modulo2.py\nimport modulo1\n\nprint(modulo1.mi_variable)  # Esto imprimir\u00e1: Hola, mundo!\nprint(modulo1.mi_funcion())  # Esto imprimir\u00e1: \u00a1Hola desde modulo1!\n</code></pre> <p>En este c\u00f3digo, <code>modulo1</code> es un espacio de nombres. <code>mi_variable</code> y <code>mi_funcion()</code> est\u00e1n en el espacio de nombres de <code>modulo1</code>, y puedes acceder a ellas usando la sintaxis <code>modulo1.mi_variable</code> y <code>modulo1.mi_funcion()</code>. Esto ayuda a evitar conflictos entre nombres de variables y funciones en diferentes m\u00f3dulos.</p> </li> <li> <p>\u00c1mbito de cierre (closure): En algunos lenguajes de programaci\u00f3n que admiten funciones de primera clase o funciones anidadas, una variable definida en una funci\u00f3n externa puede ser accesible en una funci\u00f3n interna. Este es un concepto avanzado conocido como cierre o closure.</p> Puedes analizar un ejemplo aqu\u00ed: <p>Un cierre en Python es una funci\u00f3n que recuerda los valores de las variables del \u00e1mbito en el que fue creada, incluso si ese \u00e1mbito ya no existe.</p> Python<pre><code>def funcion_externa(x):\n    def funcion_interna(y):\n        return x + y\n    return funcion_interna\n\nmi_closure = funcion_externa(10)\n\n# Aunque la funci\u00f3n externa ya ha terminado de ejecutarse,\n# mi_closure recuerda el valor de x\nprint(mi_closure(5))  # Esto imprimir\u00e1: 15   \n</code></pre> <p>En este c\u00f3digo, <code>funcion_interna</code> es un cierre que recuerda el valor de <code>x</code> del \u00e1mbito de <code>funcion_externa</code>. Cuando llamamos a <code>mi_closure(5)</code>, <code>funcion_interna</code> todav\u00eda puede acceder al valor de <code>x</code>, incluso aunque <code>funcion_externa</code> ya ha terminado de ejecutarse. Esto es posible gracias al \u00e1mbito de cierre.</p> </li> </ol> <p>\u00a1Para recordar!</p> <p>El \u00e1mbito de una variable determina d\u00f3nde puede ser accesible en el c\u00f3digo. </p> <p>Una variable global es accesible y modificable desde todo el c\u00f3digo del programa.</p> <p>Una variable local es accesible y modificable solo dentro del \u00e1mbito donde es accesible y modificable, ya sea una funci\u00f3n, un bloque de c\u00f3digo espec\u00edfico o un m\u00e9todo de una clase; y no desde todo el c\u00f3digo del programa.</p> <p>Es importante entender estos \u00e1mbitos para evitar errores y escribir c\u00f3digo m\u00e1s limpio y mantenible.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#ventajas-de-utilizar-variables-locales","title":"Ventajas de utilizar variables locales","text":"<p>Las variables locales tienen varias ventajas sobre las variables globales:</p> <ol> <li> <p>Evitan colisiones de nombres: Las variables locales existen solo dentro de la funci\u00f3n donde se definen, lo que significa que puedes usar el mismo nombre de variable en diferentes funciones sin que se produzcan conflictos.</p> </li> <li> <p>Facilitan la lectura y el mantenimiento del c\u00f3digo: Al limitar el alcance de una variable a una sola funci\u00f3n, se hace m\u00e1s f\u00e1cil entender qu\u00e9 hace esa variable y c\u00f3mo se utiliza.</p> </li> <li> <p>Promueven la modularidad y la reutilizaci\u00f3n del c\u00f3digo: Las funciones que utilizan solo variables locales (y par\u00e1metros) son independientes del estado global del programa, lo que significa que pueden ser f\u00e1cilmente reutilizadas en diferentes contextos.</p> </li> <li> <p>Evitan efectos secundarios inesperados: Cuando usas variables globales, cualquier funci\u00f3n podr\u00eda cambiar su valor, lo que puede llevar a comportamientos inesperados. Con las variables locales, tienes un control total sobre cu\u00e1ndo y c\u00f3mo cambia su valor.</p> </li> </ol> <p>Buena pr\u00e1ctica</p> <p>Es una buena pr\u00e1ctica de programaci\u00f3n limitar el uso de variables globales y utilizar variables locales siempre que sea posible para evitar colisiones de nombres, facilitar la lectura y el mantenimiento del c\u00f3digo, promover la modularidad y la reutilizaci\u00f3n del c\u00f3digo y evitar efectos secundarios inesperados.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#como-identificar-el-ambito-de-aplicacion-de-una-variable","title":"\u00bfC\u00f3mo identificar el \u00e1mbito de aplicaci\u00f3n de una variable?","text":"<p>Para identificar el \u00e1mbito de aplicaci\u00f3n de una variable, es preciso detectar las \"marcas\" de apertura y de cierre de la regi\u00f3n o parte de c\u00f3digo que contiene la declaraci\u00f3n de dicha variable.</p> <p>\u00a1Para recordar!</p> <p>La mayor\u00eda de los lenguajes de programaci\u00f3n, como JavaScript, utilizan llaves ( { } ) para marcar el principio y el final de un bloque de c\u00f3digo. </p> <p>Otros lenguajes, como Python, emplean la indentaci\u00f3n, un aspecto del estilo de codificaci\u00f3n que implica agregar espacios en blanco al comienzo de las l\u00edneas de c\u00f3digo para indicar bloques de c\u00f3digo y mejorar la legibilidad. </p> <p>Una variable global es visible y accesible en todas las regiones o partes de c\u00f3digo.</p> <p>Una variable local solo puede ser accesible y modificada dentro del \u00e1mbito de la regi\u00f3n o parte de c\u00f3digo donde sea declarada.</p> <p></p> <p>Aqu\u00ed vemos que la variable soyGlobal ha sido declarada entre las dos llaves marcadas con un c\u00edrculo azul. El alcance de esa variable es todo lo que se encuentra entre esas dos llaves.  El mismo concepto se aplica para las variables localVarB1 y localVarB2, cuyos alcances est\u00e1n limitados por las llaves de cada funci\u00f3n marcadas con un c\u00edrculo verde.</p> <p>Para pensar:</p> <p>\u00bfQu\u00e9 ocurre, entonces, con las variables localVarB1 y localVarB2 cuando son accedidas dentro de las funciones bloque1() y bloque2()?</p> <p>En caso de que se utilice el mismo nombre de variable declarado en varios niveles de anidamiento (significa que hay al menos un bloque dentro de otro bloque), prevalecer\u00e1 la declaraci\u00f3n del bloque m\u00e1s interno, evitando el acceso, durante la ejecuci\u00f3n del bloque interno, a la variable declarada en el bloque externo.</p> <p></p> <p>Para pensar:</p> <p>\u00bfQu\u00e9 ocurre ahora, en cada caso, con la variable declarada dentro de cada bloque con el mismo nombre localVar cuando se accede a su valor?</p> <p>Importante</p> <p>Dada su escasa legibilidad, las\u00a0declaraciones anidadas\u00a0de un mismo nombre de variable son situaciones que nunca deber\u00edan ocurrir en un programa bien dise\u00f1ado.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#primer-caso-practico-de-estudio","title":"Primer caso pr\u00e1ctico de estudio","text":"<p>JavaScript<pre><code>// Global scope main()\n{\n   var g = 0  // Declara g como global en el cuerpo principal del programa main()\n\n   outer()  // Llama a la funci\u00f3n outer() dentro del cuerpo principal del programa\n\n   console.log(\"La variable global g vale \", g)  // Imprime 0\n}\n</code></pre> <pre><code>function outer() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) llamada en main()\n   // Local scope de outer() y Enclosing scope respecto de inner()\n   let x = 1  // Declara x localmente en outer()\n   let y = 1  // Declara y localmente en outer()\n</code></pre> <pre><code>   function inner() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) dentro de outer()\n      // Local scope de inner()\n      let x = 2  // declara x localmente en inner()\n\n      console.log(\"La variable local x dentro de inner() vale \", x)  // Imprime 2\n      console.log(\"La variable local y declarada en outer() vale \", y)  // Imprime 1\n   }\n</code></pre> <pre><code>   inner()  // Llama a la funci\u00f3n inner() dentro de outer()\n\n   console.log(\"La variable local x dentro de outer() vale \", x)  // Imprime 1\n   console.log(\"La variable global g dentro de outer() vale \", g)  // Imprime 0\n}\n</code></pre></p> <p>\u00bfPara pensar?</p> <p>\u00bfPuedes analizar y entender como funciona este programa?</p> <p>Gu\u00edate por los colores. Si no, contin\u00faa leyendo y \u00a1lograr\u00e1s entenderlo!</p> Terminal (Entrada/Salida)<pre><code>// Esto se ejecuta en el \u00e1mbito de inner():\nLa variable local x dentro de inner() vale  2\nLa variable local y declarada en outer() vale  1\n\n// Esto se ejecuta en el \u00e1mbito de outer():\nLa variable local x dentro de outer() vale  1\nLa variable global g dentro de outer() vale  0\n\n// Esto se ejecuta en el \u00e1mbito principal del programa:\nLa variable global x vale  0\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#segundo-caso-practico-de-estudio","title":"Segundo caso pr\u00e1ctico de estudio","text":"<p>JavaScript<pre><code>// Global scope main()\n{\n   let g = 0  \n\n   outer()  \n\n   console.log(\"La variable local g vale \", g)  \n}\n</code></pre> <pre><code>function outer() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) llamada en main()\n   // Local scope de outer() y Enclosing scope respecto de inner()\n   let x = 1  \n   let y = 1  \n</code></pre> <pre><code>   function inner() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) dentro de outer()\n      // Local scope de inner()\n      let x = 2\n\n      console.log(\"La variable local x dentro de inner() vale \", x)  \n      console.log(\"La variable local y declarada en outer() vale \", y)  \n   }\n</code></pre> <pre><code>   inner()  // Llama a la funci\u00f3n inner() dentro de outer()\n\n   console.log(\"La variable local x dentro de outer() vale \", x)  \n   console.log(\"La variable local g dentro de outer() vale \", g)  \n}\n</code></pre></p> <p>\u00bfPara pensar?</p> <p>En este programa existe una ligera diferencia en la declaraci\u00f3n de una de las variables \u00bfPuedes analizar y entender cu\u00e1l es el error conceptual que hace que el programa devuelva un error?</p> <p>Gu\u00edate por los colores. Si no, contin\u00faa leyendo y \u00a1lograr\u00e1s entenderlo!</p> Puedes ver el resultado haciendo clic aqu\u00ed. <p>JavaScript<pre><code>// Global scope main()\n{\n    let g = 0  // Declara g como local en el cuerpo principal del programa (main)\n\n    outer()  // Llama a la funci\u00f3n outer() dentro del cuerpo principal del programa\n\n    console.log(\"La variable local g vale \", g)  // Imprime 0\n}\n</code></pre> <pre><code>function outer() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) llamada en main()\n    // Local scope de outer() y Enclosing scope respecto de inner()\n    let x = 1  // Declara x localmente en outer()\n    let y = 1  // Declara y localmente en outer()\n}\n</code></pre> <pre><code>    function inner() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) dentro de outer()\n        // Local scope de inner()\n        let x = 2  // declara x localmente en inner()\n        console.log(\"La variable local x dentro de inner() vale \", x)  // Imprime 2\n        console.log(\"La variable local y declarada en outer() vale \", y)  // Imprime 1\n    }\n</code></pre> <pre><code>    inner()  // Llama a la funci\u00f3n inner() dentro de outer()\n\n    console.log(\"La variable local x dentro de outer() vale \", x)  // Imprime 1\n    console.log(\"La variable local g dentro de outer() vale \", g)  // \u00bf Imprime 0 ? La variable local g solo existe en main()\n}\n</code></pre></p> <p>Terminal (Entrada/Salida)<pre><code>// Esto se ejecuta en el \u00e1mbito de inner():\nLa variable local x dentro de inner() vale  2\nLa variable local y declarada en outer() vale  1\n\n// Esto se ejecuta en el \u00e1mbito de outer():\nLa variable local x dentro de outer() vale  1\n</code></pre> <pre><code>index.js:20\n    console.log(\"La variable local g dentro de outer() vale \", g)\n                                                               ^\nReferenceError: g is not defined\n</code></pre></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#uso-de-variables-globales-en-funciones-ambitos-locales","title":"Uso de variables globales en funciones (\u00e1mbitos locales)","text":"<p>El uso de variables globales en \u00e1mbitos locales var\u00eda entre los diferentes lenguajes de programaci\u00f3n, pero la idea general es la misma: una variable global es accesible desde cualquier parte del c\u00f3digo, incluyendo funciones o m\u00e9todos (\u00e1mbitos locales).</p> <p>Aqu\u00ed vemos c\u00f3mo se maneja en algunos lenguajes:</p> Python<pre><code># Variable global\nglobal_var = 10\n\ndef funcion_local():\n    global global_var  # Visibilidad de la variable global\n    local_var = 10  # Variable local\n\n    print(\"Var local:\", local_var)  # Acceso a la variable local\n    print(\"Var global desde otro \u00e1mbito:\", global_var)  # Acceso a la variable global\n\n    global_var = global_var + local_var  # Modificaci\u00f3n de la variable global\n\nfuncion_local()\n\nprint(\"Var global desde su \u00e1mbito:\", global_var)  # Acceso a la variable global desde su \u00e1mbito\n</code></pre> Terminal (Entrada/Salida)<pre><code>Var local: 10\nVar global desde otro \u00e1mbito: 10\nVar global desde su \u00e1mbito: 20\n</code></pre> <p><code>global_var</code> es una variable global. Dentro de la funci\u00f3n <code>funcion_local</code>, usamos la palabra clave <code>global</code> para indicar que queremos usar la variable global <code>global_var</code>, y no una nueva variable local con el mismo nombre. Esto permite que la funci\u00f3n tenga acceso tanto a las variables locales definidas dentro de ella como a las variables globales definidas fuera de ella.</p> JavaScript<pre><code>// Variable global por estar declarada en el \u00e1mbito principal\nlet globalVar = 10;\n\nfunction funcion_local() {\n    let localVar = 10  // Variable local\n\n    console.log(\"Var local:\", localVar)  // Acceso a la variable local\n    console.log(\"Var global desde otro \u00e1mbito:\", globalVar)  // Acceso a la variable global\n    globalVar = globalVar + localVar; // Modifica la variable global\n}\n\nfuncion_local();\nconsole.log(\"Var global desde su \u00e1mbito:\", globalVar)  // Acceso a la variable global desde su \u00e1mbito\n</code></pre> Terminal (Entrada/Salida)<pre><code>Var local: 10\nVar global desde otro \u00e1mbito: 10\nVar global desde su \u00e1mbito: 20\n</code></pre> <p>En JavaScript, aunque la inicializaci\u00f3n <code>let globalVar = 10;</code> indique que la variable es local, al declararla en el \u00e1mbito principal, la variable ser\u00e1 global. As\u00ed se accede directamente a la variable <code>globalVar</code> dentro de <code>funci\u00f3n_local</code> para poder utilizarla. Esto permite que la funci\u00f3n tenga acceso tanto a las variables locales definidas dentro de ella como a las variables globales definidas fuera de ella.</p> C++<pre><code>#include &lt;iostream&gt;\n\n// Variable global\nint globalVar = 10;\n\nvoid funcion_local() {\n    int localVar = 10;  // Variable local\n\n    std::cout &lt;&lt; \"Var local: \" &lt;&lt; localVar &lt;&lt; std::endl;  // Acceso a la variable local\n    std::cout &lt;&lt; \"Var global desde otro \u00e1mbito: \" &lt;&lt; globalVar &lt;&lt; std::endl;  // Acceso a la variable global\n    globalVar = globalVar + localVar;  // Modifica la variable global\n}\n\nint main() {\n    funcion_local();\n    std::cout &lt;&lt; \"Var global desde su \u00e1mbito: \" &lt;&lt; globalVar &lt;&lt; std::endl;  // Acceso a la variable global desde su \u00e1mbito\n    return 0;\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>Var local: 10\nVar global desde otro \u00e1mbito: 10\nVar global desde su \u00e1mbito: 20\n</code></pre> <p>En C++ se accede directamente a la variable <code>globalVar</code> dentro de <code>funci\u00f3n_local</code> para poder utilizarla. Esto permite que la funci\u00f3n tenga acceso tanto a las variables locales definidas dentro de ella como a las variables globales definidas fuera de ella.</p> <p>En todos estos c\u00f3digos, se declara una variable global y luego se accede y se modifica desde una funci\u00f3n (en \u00e1mbito distinto al que fuera declarada la variable). Por \u00faltimo, se accede a la variable modificada desde su \u00e1mbito, demostrando el peligro que conlleva utilizar variables globales por los motivos que ya hemos visto y que volvemos a enunciar a continuaci\u00f3n:</p> <p>Mala pr\u00e1ctica</p> <p>El uso excesivo de variables globales puede llevar a un c\u00f3digo confuso y propenso a errores, por lo que generalmente se recomienda minimizar su uso.</p> <p>Buena pr\u00e1ctica</p> <p>Cuando se trata de usar variables globales en funciones, es mejor pasar las variables como argumentos a las funciones y retornar los resultados.</p> <p>Este concepto lo estudiaremos en profundidad m\u00e1s adelante. Por el momento, te dejo la buena pr\u00e1ctica.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#puede-una-variable-local-dentro-de-su-ambito-reemplazar-a-una-variable-global","title":"\u00bfPuede una variable local, dentro de su \u00e1mbito, reemplazar a una variable global?","text":"<p>S\u00ed, si una variable local tiene el mismo nombre que una variable global, la variable local \"reemplaza\" u \"oculta\" a la variable global dentro de su \u00e1mbito de declaraci\u00f3n o de los \u00e1mbitos contenidos dentro de su \u00e1mbito de declaraci\u00f3n. Esto se conoce como \"sombreado\" o \"shadowing\". </p> <p>Sin embargo, este reemplazo es solo temporal y solo aplica dentro del \u00e1mbito local donde se declar\u00f3 la variable local con el mismo nombre que la variable global.</p> <p>Por ejemplo, en Python:</p> Python<pre><code>x = 10  # Esta es una variable global\n\ndef mi_funcion():\n    x = 5  # Esta es una variable local\n    print(x)  # Imprime 5\n\nmi_funcion()\nprint(x)  # Imprime 10\n</code></pre> <p>En este c\u00f3digo, dentro de <code>mi_funcion</code>, la variable local <code>x</code> reemplaza a la variable global <code>x</code>. Pero fuera de <code>mi_funcion</code>, la variable global <code>x</code> retiene su valor original.</p> <p>Mala pr\u00e1ctica</p> <p>Es importante tener en cuenta que el uso de variables locales con el mismo nombre que las variables globales puede ser confuso y generalmente se considera una mala pr\u00e1ctica de programaci\u00f3n. </p> <p>Es mejor usar nombres de variables \u00fanicos para evitar confusiones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#puede-una-variable-local-fuera-de-su-ambito-reemplazar-a-una-variable-global","title":"\u00bfPuede una variable local, fuera de su \u00e1mbito, reemplazar a una variable global?","text":"<p>No, una variable local no puede reemplazar a una variable global fuera de su \u00e1mbito de declaraci\u00f3n. El \u00e1mbito de una variable local est\u00e1 limitado la regi\u00f3n o parte de c\u00f3digo, como una funci\u00f3n o un bloque, en el que se declara. Fuera de ese \u00e1mbito, la variable local no es reconocida por el programa.</p> <p>Por ejemplo, en Python:</p> Python<pre><code>x = 10  # Esta es una variable global\n\ndef mi_funcion():\n    x = 5  # Esta es una variable local\n    print(x)  # Imprime 5\n\nmi_funcion()\nprint(x)  # Imprime 10\n</code></pre> <p>En este ejemplo, la variable local <code>x</code> solo existe dentro de <code>mi_funcion</code>. Fuera de <code>mi_funcion</code>, la variable local <code>x</code> no existe y no puede reemplazar a la variable global <code>x</code>.</p> <p>\u00a1Para recordar!</p> <p>Si intentas acceder a una variable local fuera de su \u00e1mbito, obtendr\u00e1s un error porque la variable no est\u00e1 definida en ese \u00e1mbito.</p> <p>Veamos si entendimos los conceptos.</p> <p>\u00bfQu\u00e9 ocurrir\u00e1 cuando se ejecute la \u00faltima l\u00ednea del siguiente programa?</p> Python<pre><code>global_var = 10\n\ndef modificar_var_global():\n    global global_var\n    global_var += 5\n\ndef usar_var_global_localmente():\n    local_var = global_var * 2\n    print(\"Var local:\", local_var)\n\nprint(\"Var global:\", global_var)\n\nmodificar_var_global()\nusar_var_global_localmente()\n\nprint(\"Var global:\", global_var)\nprint(\"Var local:\", local_var)\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p></p> <p>Terminal (Entrada/Salida)<pre><code>Var global: 10\nVar local: 30\nVar global: 15\n</code></pre> <pre><code>Traceback (most recent call last):\nFile \"\u2026\", line 17, in &lt;module&gt;\n    print(\"Var local:\", local_var)\n                        ^^^^^^^^^\nError: NameError: name \u2018local_var' is not defined\n</code></pre></p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/caracteristicas-de-las-variables/","title":"Caracter\u00edsticas de las variables","text":"<p>Rev. 11/01/2024</p> <p>Las variables poseen cuatro caracter\u00edsticas distintivas:</p> <ul> <li> <p>Tipo de dato asociado</p> <p>El tipo de dato de una variable es una caracter\u00edstica que determina qu\u00e9 tipo de valores puede contener una variable.</p> <p>Los tipos de datos comunes incluyen n\u00fameros enteros, n\u00fameros flotantes (n\u00fameros con decimales), caracteres (char), valores l\u00f3gicos o booleanos (verdadero o falso), entre otros.</p> <p>La importancia del tipo de dato radica en varios aspectos: almacenamiento, operaciones permitidas, precisi\u00f3n de datos y seguridad del tipo. </p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> <li> <p>Identificador o Nombre</p> <p>El identificador de una variable es el nombre que se le da a la variable.</p> <p>Se utiliza para referenciar, es decir identificar, la variable durante de la ejecuci\u00f3n del programa, desde el momento en que se crea la variable hasta el momento en que se destruye o que finaliza el programa, lo que ocurra primero. Tambi\u00e9n se suele hablar de nombre de variable.</p> <p>Para definir un identificador v\u00e1lido, se deber\u00e1 respetar las convenciones de nombramiento (naming convention) para hacer el c\u00f3digo legible y permitir un mantenimiento \u00e1gil y simple.</p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> <li> <p>Alcance</p> <p>El alcance de una variable se refiere a la regi\u00f3n o parte de c\u00f3digo donde una variable existe y es accesible para poder ser utilizada. </p> <p>Hay dos tipos principales de alcance: local, limitado a la parte del c\u00f3digo donde esa variable existe y puede ser accedida; o global, accesible desde cualquier parte del c\u00f3digo.</p> <p>Es fundamental que la variable cuente con el alcance adecuado para que sea visible y pueda ser accedida en las regiones o partes de c\u00f3digo que precisen interactuar con ella.</p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> <li> <p>Dato asignado</p> <p>Se denomina dato asignado al dato o informaci\u00f3n que se almacena en una variable, en la memoria central (RAM), para poder ser utilizado por el programa.</p> <p>Este dato asignado deber\u00e1 ser del mismo tipo de dato asociado a la variable.</p> <p>Estudiaremos esta caracter\u00edstica m\u00e1s adelante; o podr\u00edas consultarla ahora, si quisieras, haciendo clic aqu\u00ed.</p> </li> </ul> <p>Ahora si, estudiemos cada una de estas caracter\u00edsticas con mayor profundidad.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/","title":"Ciclo de vida de una variable","text":"<p>Rev. 11/01/2024</p> <p>Durante la ejecuci\u00f3n de un programa, el ciclo de vida de una variable consta de 3 etapas: (haz clic sobre cada etapa para acceder a la secci\u00f3n directamente)</p> <ul> <li>Creaci\u00f3n</li> <li>Utilizaci\u00f3n</li> <li>Destrucci\u00f3n</li> </ul> <p></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#etapa-de-creacion-de-una-variable","title":"Etapa de creaci\u00f3n de una variable","text":"<ol> <li> <p>Creaci\u00f3n: en la etapa de creaci\u00f3n de una variable, que se ejecuta por \u00fanica vez al inicio del ciclo de vida, se realizan una serie de acciones para definir y asignar un nombre y un tipo de dato a esta, y hasta eventualmente asignarle un valor inicial:</p> <ul> <li> <p>Declaraci\u00f3n: la creaci\u00f3n de una variable generalmente comienza con la declaraci\u00f3n, donde se especifica el tipo de dato que contendr\u00e1 esta. Los lenguajes de programaci\u00f3n suelen tener diferentes tipos de dato, como enteros, flotantes, caracteres, booleanos, etc. La declaraci\u00f3n tambi\u00e9n incluye el nombre de la variable. </p> <ul> <li>Asignaci\u00f3n de memoria: despu\u00e9s de declarar una variable, se produce la asignaci\u00f3n (reserva de espacio) de memoria para almacenar el valor de la variable. La cantidad de memoria asignada depender\u00e1 del tipo de dato de la variable. Por ejemplo, una variable entera (int) puede requerir 4 bytes de memoria, mientas que una variable de caracater (char) requiere 1 byte de memora. Es importante definir correctamente el tipo de dato para que la memora reservada sea correcta.</li> </ul> </li> <li> <p>Inicializaci\u00f3n: en muchos lenguajes de programaci\u00f3n, se puede inicializar una variable durante su creaci\u00f3n. La inicializaci\u00f3n implica asignar un valor inicial a la variable. Siempre que se pueda es recomendable que la creaci\u00f3n de una variable se efect\u00fae mediante su inicializaci\u00f3n. </p> </li> </ul> </li> </ol> <p>\u00a1Para recordar!</p> <p>Una vez creada una variable, esta existir\u00e1 hasta que termine el alcance o bloque de c\u00f3digo donde haya sido creada; hasta que sea destruida o; hasta que finalice el programa.</p> <p>En algunos lenguajes, es obligatorio declarar una variable antes de utilizarla. </p> <p>\u00a1Desconocer este concepto puede hacer que tu programa se comporte de manera inesperada!</p> <p>Cabe aclarar que, al declarar una variable, la asignaci\u00f3n de memoria no implica la asignaci\u00f3n de un valor inicial. As\u00ed, al acceder a la variable antes de una primera asignaci\u00f3n de valor, esta devolver\u00e1 dependiendo del lenguaje de programaci\u00f3n:</p> <ul> <li>valor indefinido (undefined), </li> <li>un valor predeterminado, que puede ser cero o nulo dependiendo del tipo de dato, o </li> <li>el valor que se encuentre en la posici\u00f3n reservada de memoria, previamente almacenado por otro programa.</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#etapa-de-utilizacion-de-una-variable","title":"Etapa de utilizaci\u00f3n de una variable","text":"<ol> <li> <p>Utilizaci\u00f3n: en la etapa de utilizaci\u00f3n de una variable, despu\u00e9s de crearla, esta puede ser usada para almacenar, manipular y recuperar datos durante la ejecuci\u00f3n de expresiones y operaciones (declaraci\u00f3n de control de flujo, llamada de funci\u00f3n, etc.) durante la ejecuci\u00f3n del programa:</p> <ul> <li> <p>Asignaci\u00f3n de valor: una vez creada la variable, se puede asignar un valor espec\u00edfico a la variable utilizando el operador de asignaci\u00f3n simple (=) o cualquier operador de asignaci\u00f3n compuesta. Por ejemplo, si tienes una variable llamada edad de tipo entero, puedes asignarle un valor a partir de la expresi\u00f3n edad = 25.</p> </li> <li> <p>Modificaci\u00f3n (actualizaci\u00f3n) de valor: durante la ejecuci\u00f3n del programa, es posible modificar el valor almacenado en una variable. Esta acci\u00f3n se comporta de igual manera que la asignaci\u00f3n de valor, solo que se la denomina as\u00ed porque el concepto es el de reasignaci\u00f3n de un nuevo valor. Puedes utilizar operadores aritm\u00e9ticos o de asignaci\u00f3n compuestos para realizar c\u00e1lculos y actualizar el valor de la variable. Por ejemplo, si tienes una variable contador y deseas incrementar su valor en uno, puedes utilizar contador = contador + 1 o la forma abreviada contador += 1.</p> </li> <li> <p>Acceso (lectura) de valor: despu\u00e9s de asignar un valor a la variable, puedes leer su contenido para utilizarlo en el programa. Puedes utilizar el nombre de la variable para acceder a su valor y utilizarlo en expresiones y operaciones para realizar c\u00e1lculos o mostrar el valor en la salida del programa, por ejemplo.</p> </li> <li> <p>Uso en expresiones y operaciones: una variable se utiliza ampliamente en expresiones y operaciones dentro del programa. Puedes realizar operaciones matem\u00e1ticas, comparaciones, asignaciones y muchas otras manipulaciones utilizando la variable en combinaci\u00f3n con operadores y funciones definidas en el lenguaje de programaci\u00f3n.</p> </li> </ul> </li> </ol> <p>\u00a1Para recordar!</p> <p>Mientras la variable exista y sea accesible, todas estas acciones arriba definidas pueden ser ejecutadas tantas veces como sea necesario a lo largo de la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#etapa-de-destruccion-de-una-variable","title":"Etapa de destrucci\u00f3n de una variable","text":"<ol> <li> <p>Destrucci\u00f3n: en la etapa de destrucci\u00f3n de una variable, cuando la variable ya no ser\u00e1 utilizada en el programa, se llevan a cabo las acciones para liberar los recursos asociados a ella (el espacio reservado de la memoria) y finalizar su existencia en el programa:</p> <ul> <li> <p>Liberaci\u00f3n de memoria: una de las acciones m\u00e1s comunes en la destrucci\u00f3n de una variable es la liberaci\u00f3n de la memoria que se asign\u00f3 para almacenar su valor. Esto ocurre especialmente en lenguajes de programaci\u00f3n que gestionan manualmente la asignaci\u00f3n y liberaci\u00f3n de memoria, como C o C++. La liberaci\u00f3n de memoria garantiza que los recursos utilizados por la variable se devuelvan al sistema y est\u00e9n disponibles para otros usos.</p> </li> <li> <p>Finalizaci\u00f3n del \u00e1mbito o alcance: en muchos lenguajes de programaci\u00f3n, las variables tienen un \u00e1mbito definido, que es la regi\u00f3n del programa donde la variable es v\u00e1lida y accesible. Cuando el \u00e1mbito de la variable llega a su fin, ya sea al finalizar una funci\u00f3n o un bloque de c\u00f3digo, la variable se destruye autom\u00e1ticamente. Esto implica que la variable ya no estar\u00e1 disponible para su uso y se liberar\u00e1n los recursos asociados a ella.</p> </li> <li> <p>Ejecuci\u00f3n del recolector de basura (garbage collector): es un componente que se encuentra en muchos lenguajes de programaci\u00f3n con gesti\u00f3n autom\u00e1tica de memoria, como Java o Python. Este componente es responsable de administrar autom\u00e1ticamente la memoria durante la ejecuci\u00f3n de un programa ya que su funci\u00f3n principal es identificar y liberar la memoria de los objetos que ya no se necesitan, es decir, recolectar la \"basura\". Por lo tanto, realiza un seguimiento de los objetos que se han asignado en la memoria y determina cu\u00e1les de ellos a\u00fan est\u00e1n siendo utilizados por el programa. Los objetos que ya no son accesibles o referenciados por el programa se consideran \u201cbasura\u201d y se pueden eliminar de forma segura. As\u00ed, la destrucci\u00f3n de una variable est\u00e1 relacionada con el proceso de recolecci\u00f3n de basura.</p> </li> </ul> </li> </ol> <p>\u00a1Para recordar!</p> <p>Esta etapa, que solo se ejecuta una vez al final del ciclo de vida de la variable, generalmente ocurre cuando la variable ya no es necesaria o cuando el \u00e1mbito en el que se ha creado finaliza. Luego de la destrucci\u00f3n, la variable ya no estar\u00e1 disponible para su uso y se liberar\u00e1n los recursos asociados a ella.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#que-ocurre-con-la-memoria-cuando-el-programa-termina","title":"\u00bfQu\u00e9 ocurre con la memoria cuando el programa termina?","text":"<p>Cuando un programa termina, el sistema operativo generalmente libera toda la memoria que el programa estaba utilizando, incluyendo la memoria utilizada por las variables. Esto es cierto independientemente del lenguaje de programaci\u00f3n en el que est\u00e9 escrito el programa.</p> <p>Buena pr\u00e1ctica</p> <p>Sin embargo, durante la ejecuci\u00f3n de un programa, es responsabilidad del programador (o del recolector de basura en lenguajes que lo tienen, como Python o Java) asegurarse de que la memoria que ya no se necesita se libere. </p> <p>Si no se hace esto, puede llevar a una fuga de memoria, donde un programa consume cada vez m\u00e1s memoria hasta que se agota la memoria disponible.</p> Si te interesa, puedes leer ahora lo que puede ocurrir cuando se agota toda la memoria disponible. O hazlo m\u00e1s tarde... \u00a1Pero no dejes de hacerlo!  <p>Si un programa agota toda la memoria disponible, puede experimentar una serie de problemas, que pueden variar dependiendo del sistema operativo y del lenguaje de programaci\u00f3n. Aqu\u00ed hay algunos posibles escenarios:</p> <ol> <li> <p>El programa puede fallar: En muchos casos, si un programa intenta asignar memoria y no hay suficiente disponible, el programa puede fallar con un error de falta de memoria. En lenguajes como Java o Python, esto se manifiesta como una excepci\u00f3n <code>OutOfMemoryError</code> o <code>MemoryError</code>, respectivamente.</p> </li> <li> <p>El sistema puede empezar a usar la memoria de intercambio (swap): Algunos sistemas operativos pueden comenzar a usar la memoria de intercambio en el disco duro cuando se agota la memoria RAM. Sin embargo, la memoria de intercambio es mucho m\u00e1s lenta que la RAM, por lo que el rendimiento del programa (y posiblemente de todo el sistema) puede disminuir significativamente.</p> </li> <li> <p>El sistema operativo puede terminar el programa: En algunos sistemas, si un programa est\u00e1 consumiendo demasiada memoria, el sistema operativo puede optar por terminar el programa para liberar memoria para otros procesos. Esto se conoce como \"asesinato por OOM\" (Out Of Memory killer) en sistemas Linux.</p> </li> <li> <p>Fuga de memoria: Si un programa contin\u00faa consumiendo memoria sin liberarla cuando ya no la necesita, puede llevar a una fuga de memoria. Esto puede hacer que el programa y el sistema se vuelvan cada vez m\u00e1s lentos hasta que finalmente se agote la memoria.</p> </li> </ol> <p>Por estas razones, es importante gestionar correctamente la memoria en tus programas, liberando la memoria que ya no se necesita y evitando las fugas de memoria. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#por-que-el-garbage-collector-es-tan-importante","title":"\u00bfPor qu\u00e9 el garbage collector es tan importante?","text":"<p>Es un componente que se encuentra en muchos lenguajes de programaci\u00f3n con gesti\u00f3n autom\u00e1tica de memoria, como Java o Python, y en muchos entornos de ejecuci\u00f3n. </p> <p>Es responsable de administrar autom\u00e1ticamente la memoria en un programa ya que su funci\u00f3n principal es identificar y liberar la memoria que ya no se necesita, es decir, recolectar la \"basura\". </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<p>Cuando se ejecuta un programa, se asigna memoria para almacenar objetos y datos utilizados por ese programa. A medida que el programa se ejecuta, puede crear y eliminar objetos en la memoria. Los objetos m\u00e1s generales son las variables. Sin embargo, a veces, estos objetos ya no son necesarios y pasan a ocupar espacio innecesariamente.</p> <p>Aqu\u00ed es donde entra en juego el garbage collector. Su funci\u00f3n principal es identificar y liberar la memoria de objetos que ya no se necesitan. Estos objetos que ya no son accesibles o referenciados por el programa se consideran \u201cbasura\u201d y se pueden eliminar de forma segura.</p> <p>El garbage collector realiza esta tarea peri\u00f3dicamente o cuando se cumple cierta condici\u00f3n, como cuando la memoria disponible se est\u00e1 agotando. </p> <p>Escanea la memoria en busca de objetos basura y libera la memoria que ocupan. Esto ayuda a evitar la fragmentaci\u00f3n de la memoria y garantiza un uso eficiente de los recursos.</p> <p>La presencia del garbage collector simplifica la administraci\u00f3n de la memoria para los programadores, ya que no necesitan ocuparse expl\u00edcitamente de la asignaci\u00f3n y liberaci\u00f3n de memoria. Esto reduce los errores relacionados con la gesti\u00f3n manual de la memoria, como fugas de memoria, corrupci\u00f3n de memoria y problemas de liberaci\u00f3n prematura o tard\u00eda de objetos. Tambi\u00e9n mejora la productividad del programador, ya que pueden centrarse en la l\u00f3gica de la aplicaci\u00f3n en lugar de preocuparse por la gesti\u00f3n de la memoria.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#conclusiones-del-ciclo-de-vida-de-una-variable-durante-la-ejecucion-de-un-programa","title":"Conclusiones del ciclo de vida de una variable durante la ejecuci\u00f3n de un programa","text":"<p>El ciclo de vida de una variable puede variar seg\u00fan el lenguaje de programaci\u00f3n utilizado y el alcance en el que se utiliza la variable. Por ejemplo, en algunos lenguajes, las variables pueden tener un alcance limitado a una funci\u00f3n o bloque de c\u00f3digo, mientras que en otros pueden tener un alcance global en todo el programa. Este tema lo veremos m\u00e1s adelante.</p> <p>Resumiendo, es importante destacar que los detalles espec\u00edficos de la creaci\u00f3n de variables pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Algunos lenguajes tienen reglas y convenciones adicionales para la creaci\u00f3n de variables, como restricciones en los nombres o requisitos de \u00e1mbito.</p> <p>Durante la etapa de utilizaci\u00f3n de una variable, estas se utilizan en expresiones y operaciones como asignaci\u00f3n de valores, lectura de valores, modificaci\u00f3n de valores y se tiene en cuenta el alcance y el tipo de dato de la variable. Esto permite utilizar las variables para almacenar y manipular datos en el programa de acuerdo con su prop\u00f3sito y alcance.</p> <p>Por \u00faltimo, en la etapa de destrucci\u00f3n de una variable se llevan a cabo acciones para liberar los recursos asociados a ella y finalizar su existencia en el programa. Esto puede implicar la liberaci\u00f3n de memoria asignada o la finalizaci\u00f3n del \u00e1mbito en el que se encuentra. Los detalles espec\u00edficos de la destrucci\u00f3n pueden variar seg\u00fan el lenguaje de programaci\u00f3n utilizado. Algunos lenguajes tienen mecanismos adicionales de gesti\u00f3n de memoria, como destructores o m\u00e9todos especiales, que permiten ejecutar acciones personalizadas antes de la destrucci\u00f3n de una variable, como liberar otros recursos o realizar tareas de limpieza.</p> <p>Importante</p> <p>Es fundamental comprender correctamente el ciclo de vida de las variables y cu\u00e1l es su \u00e1mbito (scope) donde es accesible para evitar errores y optimizar el uso de memoria en el programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/dato-asignado-a-una-variable/","title":"Dato asignado a una variable","text":"<p>Rev. 11/01/2024</p> <p>Definici\u00f3n</p> <p>Se denomina dato asignado al dato o informaci\u00f3n que se almacena en una variable, en la memoria central (RAM), para poder ser utilizado por el programa.</p> <p>Este dato asignado deber\u00e1 ser del mismo tipo de dato asociado a la variable.</p> <p>Por ejemplo, </p> C\u00f3digo generalizado<pre><code>int a = 10;\n</code></pre> <p>El dato almacenado en la variable <code>a</code> es el n\u00famero entero <code>10</code>. </p> C\u00f3digo generalizado<pre><code>string b = \"Hello, World!\";\n</code></pre> <p>El dato almacenado en la variable <code>b</code> es la cadena de caracteres <code>\"Hello, World!\"</code>.</p> <p>La variable, mientras exista y sea visible, puede ser accedida y el dato almacenado en ella puede ser le\u00eddo y modificado durante la ejecuci\u00f3n del programa.</p> <p>El espacio en memoria que ocupa la variable se liberar\u00e1 cuando la variable deje de existir (por ejemplo, cuando se salga del alcance en el que fue declarada, cuando se elimine la variable o cuando el programa finalice su ejecuci\u00f3n).</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/dato-asignado-a-una-variable/#proceso-de-asignacion-de-un-dato-a-la-variable","title":"Proceso de asignaci\u00f3n de un dato a la variable","text":"<p>La asignaci\u00f3n de un dato a una variable se realiza mediante una sentencia de asignaci\u00f3n durante el programa:</p> Pseudoc\u00f3digo<pre><code># representaci\u00f3n simplificada de c\u00f3mo se asigna un valor a una variable en programaci\u00f3n\n\nvariable \u2b05 valor_para_asignar\n</code></pre> <p><code>valor_para_asignar</code> es el valor que quieres guardar, y <code>variable</code> es el identificador de la variable en la que quieres guardar dicho valor.</p> <p>El s\u00edmbolo \u2b05 representa la operaci\u00f3n de asignaci\u00f3n. En la mayor\u00eda de los lenguajes de programaci\u00f3n, esta operaci\u00f3n se representa con el s\u00edmbolo igual ( = ). </p> <p>Por ejemplo, en Python, la instrucci\u00f3n se ver\u00eda as\u00ed:</p> Python<pre><code>variable = valor_para_asignar\n</code></pre> <p>En este c\u00f3digo, el valor de <code>valor_para_asignar</code> es asignado a la variable <code>variable</code>. Despu\u00e9s de esta operaci\u00f3n, siempre que se utilice <code>variable</code> en el programa, devolver\u00e1 el valor que le fuera asignado, hasta que dicho valor cambie, o la variable se destruya o finalice el programa.</p> <p>Este valor puede ser, por ejemplo:</p> <ul> <li>un dato o informaci\u00f3n ingresada al programa (a trav\u00e9s del teclado por ejemplo)</li> <li>el dato almacenado en otra variable (en este caso ser\u00eda la variable <code>valor_para_asignar</code>)</li> <li>el resultado de una expresi\u00f3n (en este caso la expresi\u00f3n estar\u00eda representada por <code>valor_para_asignar</code>)</li> <li>el resultado retornado por una funci\u00f3n (en este caso la funci\u00f3n estar\u00eda representada por <code>valor_para_asignar</code>)</li> </ul> <p>Por ejemplo, se puede asignar el valor <code>10</code> a la variable <code>x</code> de la siguiente manera:</p> C\u00f3digo generalizado<pre><code>int x   # Declara la variable x como tipo de dato entero\nx = 10  # Asigna el valor 10 a la variable x\n</code></pre> <p>Despu\u00e9s de esta operaci\u00f3n, la variable <code>x</code> contendr\u00e1 el valor asignado <code>10</code>. Este valor permanecer\u00e1 almacenado en la memoria central (RAM) reservada para la variable, hasta que sea reemplazado, o que la variable sea destruida (eliminada del programa), o que el programa finalice. Mientras tanto, es posible acceder al valor simplemente invocando a la variable por su identificador:</p> C\u00f3digo generalizado<pre><code>print(x)  # Imprime 10 en pantalla\n\nprint(x * 2)  # Imprime 20 en pantalla\n\nprint(x &lt; 20)  # Imprime False en pantalla\n</code></pre> <p>Siempre que se utilice la variable <code>x</code> en ele programa, representar\u00e1 el valor que se le asign\u00f3 (<code>10</code>).</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/dato-asignado-a-una-variable/#proceso-de-reemplazo-del-dato-asignado-a-una-variable","title":"Proceso de reemplazo del dato asignado a una variable","text":"<p>Es importante entender que acceder a un dato almacenado en una variable para efectuar operaciones no es la \u00fanica acci\u00f3n que se puede realizar con la variable.  </p> <p>Es posible que sea necesario, durante la ejecuci\u00f3n del programa, modificar el dato almacenado en una variable por otro dato, actualizado al momento de ejecuci\u00f3n.</p> <p>Esta modificaci\u00f3n, en realidad, es un reemplazo de un dato por otro dato que, aunque represente el mismo valor, siempre va a ser distinto.</p> <p>Esto significa que cuando se reemplaza un dato almacenado por otro dato, el dato anterior se elimina, se pierde para siempre.</p> <p>Si volvemos al ejemplo anterior, <code>x</code> tiene asignado el valor <code>10</code>. Ahora vamos a reemplazar ese valor por el doble. Y luego lo vamos a reemplazar por el valor <code>7</code>, imprimiendo el valor que posea <code>x</code> luego de cada operaci\u00f3n:</p> C\u00f3digo generalizado<pre><code>int x   # Declara la variable x como tipo de dato entero\nx = 10  # Asigna el valor 10 a la variable x\nprint(x)  # Imprime 10 en pantalla\n\nx = x * 2  # Duplica el valor de x y asigna el resultado a la variable x\nprint(x)  # Imprime 20 en pantalla\n\nx = 7  # Asigna el valor 7 a la variable x\nprint(x)  # Imprime 7 en pantalla\n</code></pre> <p>Como podemos observar, la sintaxis es la misma siempre: <code>variable = valor_para_asignar</code>:</p> C\u00f3digo generalizado<pre><code>\u22ee\nx = 10  # Asigna el valor 10 a la variable x\n\u22ee\nx = x * 2  # Duplica el valor de x y asigna el resultado a la variable x\n\u22ee\nx = 7  # Asigna el valor 7 a la variable x\n\u22ee\n</code></pre> <p>\u00a1Para recordar!</p> <p>En ciertos lenguajes de programaci\u00f3n din\u00e1micos, el tipo de dato de una variable puede cambiar con cada nueva asignaci\u00f3n de valor:</p> Python<pre><code># Asignaci\u00f3n de un n\u00famero entero\nvariable = 10\nprint(type(variable))  # &lt;class 'int'&gt;\n\n# Asignaci\u00f3n de un texto\nvariable = \"Hola Mundo\"\nprint(type(variable))  # &lt;class 'str'&gt;\n\n# Asignaci\u00f3n de una lista\nvariable = [1, 2, 3]\nprint(type(variable))  # &lt;class 'list'&gt;\n\n# Asignaci\u00f3n de un n\u00famero flotante\nvariable = 3.14\nprint(type(variable))  # &lt;class 'float'&gt;\n</code></pre> <p>En este c\u00f3digo, la variable <code>variable</code> cambia de tipo con cada nueva asignaci\u00f3n de valor. Primero es un entero, luego una cadena de texto, luego una lista y finalmente un n\u00famero flotante.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/dato-asignado-a-una-variable/#proceso-de-eliminacion-del-dato-asignado-a-una-variable","title":"Proceso de eliminaci\u00f3n del dato asignado a una variable","text":"<p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, no se puede eliminar un dato de una variable en el sentido de dejar la variable en un estado no asignado. En su lugar, puedes asignar un valor nulo o predeterminado a la variable.</p> <p>Por ejemplo, en Python, puedes asignar <code>None</code> a una variable para indicar que no tiene un valor:</p> Python<pre><code>variable = 10\nprint(variable)  # Imprime 10\n\nvariable = None\nprint(variable)  # Imprime None\n</code></pre> <p>En lenguajes como C++ o Java, puedes asignar un valor predeterminado como <code>0</code> o <code>NULL</code>:</p> Java<pre><code>int variable = 10;\nSystem.out.println(variable);  // Imprime 10\n\nvariable = 0;\nSystem.out.println(variable);  // Imprime 0\n</code></pre> C++<pre><code>int variable = 10;\nstd::cout &lt;&lt; variable &lt;&lt; std::endl;  // Imprime 10\n\nvariable = NULL;\nstd::cout &lt;&lt; variable &lt;&lt; std::endl;  // Imprime 0\n</code></pre> <p>\u00a1Para recordar!</p> <p>La asignaci\u00f3n de un valor nulo o predeterminado es diferente de eliminar la variable. </p> <p>La variable todav\u00eda existe en la memoria, simplemente su valor ha sido cambiado. Ya estudiaremos como eliminar una variable, m\u00e1s adelante.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/dato-asignado-a-una-variable/#que-es-la-asignacion-multiple","title":"\u00bfQu\u00e9 es la asignaci\u00f3n m\u00faltiple?","text":"<p>La asignaci\u00f3n m\u00faltiple, v\u00e1lido en ciertos lenguajes como Python, JavaScript (ES6 y posteriores), PHP y Ruby, entre otros, es una caracter\u00edstica que permite asignar valores a varias variables al mismo tiempo en una sola l\u00ednea de c\u00f3digo. Esto se puede hacer de varias maneras.</p> <p>Asignaci\u00f3n de m\u00faltiples variables:</p> Python<pre><code>a, b, c = 1, 2, 3\n</code></pre> <p>En este c\u00f3digo, 1 se asigna a <code>a</code>, 2 se asigna a <code>b</code>, y 3 se asigna a <code>c</code>.</p> <p>Asignaci\u00f3n de un mismo valor a m\u00faltiples variables:</p> Python<pre><code>a = b = c = 1\n</code></pre> <p>En este c\u00f3digo, a <code>a</code>, a <code>b</code> y a <code>c</code> se les asigna 1.</p> <p>Desempaquetado de listas o tuplas:</p> Python<pre><code>numeros = [1, 2, 3]\na, b, c = numeros\n</code></pre> <p>En este c\u00f3digo, los valores de la lista <code>numeros</code> son asignados en orden de posici\u00f3n a <code>a</code>, a <code>b</code> y a <code>c</code> respectivamente.</p> <p>La asignaci\u00f3n m\u00faltiple puede hacer que el c\u00f3digo sea m\u00e1s conciso y legible, pero tambi\u00e9n puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender si se usa de manera excesiva o en situaciones complejas.</p> <p>As\u00ed, puede ser tanto una buena como una mala pr\u00e1ctica, dependiendo del contexto y de c\u00f3mo se utilice.</p> <p>Es una buena pr\u00e1ctica cuando:</p> <ul> <li>Mejora la legibilidad del c\u00f3digo al agrupar las declaraciones relacionadas.</li> <li>Reduce la cantidad de l\u00edneas de c\u00f3digo, lo que puede hacer que el c\u00f3digo sea m\u00e1s f\u00e1cil de leer y mantener.</li> <li>Puede ser una mala pr\u00e1ctica cuando:</li> </ul> <p>\"Es una mala pr\u00e1ctica cuando:</p> <ul> <li>Se utiliza en exceso o en situaciones complejas, lo que puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender.</li> <li>Se asignan valores a m\u00faltiples variables que no est\u00e1n relacionadas, lo que puede confundir a otros desarrolladores que intentan entender el c\u00f3digo.</li> </ul> <p>\u00a1Para recordar!</p> <p>En general, como con muchos aspectos en la programaci\u00f3n, la clave est\u00e1 en el equilibrio. Utiliza la asignaci\u00f3n m\u00faltiple cuando mejore la legibilidad y la comprensi\u00f3n del c\u00f3digo, pero ev\u00edtala cuando pueda causar confusi\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificador-de-variable/","title":"Identificador de una variable","text":"<p>Rev. 11/01/2024</p> <p>Definici\u00f3n</p> <p>El identificador de una variable es el nombre que se le da a la variable para identificarla en el c\u00f3digo. A partir de los identificadores, los programadores pueden referirse a cada variable en otras partes del c\u00f3digo.</p> <p>Por ejemplo:</p> C\u00f3digo generalizado<pre><code>int mi_variable = 10\nprint(mi_variable) // Output: 10\n</code></pre> <p>En el c\u00f3digo anterior <code>int mi_variable = 10</code>, <code>mi_variable</code> es el identificador de la variable. Cada vez que se usa <code>mi_variable</code> en el c\u00f3digo, se est\u00e1 haciendo referencia al espacio de memoria que almacena el valor <code>10</code>.</p> <p>Los identificadores de las variables deben seguir ciertas reglas y convenciones dependiendo del lenguaje de programaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificador-de-variable/#reglas-para-definir-el-identificador-de-una-variable","title":"Reglas para definir el identificador de una variable","text":"<p>Las convenciones de nombramiento (naming conventions), son reglas o gu\u00edas que se utilizan para determinar c\u00f3mo nombrar las variables en la programaci\u00f3n. Estas convenciones pueden variar dependiendo del lenguaje de programaci\u00f3n.</p> <p>Estudiemos las reglas m\u00e1s importantes que suelen aplicarse en la mayor\u00eda de los lenguajes:</p> <ol> <li> <p>Evitar elegir nombres cr\u00edpticos: Los nombres cr\u00edpticos son aquellos que no son claros o intuitivos, lo que dificulta la comprensi\u00f3n del c\u00f3digo. Es decir, que resultan incomprensibles o enigm\u00e1ticos para quien no posea una clave de interpretaci\u00f3n adecuada.</p> <p>Mala pr\u00e1ctica</p> <pre><code>p = 3.14159\nx1 = 10\nn = \"John Doe\"\nf = calculate()\n</code></pre> <p>\u00bfQu\u00e9 representa <code>p</code>? Podr\u00eda ser m\u00e1s claro si se llamara <code>pi</code>. \u00bfQu\u00e9 es <code>x1</code>? \u00bfHay un <code>x2</code>? \u00bfPor qu\u00e9 no <code>primer_valor</code> o algo similar? \u00bfQu\u00e9 es <code>n</code>? \u00bfUn nombre? \u00bfUn n\u00famero? Ser\u00eda m\u00e1s claro si se llamara <code>nombre</code>. \u00bfQu\u00e9 es <code>f</code>? \u00bfUna funci\u00f3n? \u00bfUn resultado? \u00bfPor qu\u00e9 no <code>resultado</code>?</p> </li> <li> <p>Evitar abreviaturas: A menos que la abreviatura sea ampliamente conocida, es mejor evitarla para mantener la legibilidad del c\u00f3digo.</p> </li> <li> <p>Elegir nombres claros y descriptivos (sem\u00e1nticos): Las variables deben tener nombres que indiquen claramente qu\u00e9 datos almacenan, facilitando la lectura y f\u00e1cil entendimiento del c\u00f3digo. Por ejemplo, en lugar de nombrar una variable <code>x</code>, ser\u00eda mejor nombrarla <code>edad</code> si almacena la edad de una persona:</p> <p>Mala pr\u00e1ctica</p> <pre><code>dato = \"Pablo\"\nx = 45 \nn = 1\n</code></pre> <p>Buena pr\u00e1ctica</p> <pre><code>nombre = \"Pablo\"\nedad = 45 \nmascotas = 1\n</code></pre> <p>Como se ve en el ejemplo, utiliza sustantivos: las variables suelen representar objetos o valores en el c\u00f3digo, por lo que es recomendable utilizar sustantivos para identificarlas.  </p> </li> <li> <p>Elegir nombres en tu idioma: Los identificadores deben estar escritos en tu idioma, a menos que est\u00e9s trabajando en un proyecto que especifique otro idioma diferente.</p> <p>Esto mantendr\u00e1 la consistencia de idioma entre variables y los textos, facilitando el entendimiento del c\u00f3digo y la colaboraci\u00f3n con otros desarrolladores.  </p> <p>Eso si, procura no utilizar caracteres especiales como los acentuados o la letra e\u00f1e. ya que podr\u00eda originar problemas a la hora de ejecutar el programa por alguna compatibilidad de caracteres.</p> </li> <li> <p>Evitar elegir nombres largos: Aunque es importante que el nombre sea descriptivo, evita nombres demasiado largos. Es conveniente que la longitud de nombre no pase de 10 caracteres. Y nunca m\u00e1s de 32 caracteres.  </p> <p>Nombres demasiado largos pueden hacer que el c\u00f3digo sea dif\u00edcil de leer y escribir.  </p> <p>Encuentra un equilibrio entre la claridad y la concisi\u00f3n.</p> </li> <li> <p>Iniciar con una letra o gui\u00f3n bajo: La mayor\u00eda de los lenguajes de programaci\u00f3n requieren que los nombres de las variables comiencen con una letra o un gui\u00f3n bajo ( _ ), pudiendo contener tanto letras may\u00fasculas y min\u00fasculas como d\u00edgitos o guiones bajo combinados como se desee; pero nunca deben comenzar con un n\u00famero porque la computadora confundir\u00e1 el identificador con un n\u00famero decimal inv\u00e1lido.</p> C\u00f3digo generalizado<pre><code>1er_jugador = \"Pablo\" \n</code></pre> <p><code>1er_jugador</code> no es un identificador de variable v\u00e1lido porque se confunde con un n\u00famero decimal inv\u00e1lido.</p> <p>Al ejecutar el c\u00f3digo, la computadora confundir\u00e1 el nombre de la variable con un n\u00famero inv\u00e1lido, deteniendo la ejecuci\u00f3n del programa por un error de sintaxis:</p> Terminal (Entrada/Salida)<pre><code>File \"\u2026\", line 1\n    1er_jugador = \"Pablo\"\n    ^\nSyntaxError: invalid decimal literal\n</code></pre> </li> <li> <p>No usar caracteres especiales: Exceptuando el gui\u00f3n bajo ( _ ), los nombres de las variables no deben contener caracteres especiales como el gui\u00f3n medio, el punto, la coma, las comillas, porcentaje, numeral, etc. puesto que estos s\u00edmbolos cumplen con otras funciones y si se intentan utilizar como parte de un identificador, esto resultar\u00e1 en un error de sintaxis inv\u00e1lida:</p> <pre><code>string %_de_desaprobados = 30\n</code></pre> <p>Al ejecutar el c\u00f3digo, el programa se detendr\u00e1 con un mensaje de error:</p> Terminal (Entrada/Salida)<pre><code>File \"\u2026\", line 1\n    %_de_desaprobados = 10\n    ^\nSyntaxError: invalid syntax\n</code></pre> </li> <li> <p>Case sensitive: En muchos lenguajes de programaci\u00f3n, los nombres de las variables distinguen entre may\u00fasculas y min\u00fasculas. Por lo tanto, <code>variable</code>, <code>Variable</code> y <code>vARIABLE</code> ser\u00edan tres variables diferentes.</p> </li> <li> <p>No debe contener espacios: El nombre de una variable no puede estar compuesto por dos o m\u00e1s palabras separadas por espacios, puesto que la computadora no puede discriminar cuando esto equivale a un nombre compuesto o no. Es decir, no puede delimitar que palabras pertenecen a un \u00fanico nombre o pertenecen a algo m\u00e1s, resultando en una sintaxis inv\u00e1lida:</p> <pre><code>nombre y apellido = \"Pablo Roca\"\n</code></pre> <p>El identificador es inv\u00e1lido porque resulta en un conjunto de palabras que arman una sintaxis inv\u00e1lida. Al ejecutar el c\u00f3digo, el programa se detendr\u00e1 con un mensaje de error:</p> Terminal (Entrada/Salida)<pre><code>File \"\u2026\", line 1\n    nombre y apellido = \"Pablo Roca\"\n           ^\nSyntaxError: invalid syntax\n</code></pre> </li> <li> <p>Usar camelCase o snake_case (casing): Ambas convenciones de nombramiento forman parte del concepto de casing que determina c\u00f3mo se combinan las palabras y c\u00f3mo se utilizan las letras may\u00fasculas y min\u00fasculas en un identificador. La elecci\u00f3n entre una y otra depender\u00e1 del lenguaje de programaci\u00f3n y las convenciones del equipo de desarrollo. Veremos este tema en un momento.</p> <ul> <li> <p>En camelCase, la primera letra de cada palabra, excepto la primera, es may\u00fascula (por ejemplo, <code>miVariable</code>). </p> </li> <li> <p>En snake_case, todas las letras son min\u00fasculas y las palabras se separan con guiones bajos (por ejemplo, <code>mi_variable</code>). </p> </li> </ul> <p>Antes de empezar a escribir con tu c\u00f3digo, elige un estilo de casing y apl\u00edcalo de manera consistente y unificada a tus identificadores a lo largo de todo el c\u00f3digo.</p> </li> <li> <p>Evitar elegir palabras reservadas: Los nombres de las variables no deben ser palabras reservadas en el lenguaje de programaci\u00f3n. Las palabras reservadas son palabras que tienen un significado especial en un lenguaje de programaci\u00f3n y no pueden ser utilizadas para otros prop\u00f3sitos, como nombres de variables o funciones. </p> <p>Aqu\u00ed enumeramos algunos ejemplos de palabras reservadas en varios lenguajes de programaci\u00f3n:</p> Python<pre><code>and, as, assert, break, class, continue, def, del, elif, else, except, False, finally, for, from, global, if, import, in, is, lambda, None, nonlocal, not, or, pass, raise, return, True, try, while, with, yield\n</code></pre> JavaScript<pre><code>abstract, arguments, await, boolean, break, byte, case, catch, char, class, const, continue, debugger, default, delete, do, double, else, enum, eval, export, extends, false, final, finally, float, for, function, goto, if, implements, import, in, instanceof, int, interface, let, long, native, new, null, package, private, protected, public, return, short, static, super, switch, synchronized, this, throw, throws, transient, true, try, typeof, var, void, volatile, while, with, yield\n</code></pre> Java<pre><code>abstract, assert, boolean, break, byte, case, catch, char, class, const, continue, default, do, double, else, enum, extends, final, finally, float, for, goto, if, implements, import, instanceof, int, interface, long, native, new, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, try, void, volatile, while\n</code></pre> Python<pre><code>alignas, alignof, and, and_eq, asm, auto, bitand, bitor, bool, break, case, catch, char, char8_t, char16_t, char32_t, class, compl, concept, const, consteval, constexpr, constinit, const_cast, continue, co_await, co_return, co_yield, decltype, default, delete, do, double, dynamic_cast, else, enum, explicit, export, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept, not, not_eq, nullptr, operator, or, or_eq, private, protected, public, register, reinterpret_cast, requires, return, short, signed, sizeof, static, static_assert, static_cast, struct, switch, template, this, thread_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while, xor, xor_eq\n</code></pre> <p>Estas palabras reservadas var\u00edan de un lenguaje a otro, por lo que es importante conocer las palabras reservadas del lenguaje que est\u00e1s utilizando para evitar utilizarlas como identificadores.</p> </li> </ol> <p>\u00a1Para recordar!</p> <p>Cuando definas los identificadores para tus variables, es importante respetar las convenciones de nombramiento (naming convention) para hacer tu c\u00f3digo legible y permitir un mantenimiento \u00e1gil y simple.</p> <p>\u00a1Olvidar estas reglas te dar\u00e1 mucho dolor de cabeza!</p> <p>Estas reglas son generales, muy importantes y pueden variar dependiendo del lenguaje de programaci\u00f3n que est\u00e9s utilizando. </p> <p>\u00a1Desconocerlas te llevar\u00e1 a nombrar tus variables de manera incorrecta y seguramente esto har\u00e1 que tu c\u00f3digo falle!</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificador-de-variable/#ejemplos-de-identificadores-validos","title":"Ejemplos de identificadores v\u00e1lidos","text":"<ul> <li> <p>numero: Este es un identificador v\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n. Se puede usar para representar un n\u00famero, como un entero o un flotante.</p> </li> <li> <p>dia_del_mes: Este es un identificador v\u00e1lido en lenguajes que permiten el uso de guiones bajos en los nombres de las variables. Se puede usar para representar un d\u00eda del mes.</p> </li> <li> <p>pinguino1: Este es un identificador v\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n. Se puede usar para representar un objeto, como un pinguino en un juego.</p> </li> <li> <p>ciudad: Este es un identificador v\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n. Se puede usar para representar una cadena de texto, como el nombre de una ciudad.</p> </li> <li> <p>x: Este es un identificador v\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n. Se puede usar para representar cualquier tipo de dato.</p> </li> <li> <p>_x: Este es un identificador v\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n. Aunque no es com\u00fan, se permite que los identificadores comiencen con un gui\u00f3n bajo.</p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificador-de-variable/#ejemplos-de-identificadores-invalidos","title":"Ejemplos de identificadores inv\u00e1lidos","text":"<ul> <li> <p>123: Este es un identificador inv\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n porque los identificadores no pueden comenzar con un n\u00famero.</p> </li> <li> <p>_d\u00eda: Este es un identificador inv\u00e1lido en algunos lenguajes de programaci\u00f3n porque contiene un car\u00e1cter especial (la tilde). Los identificadores deben consistir solo en letras no acentuadas, n\u00fameros y guiones bajos.</p> </li> <li> <p>numero*: Este es un identificador inv\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n porque contiene un car\u00e1cter especial (el asterisco). Los identificadores no pueden contener caracteres especiales.</p> </li> <li> <p>lugar de nacimiento: Este es un identificador inv\u00e1lido en la mayor\u00eda de los lenguajes de programaci\u00f3n porque contiene un espacio. Los identificadores no pueden contener espacios.</p> </li> <li> <p>a\u00f1o: Este es un identificador inv\u00e1lido en algunos lenguajes de programaci\u00f3n porque contiene un car\u00e1cter especial (la tilde o virgulilla). Los identificadores deben consistir solo en letras no acentuadas, n\u00fameros y guiones bajos.</p> </li> <li> <p>print: Este es un identificador inv\u00e1lido en algunos lenguajes de programaci\u00f3n porque es una palabra reservada. Las palabras reservadas no pueden usarse como identificadores.</p> </li> </ul> <p>\u00a1Para recordar!</p> <p>Los identificadores de las variables deben seguir ciertas reglas y convenciones dependiendo del lenguaje de programaci\u00f3n. Por lo general, deben comenzar con una letra o un guion bajo ( _ ), y pueden contener letras, n\u00fameros y guiones bajos. No pueden contener caracteres ni s\u00edmbolos especiales que cumplan otras funciones dentro del lenguaje de programaci\u00f3n. Tampoco, pueden ser palabras reservadas del lenguaje de programaci\u00f3n.</p> <p>El nombre asignado como identificador de una variable debe ser descriptivo y significativo, de manera que refleje el prop\u00f3sito o contenido del dato que almacenar\u00e1 la variable. Las convenciones de nombramiento pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando, as\u00ed como las directrices establecidas por la comunidad o los est\u00e1ndares de codificaci\u00f3n. </p> <p>Es recomendable consultar la documentaci\u00f3n o gu\u00edas de estilo correspondientes al lenguaje o entorno en el que est\u00e9s trabajando para seguir las mejores pr\u00e1cticas espec\u00edficas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificador-de-variable/#casing-para-identificador-de-variable","title":"Casing para identificador de variable","text":"<p>El concepto de casing en programaci\u00f3n se refiere a la convenci\u00f3n utilizada para escribir identificadores, como identificadores de variables, funciones, clases, etc. cuando, en general, dicho identificador se compone de dos o m\u00e1s palabras para nombrarlo. </p> <p>El casing determina c\u00f3mo se combinan las palabras y c\u00f3mo se utilizan las letras may\u00fasculas y min\u00fasculas en un identificador. </p> <p>Aqu\u00ed hay algunos ejemplos de estilos de casing:</p> <ul> <li> <p>Camel Case (camelCase): La primera letra del identificador es min\u00fascula, y la primera letra de cada palabra subsiguiente es may\u00fascula, sin espacios ni guiones entre las palabras. </p> <pre><code>cosasParaHacer, edadDelAmigo, valorFinal\n</code></pre> </li> <li> <p>Pascal Case (PascalCase): Tambi\u00e9n conocido como Upper Camel Case, la primera letra de cada palabra en el identificador es may\u00fascula, sin espacios ni guiones entre las palabras.</p> <pre><code>CosasParaHacer, EdadDelAmigo, ValorFinal\n</code></pre> </li> <li> <p>Snake Case (snake_case): Todas las letras son min\u00fasculas y las palabras se separan con guiones bajos ( _ ). </p> <pre><code>cosas_para_hacer, edad_del_amigo, valor_final\n</code></pre> </li> <li> <p>Kebab Case (kebab-case): Todas las letras son min\u00fasculas y las palabras se separan con guiones medios ( - ). </p> <pre><code>cosas-para-hacer, edad-del-amigo, valor-final\n</code></pre> <p>\u00a1Presta atenci\u00f3n y cuidado!</p> <p>Los nombre de variable en Kebab Case, en algunos lenguajes son interpretados como la resta de dos o m\u00e1s variables.</p> </li> </ul> <p>El uso de estas convenciones ayudan a mejorar la legibilidad del c\u00f3digo y a mantener la consistencia en todo el c\u00f3digo fuente. </p> <p>\u00a1Para recordar!</p> <p>La elecci\u00f3n de la convenci\u00f3n de casing puede depender del lenguaje de programaci\u00f3n, del equipo de desarrollo, o de las preferencias personales.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/que-son-las-variables/","title":"\u00bfQu\u00e9 son las variables?","text":"<p>Rev. 11/01/2024</p> <p>Definici\u00f3n</p> <p>Una variable es un espacio de almacenamiento reservado en la memoria central (RAM) de una computadora, que tiene un nombre o identificador \u00fanico asociado dentro de su \u00e1mbito o alcance, y cuyo tama\u00f1o est\u00e1 definido por el tipo de dato asignado y que puede contener un valor o una referencia a un valor que puede ser reemplazado durante la ejecuci\u00f3n de un programa.</p> <p>Analicemos esta definici\u00f3n:</p> <ul> <li> <p>Una variable es un elemento fundamental de la programaci\u00f3n que permiten almacenar un dato en la memoria RAM para luego poder ser accedido y reemplazado en alg\u00fan momento de la ejecuci\u00f3n del programa. </p> </li> <li> <p>Para poder llegar a este dato almacenado, la variable debe contar con un nombre \u00fanico que la identifique respecto de otras variables en un conjunto determinado de variables que se encontrar\u00e1 aislado de otros posibles conjuntos de variables existentes durante la ejecuci\u00f3n del programa.</p> </li> <li> <p>A su vez, la variable deber\u00e1 tener asignado un espacio de almacenamiento lo suficientemente grande para albergar al mayor de los valores de un determinado tipo de dato sin que se pierda parte de su contenido.</p> </li> </ul> <p>Identificador, alcance, tipo de dato y valor son caracter\u00edsticas de una variable que estudiaremos a m\u00e1s adelante.</p> <p>\u00a1Para pensar!</p> <p>Las variables pueden ser consideradas como la base de la programaci\u00f3n. Un programa que debe resolver un problema, si no tuviera variables para almacenar datos, no habr\u00eda datos para procesar y por consiguiente no habr\u00eda informaci\u00f3n procesada para que el programa la presente como soluci\u00f3n.</p> <p>Por lo tanto, una variable act\u00faa como un contenedor que puede almacenar un dato.</p> <p>Por ejemplo, si estamos escribiendo un algoritmo que pide al usuario que ingrese su edad, podemos crear una variable llamada edad que ser\u00e1 utilizada para almacenar el dato ingresado por el usuario:</p> Lenguaje natural<pre><code>Solicitar al usuario que ingrese su edad\nAlmacenar el dato ingresado por el usuario en la variable *edad*\n</code></pre> <p>A continuaci\u00f3n, podemos realizar diferentes procesos con el dato ingresado simplemente con acceder a la variable en cuesti\u00f3n simplemente con nombrarla:</p> Lenguaje natural<pre><code>Si *edad* es mayor o igual a 18 entonces indicar al usuario que es mayor de edad.\nSi no, indicar al usuario que no es mayor de edad.\n</code></pre> <p>Tambi\u00e9n podemos crear variables que almacenen datos o informaci\u00f3n producidos dentro del programa. Por ejemplo, si quisi\u00e9ramos llevar la cuenta de cuantos mayores de edad interactuaron con el programa, deber\u00edamos modificarlo de la siguiente manera:</p> Lenguaje natural<pre><code>Crear la variable *cant_mayores* con un valor inicial de 0\n\nSolicitar al usuario que ingrese su edad\nAlmacenar el dato ingresado por el usuario en la variable *edad*\n\nSi *edad* es mayor o igual a 18 entonces \n    Indicar al usuario que es mayor de edad\n    Incrementar en 1 el valor de la variable *cant_mayores*\nSi no, indicar al usuario que no es mayor de edad.\n</code></pre> <p>Nota que las l\u00edneas 7 y 8 est\u00e1n indentadas, tabuladas, es decir, corridas ligeramente en su alineaci\u00f3n hacia la derecha, respecto del c\u00f3digo principal. Esto significa que nuestro algoritmo posee un bloque de c\u00f3digo dentro de otro bloque de c\u00f3digo y que se va a comportar de una manera espec\u00edfica. En este caso, este bloque de c\u00f3digo compuesto por las l\u00edneas 7 y 8 solo se ejecutar\u00edan si la condici\u00f3n indicada en la l\u00ednea 6 fuese verdadera.</p> <p>\u00a1Para recordar!</p> <p>Todo dato que se introduce en un programa o que se genere como consecuencia de alg\u00fan proceso durante la ejecuci\u00f3n del programa debe ser almacenado en una variable. Caso contrario, dicho dato se perder\u00e1 para siempre al finalizar la l\u00ednea de c\u00f3digo que lo solicit\u00f3 o gener\u00f3 y pasar a la siguiente l\u00ednea de c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipo-de-dato-de-una-variable/","title":"Tipo de dato de una variable","text":"<p>Rev. 11/01/2024</p> <p>Definici\u00f3n</p> <p>En programaci\u00f3n, el tipo de dato de una variable se refiere al tipo de dato o informaci\u00f3n que puede ser almacenado en ella. </p> <p>El tipo de dato de una variable determina c\u00f3mo la computadora almacena la variable en la memoria central (RAM), c\u00f3mo interpreta el valor almacenado y qu\u00e9 operaciones se pueden realizar.</p> <p>\u00a1Para recordar!</p> <p>A partir de este momento y por practicidad, cada vez que hablemos de dato, dependiendo del contexto, podr\u00edamos estar incluyendo a la informaci\u00f3n en la menci\u00f3n. Es decir, que si hablamos de dato, en realidad y por contexto hablamos de dato y/o informaci\u00f3n.</p> <p>El tipo de dato de una variable es una caracter\u00edstica que determina qu\u00e9 tipo de valores puede contener una variable. Cada tipo de dato tiene sus propias caracter\u00edsticas y restricciones. Por ejemplo, una variable de tipo entero puede almacenar n\u00fameros enteros (sin decimales), una variable de tipo flotante puede almacenar n\u00fameros con decimales, y una variable de tipo cadena de caracteres puede almacenar texto. </p> <p>La importancia del tipo de dato radica en varios aspectos:</p> <ol> <li> <p>Almacenamiento: Diferentes tipos de datos requieren diferentes cantidades de memoria. Por ejemplo, un entero puede requerir menos memoria que una cadena de caracteres.</p> </li> <li> <p>Operaciones permitidas: Las operaciones que puedes realizar con una variable dependen de su tipo de dato. Por ejemplo, puedes sumar dos enteros, pero no puedes sumar una cadena de caracteres y un entero.</p> </li> <li> <p>Precisi\u00f3n de los datos: Algunos tipos de datos pueden almacenar informaci\u00f3n con m\u00e1s precisi\u00f3n que otros. Por ejemplo, un n\u00famero flotante puede almacenar n\u00fameros con decimales, mientras que un entero no.</p> </li> <li> <p>Seguridad del tipo: Al especificar el tipo de dato, puedes evitar errores en tiempo de ejecuci\u00f3n. Por ejemplo, si intentas realizar una operaci\u00f3n no permitida con un tipo de dato, el compilador o el int\u00e9rprete te advertir\u00e1.</p> </li> </ol> <p>\u00a1Para recordar!</p> <p>Es crucial seleccionar el tipo de dato correcto para tus variables para garantizar que tu programa funcione correctamente y de manera eficiente.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipo-de-dato-de-una-variable/#lenguajes-fuertemente-tipados","title":"Lenguajes fuertemente tipados","text":"<p>Los lenguajes de programaci\u00f3n que requieren especificar el tipo de dato al crear una variable se llaman lenguajes de tipado est\u00e1tico o fuerte. Algunos ejemplos de estos lenguajes son:</p> <ul> <li>Java</li> <li>C++</li> <li>C#</li> <li>Rust</li> <li>Go</li> <li>Swift</li> </ul> <p>En estos lenguajes, una vez que una variable ha sido declarada con un tipo de dato, no puede cambiar a otro tipo de dato. Esto puede ayudar a prevenir errores de tipo en tiempo de compilaci\u00f3n.</p> <p>Por ejemplo:</p> Lenguaje de tipado est\u00e1tico - Java<pre><code>int a = 10; // Inicializaci\u00f3n de una variable de tipo entero\na = \"Hello, World!\"; // Esto dar\u00e1 un error de compilaci\u00f3n porque se est\u00e1 intentando asignar una cadena a una variable de tipo entero\n</code></pre> <p>En el ejemplo de Java, el compilador arrojar\u00e1 un error porque se est\u00e1 intentando cambiar el tipo de la variable <code>a</code> de <code>int</code> a <code>String</code>.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipo-de-dato-de-una-variable/#lenguajes-debilmente-tipados","title":"Lenguajes d\u00e9bilmente tipados","text":"<p>Los lenguajes de programaci\u00f3n que no requieren especificar el tipo de dato al crear una variable se llaman lenguajes de tipado din\u00e1mico o d\u00e9bil. Algunos ejemplos de estos lenguajes son:</p> <ul> <li>Python</li> <li>JavaScript</li> <li>Ruby</li> <li>PHP</li> <li>Perl</li> </ul> <p>En estos lenguajes, el tipo de una variable puede cambiar en tiempo de ejecuci\u00f3n, lo que proporciona una mayor flexibilidad pero tambi\u00e9n puede llevar a errores de tipo m\u00e1s dif\u00edciles de detectar.</p> <p>Por ejemplo:</p> Lenguaje de tipado din\u00e1mico - Python<pre><code>a = 10  # Inicializaci\u00f3n de una variable con un entero\na = \"Hello, World!\"  # Ahora a es una cadena. En Python, esto es v\u00e1lido porque es un lenguaje de tipado din\u00e1mico.\n</code></pre> <p>En el ejemplo de Python, no hay ning\u00fan problema en cambiar el tipo de la variable a de un entero a una cadena. El problema se va a presentar si el dato almacenado no corresponde con el tipo de dato que el programa espera.</p> <p>\u00a1Para recordar!</p> <p>Si el lenguaje de programaci\u00f3n es est\u00e1tico o debilmente tipado ser\u00e1 necesario asociar el tipo de dato a una variable cuando se esta sea creada.</p> <p>Si el lenguaje de programaci\u00f3n es din\u00e1mico o fuertemente tipado el propio lenguaje podr\u00e1 ser capaz de asociar el tipo de dato a una variable bas\u00e1ndose en el dato que se le est\u00e1 asignando, sin necesidad de especificarlo en el c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipo-de-dato-de-una-variable/#tipos-de-dato-basicos","title":"Tipos de dato b\u00e1sicos","text":"<p>Los tipos de dato b\u00e1sicos son:</p> <ul> <li> <p>Enteros (int): n\u00fameros pertenecientes a un subconjunto finito de los n\u00fameros enteros. Los enteros son n\u00fameros sin decimales.</p> <pre><code>1  2  -3  0\n</code></pre> </li> <li> <p>Reales (float): n\u00fameros pertenecientes a un subconjunto finito de los n\u00fameros reales. Los n\u00fameros reales constan de una parte entera y una parte decimal, es decir, son n\u00fameros con decimales. Tambi\u00e9n se los conoce como flotantes o de punto flotante.</p> <pre><code>3.14  2.5  -0.5  5.0  0.09\n</code></pre> </li> <li> <p>Caracteres (char): son un conjunto finito de caracteres reconocidos por la computadora. Los caracteres son letras, n\u00fameros y s\u00edmbolos individuales.</p> <pre><code>alfab\u00e9ticos: A  B  C  ... Z    a  b  c ... z\nnum\u00e9ricos:   0  1  2  3  4  5  6  7  8  9  0\ns\u00edmbolos:    +  -  *  /  ^  ,  ;  &lt;  &gt;  $  @\n</code></pre> </li> <li> <p>L\u00f3gicos (bool): tambi\u00e9n conocidos como booleanos son dos valores l\u00f3gicos: verdadero (true) o falso (false).</p> <pre><code>verdadero:  1   true    (True)\nfalso:      0   false   (False)\n</code></pre> <p>Por ejemplo, tenemos el siguiente programa:</p> Python<pre><code>valor1 = True\nvalor2 = False\n\nprint (\"Valor 1: \", valor1)\nprint (\"Valor 2: \", valor2)\n\nprint (valor1, \" AND \", valor2 , \" = \", valor1 and valor2)\nprint (valor1, \" OR \", valor2 , \" = \", valor1 or valor2)\nprint (\"NOT \", valor2 , \" = \", not valor2)\n</code></pre> <p>Esta es la salida en pantalla:</p> Terminal (Entrada/Salida)<pre><code>Valor 1:  True\nValor 2:  False\n\nTrue  AND  False    =  False\nTrue  OR  False     =  True\nNOT  False          =  True\n</code></pre> <p>\u00bfEntiendes todo lo que ocurre, l\u00ednea tras l\u00ednea?</p> </li> </ul> <p>\u00a1Para recordar!</p> <p>No todos los tipos de dato existen en todos los lenguajes de programaci\u00f3n. Hay lenguajes m\u00e1s ricos que otros en este sentido. Si un tipo de dato no existiese en un determinado lenguaje, ser\u00e1 necesario suplantarlo con el tipo de dato que m\u00e1s se asemeje a sus caracter\u00edsticas y restricciones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipo-de-dato-de-una-variable/#estructuras-de-datos","title":"Estructuras de datos","text":"<p>Los tipos de dato vistos anteriormente se suelen denominar elementales o b\u00e1sicos. </p> <p>Una estructura de datos es una forma particular de organizar y almacenar datos en una computadora para que puedan ser utilizados de manera eficiente. </p> <p>Dependiendo de las necesidades de la aplicaci\u00f3n, se pueden utilizar diferentes tipos de estructuras de datos. A modo introductorio, enumeraremos las siguientes estructuras de datos solo para mostrarte el amplio universo de posibilidades:</p> <ul> <li> <p>Cadena de caracteres (string): Una secuencia de caracteres. Se utiliza para representar texto.</p> </li> <li> <p>Lista (list): Una colecci\u00f3n ordenada de elementos. Los elementos pueden ser de cualquier tipo y se pueden modificar despu\u00e9s de su creaci\u00f3n.</p> </li> <li> <p>Lista enlazada (linked list): Una colecci\u00f3n de nodos que juntos representan una secuencia. Cada nodo est\u00e1 compuesto por un valor y una referencia al siguiente nodo en la secuencia.</p> </li> <li> <p>Matriz (matrix): Una colecci\u00f3n bidimensional de n\u00fameros dispuestos en filas y columnas.</p> </li> <li> <p>Tupla (tuple): Similar a una lista, pero inmutable. Esto significa que una vez creada, no puede ser modificada.</p> </li> <li> <p>Arreglo (array): Una colecci\u00f3n de elementos de un mismo tipo. Los elementos est\u00e1n indexados por un n\u00famero entero.</p> </li> <li> <p>Diccionario (dict): Una colecci\u00f3n de pares clave-valor. Las claves son \u00fanicas dentro de un mismo diccionario.</p> </li> <li> <p>Pila (stack): Una colecci\u00f3n de elementos con dos operaciones principales: push (agregar un elemento al final) y pop (remover el \u00faltimo elemento).</p> </li> <li> <p>Cola (_queue): Similar a una pila, pero el elemento removido es el que est\u00e1 al principio.</p> </li> <li> <p>Conjunto (set): Una colecci\u00f3n de elementos \u00fanicos, es decir, no contiene duplicados.</p> </li> <li> <p>Grafo (graph): Un conjunto de nodos y aristas que conectan estos nodos.</p> </li> <li> <p>\u00c1rbol (tree): Un tipo especial de grafo, donde cualquier dos nodos est\u00e1n conectados por exactamente un camino.</p> </li> </ul> <p>La elecci\u00f3n de la estructura de datos a menudo afecta la eficiencia de un programa, por lo que es un aspecto importante en el dise\u00f1o de software.</p> <p>Por lo general, una estructura de datos est\u00e1 compuesta por elementos de tipos de dato b\u00e1sicos o incluso por otras estructuras de datos, por lo que se la suele denominar como de tipo de dato complejo o tipo de dato estructurado.</p> <p>Por su extensi\u00f3n y complejidad, este tema merece un cap\u00edtulo aparte que abordaremos m\u00e1s adelante para estudiarlo en profundidad; o podr\u00edas consultar el tema ahora, si quisieras, haciendo clic aqu\u00ed. </p> <p>\u00a1Para recordar!</p> <p>La definici\u00f3n de un tipo de dato o de una estructura de datos incluye la definici\u00f3n del conjunto de valores permitidos y las operaciones que se pueden llevar a cabo sobre estos datos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipo-de-dato-de-una-variable/#tipos-de-dato-que-no-se-pueden-representar","title":"tipos de dato que no se pueden representar","text":"<p>Existen ciertos tipos de datos que no se pueden representar exactamente en una computadora. </p> <p>Aqu\u00ed hay algunos ejemplos:</p> <ul> <li> <p>N\u00fameros reales infinitos: Las computadoras tienen una capacidad de memoria limitada, por lo que no pueden representar n\u00fameros reales con una precisi\u00f3n infinita. Por ejemplo, el n\u00famero pi o la ra\u00edz cuadrada de 2 no se pueden representar exactamente.</p> </li> <li> <p>N\u00fameros muy grandes o muy peque\u00f1os: Las computadoras tienen l\u00edmites para los n\u00fameros m\u00e1s grandes y m\u00e1s peque\u00f1os que pueden representar. Por ejemplo, en la mayor\u00eda de los sistemas, un n\u00famero entero de 64 bits puede representar valores desde -9,223,372,036,854,775,808 hasta 9,223,372,036,854,775,807.</p> </li> <li> <p>Informaci\u00f3n continua: Las computadoras son dispositivos digitales y no pueden representar informaci\u00f3n continua directamente. Por ejemplo, el sonido y las im\u00e1genes se digitalizan para su procesamiento y almacenamiento.</p> </li> <li> <p>Datos ambiguos o inciertos: Las computadoras requieren precisi\u00f3n y no manejan bien la ambig\u00fcedad o la incertidumbre. Los datos que no son claros o que tienen m\u00faltiples posibles representaciones pueden ser dif\u00edciles de representar.</p> </li> </ul> <p>Estos son solo algunos ejemplos y hay muchas otras situaciones en las que los datos pueden no ser representables en una computadora.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipo-de-dato-de-una-variable/#como-determino-el-tipo-de-dato-asociado-a-una-variable","title":"\u00bfC\u00f3mo determino el tipo de dato asociado a una variable?","text":"<p>En la mayor\u00eda de los lenguajes de programaci\u00f3n existen comandos que pueden evaluar el tipo de dato de un dato almacenado en un variable. As\u00ed, podemos evaluar y manipular las variables de manera correcta durante la ejecuci\u00f3n de un programa.</p> <p>Por ejemplo, en Python podemos utilizar la palabra clave type para conocer el tipo de dato de una variable:</p> Python<pre><code>valor1 = True\nvalor2 = 12\nvalor3 = \"Hola\"\nvalor4 = 14.34\n\nprint (\"Valor 1: \", type(valor1))\nprint (\"Valor 2: \", type(valor2))\nprint (\"Valor 3: \", type(valor3))\nprint (\"Valor 4: \", type(valor4))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Valor 1:  &lt;class 'bool'&gt;\nValor 2:  &lt;class 'int'&gt;\nValor 3:  &lt;class 'str'&gt;\nValor 4:  &lt;class 'float'&gt;\n</code></pre> <p>Referencias</p> <ol> <li> <p>Un bit es la unidad m\u00e1s b\u00e1sica de informaci\u00f3n ,o m\u00ednima unidad de informaci\u00f3n, en la computaci\u00f3n y la tecnolog\u00eda digital. El nombre es una contracci\u00f3n de BInary digiT, que en espa\u00f1ol se traduce como \"d\u00edgito binario\". </p> <p>Un bit solo puede tener uno de dos valores: 0 o 1. Estos valores pueden interpretarse como encendido/apagado, verdadero/falso, s\u00ed/no, etc., dependiendo del contexto. </p> <p>Los bits se agrupan para formar estructuras de datos m\u00e1s grandes, como los bytes<sup>2</sup> (que constan de 8 bits).</p> <p>Las computadoras utilizan el sistema binario (basado en bits) para almacenar y procesar datos, ya que su dise\u00f1o electr\u00f3nico les permite manejar f\u00e1cilmente este sistema de dos estados.\u00a0\u21a9</p> </li> <li> <p>Un byte es una unidad de informaci\u00f3n digital, o m\u00ednima unidad de palabra (un caracter), que se compone de 8 bits. Es la unidad de almacenamiento de datos m\u00e1s com\u00fanmente utilizada en la computaci\u00f3n y la tecnolog\u00eda digital.</p> <p>Cada bit en un byte puede tener uno de dos valores (0 o 1), lo que significa que un byte puede representar 256 (2<sup>8</sup>) valores diferentes. Esto puede ser cualquier cosa desde un n\u00famero individual hasta un car\u00e1cter de texto.</p> <p>Por ejemplo, en el sistema de codificaci\u00f3n ASCII (American Standard Code for Information Interchange), el car\u00e1cter 'A' se representa con el n\u00famero 65, que en binario se escribe como 01000001. Este es un ejemplo de c\u00f3mo se puede representar un car\u00e1cter como un byte.\u00a0\u21a9</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/","title":"Utilizaci\u00f3n de variables en un programa","text":"<p>Rev. 11/01/2024</p> <p>La utilizaci\u00f3n de una variable en un programa es cuando una instrucci\u00f3n de c\u00f3digo accede a la variable para realizar alguna operaci\u00f3n o acci\u00f3n con ella. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#sintaxis","title":"Sintaxis","text":"<p>La sintaxis se refiere a las reglas y convenciones que se deben seguir al declarar, inicializar y utilizar variables en un lenguaje de programaci\u00f3n espec\u00edfico. Estas reglas pueden variar de un lenguaje a otro, pero generalmente incluyen lo siguiente:</p> <p>Declaraci\u00f3n de variables: La sintaxis para declarar una variable generalmente incluye un tipo de dato y un identificador. </p> Declaraci\u00f3n<pre><code>tipo_de_dato identificador_de_variable\n</code></pre> <p>Por ejemplo, en Java, puedes declarar una variable de tipo entero llamada <code>a</code> de la siguiente manera: </p> Java<pre><code>int a;\n</code></pre> <p>Inicializaci\u00f3n de variables: La inicializaci\u00f3n se refiere a la asignaci\u00f3n de un valor inicial a una variable en el momento de la declaraci\u00f3n. </p> Inicializaci\u00f3n<pre><code>identificador_de_variable = valor_para_asignar\n</code></pre> <p>Por ejemplo, en Python, puedes declarar e inicializar una variable <code>a</code> con el valor <code>10</code> de la siguiente manera: </p> Python<pre><code>a = 10\n</code></pre> <p>En algunos lenguajes de programaci\u00f3n es posible declarar e inicializar una variable en la misma l\u00ednea de c\u00f3digo.</p> Inicializaci\u00f3n en la declaraci\u00f3n<pre><code>tipo_de_dato identificador_de_variable = valor_para_asignar\n</code></pre> <p>Por ejemplo, podemos unir la declaraci\u00f3n y la inicializaci\u00f3n que hemos visto en una sola l\u00ednea de c\u00f3digo en Java o C++:</p> Java / C++<pre><code>int a = 10;\n</code></pre> <p>Asignaci\u00f3n de variables: La asignaci\u00f3n se refiere a cambiar el valor de una variable ya declarada. </p> Asignaci\u00f3n<pre><code>identificador_de_variable = valor_para_asignar\n</code></pre> <p>Por ejemplo, en JavaScript, puedes cambiar el valor de una variable <code>a</code> con un valor almacenado de <code>10</code> a otro valor de <code>20</code> de la siguiente manera: </p> JavaScript<pre><code>a = 10;\na = 20;\n</code></pre> <p>Uso de variables: Las variables se pueden utilizar en expresiones y sentencias. La sintaxis para utilizar una variable depende de la operaci\u00f3n que se est\u00e9 realizando. Por ejemplo, en C++, puedes utilizar la variable <code>a</code> en una operaci\u00f3n de suma de la siguiente manera: </p> C++<pre><code>int b = a + 5;\n</code></pre> <p>Como puedes observar en cada caso, la sintaxis parece ser la misma. Es decir, la misma manera de escribir. Pero ten cuidado porque no siempre ocurre esto.</p> <p>\u00a1Para recordar!</p> <p>Es importante seguir la sintaxis correcta para evitar errores de compilaci\u00f3n y de tiempo de ejecuci\u00f3n.</p> <p>Dependiendo del lenguaje, es posible declarar, inicializar o asignar dos o m\u00e1s variables en una misma l\u00ednea de c\u00f3digo, separadas por una coma:</p> C++<pre><code>int num_1, num_2, num_3;  // Declaraci\u00f3n\n\nint num_1 = 5, num_2 = 10, num_3 = 20;  // Declaraci\u00f3n e inicializaci\u00f3n\n\nint num_1, num_2, num_3;  // Declaraci\u00f3n\nnum_1 = 5, num_2 = 10, num_3 = 20;  // Inicializaci\u00f3n\n\nnum_1 = 15, num_2 = 20, num_3 = 30;  // Asignaci\u00f3n\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#como-se-lee-la-sintaxis","title":"\u00bfC\u00f3mo se lee la sintaxis?","text":"<pre><code>int a;  // Declaraci\u00f3n\n</code></pre> <p>Se lee: Se declara la variable <code>a</code> de tipo entero (en ingl\u00e9s integer)</p> <pre><code>int a = 40;  // Declaraci\u00f3n e inicializaci\u00f3n\n</code></pre> <p>Se lee:  Se declara la variable <code>a</code> de tipo entero (en ingl\u00e9s integer) y se inicializa con el valor cuarenta.</p> <pre><code>int a;  // Declaraci\u00f3n\na = 40;  // Inicializaci\u00f3n\n</code></pre> <p>Se lee: Se declara la variable <code>a</code> de tipo entero (en ingl\u00e9s integer). Luego, se inicializa con el valor cuarenta.</p> <pre><code>a = 40;  // Asignaci\u00f3n\n</code></pre> <p>Se lee: Se asigna a la variable <code>a</code> el valor cuarenta.</p> <pre><code>int a;  // Declaraci\u00f3n\na = 40;  // Inicializaci\u00f3n\nint b = a;  // Declaraci\u00f3n e inicializaci\u00f3n\n</code></pre> <p>Se lee: Se declara la variable <code>a</code> de tipo entero (en ingl\u00e9s integer). Luego, se inicializa con el valor cuarenta.  Se declara la variable <code>b</code> de tipo entero (en ingl\u00e9s integer) y se inicializa con el valor almacenado en la variable <code>a</code>.</p> <p>Est\u00e1 mal decir: Inicializo la variable <code>b</code> de tipo entero con a; o b es igual a a (en ambos casos puedo entender: b = \"a\")</p> <p>Importante</p> <p>En realidad, cualquier lectura que lleve a la correcta interpretaci\u00f3n de la instrucci\u00f3n, es v\u00e1lida. Para que ello ocurra, no puede existir ambig\u00fcedad posible. Si la lectura puede interpretarse de dos o maneras diferentes, entonces ser\u00e1 inv\u00e1lida.</p> <p>A continuaci\u00f3n, veremos todos estos temas en profundidad:</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#declaracion-de-una-variable","title":"Declaraci\u00f3n de una variable","text":"<p>Empecemos por el principio. Para poder utilizar una variable en un programa, dicha variable debe existir y ser accesible al momento de su utilizaci\u00f3n.</p> <p>En todos de los lenguajes de programaci\u00f3n, antes de que una variable pueda ser utilizada debe ser declarada. </p> <p>En t\u00e9rminos simples, declarar una variable significa crear una nueva variable en el programa, especificando su identificador y el tipo de dato asociado:</p> <ul> <li> <p>El identificador de una variable es su nombre. Debe ser \u00fanico y referencial del dato que almacenar\u00e1.  </p> </li> <li> <p>El tipo de dato de una variable define el espacio que se reserva en memoria para almacenar el dato correctamente y de manera completa. </p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#como-se-reserva-el-espacio-en-memoria-para-una-variable","title":"\u00bfC\u00f3mo se reserva el espacio en memoria para una variable?","text":"<p>Cada vez que se crea una variable, se reserva el espacio necesario en memoria para que esa variable pueda almacenar un valor de un determinado tipo de dato.</p> <p>Por lo tanto, la declaraci\u00f3n de una variable es la acci\u00f3n de reservar el espacio necesario en la memoria central (RAM) para almacenar un valor seg\u00fan el tipo de dato, asociando dicho espacio a un  identificador que se utilizar\u00e1 en el c\u00f3digo para acceder a esa porci\u00f3n de memoria, durante la ejecuci\u00f3n del programa o hasta que la variable se destruya, pero sin asignarle un valor inicial.  </p> <p>Si no asignas un valor a la variable al declararla, lo que se almacena en ese espacio de memoria depende del lenguaje de programaci\u00f3n:</p> <ul> <li> <p>En algunos lenguajes de programaci\u00f3n, como C y C++, si no inicializas una variable al declararla, su valor es indeterminado y puede contener \"basura\", es decir, cualquier valor que estuviera previamente en ese espacio de memoria.</p> </li> <li> <p>En otros lenguajes de programaci\u00f3n, como Java, si no inicializas una variable al declararla, se le asignar\u00e1 un valor predeterminado, como 0 para los tipos num\u00e9ricos, false para el tipo booleano, y null para los tipos de objeto.</p> </li> <li> <p>En Python, debes asignar un valor a la variable al declararla. Si no quieres asignar un valor espec\u00edfico, puedes asignarle None, que es un valor especial que indica la ausencia de valor.</p> </li> </ul> <p>Por ejemplo, en el lenguaje de programaci\u00f3n C++, una declaraci\u00f3n de variable podr\u00eda verse as\u00ed:</p> C++<pre><code>int a;\n</code></pre> <p>La variable <code>a</code> es declarada como tipo de dato entero.</p> <p></p> <p>\u00a1Para recordar!</p> <p>Luego de cada declaraci\u00f3n de variable se habr\u00e1 reservado espacio suficiente en la memoria central (RAM) para almacenar el valor de un tipo de dato espec\u00edfico en ella, pero no tendr\u00e1 un valor inicial asignado a\u00fan.</p> <p>Dependiendo del lenguaje de programaci\u00f3n, el espacio reservado tendr\u00e1 asignado un valor predeterminado que en general representa neutralidad, falsedad o nulidad; o mucho peor aun, un valor indeterminado pudiendo contener \"basura\", es decir, cualquier valor que estuviera previamente en ese espacio de memoria.</p> <p>Una vez que asignas un valor a la variable, ese valor se almacena en el espacio de memoria reservado para la variable.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#declaracion-de-multiples-variables","title":"Declaraci\u00f3n de m\u00faltiples variables","text":"<p>Veamos el siguiente ejemplo: </p> <pre><code>int edad;\nint numero_de_hijos;\n</code></pre> <p>Puesto que las dos variables son del mismo tipo de dato, se podr\u00edan declarar en la misma l\u00ednea separ\u00e1ndolas por medio de la coma (,). La coma es un operador que permite crear expresiones compuestas.</p> <pre><code>int edad, numero_de_hijos;\n</code></pre> <p>En el ejemplo, La declaraci\u00f3n <code>int edad, numero_de_hijos;</code> se llama declaraci\u00f3n de m\u00faltiples variables.  </p> <p>Esta es una manera com\u00fan de declarar varias variables del mismo tipo en una sola l\u00ednea en muchos lenguajes de programaci\u00f3n, incluyendo C, C++, Java y C#.</p> <p>En la declaraci\u00f3n del ejemplo, se crean dos variables, <code>edad</code> y <code>numero_de_hijos</code>, ambas del tipo de dato entero, y se reserva el espacio en la memoria central (RAM) necesario para almacenar la edad de una persona y su n\u00famero de hijos.</p> <p>As\u00ed, en la memoria RAM podr\u00eda ocurrir uno de estos dos casos de asignaci\u00f3n de espacio reservado para ambas variables: </p> <p>Como se ve en la imagen, los espacios de memoria reservados para las variables no tienen por qu\u00e9 estar de manera contigua.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#uso-de-palabras-clave-para-definir-el-alcance","title":"Uso de palabras clave para definir el alcance","text":"<p>En algunos lenguajes, para crear una variable se utiliza una palabra clave que, adem\u00e1s, define su alcance, seguida del identificador de la variable. En el caso de JavaScript, las palabras clave son  <code>var</code> para definir una variable global o <code>let</code> para definir una variable local. </p> <p>Por ejemplo,</p> JavaScript<pre><code>var nombre;  // variable de alcance global\nlet nombre;  // variable de alcance local\n</code></pre> <p>En este c\u00f3digo, se declaran dos variables, una de alcance global (accesible desde cualquier bloque del programa) y otra de alcance local (accesible solo desde el bloque donde fue declarada y desde los bloques dentro de este bloque).</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#ejemplos-de-aplicacion","title":"Ejemplos de aplicaci\u00f3n","text":"<p>A continuaci\u00f3n, se presentan ejemplos de aplicaci\u00f3n en algunos lenguajes de programaci\u00f3n:</p> C++<pre><code>int edad;\nfloat precio;\nchar primera_vocal;\n</code></pre> Java<pre><code>int edad;\ndouble precio;\nchar primera_vocal;\n</code></pre> JavaScript<pre><code>let edad  // variable local\nlet precio  // variable local\nvar primera_vocal  // variable global\n</code></pre> PHP<pre><code>$edad;\n$precio;\n$primera_vocal;\n</code></pre> <p>En todos estos ejemplos, se declaran variables. Es decir, se define el identificador y se asocia el tipo de dato espec\u00edfico si el lenguaje lo requiere (como en los dos primeros ejemplos) pero no se asigna ning\u00fan valor inicial a cada una.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#inicializacion-de-una-variable","title":"Inicializaci\u00f3n de una variable","text":"<p>Inicializar una variable significa asignarle un valor por primera vez. </p> <p>Cuando se declara una variable, se reserva espacio en la memoria para ella. Sin embargo, hasta que no se le asigna un valor, esa variable no tiene un valor definido o puede contener basura (un valor residual de la memoria).</p> <p>Por ejemplo, en el lenguaje de programaci\u00f3n C++, una inicializaci\u00f3n luego de la declaraci\u00f3n de variable podr\u00eda verse as\u00ed:</p> C++<pre><code>int a;\na = 10;\n</code></pre> <p>En este c\u00f3digo, primero se declara la variable <code>a</code> de tipo entero y luego, en otra l\u00ednea de c\u00f3digo, se inicializa con el valor <code>10</code>. Esto significa que en la memoria reservada para <code>a</code>, se almacena el valor <code>10</code> como valor inicial.</p> <p></p> <p>Buena pr\u00e1ctica</p> <p>Siempre debes inicializar tus variables. Esto es muy importante porque asegura que cada variable tenga un valor inicial definido antes de que sea utilizada en el programa, evitando as\u00ed comportamientos impredecibles.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#declaracion-e-inicializacion-en-la-misma-instruccion","title":"\u00bfDeclaraci\u00f3n e inicializaci\u00f3n en la misma instrucci\u00f3n?","text":"<p>Cuando se declara e inicializa una variable en una sola l\u00ednea de c\u00f3digo, se llama a esta unidad de ejecuci\u00f3n<sup>1</sup> como \"inicializaci\u00f3n en la declaraci\u00f3n\" (\"declaration with initialization\" o \"definition with initialization\"). </p> <p>No existe un t\u00e9rmino t\u00e9cnico espec\u00edfico para esta unidad de ejecuci\u00f3n en la mayor\u00eda de los lenguajes de programaci\u00f3n, simplemente se describe como declarar e inicializar una variable al mismo tiempo.</p> <p>Por ejemplo, en C++, una inicializaci\u00f3n en la declaraci\u00f3n se ver\u00eda as\u00ed: </p> C++<pre><code>int a = 10;\n</code></pre> <p>En este c\u00f3digo, se declara la variable <code>a</code> de tipo entero y se inicializa con el valor <code>10</code> en la misma unidad de ejecuci\u00f3n.  </p> <p></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#ejemplos-de-aplicacion_1","title":"Ejemplos de aplicaci\u00f3n","text":"<p>A continuaci\u00f3n, se presentan ejemplos de aplicaci\u00f3n en algunos lenguajes de programaci\u00f3n:</p> C++<pre><code>int edad = 25;\nfloat precio = 9.99;\nchar primera_vocal = 'a';\n</code></pre> Java<pre><code>int edad = 25;\ndouble precio = 9.99;\nchar primera_vocal = 'a';\n</code></pre> <p>En ambos ejemplos, se inicializan variables durante su declaraci\u00f3n. Es decir, se define el identificador, se asocia el tipo de dato y se asigna el valor inicial a cada una.</p> <p>\u00a1Para recordar!</p> <p>Es importante notar que algunos lenguajes de programaci\u00f3n, como Python o JavaScript, no distinguen entre la declaraci\u00f3n y la inicializaci\u00f3n de una variable; simplemente se le asigna un valor a un nombre de variable, y si ese nombre no es una variable al momento de la asignaci\u00f3n, se crea una nueva variable.</p> Python<pre><code>edad = 25\nprecio = 9.99\nprimera_vocal = 'a'\n</code></pre> JavaScript<pre><code>let edad = 25  // variable local\nlet precio = 9.99  // variable local\nvar primera_vocal = 'a'  // variable global\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#utilizacion-de-una-variable","title":"Utilizaci\u00f3n de una variable","text":"<p>Una vez que la variable ha sido declarada e inicializada, se puede utilizar en el c\u00f3digo durante la ejecuci\u00f3n del programa.</p> <p>Volviendo a los posibles usos que puede tener una variable en un programa, vamos explicar los siguientes dado que son los m\u00e1s b\u00e1sicos pero m\u00e1s importantes; y los necesitar\u00e1s para escribir cualquier programa:</p> <ul> <li> <p>Asignar su valor a otra variable: Por ejemplo, <code>b = a</code> donde <code>a</code> es la variable que estamos utilizando.</p> <p>Analicemos un ejemplo pr\u00e1ctico:</p> Python<pre><code># Primero, inicializamos una variable con el valor 10\na = 10\n\n# Luego, inicializamos una segunda variable con el valor de la primera\nb = a\n</code></pre> <p>En este c\u00f3digo, primero se declara la variable <code>a</code> y se le asigna el valor <code>10</code> (a esto se lo llama inicializar). Luego, se declara una segunda variable <code>b</code> y se le asigna el valor de <code>a</code> (inicializaci\u00f3n).  </p> <p>Esta asignaci\u00f3n de valor a <code>b</code> no es el valor original de <code>a</code> si no una copia de este valor. </p> \u00bfC\u00f3mo es esto? <p>Cuando asignas el valor de una variable a otra, lo que realmente est\u00e1s haciendo es copiando el valor de la primera variable en la segunda. No est\u00e1s creando una conexi\u00f3n o enlace entre las dos variables.</p> <p>En el c\u00f3digo estamos copiando el valor actual de <code>a</code> en <code>b</code>. Pero <code>a</code> y <code>b</code> son dos variables completamente independientes. Si cambiamos el valor de <code>a</code> despu\u00e9s de la asignaci\u00f3n, no afectar\u00e1 el valor de <code>b</code>.</p> <p>\u00a1Para recordar!</p> <p>Aqu\u00ed est\u00e1 el concepto clave: <code>a</code> y <code>b</code> son contenedores separados que pueden almacenar valores. Cuando haces <code>b = a</code>, est\u00e1s diciendo \"haz que el contenido del contenedor <code>b</code> sea igual al contenido del contenedor <code>a</code>\". Pero despu\u00e9s de eso, los dos contenedores son independientes. Puedes cambiar el contenido de <code>a</code> sin que afecte a <code>b</code>, y viceversa.</p> <p>En t\u00e9rminos de identidad, <code>a</code> y <code>b</code> son diferentes porque son contenedores diferentes, aunque puedan contener el mismo valor. Es como tener dos tazas de caf\u00e9: aunque ambas contengan caf\u00e9, son dos tazas diferentes. Si viertes m\u00e1s caf\u00e9 en una taza, no afectar\u00e1 la cantidad de caf\u00e9 en la otra taza.</p> <p>Por lo tanto, es importante notar que <code>b</code> no est\u00e1 vinculada a <code>a</code> de ninguna manera despu\u00e9s de la asignaci\u00f3n. Si cambias el valor de <code>a</code> despu\u00e9s de la asignaci\u00f3n, el valor de <code>b</code> no cambiar\u00e1. Por ejemplo:</p> Python<pre><code>a = 20\nprint(b)  # Esto imprimir\u00e1 '10', no '20'\n</code></pre> <p>En este caso, aunque hemos cambiado el valor de <code>a</code> a <code>20</code>, el valor de <code>b</code> sigue siendo <code>10</code> porque <code>b</code> conserva una copia del valor que <code>a</code> ten\u00eda en el momento de la asignaci\u00f3n.</p> </li> <li> <p>Usarla en una operaci\u00f3n matem\u00e1tica: Por ejemplo, <code>b = a + 3</code> donde <code>a</code> es la variable que estamos utilizando.</p> <p>Analicemos un ejemplo pr\u00e1ctico:</p> Python<pre><code># Inicializaci\u00f3n de la variable\na = 5\n\n# Uso de la variable en una operaci\u00f3n matem\u00e1tica\nb = a + 3\n</code></pre> <p>En este c\u00f3digo, primero se declara la variable <code>a</code> y se le asigna el valor <code>5</code> (inicializaci\u00f3n). Luego, se declara una segunda variable <code>b</code> y se le asigna el resultado de la operaci\u00f3n matem\u00e1tica <code>a + 3</code>.</p> <p>Dado que el valor de <code>a</code> es <code>5</code>, la operaci\u00f3n <code>a + 3</code> resulta en <code>8</code>. Por lo tanto, despu\u00e9s de ejecutar este c\u00f3digo, la variable <code>b</code> tendr\u00e1 el valor <code>8</code>.</p> <p>Es importante notar que el valor de <code>a</code> no cambia como resultado de esta operaci\u00f3n. Aunque se usa en la operaci\u00f3n matem\u00e1tica, su valor sigue siendo <code>5</code> despu\u00e9s de que se ejecuta el c\u00f3digo.</p> Python<pre><code># Impresi\u00f3n de los valores almacenados en ambas variables\nprint(a)  # Output : 5\nprint(b)  # Output : 8\n</code></pre> </li> <li> <p>Usarla en una condici\u00f3n: Por ejemplo, en una estructura alternativa condicional <code>if</code>, cuya condici\u00f3n sea <code>a &gt; 10</code> donde <code>a</code> es la variable que estamos utilizando.</p> <p>Analicemos un ejemplo pr\u00e1ctico:</p> Python<pre><code># Inicializaci\u00f3n de la variable\na = 5\n\n# Uso de la variable en una estructura alternativa condicional\nif a &gt; 10:\n    print(\"a es mayor que 10\")\nelse:\n    print(\"a no es mayor que 10\")\n</code></pre> <p>En este c\u00f3digo, primero se declara la variable <code>a</code> y se le asigna el valor <code>5</code> (inicializaci\u00f3n). Luego, se usa <code>a</code> en una declaraci\u00f3n <code>if</code> para verificar si <code>a</code> es mayor que <code>10</code>. Si <code>a</code> es mayor que <code>10</code>, se imprime \"a es mayor que 10\". Si <code>a</code> no es mayor que <code>10</code>, se imprime \"a no es mayor que 10\".</p> <p>Dado que el valor de <code>a</code> es <code>5</code>, que no es mayor que <code>10</code>, al ejecutar este c\u00f3digo se imprimir\u00e1 \"a no es mayor que 10\".</p> </li> <li> <p>Usarla en un bucle: Por ejemplo, en una estructura repetitiva <code>while</code>, como <code>while a &lt;= 10</code> donde <code>a</code> es la variable que estamos utilizando.</p> <p>Analicemos un ejemplo pr\u00e1ctico:</p> Python<pre><code># Inicializaci\u00f3n de la variable\na = 1\n\n# Uso de la variable en una estructura repetitiva\nwhile a &lt;= 10:\n    print(a)\n    a += 1\n</code></pre> <p>En este c\u00f3digo, inicializamos <code>a</code> con el valor <code>1</code>. Luego, entramos en un bucle <code>while</code> que continuar\u00e1 ejecut\u00e1ndose mientras <code>a</code> sea menor o igual a <code>10</code>. Dentro del bucle, imprimimos el valor actual de <code>a</code> y luego incrementamos <code>a</code> en <code>1</code>. Cuando <code>a</code> se convierte en <code>11</code>, la condici\u00f3n del bucle <code>while</code> ya no se cumple, por lo que el bucle termina.</p> </li> <li> <p>Pasarla como argumento a una funci\u00f3n: Por ejemplo, <code>print(a)</code> donde <code>a</code> es la variable que estamos utilizando.</p> <p>Analicemos un ejemplo pr\u00e1ctico:</p> Python<pre><code># Inicializaci\u00f3n de la variable\na = \"\u00a1Hola, mundo!\"\n\n# Uso de la variable en una funci\u00f3n print\nprint(a)\n</code></pre> <p>En este c\u00f3digo, se imprime el texto \"\u00a1Hola, mundo!\" en la consola. Esto es porque la funci\u00f3n <code>print</code> toma la variable <code>a</code> como argumento y luego imprime su valor.</p> </li> <li> <p>Asignarle un nuevo valor: Por ejemplo, teniendo <code>a = 10</code> en alg\u00fan momento de la ejecuci\u00f3n del programa se modifica el valor almacenado en <code>a</code> al valor <code>20</code> con la instrucci\u00f3n <code>a = 20</code> donde <code>a</code> es la variable que estamos utilizando. </p> <p>Definici\u00f3n</p> <p>Asignar un valor a una variable significa almacenar un valor en el espacio de memoria reservado para ella, reemplazando el valor anterior. </p> <p>Esta operaci\u00f3n se realiza empleando el operador de asignaci\u00f3n igual (=).</p> <p>Analicemos un ejemplo pr\u00e1ctico:</p> Python<pre><code># Primero, inicializamos una variable con el valor 10\na = 10\n\n# Imprimimos el valor almacenado en la variable\nprint(a)  # Output: 10\n\n# Modificamos el valor almacenado en la variable\na = 20\n\n# Imprimimos el nuevo valor almacenado en la variable\nprint(a)  # Output: 20\n</code></pre> <p>En este c\u00f3digo, la variable <code>a</code> es declarada e inicializada con el valor <code>10</code> en la misma instrucci\u00f3n. Python define, a partir del valor en cuesti\u00f3n, que la variable <code>a</code> es del tipo entero.</p> <p>Luego, se imprime el valor almacenado en <code>a</code>, es decir, <code>10</code>.</p> <p>A continuaci\u00f3n, se asigna el valor <code>20</code> a la variable <code>a</code> reemplazando el valor <code>10</code> que conten\u00eda previamente. En esta operaci\u00f3n, el valor previo, <code>10</code>, es eliminado para siempre, sin posibilidad de recuperarlo.  </p> <p>Por \u00faltimo, cuando se vuelve a imprimir el valor almacenado en <code>a</code>, ahora se imprime el valor <code>20</code>.</p> </li> </ul> <p></p> <p>\u00a1Aprende esto porque es muy importante!</p> <p>Al almacenar un valor en una variable, si esta conten\u00eda un valor previo almacenado, el mismo ser\u00e1 reemplazado y ya no habr\u00e1 manera de recuperarlo, perdi\u00e9ndolo para siempre.</p> <p>NO HAY MANERA QUE AMBOS VALORES COEXISTAN PORQUE NO PUEDEN SUPERPONERSE.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#modificacion-del-valor-almacenado-en-una-variable","title":"Modificaci\u00f3n del valor almacenado en una variable","text":"<p>Desde que se crea y hasta que se destruye, el valor almacenado en una variable puede cambiar durante la ejecuci\u00f3n del programa. </p> <p>Esto puede deberse a diversos motivos de la l\u00f3gica del programa, siempre con el objetivo de almacenar un nuevo valor porque el viejo valor ya no ser\u00e1 de utilidad.</p> <p>Y esta operaci\u00f3n se realiza, como hemos visto en el uso anterior, a partir de la asignaci\u00f3n de un nuevo valor. </p> <p>\u00a1Para recordar!</p> <p>Cada vez que se modifica el valor almacenado en una variable, en realidad se est\u00e1 reemplazando por un valor nuevo, eliminando para siempre el valor viejo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#intercambio-de-valores-almacenados-entre-dos-variables","title":"Intercambio de valores almacenados entre dos variables","text":"<p>Como dijimos, una variable es un espacio reservado de la memoria RAM que pueda almacenar un dato.</p> <p>Reforcemos:</p> <p>Una variable es un espacio reservado de la memoria RAM que pueda almacenar un dato \u00a1A LA VEZ!</p> <p>Por lo tanto, no es posible hacer un intercambio de valores entre dos variables de esta manera:</p> C\u00f3digo generalizado<pre><code>a = 5\nb = 10\n\na = b\n\nb = a\n\nprint(\"a vale\", a)\nprint(\"b vale\", b)\n</code></pre> <p>Porque si luego accedemos a los valores almacenado en <code>a</code> y en <code>b</code> ocurrir\u00e1 lo siguiente:</p> Terminal (Entrada/Salida)<pre><code>a vale 10\nb vale 10\n</code></pre> <p>\u00bfQu\u00e9 ha ocurrido aqu\u00ed?</p> <p>Resulta que si se ejecuta <code>a = b</code> esto significa que se almacena el valor de <code>b</code> en <code>a</code>. As\u00ed, el valor que se encontraba almacenado en <code>a</code> es reemplazado por el nuevo valor que viene de <code>b</code>. Y por supuesto, el valor antiguo que ten\u00eda <code>a</code> se pierde \u00a1para siempre!</p> <p>A continuaci\u00f3n, cuando se ejecuta <code>b = a</code>  esto significa que se almacena el valor de <code>a</code> en <code>b</code>. Pero <code>a</code> en este momento tiene almacenado el valor que hab\u00eda recibido de <code>b</code> en la l\u00ednea de ejecuci\u00f3n anterior. As\u00ed, en realidad <code>b</code> estar\u00eda recibiendo y almacenando su propio valor.</p> <p>\u00bfC\u00f3mo se resuelve este problema?</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#uso-de-variables-temporales","title":"Uso de variables temporales","text":"<p>Ahora, si empleamos una variable temporal para almacenar uno de los valores almacenados, podremos reemplazarlo luego por otro valor sin perderlo. Veamos el c\u00f3digo para entenderlo mejor.</p> C\u00f3digo generalizado<pre><code>a = 5\nb = 10\n\ntemp = a # Se almacena 5 en temp\n\na = b # Se almacena 10 en a\n\nb = temp # Se almacena 5 en b\n\nprint(\"a vale\", a)\nprint(\"b vale\", b)\n</code></pre> <p>Si ahora accedemos a los valores almacenado en <code>a</code> y en <code>b</code> ocurrir\u00e1 lo siguiente:</p> Terminal (Entrada/Salida)<pre><code>a vale 10\nb vale 5\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#destruccion-de-la-variable","title":"Destrucci\u00f3n de la variable","text":"<p>La vida de una variable termina cuando se sale del alcance en el que fue declarada, cuando el programa termina o cuando la variable se elimina de la memoria. </p> <p>Las primeras dos opciones son naturales de la ejecuci\u00f3n del programa, mientras que la tercera depender\u00e1 de la capacidad del lenguaje para poder eliminar una variable a partir de un comando u operaci\u00f3n.</p> <p>En Python, por ejemplo, las variables locales (declaradas dentro de una funci\u00f3n) se destruyen cuando la funci\u00f3n termina, mientras que las variables globales existen hasta que el programa termina. Si se quisiera eliminar una variable global antes de la finalizaci\u00f3n del programa, o incluso eliminar una variable local dentro de su \u00e1mbito de creaci\u00f3n, tendr\u00edas que utilizar un comando espec\u00edfico para ello:</p> <p>``` py title=\"Python\" numlines=\"1\"</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#inicializa-la-variable","title":"Inicializa la variable","text":"<p>a = 10 print(a)</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/utilizacion-de-variables-en-un-programa/#destruye-la-variable","title":"Destruye la variable","text":"<p>del a print(a) <pre><code>``` title=\"Terminal (Entrada/Salida)\"\n10\nTraceback (most recent call last):\n  File \"\u2026\", line 7, in &lt;module&gt;\n    print(a)\n          ^\nNameError: name 'a' is not defined    \n</code></pre></p> <p>Despu\u00e9s de ejecutar <code>del a</code>, la variable <code>a</code> ya no existe. Al intentar acceder a ella, Python lanzar\u00e1 un <code>NameError</code> indicando que <code>a</code> no est\u00e1 definida.</p> <p>Acabamos de estudiar una gran cantidad de temas relacionados con la utilizaci\u00f3n de variables en un programa. Todos son muy importantes y deber\u00e1s tenerlos muy incorporados para poder programar de manera eficiente.</p> <p>A continuaci\u00f3n profundizaremos en conceptos m\u00e1s avanzados como el ciclo de vida de las variables, que incluye entender cu\u00e1ndo y c\u00f3mo se asigna y libera la memoria para las variables, y c\u00f3mo el alcance de una variable afecta su disponibilidad en diferentes partes del c\u00f3digo.</p> <p>Referencias</p> <ol> <li> <p>Una unidad de ejecuci\u00f3n, en el contexto de la programaci\u00f3n, puede referirse a cualquier segmento de c\u00f3digo que se puede ejecutar como una entidad \u00fanica. Esto puede ser una instrucci\u00f3n individual, una sentencia, una funci\u00f3n o m\u00e9todo, o incluso un programa completo, dependiendo del contexto. Por ejemplo, <code>int a = 10</code> es una sentencia que declara la variable <code>a</code> como entero y la inicializa con el valor <code>10</code> en la misma unidad de ejecuci\u00f3n.\u00a0\u21a9</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/_ejercitacion-alcance-de-variables/","title":"ejercitacion alcance de variables","text":"<ol> <li> <p>Ejercicios de acceso a variables globales desde \u00e1mbitos locales:</p> <ol> <li> <p>Crear una funci\u00f3n que acceda a una variable global que inicialmente tiene almacenado el valor 10. Dentro de la funci\u00f3n imprimir el valor de la variable global.</p> Python<pre><code>var_global = 10\n\ndef acceso_global():\n    print(\"Variable global:\", var_global)\n\nacceso_global()\n</code></pre> Terminal (Entrada/Salida)<pre><code>Variable global: 10\n</code></pre> <p>En este ejercicio, la funci\u00f3n acceso_global() imprime el valor de la variable global var_global. No es necesario utilizar la palabra clave global dentro de la funci\u00f3n, ya que solo se accede a la variable global sin realizar modificaciones.</p> </li> <li> <p>Crear una funci\u00f3n que acceda a una variable global de valor 10. Dentro de la funci\u00f3n incrementar dicho valor en 5. imprimir el valor de la variable antes y despu\u00e9s de hacer la llamada a la funci\u00f3n.</p> Python<pre><code>var_global = 10\n\ndef modificar_global():\n    global var_global\n    var_global += 5\n\nprint(\"Variable global antes de la modificaci\u00f3n:\", var_global)\n\nmodificar_global()\n\nprint(\"Variable global despu\u00e9s de la modificaci\u00f3n:\", var_global)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Variable global antes de la modificaci\u00f3n: 10\nVariable global despu\u00e9s de la modificaci\u00f3n: 15\n</code></pre> <p>En este ejercicio, la funci\u00f3n modificar_global() modifica el valor de la variable global var_global al agregarle 5.  Se utiliza la palabra clave global dentro de la funci\u00f3n para indicar que se est\u00e1 accediendo a la variable global y no creando una variable local con el mismo nombre.</p> </li> <li> <p>Crear una variable global de valor 10. En una funci\u00f3n crear una variable local de igual nombre a la global pero de valor 15. Imprimir la variable antes, durante y despu\u00e9s de la llamada a la funci\u00f3n.</p> Python<pre><code>variable = 10\n\ndef imprimir_variable():\n    variable = 15\n    print(\u201dLa variable fuera de la funci\u00f3n vale:\u201d, variable)\n\nprint(\u201dLa variable fuera de la funci\u00f3n vale:\u201d, variable)\n\nimprimir_variable()\n\nprint(\u201dLa variable fuera de la funci\u00f3n vale:\u201d, variable)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La variable fuera de la funci\u00f3n vale: 10\nLa variable dentro de la funci\u00f3n vale: 15\nLa variable fuera de la funci\u00f3n vale: 10\n</code></pre> <p>En este ejercicio, la funci\u00f3n imprimir_variable() inicializa una variable local de valor 15 y luego imprime su contenido. N\u00f3tese que antes y despu\u00e9s de ello, por fuera de la funci\u00f3n, tambi\u00e9n se imprime el valor de la variable creada globalmente. Pero, </p> <p>Hay que preguntarse...</p> <p>\u00bfPor qu\u00e9 tienen diferentes valores?</p> <p>\u00bfPor qu\u00e9 no se modific\u00f3 el valor dentro de la funci\u00f3n?</p> <p>\u00bfEs la misma variable?</p> <p>\u00bfQu\u00e9 ocurre con la variable creada dentro de la funci\u00f3n?</p> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/_ejercitacion-introductoria-de-variables/","title":"Variables: ejercitaci\u00f3n general","text":"<p>Estos ejercicios deber\u00edan ayudarte a familiarizarte con la implementaci\u00f3n, acceso y manipulaci\u00f3n de variables en la programaci\u00f3n. \u00a1Buena suerte!</p> <ol> <li> <p>Ejercicio de instrucciones que asignan valores a variables:</p> <ol> <li> <p>\u00bfCu\u00e1l ser\u00e1 el valor que tomar\u00e1 la variable c tras la ejecuci\u00f3n de las siguientes instrucciones?</p> <pre><code>int a = 12\nint b = a\nint c = b\n</code></pre> </li> <li> <p>\u00bfCu\u00e1l es el valor de la variable aux al ejecutarse la instrucci\u00f3n 5?</p> <pre><code>int a = 10\nint b = 20\nint aux = a\na = b\nb = aux\n</code></pre> </li> <li> <p>\u00bfCu\u00e1l es el valor de n = n + 5 si n tiene el valor actual de 2 antes de la ejecuci\u00f3n de esta instrucci\u00f3n? </p> <pre><code>n = n + 5\n</code></pre> </li> </ol> </li> <li> <p>Ejercicio de declaraci\u00f3n, de inicializaci\u00f3n y de asignaci\u00f3n de variables:</p> <ol> <li>Declara dos variables enteras (int) num1 y num2. Luego as\u00edgnales los valores 8 y 5 respectivamente.</li> <li>Declara e inicializa dos variables enteras con valores diferentes.</li> <li>Declara una variable de punto flotante (float). Luego as\u00edgnale el valor 3,14.</li> <li>Declara una variable de tipo cadena (string). Luego as\u00edgnale tu nombre.</li> <li>Declara e inicializa una variable de tipo cadena (string) con el mensaje \"Hola Mundo!\u201d.</li> <li>Declara una variable l\u00f3gica o booleana (bool) e inicial\u00edzala con el valor verdadero (true).</li> <li>Declara una variable de tipo caracter (char). Luego, as\u00edgnale la letra \"S\".</li> <li>Declara una variable que almacene la altura (en metros) de una persona.</li> <li>Declara la variable esEstudiante. Luego, as\u00edgnale un valor que indique que s\u00ed es estudiante.</li> <li>Declara e inicializa una variable para el valor \"rojo\".</li> <li>Declara e inicializa una variable que almacene el valor 456 referido a una parte de mi direcci\u00f3n.</li> <li>Declara una variable almacene tus a\u00f1os. Luego, As\u00edgnaselos.</li> </ol> </li> <li> <p>Ejercicio de operaciones aritm\u00e9ticas con variables:</p> <ol> <li>Declara las variables num1 y num2. Luego as\u00edgnales los valores 20 y 5. Luego, usa operadores aritm\u00e9ticos para sumar, restar, multiplicar y dividir las dos variables imprimiendo, en cada operaci\u00f3n, los resultados en la consola.</li> <li>Asigna el valor 10 a la variable n1 y el valor 3 a la variable n2.</li> <li>Calcula la suma de n1 y n2 y as\u00edgnalo a la variable suma.</li> <li>Calcula la resta de n1 y n2 y as\u00edgnalo a la variable resta.</li> <li>Calcula el producto de n1 y n2 y as\u00edgnalo a la variable producto.</li> <li>Calcula la divisi\u00f3n de n1 entre n2 y as\u00edgnalo a la variable division.</li> <li>Imprime los valores de las variables suma, resta, producto y division.</li> </ol> </li> <li> <p>Ejercicio de concatenaci\u00f3n de variables:</p> <ol> <li>Crea una variable llamada nombre y as\u00edgnale tu nombre.</li> <li>Crea una variable llamada apellido y as\u00edgnale tu apellido.</li> <li>Crea una variable llamada nombre_completo y concatena las variables nombre y apellido.</li> <li>Imprime el valor de la variable nombre_completo.</li> </ol> </li> <li> <p>Ejercicio de conversi\u00f3n de tipos de dato:</p> <ol> <li>Crea una variable llamada numero y as\u00edgnale el valor 10.</li> <li>Crea una variable llamada texto y as\u00edgnale el valor \"20\".</li> <li>Convierte la variable texto a un tipo de dato entero y as\u00edgnalo a la variable numero2.</li> <li>Calcula la suma de las variables numero y numero2 y as\u00edgnalo a la variable suma.</li> <li>Imprime el valor de la variable suma.</li> </ol> </li> <li> <p>Ejercicios generales:</p> <ol> <li>Inicializa una variable entera. Luego, actual\u00edzala con otro valor 3 unidades mayor.</li> <li>Inicializa una variable con tu estatura. Luego, cambia su valor a la mitad.</li> <li>Declara una variable llamada saludo y as\u00edgnale un valor de cadena que represente un saludo. Luego, concatena la variable con otra que contenga tu nombre, para crear un saludo personalizado e impr\u00edmelo en la consola.</li> <li>Declara una variable booleana. Luego, as\u00edgnale un valor de verdad. Luego, cambia su valor a partir del valor asignado previamente.</li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-alcance-de-variables/","title":"Ejercicios sobre alcance de variables","text":"<p>Rev. 11/01/2024</p> <p>Aqu\u00ed tienes una serie de ejercicios que te ayudar\u00e1n a entender c\u00f3mo el alcance de las variables afecta su accesibilidad y modificaci\u00f3n en diferentes partes de tu c\u00f3digo.</p> <p>Recuerda que la sintaxis exacta para realizar estos ejercicios depender\u00e1 del lenguaje de programaci\u00f3n que est\u00e9s utilizando.</p> <p>O puedes resolverlos en lenguaje natural o pseudoc\u00f3digo si lo prefieres. Lo importante es que la soluci\u00f3n que plantees se pueda convertir en c\u00f3digo, ejecutar como programa en alg\u00fan lenguaje de programaci\u00f3n y que resuelva el problema.</p> <p>\u00a1Para tener en cuenta!</p> <p>En estos ejercicios emplearemos las comillas simples en nuestro Pseudoc\u00f3digo para identificar las variables. </p> <p>Cuando veas una palabra entre comillas simples, recuerda que no son cadenas de caracteres literales sino identificadores de variables.</p> <ol> <li> <p>Ejercicio con variables locales</p> <p>Dado el siguiente pseudoc\u00f3digo:</p> Pseudoc\u00f3digo<pre><code>Inicio\nDefinir funci\u00f3n miFuncion()\n    Declarar 'variableLocal' como cadena e inicializarla con el texto \"Hola, mundo!\"\nFinDefinir\n\nLlamar a miFuncion()\n\nImprimir 'variableLocal'\nFin\n</code></pre> <p>\u00bfQu\u00e9 sucede y por qu\u00e9?</p> Ver respuesta Pseudoc\u00f3digo<pre><code>Inicio\nDefinir funci\u00f3n miFuncion()\n    Declarar 'variableLocal' como cadena e inicializarla con el texto \"Hola, mundo!\"\nFinDefinir\n\nLlamar a miFuncion()\n\nImprimir 'variableLocal'\nFin\n</code></pre> <p>Este pseudoc\u00f3digo retornar\u00e1 un error en la l\u00ednea resaltada al intentar imprimir <code>variableLocal</code> fuera de <code>miFuncion</code>.</p> <p>Esto se debe a que <code>variableLocal</code> es una variable local, lo que significa que solo existe dentro de la funci\u00f3n <code>miFuncion</code>. Fuera de esta funci\u00f3n, <code>variableLocal</code> no est\u00e1 definida, por lo que intentar imprimir <code>variableLocal</code> resultar\u00e1 en un error que indica que la variable no est\u00e1 definida.</p> <p>Este concepto se conoce como \"alcance de las variables\". Las variables locales solo tienen alcance dentro de la funci\u00f3n en la que se definen. No se pueden acceder ni modificar fuera de esa funci\u00f3n.</p> </li> <li> <p>Ejercicio con variables globales</p> <p>Dado el siguiente pseudoc\u00f3digo:</p> Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar 'variableGlobal' como cadena e inicializarla con el texto \"Hola, mundo global!\"\n\nDefinir funci\u00f3n miFuncion()\n    Imprimir 'variableGlobal'\nFinDefinir\n\nLlamar a miFuncion()\nFin\n</code></pre> <p>\u00bfQu\u00e9 sucede y por qu\u00e9?</p> Ver respuesta Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar 'variableGlobal' como cadena e inicializarla con el texto \"Hola, mundo global!\"\n\nDefinir funci\u00f3n miFuncion()\n    Imprimir 'variableGlobal'\nFinDefinir\n\nLlamar a miFuncion()\nFin\n</code></pre> <p>Este pseudoc\u00f3digo imprime \"\u00a1Hola, mundo global!\".</p> <p>Esto se debe a que <code>variableGlobal</code> es una variable global, lo que significa que su alcance es todo el programa, y no solo la funci\u00f3n o el bloque principal en el que se declar\u00f3. Por lo tanto, es posible acceder a <code>variableGlobal</code> dentro de la funci\u00f3n <code>miFuncion</code> y cuando se pide imprimir <code>variableGlobal</code> dentro de <code>miFuncion</code>, se imprime su valor.</p> <p>Este concepto se conoce como \"alcance de las variables\". Las variables globales tienen alcance en todo el programa y se pueden acceder y modificar desde cualquier parte del c\u00f3digo, a diferencia de las variables locales que solo tienen alcance dentro de la funci\u00f3n o bloque en el que se definen.</p> </li> <li> <p>Ejercicio con modificaci\u00f3n de variables globales</p> <p>Dado el siguiente pseudoc\u00f3digo:</p> Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar 'miVariable' como cadena e inicializarla con \"valor inicial\"\n\nDefinir funci\u00f3n modificarVariable()\n    Asignar \"valor modificado\" a 'miVariable'\nFinDefinir\n\nLlamar a modificarVariable()\n\nImprimir 'miVariable'\nFin\n</code></pre> <p>\u00bfQu\u00e9 sucede y por qu\u00e9?</p> Ver respuesta Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar 'miVariable' como cadena e inicializarla con \"valor inicial\"\n\nDefinir funci\u00f3n modificarVariable()\n    Asignar \"valor modificado\" a 'miVariable'\nFinDefinir\n\nLlamar a modificarVariable()\n\nImprimir 'miVariable'\nFin\n</code></pre> <p>Este pseudoc\u00f3digo declara una variable global. Luego define una funci\u00f3n que modifica esa variable. Luego llama a la funci\u00f3n. Finalmente imprime el valor de la variable \"valor modificado\".</p> <p>Cuando se declara una variable fuera de cualquier funci\u00f3n, se convierte en una variable global. Esto significa que puede ser accedida y modificada desde cualquier parte del c\u00f3digo, incluyendo dentro de las funciones.</p> <p>En este caso, <code>miVariable</code> es una variable global. Cuando llamamos a la funci\u00f3n <code>modificarVariable</code>, esta cambia el valor de <code>miVariable</code>. Dado que <code>miVariable</code> es global, el cambio se refleja en todo el c\u00f3digo, no solo dentro de la funci\u00f3n. Por lo tanto, cuando imprimimos <code>miVariable</code> despu\u00e9s de llamar a <code>modificarVariable</code>, se imprime el nuevo valor asignado dentro de la funci\u00f3n, es decir \"valor modificado\".</p> </li> <li> <p>Ejercicio con variables locales con el mismo nombre que las variables globales</p> <p>Dado el siguiente pseudoc\u00f3digo:</p> Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar 'duplicado' como entero e inicializarla con el valor 10\n\nDefinir funci\u00f3n funcionDuplicado()\n    Declarar 'duplicado' como entero e inicializarla con el valor 20\n    Imprimir 'duplicado'\nFinDefinir\n\nImprimir 'duplicado'\nFin\n</code></pre> <p>\u00bfQu\u00e9 sucede y por qu\u00e9?</p> Ver respuesta Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar 'duplicado' como entero e inicializarla con el valor 10\n\nDefinir funci\u00f3n funcionDuplicado()\n    Declarar 'duplicado' como entero e inicializarla con el valor 20\n    Imprimir 'duplicado'\nFinDefinir\n\nImprimir 'duplicado'\nFin\n</code></pre> Terminal (Entrada/Salida)<pre><code>20\n10\n</code></pre> <p>Cuando se ejecuta este pseudoc\u00f3digo, se espera que la impresi\u00f3n dentro de la funci\u00f3n <code>funcionDuplicado</code> muestre el valor de la variable local <code>duplicado</code>, es decir 20, mientras que la impresi\u00f3n fuera de la funci\u00f3n <code>funcionDuplicado</code> muestre el valor de la variable global <code>duplicado</code>, es decir 10.  </p> <p>Esto se debe al alcance de las variables: la variable local <code>duplicado</code> solo existe dentro de la funci\u00f3n <code>funcionDuplicado</code>, mientras que la variable global <code>duplicado</code> existe en todo el programa.</p> <p>Si una variable local tiene el mismo nombre que una variable global, la variable local \"reemplaza\" u \"oculta\" a la variable global dentro de su \u00e1mbito de declaraci\u00f3n o de los \u00e1mbitos contenidos dentro de su \u00e1mbito de declaraci\u00f3n. Esto se conoce como \"sombreado\" o \"shadowing\". As\u00ed, por m\u00e1s que ambas variables se llamen igual, <code>duplicado</code>, son variables distintas y sus valores son independientes uno del otro.</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-declaracion-de-variables/","title":"Ejercicios sobre declaraci\u00f3n de variables","text":"<p>Rev. 11/01/2024</p> <p>Aqu\u00ed tienes una serie de ejercicios para entender las variables en un lenguaje de programaci\u00f3n generalizado.</p> <p>Recuerda que la sintaxis exacta para realizar estos ejercicios depender\u00e1 del lenguaje de programaci\u00f3n que est\u00e9s utilizando.</p> <p>O puedes resolverlos en lenguaje natural o pseudoc\u00f3digo si lo prefieres. Lo importante es que la soluci\u00f3n que plantees se pueda convertir en c\u00f3digo, ejecutar como programa en alg\u00fan lenguaje de programaci\u00f3n y que resuelva el problema.</p> <p>\u00a1Para tener en cuenta!</p> <p>En estos ejercicios emplearemos las comillas simples en nuestro Pseudoc\u00f3digo para identificar las variables. </p> <p>Cuando veas una palabra entre comillas simples, recuerda que no son cadenas de caracteres literales sino identificadores de variables.</p> <ol> <li> <p>Resuelve en pseudoc\u00f3digo:</p> <p>Crea una variable llamada nombre y, luego, almacena tu nombre en ella. Crea una variable llamada edad y, luego, almacena tu edad en ella. Crea una variable llamada ciudad y, luego, almacena el nombre de tu ciudad en ella. Crea una variable esEstudiante y, luego, almacena un valor booleano en ella.  </p> Ver soluci\u00f3n propuesta Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar la variable 'nombre'\nInicializar la variable 'nombre' con el valor \"Pablo\"\nDeclarar la variable 'edad'\nInicializar la variable 'edad' con el valor 10\nDeclarar la variable 'ciudad'\nInicializar la variable 'ciudad' con el valor \"CABA\"\nDeclarar la variable 'esEstudiante'\nInicializar la variable 'esEstudiante' con el valor Falso\nFin\n</code></pre> </li> <li> <p>Resuelve en pseudoc\u00f3digo el ejercicio anterior, pero creando cada variable y almacenando su valor correspondiente en la misma l\u00ednea de sentencia:</p> Ver soluci\u00f3n propuesta Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar la variable 'nombre' e inicializarla con el valor \"Pablo\"\nDeclarar la variable 'edad'e inicializarla con el valor 10\nDeclarar la variable 'ciudad'e inicializarla con el valor \"CABA\"\nDeclarar la variable 'esEstudiante'e inicializarla con el valor Falso\nFin\n</code></pre> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-modificacion-de-variables/","title":"Ejercicios sobre modificaci\u00f3n de variables","text":"<p>Rev. 11/01/2024</p> <p>Aqu\u00ed tienes una serie de ejercicios para entender las variables en un lenguaje de programaci\u00f3n generalizado.</p> <p>Recuerda que la sintaxis exacta para realizar estos ejercicios depender\u00e1 del lenguaje de programaci\u00f3n que est\u00e9s utilizando.</p> <p>O puedes resolverlos en lenguaje natural o pseudoc\u00f3digo si lo prefieres. Lo importante es que la soluci\u00f3n que plantees se pueda convertir en c\u00f3digo, ejecutar como programa en alg\u00fan lenguaje de programaci\u00f3n y que resuelva el problema.</p> <p>\u00a1Para tener en cuenta!</p> <p>En estos ejercicios emplearemos las comillas simples en nuestro Pseudoc\u00f3digo para identificar las variables. </p> <p>Cuando veas una palabra entre comillas simples, recuerda que no son cadenas de caracteres literales sino identificadores de variables.</p> <ol> <li> <p>Dado el siguiente pseudoc\u00f3digo:</p> Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar la variable 'nombre'\nInicializar la variable 'nombre' con el valor \"Pablo\"\nDeclarar la variable 'edad'\nInicializar la variable 'edad' con el valor 10\nDeclarar la variable 'ciudad'\nInicializar la variable 'ciudad' con el valor \"CABA\"\nDeclarar la variable 'esEstudiante'\nInicializar la variable 'esEstudiante' con el valor Falso\n\nDeclarar la variable 'saludo'\nInicializar la variable 'saludo' con el valor de la cadena concatenada (\"Hola, mi nombre es \" + 'nombre' + \" y vivo en \" + 'ciudad')\nFin\n</code></pre> <p>Compl\u00e9talo para resolver lo siguiente:</p> <p>Cambia el valor de la variable ciudad a otra ciudad. Imprime el valor de ciudad para verificar que ha cambiado. Cambia el valor de saludo para que incluya la nueva ciudad. Cambia el valor de esEstudiante al valor opuesto.  </p> Ver soluci\u00f3n propuesta Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar la variable 'nombre'\nInicializar la variable 'nombre' con el valor \"Pablo\"\nDeclarar la variable 'edad'\nInicializar la variable 'edad' con el valor 10\nDeclarar la variable 'ciudad'\nInicializar la variable 'ciudad' con el valor \"CABA\"\nDeclarar la variable 'esEstudiante'\nInicializar la variable 'esEstudiante' con el valor Falso\n\nDeclarar la variable 'saludo'\nInicializar la variable 'saludo' con el valor de la cadena concatenada (\"Hola, mi nombre es \" + 'nombre' + \" y vivo en \" + 'ciudad')\n\n// Cambia el valor de la variable ciudad a otra ciudad\nAsignar el valor \"Rosario\" a la variable 'ciudad'\n\n// Imprime el valor de ciudad para verificar que ha cambiado\nImprimir 'ciudad'\n\n// Cambia el valor de saludo para que incluya la nueva ciudad\nDeclarar la variable 'saludo'\nAsignar a la variable 'saludo' el valor de la cadena concatenada (\"Hola, mi nombre es \" + 'nombre' + \" y vivo en \" + 'ciudad')\nImprimir 'saludo'\n\n// Cambia el valor de esEstudiante al valor opuesto\nSi 'esEstudiante' es Falso entonces\n    Asignar el valor Verdadero a 'esEstudiante'\nSino\n    Asignar el valor Falso a 'esEstudiante'\nFinSi\n\nImprimir 'esEstudiante'\nFin\n</code></pre> <p>Este pseudoc\u00f3digo primero declara e inicializa varias variables. Luego cambia el valor de la variable <code>ciudad</code> a \"Rosario\". Luego, imprime el nuevo valor de <code>ciudad</code>. Luego, cambia el valor de <code>saludo</code> para incluir la nueva ciudad. Luego, imprime el valor de <code>saludo</code>. Luego, cambia el valor de <code>esEstudiante</code> al valor opuesto. Finalmente, imprime el valor de <code>esEstudiante</code> </p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-operaciones-con-variables/","title":"Ejercicios sobre operaciones con variables","text":"<p>Rev. 11/01/2024</p> <p>Aqu\u00ed tienes una serie de ejercicios para entender las variables en un lenguaje de programaci\u00f3n generalizado.</p> <p>Recuerda que la sintaxis exacta para realizar estos ejercicios depender\u00e1 del lenguaje de programaci\u00f3n que est\u00e9s utilizando.</p> <p>O puedes resolverlos en lenguaje natural o pseudoc\u00f3digo si lo prefieres. Lo importante es que la soluci\u00f3n que plantees se pueda convertir en c\u00f3digo, ejecutar como programa en alg\u00fan lenguaje de programaci\u00f3n y que resuelva el problema.</p> <p>\u00a1Para tener en cuenta!</p> <p>En estos ejercicios emplearemos las comillas simples en nuestro Pseudoc\u00f3digo para identificar las variables. </p> <p>Cuando veas una palabra entre comillas simples, recuerda que no son cadenas de caracteres literales sino identificadores de variables.</p> <ol> <li> <p>Resuelve en pseudoc\u00f3digo:</p> <p>Declara dos variables num\u00e9ricas, num1 y num2, y asigna un n\u00famero a cada una. Crea una nueva variable suma y asigna el resultado de sumar num1 y num2. Crea una nueva variable producto y asigna el resultado de multiplicar num1 y num2. Imprime el valor de suma y producto para verificar los resultados.  </p> Ver soluci\u00f3n propuesta Pseudoc\u00f3digo<pre><code>Inicio\n// Declara dos variables num\u00e9ricas, num1 y num2, y asigna un n\u00famero a cada una.\nDeclarar la variable 'num1'\nInicializar la variable 'num1' con el valor 5\nDeclarar la variable 'num2'\nInicializar la variable 'num2' con el valor 10\n\n// Crea una nueva variable suma y la inicializa con el resultado de sumar num1 y num2.\nDeclarar la variable 'suma'\nInicializar la variable 'suma' con el resultado de 'num1' + 'num2'\n\n// Crea una nueva variable producto y la inicializa con el resultado de multiplicar num1 y num2.\nDeclarar la variable 'producto'\nInicializar la variable 'producto' con el resultado de 'num1' * 'num2'\n\n// Imprime el valor de suma y producto para verificar los resultados.\nImprimir 'suma'\nImprimir 'producto'\nFin\n</code></pre> <p>Este pseudoc\u00f3digo primero declara dos variables, <code>num1</code> y <code>num2</code>, y las inicializa con los valores 5 y 10 respectivamente. Luego, se declara una nueva variable <code>suma</code> y se le asigna el resultado de sumar <code>num1</code> y <code>num2</code>. En este caso, el valor inicial de <code>suma</code> ser\u00e1 15. Luego, se declara una nueva variable <code>producto</code> y se le asigna el resultado de multiplicar <code>num1</code> y <code>num2</code>. En este caso, el valor inicial de <code>producto</code> ser\u00e1 50. Finalmente, se imprimen los valores de <code>suma</code> y <code>producto</code> para verificar los resultados.</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-tipos-de-datos-de-variables/","title":"Ejercicios sobre tipos de datos de variables","text":"<p>Rev. 11/01/2024</p> <p>Aqu\u00ed tienes una serie de ejercicios que te ayudar\u00e1n a entender c\u00f3mo el tipo de dato asociado a las variables afecta su comportamiento.</p> <p>Recuerda que la sintaxis exacta para realizar estos ejercicios depender\u00e1 del lenguaje de programaci\u00f3n que est\u00e9s utilizando.</p> <p>O puedes resolverlos en lenguaje natural o pseudoc\u00f3digo si lo prefieres. Lo importante es que la soluci\u00f3n que plantees se pueda convertir en c\u00f3digo, ejecutar como programa en alg\u00fan lenguaje de programaci\u00f3n y que resuelva el problema.</p> <p>\u00a1Para tener en cuenta!</p> <p>En estos ejercicios emplearemos las comillas simples en nuestro Pseudoc\u00f3digo para identificar las variables. </p> <p>Cuando veas una palabra entre comillas simples, recuerda que no son cadenas de caracteres literales sino identificadores de variables.</p> <ol> <li> <p>Crea variables de diferentes tipos de datos que permitan almacenar los siguientes datos:</p> <ul> <li>10</li> <li>3.14</li> <li>\"Hola Mundo!\"</li> <li>True</li> </ul> <p>Elige un nombre coherente para cada variable y almacena el valor correspondiente en cada una de ellas.</p> Ver soluci\u00f3n propuesta Pseudoc\u00f3digo<pre><code>Iniciar\nDeclarar la variable 'puntaje' como entero e inicializarla con el valor 10\nDeclarar la variable 'pi' como flotante e inicializarla con el valor 3.14\nDeclarar la variable 'saludo' como cadena e inicializarla con el valor \"Hola Mundo!\"\nDeclarar la variable 'estoyEstudiandoMucho' como booleana e inicializarla con el valor True\nFin\n</code></pre> </li> <li> <p>Dado el siguiente pseudoc\u00f3digo pero teniendo en cuenta las operaciones entre tipo de datos:</p> Pseudoc\u00f3digo<pre><code>Iniciar\nDeclarar la variable 'puntaje' como entero e inicializarla con el valor 10\nDeclarar la variable 'nombre' como cadena e inicializarla con el texto \"Pablo\"\nDeclarar la variable 'informacion' como cadena de caracteres\nInicializar 'informacion' con el texto resultante de concatenar ('nombre' + \" ha obtenido \" + 'puntaje' + \" puntos.\") para formar una frase completa.\nImprimir el texto almacenado en 'informacion'\nFin\n</code></pre> <p>\u00bfQu\u00e9 sucede y por qu\u00e9?</p> Ver respuesta Pseudoc\u00f3digo<pre><code>Iniciar\nDeclarar la variable 'puntaje' como entero e inicializarla con el valor 10\nDeclarar la variable 'nombre' como cadena e inicializarla con el texto \"Pablo\"\nDeclarar la variable 'informacion' como cadena de caracteres\nInicializar 'informacion' con el texto resultante de concatenar ('nombre' + \" ha obtenido \" + 'puntaje' + \" puntos.\") para formar una frase completa.\nImprimir el texto almacenado en 'informacion'\nFin\n</code></pre> <p>Hay un problema con este pseudoc\u00f3digo. En la mayor\u00eda de los lenguajes de programaci\u00f3n, no puedes concatenar directamente una cadena de texto y un n\u00famero. Necesitar\u00edas convertir primero el n\u00famero a una cadena de texto. Veamos c\u00f3mo:</p> Pseudoc\u00f3digo<pre><code>Iniciar\n    Declarar la variable 'puntaje' como entero e inicializarla con el valor 10\n    Declarar la variable 'nombre' como cadena e inicializarla con el valor \"Pablo\"\n    Declarar la variable 'informacion' como cadena\n    Convertir 'puntaje' a cadena\n    Inicializar 'informacion' con la cadena concatenada ('nombre' + \" ha obtenido \" + 'puntaje' + \" puntos.\")\n    Imprimir 'informacion'\nFin\n</code></pre> <p>Ahora si, cuando se ejecute este pseudoc\u00f3digo, se imprimir\u00e1 \"Pablo ha obtenido 10 puntos.\".  </p> <p>Pero hay que observar que al convertir la variable <code>puntaje</code> a cadena, el valor 10 deja de ser un n\u00famero para convertirse en una cadena de caracteres \"10\" compuesta por el caracter uno seguido del caracter cero. Y se lee \"uno cero\", no 10. </p> <p>Por lo tanto, esta es una soluci\u00f3n deficiente. Lo correcto ser\u00eda efectuar una \"conversi\u00f3n de tipo\", \"casteo\" o casting de la variable para que se comporte solamente durante la ejecuci\u00f3n de la instrucci\u00f3n como si fuera una variable de cadena, pero sin modificar su tipo de dato realmente:</p> Pseudoc\u00f3digo<pre><code>Iniciar\n    Declarar la variable 'puntaje' como entero e inicializarla con el valor 10\n    Declarar la variable 'nombre' como cadena e inicializarla con el valor \"Pablo\"\n    Declarar la variable 'informacion' como cadena\n    Convertir 'puntaje' a cadena\n    Inicializar 'informacion' con la cadena concatenada ('nombre' + \" ha obtenido \" + (\"casteo\" del valor de 'puntaje' como cadena) + \" puntos.\")\n    Imprimir 'informacion'\nFin\n</code></pre> <p>Cuando se ejecute este pseudoc\u00f3digo, tambi\u00e9n se imprimir\u00e1 \"Pablo ha obtenido 10 puntos.\". Pero la variable <code>puntaje</code> no sufrir\u00e1 ninguna alteraci\u00f3n en su tipo de dato ni valor almacenado, seguir\u00e1 conteniendo el valor 10. </p> </li> <li> <p>Escribe el pseudoc\u00f3digo que resuelva como pasar del dato de entrada a la informaci\u00f3n de salida efectuando las conversiones necesarias:</p> <p>variable \u279e salida en pantalla</p> <ul> <li>dato1 = \"10\" \u279e salida1 = 10</li> <li>dato2 = 5.45 \u279e salida2 = 5</li> <li>dato3 = 30 \u279e salida3 = \"3030\"</li> </ul> Ver soluci\u00f3n propuesta <p>La primera soluci\u00f3n posible:</p> Pseudoc\u00f3digo<pre><code>Iniciar\nDeclarar la variable 'dato1' como cadena e inicializarla con el valor \"10\"\nDeclarar la variable 'dato2' como flotante e inicializarla con el valor 5.45\nDeclarar la variable 'dato3' como entero e inicializarla con el valor 30\n\nDeclarar la variable 'salida1' como entero\nDeclarar la variable 'salida2' como entero\nDeclarar la variable 'salida3' como cadena\n\nConvertir 'dato1' a entero y almacenar el resultado en 'salida1'\nConvertir 'dato2' a entero y almacenar el resultado en 'salida2'\nConvertir 'dato3' a cadena, concatenar ('dato3' + 'dato3') y almacenar el resultado en 'salida3'\n\nImprimir 'salida1'  // Deber\u00eda imprimir: 10\nImprimir 'salida2'  // Deber\u00eda imprimir: 5\nImprimir 'salida3'  // Deber\u00eda imprimir: \"3030\"\nFin\n</code></pre> <p>La segunda soluci\u00f3n posible:</p> Pseudoc\u00f3digo<pre><code>Iniciar\nDeclarar la variable 'dato1' como cadena e inicializarla con el valor \"10\"\nDeclarar la variable 'dato2' como flotante e inicializarla con el valor 5.45\nDeclarar la variable 'dato3' como entero e inicializarla con el valor 30\n\nImprimir el \"casteo\" del valor de 'dato1' como entero  // Deber\u00eda imprimir: 10\nImprimir el \"casteo\" del valor de 'dato2' como entero  // Deber\u00eda imprimir: 5\nImprimir (el \"casteo\" del valor de 'dato3' como cadena + el \"casteo\" del valor de 'dato3' como cadena)  // Deber\u00eda imprimir: \"3030\"\nFin\n</code></pre> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-uso-de-variables/","title":"Ejercicios sobre uso de variables","text":"<p>Rev. 11/01/2024</p> <p>Aqu\u00ed tienes una serie de ejercicios para entender las variables en un lenguaje de programaci\u00f3n generalizado.</p> <p>Recuerda que la sintaxis exacta para realizar estos ejercicios depender\u00e1 del lenguaje de programaci\u00f3n que est\u00e9s utilizando.</p> <p>O puedes resolverlos en lenguaje natural o pseudoc\u00f3digo si lo prefieres. Lo importante es que la soluci\u00f3n que plantees se pueda convertir en c\u00f3digo, ejecutar como programa en alg\u00fan lenguaje de programaci\u00f3n y que resuelva el problema.</p> <p>\u00a1Para tener en cuenta!</p> <p>En estos ejercicios emplearemos las comillas simples en nuestro Pseudoc\u00f3digo para identificar las variables. </p> <p>Cuando veas una palabra entre comillas simples, recuerda que no son cadenas de caracteres literales sino identificadores de variables.</p> <ol> <li> <p>Dado el siguiente pseudoc\u00f3digo:</p> Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar la variable 'nombre'\nInicializar la variable 'nombre' con el valor \"Pablo\"\nDeclarar la variable 'edad'\nInicializar la variable 'edad' con el valor 10\nDeclarar la variable 'ciudad'\nInicializar la variable 'ciudad' con el valor \"CABA\"\nDeclarar la variable 'esEstudiante'\nInicializar la variable 'esEstudiante' con el valor Falso\nFin\n</code></pre> <p>Compl\u00e9talo para resolver lo siguiente:</p> <p>Imprime el valor de cada variable que declaraste en el primer ejercicio. Crea una nueva variable llamada saludo y asigna una cadena de caracteres que incluya las variables nombre y ciudad en una oraci\u00f3n coherente y se imprima. Crea una variable mensaje que combine todas las variables anteriores en una oraci\u00f3n coherente y se imprima.  </p> Ver soluci\u00f3n propuesta Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar la variable 'nombre'\nInicializar la variable 'nombre' con el valor \"Pablo\"\nDeclarar la variable 'edad'\nInicializar la variable 'edad' con el valor 10\nDeclarar la variable 'ciudad'\nInicializar la variable 'ciudad' con el valor \"CABA\"\nDeclarar la variable 'esEstudiante'\nInicializar la variable 'esEstudiante' con el valor Falso\n\nImprimir 'nombre'\nImprimir 'edad'\nImprimir 'ciudad'\nImprimir 'esEstudiante'\n\nDeclarar la variable 'saludo'\nInicializar la variable 'saludo' con el valor de la cadena concatenada (\"Hola, mi nombre es \" + 'nombre' + \" y vivo en \" + 'ciudad')\n\nDeclarar la variable 'mensaje'\nInicializar la variable 'mensaje' con el valor de la cadena concatenada ('saludo' + \". Tengo \" + 'edad' + \" a\u00f1os. \" + \"\u00bfSoy estudiante? \" + 'esEstudiante')\n\nImprimir 'saludo'\nImprimir 'mensaje'\nFin\n</code></pre> <p>Este pseudoc\u00f3digo primero declara e inicializa varias variables. Luego imprime el valor de cada una. Luego crea una nueva variable <code>saludo</code> que es una cadena de caracteres, que combina las variables <code>nombre</code> y <code>ciudad</code> en una oraci\u00f3n coherente y la imprime. Finalmente, crea una variable <code>mensaje</code> que combina todas las variables anteriores en una oraci\u00f3n coherente y la imprime.</p> </li> </ol>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/","title":"Implementaci\u00f3n subyacente","text":""},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#introduccion","title":"Introducci\u00f3n","text":"<p>La implementaci\u00f3n subyacente se refiere a la forma en que se lleva a cabo o se realiza una determinada acci\u00f3n o proceso en un programa.</p> <p>Es la parte interna o detr\u00e1s de escena que permite que una funcionalidad o caracter\u00edstica se ejecute correctamente.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#definicion","title":"Definici\u00f3n","text":"subyacente<pre><code>Que subyace.\n</code></pre> subayer<pre><code>Yacer o estar debajo de algo.\nDicho de una cosa: Estar oculta tras otra.\n</code></pre> <p>En el contexto del desarrollo de software, la implementaci\u00f3n subyacente se refiere al c\u00f3digo fuente y la l\u00f3gica que se utiliza para construir una funcionalidad espec\u00edfica. </p> <p>Puede variar en diferentes aspectos de la programaci\u00f3n como algoritmos generales o espec\u00edficos como los de aprendizaje autom\u00e1tico, estructuras de datos, bibliotecas, o cualquier otro componente necesario para lograr el resultado deseado.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#como-se-puede-aplicar-la-implementacion-subyacente-en-un-programa","title":"\u00bfC\u00f3mo se puede aplicar la implementaci\u00f3n subyacente en un programa?","text":"<p>\u00bfC\u00f3mo la implementaci\u00f3n subyacente puede variar en diferentes aspectos de la programaci\u00f3n, como algoritmos, estructuras de datos, comunicaci\u00f3n en red y algoritmos de aprendizaje autom\u00e1tico?</p> <ol> <li>Implementaci\u00f3n subyacente de un algoritmo de ordenamiento:<ul> <li>Ordenamiento de burbuja: usa comparaciones y swaps repetidos para ordenar una lista de elementos.</li> <li>Ordenamiento por inserci\u00f3n: recorre una lista de elementos y los inserta en la posici\u00f3n correcta dentro de una sub lista ordenada.</li> </ul> </li> <li>Implementaci\u00f3n subyacente de una estructura de datos:<ul> <li>Lista enlazada: usa nodos enlazados para almacenar elementos en secuencia, donde cada nodo contiene un valor y una referencia al siguiente nodo.</li> <li>\u00c1rbol binario: usa nodos con referencias a un m\u00e1ximo de dos hijos para almacenar elementos jer\u00e1rquicamente.</li> </ul> </li> <li>Implementaci\u00f3n subyacente de un algoritmo de aprendizaje autom\u00e1tico e inteligencia artificial:<ul> <li>Regresi\u00f3n lineal: usa una combinaci\u00f3n lineal de caracter\u00edsticas para predecir una variable continua.</li> <li>\u00c1rbol de decisi\u00f3n: divide repetidamente el conjunto de datos en funci\u00f3n de caracter\u00edsticas para realizar predicciones basadas en reglas de decisi\u00f3n.</li> <li>Redes neuronales: c\u00f3mo se definen, conectan y actualizan las neuronas para realizar tareas de aprendizaje autom\u00e1tico y reconocimiento de patrones.</li> </ul> </li> <li>Implementaci\u00f3n subyacente de una funci\u00f3n criptogr\u00e1fica:<ul> <li>C\u00e1lculos matem\u00e1ticos: se refiere a c\u00f3mo se realizan los c\u00e1lculos matem\u00e1ticos necesarios para la encriptaci\u00f3n</li> </ul> </li> </ol> <p>No te preocupes por toda esta terminolog\u00eda. Es solo para que veas que la implementaci\u00f3n subyacente existe en todo programa, de las maneras m\u00e1s diversas. Ya iremos aprendiendo muchas de ellas a lo largo de la materia.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#ejemplos-de-implementacion-subyacente-con-funciones","title":"Ejemplos de implementaci\u00f3n subyacente con funciones","text":"<p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente en Python utilizando una funci\u00f3n para calcular la suma de dos n\u00fameros:</p> Python<pre><code>def suma(num_a, num_b):\n    return num_a + num_b\n\n# Ejemplo de uso\na = 5\nb = 10\nprint(\"La suma de\", a, \"y\", b, \"es:\", suma(a, b))\n</code></pre> <p>En este ejemplo, la funci\u00f3n suma() es la implementaci\u00f3n subyacente. Utiliza el operador + para sumar los valores de num_a y num_b. Luego retorna el resultado.</p> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>La suma de 5 y 10 es: 15\n</code></pre> <p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente en Python utilizando una funci\u00f3n para calcular el promedio de una lista de n\u00fameros:</p> <p>Python<pre><code>def calcular_promedio(datos):\n    suma = 0\n    cantidad = len(datos)\n    for num in datos:\n        suma += num\n    promedio = suma / cantidad\n    return promedio\n\n# Ejemplo de uso\nnumeros = [5, 10, 15, 20]\npromedio = calcular_promedio(numeros)\nprint(\"El promedio es:\", promedio)\n</code></pre> En este ejemplo, la funci\u00f3n calcular_promedio() es la implementaci\u00f3n subyacente. Toma una lista de n\u00fameros como entrada y utiliza un bucle para iterar sobre cada n\u00famero de la lista. Luego, acumula la suma de todos los n\u00fameros y divide esta suma por la cantidad de n\u00fameros para obtener el promedio.</p> <p>La implementaci\u00f3n subyacente tambi\u00e9n incluye la declaraci\u00f3n de variables, como suma para almacenar la suma parcial de los n\u00fameros y cantidad para contar cu\u00e1ntos n\u00fameros hay en la lista. Finalmente, se retorna el promedio calculado.</p> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>El promedio es: 12.5\n</code></pre> <p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente en Python de una funci\u00f3n recursiva de c\u00e1lculo factorial:</p> Python<pre><code>def factorial(n):\n    if n &lt;= 1: \n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Ejemplo de uso\nn = 6\nprint(\"El factorial de\", n, \"es:\", factorial(n))\n</code></pre> <p>En este ejemplo, la funci\u00f3n factorial() es la implementaci\u00f3n subyacente. Utiliza recursi\u00f3n para calcular el factorial de un n\u00famero n. Se multiplica n por el factorial del n\u00famero anterior (n - 1) hasta llegar a 1. Luego retorna el resultado.</p> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>El factorial de 6 es: 720\n</code></pre> <p>Estos son solo ejemplos b\u00e1sicos, pero muestra c\u00f3mo la implementaci\u00f3n subyacente se refiere al c\u00f3digo real y a la l\u00f3gica que se utiliza para llevar a cabo una tarea espec\u00edfica.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#ejemplos-de-implementacion-subyacente-y-abstraccion-para-la-representacion-y-estructuras-de-datos","title":"Ejemplos de implementaci\u00f3n subyacente y abstracci\u00f3n para la representaci\u00f3n y estructuras de datos","text":"<p>A partir de la implementaci\u00f3n subyacente y aplicando el concepto de abstracci\u00f3n se puede trabajar con la representaci\u00f3n y estructuras de datos, de manera abstracta y eficiente, definiendo tipos de dato personalizados que encapsulen los datos y las operaciones relacionadas con ellos, sin pensar en c\u00f3mo debe ser la l\u00f3gica de trabajo.</p> <p>Aqu\u00ed tienes un ejemplo de una estructura de datos abstracta, en este caso una pila, junto con su implementaci\u00f3n subyacente en Python.</p> <p>La clase Pila define una estructura de datos abstracta que representa una pila. La implementaci\u00f3n subyacente utiliza una lista (self.items) para almacenar los elementos de la pila. La clase proporciona m\u00e9todos para realizar operaciones en la pila, como apilar(), desapilar(), esta_vacia() y tamano().</p> <p>La implementaci\u00f3n subyacente utiliza la lista para agregar elementos al final de la pila (apilar()), eliminar elementos del final de la pila (desapilar()), verificar si la pila est\u00e1 vac\u00eda (esta_vacia()), y obtener el tama\u00f1o actual de la pila (tamano()).</p> Python<pre><code>class Pila:\n    def __init__(self):\n        self.items = []\n\n    def esta_vacia(self):\n        return len(self.items) == 0\n\n    def apilar(self, elemento):\n        self.items.append(elemento)\n\n    def desapilar(self):\n        if self.esta_vacia():\n            return None\n        return self.items.pop()\n\n    def tamano(self):\n        return len(self.items)\n\npila = Pila() # Ejemplo de uso\npila.apilar(1)\npila.apilar(2)\nprint(\"Tama\u00f1o de la pila:\", pila.tamano())\nelemento = pila.desapilar()\nprint(\"Elemento desapilado:\", elemento)\nprint(\"\u00bfLa pila est\u00e1 vac\u00eda?\", pila.esta_vacia())\n</code></pre> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>Tama\u00f1o de la pila: 3\nElemento desapilado: 3\n\u00bfLa pila est\u00e1 vac\u00eda? False\n</code></pre> <p>La clase Pila proporciona una abstracci\u00f3n para trabajar con una pila, ocultando los detalles de implementaci\u00f3n subyacentes, como el uso de una lista para almacenar los elementos, permitiendo usar la pila de manera intuitiva y acceder a sus operaciones b\u00e1sicas sin preocuparse por la implementaci\u00f3n interna.</p> <p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente de un algoritmo de encriptaci\u00f3n en Python utilizando el cifrado de sustituci\u00f3n.</p> <p>La funci\u00f3n cifrado_sustitucion() toma un texto como entrada y utiliza un diccionario llamado clave que contiene pares de valores (caracter original, caracter encriptado). El algoritmo de encriptaci\u00f3n sustituye cada caracter del texto original por su correspondiente car\u00e1cter encriptado seg\u00fan la clave.</p> <p>La implementaci\u00f3n subyacente utiliza un bucle para iterar sobre cada caracter del texto. Si el caracter se encuentra en el diccionario clave, se agrega su valor encriptado al resultado. Si el caracter no est\u00e1 en el diccionario (como espacios, signos de puntuaci\u00f3n, etc.), se agrega directamente al resultado sin cambios.</p> Python<pre><code>def cifrado_sustitucion(texto):\n    clave = {\n        'a': 'x',\n        'b': 'y',\n        'c': 'z',\n        'd': 'a',\n        'e': 'b',\n        # Resto del alfabeto...\n    }\n\n    resultado = \"\"\n\n    for caracter in texto:\n        if caracter in clave:\n            resultado += clave[caracter]\n        else:\n            resultado += caracter\n\n    return resultado\n\n# Ejemplo de uso\ntexto_original = \"Hola, mundo!\"\ntexto_encriptado = cifrado_sustitucion(texto_original)\nprint(\"Texto encriptado:\", texto_encriptado)\n</code></pre> <p>En el ejemplo de uso, se encripta el texto original \"Hola, mundo!\" utilizando el cifrado de sustituci\u00f3n. El resultado encriptado se imprime en la consola:</p> <pre><code>Texto encriptado: Xyzb, pmtkp!\n</code></pre> <p>Es importante saber que este ejemplo de cifrado de sustituci\u00f3n tambi\u00e9n es muy simple y no se utiliza en aplicaciones reales de seguridad, por ser de muy baja confiabilidad y fortaleza contra ataques externos.</p>"},{"location":"unidades/implementacion-subyacente/resumen-sobre-implementacion-subyascente/","title":"Implementaci\u00f3n subyacente: resumen","text":""},{"location":"unidades/implementacion-subyacente/resumen-sobre-implementacion-subyascente/#resumen","title":"Resumen","text":"<p>En resumen, la implementaci\u00f3n subyacente se refiere a la parte pr\u00e1ctica y concreta que permite que algo funcione, en contraste con las descripciones te\u00f3ricas o conceptuales de una idea o proceso.</p> <p>En el contexto del desarrollo de software, la implementaci\u00f3n subyacente se refiere al c\u00f3digo fuente y la l\u00f3gica que se utiliza para construir una funcionalidad espec\u00edfica. </p> <p>Se refiere a la forma en que se lleva a cabo o se realiza una determinada acci\u00f3n o proceso en un programa.</p> <p>Es la parte interna o detr\u00e1s de escena que permite que una funcionalidad o caracter\u00edstica se ejecute correctamente.</p> <p>Puede variar en diferentes aspectos de la programaci\u00f3n como algoritmos generales o espec\u00edficos como los de aprendizaje autom\u00e1tico, estructuras de datos, bibliotecas, o cualquier otro componente necesario para lograr el resultado deseado.</p> <p>A partir de la implementaci\u00f3n subyacente y aplicando el concepto de abstracci\u00f3n se puede trabajar con la representaci\u00f3n y estructuras de datos, de manera abstracta y eficiente, definiendo tipos de dato personalizados que encapsulen los datos y las operaciones relacionadas con ellos, sin pensar en c\u00f3mo debe ser la l\u00f3gica de trabajo.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/","title":"Breve historia de la inform\u00e1tica","text":"<p>Rev. 16/03/2024</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#un-viaje-a-traves-del-tiempo-la-evolucion-de-la-informatica","title":"Un viaje a trav\u00e9s del Tiempo: La evoluci\u00f3n de la inform\u00e1tica","text":"<p>La historia de la inform\u00e1tica es un fascinante viaje a trav\u00e9s del tiempo, marcado por innovaciones, desaf\u00edos y la interacci\u00f3n entre la tecnolog\u00eda y la sociedad.</p> <p>Es un relato fascinante que nos lleva desde los rudimentarios m\u00e9todos de c\u00e1lculo de la antig\u00fcedad hasta las complejas redes de computadoras interconectadas que definen nuestra era digital. </p> <p>La inform\u00e1tica, como disciplina t\u00e9cnica, ha sido testigo de un crecimiento exponencial desde sus humildes comienzos hasta la compleja red de sistemas interconectados que definen nuestra era digital.</p> <p>Desde los primeros dispositivos mec\u00e1nicos hasta la era actual de la computaci\u00f3n en la nube, exploraremos los hitos m\u00e1s significativos, los personajes clave que han dado forma a esta disciplina  y las transformaciones que han dado forma al mundo de la inform\u00e1tica tal como lo conocemos hoy.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#precursores-antiguos-y-los-origenes","title":"Precursores antiguos y los Or\u00edgenes","text":"<p>La historia de la inform\u00e1tica comienza y se remonta a los albores de la civilizaci\u00f3n, donde los antiguos egipcios, griegos y babilonios utilizaban m\u00e9todos de c\u00e1lculo simples, que evolucionaron gradualmente a medida que la humanidad avanzaba en su comprensi\u00f3n de los principios matem\u00e1ticos y mec\u00e1nicos.</p> <p>Contaron con inventos que inclu\u00edan el astrolabio, un antiguo instrumento astron\u00f3mico creado por los griegos que permite determinar la posici\u00f3n y altura de las estrellas sobre el cielo; y el \u00e1baco, un instrumento de c\u00e1lculo de hace 5.000 a\u00f1os que les serv\u00eda para efectuar operaciones aritm\u00e9ticas sencillas\u200b, as\u00ed como otros dispositivos mec\u00e1nicos simples que les permit\u00edan realizar c\u00e1lculos matem\u00e1ticos. </p> <p>Sin embargo, el verdadero punto de inflexi\u00f3n lleg\u00f3 en el siglo XIX con el dise\u00f1o conceptual de Charles Babbage de la \"M\u00e1quina Anal\u00edtica\", que sent\u00f3 las bases te\u00f3ricas para las computadoras modernas al introducir conceptos como la programaci\u00f3n y el almacenamiento de datos.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#la-era-de-los-calculos-mecanicos","title":"La Era de los C\u00e1lculos Mec\u00e1nicos","text":"<p>En el siglo XVII, Blaise Pascal invent\u00f3 la Pascalina, una de las primeras calculadoras mec\u00e1nicas. </p> <p>Sin embargo, el verdadero punto de inflexi\u00f3n lleg\u00f3 en el siglo XIX con la visi\u00f3n pionera de Charles Babbage y su dise\u00f1o conceptual de la \"M\u00e1quina Anal\u00edtica\", una m\u00e1quina mec\u00e1nica capaz de realizar c\u00e1lculos complejos. Aunque nunca lleg\u00f3 a construirse durante su vida, fue considerada como el antepasado de las computadoras modernas y sent\u00f3 las bases te\u00f3ricas para el desarrollo de las computadoras modernas al introducir conceptos como la programaci\u00f3n y el almacenamiento de datos.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#tarjetas-perforadas-y-telares-automatizados","title":"Tarjetas Perforadas y Telares Automatizados","text":"<p>En 1802, el empresario textil Joseph Marie Jacquard revolucion\u00f3 la industria al inventar tarjetas perforadas que automatizaban los telares. </p> <p>Estas tarjetas controlaban los patrones de tejido, aumentando la producci\u00f3n y reduciendo los costos. Aunque no se considera una computadora en s\u00ed misma, este sistema de control basado en tarjetas sent\u00f3 las bases para futuros desarrollos.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#la-era-de-von-neumann-computadoras-programables","title":"La Era de von Neumann: Computadoras Programables","text":"<p>El siglo XX presenci\u00f3 avances revolucionarios sin precedentes en la electr\u00f3nica. La innovaci\u00f3n en el desarrollo de componentes como los tubos de vac\u00edo y los transistores, permitieron la creaci\u00f3n y el desarrollo de las primeras computadoras electr\u00f3nicas.</p> <p>En la d\u00e9cada de 1940, el matem\u00e1tico John von Neumann propuso un dise\u00f1o para una computadora programable. Su arquitectura, conocida como modelo de von Neumann, separaba la memoria de datos y las instrucciones, permitiendo la ejecuci\u00f3n de programas almacenados. </p> <p>La EDVAC (Electronic Discrete Variable Automatic Computer) fue uno de los primeros ejemplos basados en este modelo.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#el-auge-de-la-electronica","title":"El Auge de la Electr\u00f3nica","text":"<p>En 1946, la ENIAC (Electronic Numerical Integrator and Computer) fue un hito crucial en esta evoluci\u00f3n, marcando el comienzo de una nueva era, siendo la primera computadora completamente electr\u00f3nica y programable. </p> <p>Desde entonces, la inform\u00e1tica avanz\u00f3 a pasos agigantados, con la miniaturizaci\u00f3n de componentes electr\u00f3nicos, el desarrollo de los primeros lenguajes de programaci\u00f3n, que han permitido avances significativos en la capacidad de procesamiento y almacenamiento de datos, y el surgimiento de sistemas operativos que facilitaron la interacci\u00f3n con las m\u00e1quinas.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#el-nacimiento-de-los-sistemas-operativos","title":"El Nacimiento de los Sistemas Operativos","text":"<p>En la d\u00e9cada de 1950, surgieron los primeros sistemas operativos. El UNIVAC I, dise\u00f1ado por Grace Hopper, fue uno de los primeros en utilizar un sistema operativo completo. Los sistemas operativos permitieron una gesti\u00f3n m\u00e1s eficiente de los recursos de la computadora y facilitaron la interacci\u00f3n con los usuarios.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#la-revolucion-de-la-microcomputacion-y-la-era-de-los-ordenadores-personales","title":"La Revoluci\u00f3n de la Microcomputaci\u00f3n y la Era de los Ordenadores Personales","text":"<p>La d\u00e9cada de 1970 fue crucial para democratizar el acceso a la tecnolog\u00eda y sentar las bases de lo que ser\u00eda una revoluci\u00f3n inform\u00e1tica a\u00fan mayor marcando el comienzo de la inform\u00e1tica accesible para el p\u00fablico en general con el surgimiento de las microcomputadoras o computadoras personales, que comenzaron a popularizarse con la introducci\u00f3n de m\u00e1quinas como el Altair 8800 que, lanzado en 1975, fue uno de los primeros kits de construcci\u00f3n de computadoras, y la Apple I que llevaron la inform\u00e1tica desde los laboratorios de investigaci\u00f3n hasta los hogares y las peque\u00f1as empresas.</p> <p>Esto se debi\u00f3 en gran parte a la introducci\u00f3n de microprocesadores y sistemas operativos que facilitaron la interacci\u00f3n con las m\u00e1quinas y abarataron su costo. </p> <p>Sin embargo, fue la Apple II, lanzada en 1977, la que populariz\u00f3 las microcomputadoras y abri\u00f3 el camino para la revoluci\u00f3n digital.</p> <p>Esta democratizaci\u00f3n del acceso a la tecnolog\u00eda sent\u00f3 las bases para una revoluci\u00f3n inform\u00e1tica a\u00fan mayor en las d\u00e9cadas siguientes.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#la-era-de-internet-y-la-world-wide-web","title":"La Era de Internet y la World Wide Web","text":"<p>En la d\u00e9cada de 1980, Tim Berners-Lee invent\u00f3 la World Wide Web (WWW) y desarroll\u00f3 el primer sistema de enlaces, transformando radicalmente la forma en que compartimos y accedemos a la informaci\u00f3n. </p> <p>El ARPANET, precursor de Internet, conect\u00f3 inicialmente cuatro computadoras en laboratorios universitarios de investigaci\u00f3n. </p> <p>La infraestructura de Internet, basada en protocolos de comunicaci\u00f3n est\u00e1ndar como TCP/IP, permiti\u00f3 la interconexi\u00f3n global de sistemas inform\u00e1ticos, dando lugar a un ecosistema digital sin precedentes. </p> <p>Esto permiti\u00f3 la navegaci\u00f3n entre p\u00e1ginas web y sent\u00f3 las bases para el crecimiento exponencial de Internet generando una revoluci\u00f3n en la forma en que la informaci\u00f3n se comparte y se accede en l\u00ednea y conduciendo a la creaci\u00f3n de una amplia gama de servicios y aplicaciones en l\u00ednea como el correo electr\u00f3nico o el comercio electr\u00f3nico, que han redefinido la forma en que interactuamos con la tecnolog\u00eda.</p> <p>As\u00ed, la web se convirti\u00f3 en un espacio globalizado donde la comunicaci\u00f3n, el comercio y el entretenimiento se fusionaron en un ecosistema digital sin fronteras. Este per\u00edodo tambi\u00e9n vio el surgimiento de gigantes tecnol\u00f3gicos como Microsoft, Google y Amazon, que dominaron el panorama inform\u00e1tico con sus innovaciones y servicios en l\u00ednea.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#la-era-moderna-de-la-informatica-redes-sociales-nube-e-inteligencia-artificial","title":"La Era Moderna de la Inform\u00e1tica: Redes Sociales, Nube e Inteligencia Artificial","text":"<p>En el siglo XXI, la inform\u00e1tica ha seguido evolucionando a un ritmo acelerado. En la actualidad, vivimos en un mundo interconectado. Las redes sociales, han transformado la comunicaci\u00f3n y la interacci\u00f3n humana. </p> <p>En los \u00faltimos a\u00f1os, la inform\u00e1tica ha seguido avanzando y evolucionando a un ritmo vertiginoso, con desarrollos en \u00e1reas como la inteligencia artificial y el aprendizaje autom\u00e1tico que est\u00e1n revolucionando la forma en que procesamos datos y tomamos decisiones, la computaci\u00f3n en la nube inform\u00e1tica que permite el acceso a servicios y almacenamiento remoto y la computaci\u00f3n cu\u00e1ntica. </p> <p>Estos avances han abierto nuevas posibilidades en la automatizaci\u00f3n de procesos, el an\u00e1lisis de datos y la optimizaci\u00f3n de sistemas y est\u00e1n transformando radicalmente la forma en que interactuamos con la tecnolog\u00eda y c\u00f3mo se aplica en diferentes campos como la medicina, la industria y la ciencia, la rob\u00f3tica y la exploraci\u00f3n espacial, pero tambi\u00e9n plantean desaf\u00edos en t\u00e9rminos de privacidad, seguridad y \u00e9tica.</p> <p>En resumen, la historia de la inform\u00e1tica es un relato de innovaci\u00f3n constante, impulsada por la creatividad y el ingenio humano, la colaboraci\u00f3n y los avances en electr\u00f3nica y otros campos tecnol\u00f3gicos y la demanda de soluciones inform\u00e1ticas m\u00e1s potentes y eficientes para los desaf\u00edos del mundo moderno.  </p> <p>Desde sus humildes comienzos con los primeros m\u00e9todos de c\u00e1lculo de la antig\u00fcedad hasta la era digital actual, desde las tarjetas perforadas hasta los dispositivos m\u00f3viles y la inteligencia artificial, la inform\u00e1tica ha cambiado radicalmente la forma en que vivimos, trabajamos y nos relacionamos comunic\u00e1ndonos con el mundo que nos rodea. Cada paso ha contribuido a nuestra comprensi\u00f3n y dominio de la informaci\u00f3n. </p> <p>Si bien estos avances han transformado radicalmente nuestra sociedad y nuestra forma de vida, tambi\u00e9n plantean importantes cuestiones \u00e9ticas y pr\u00e1cticas que deben abordarse a medida que avanzamos hacia un futuro digital cada vez m\u00e1s complejo y interconectado.</p> <p>Y aunque el viaje a\u00fan contin\u00faa, es importante reflexionar sobre el pasado para comprender mejor hacia d\u00f3nde nos dirigimos.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#cronologia-de-evolucion-de-la-informatica","title":"Cronolog\u00eda de evoluci\u00f3n de la inform\u00e1tica","text":"<p>Prehistoria:</p> <ul> <li>Fecha desconocida: Los seres humanos desarrollan m\u00e9todos primitivos de c\u00e1lculo, como contar usando los dedos y marcar con palos o piedras.</li> </ul> <p>Antig\u00fcedad:</p> <ul> <li>3000 a.C.: Se desarrollan dispositivos tempranos de c\u00e1lculo, como el \u00e1baco, utilizado por varias civilizaciones antiguas para realizar operaciones matem\u00e1ticas simples.</li> <li>2000 a.C.: Los egipcios utilizan el sistema de numeraci\u00f3n decimal y desarrollan m\u00e9todos para calcular \u00e1reas y vol\u00famenes.</li> <li>Siglo V a.C.: Los griegos desarrollan el astrolabio y otros dispositivos mec\u00e1nicos para realizar c\u00e1lculos astron\u00f3micos y matem\u00e1ticos.</li> </ul> <p>Edad Media:</p> <ul> <li>Siglos VIII-X: Los matem\u00e1ticos \u00e1rabes introducen el \u00e1lgebra y los algoritmos de c\u00e1lculo, preservando y expandiendo el conocimiento matem\u00e1tico griego e hind\u00fa.</li> <li>Siglos XI-XIII: Los comerciantes europeos utilizan el \u00e1baco y otros dispositivos mec\u00e1nicos para realizar c\u00e1lculos comerciales.</li> </ul> <p>Renacimiento:</p> <ul> <li>Siglo XVI: John Napier inventa los huesos de Napier, un dispositivo mec\u00e1nico para realizar c\u00e1lculos de multiplicaci\u00f3n y divisi\u00f3n.</li> <li>Siglo XVII: Blaise Pascal inventa la Pascalina, una de las primeras calculadoras mec\u00e1nicas, capaz de sumar y restar n\u00fameros.</li> <li>1623: Wilhelm Schickard crea una calculadora mec\u00e1nica que puede realizar las cuatro operaciones b\u00e1sicas, pero nunca se construye por completo.</li> </ul> <p>Siglo XVIII:</p> <p>1786: J. H. M\u00fcller inventa una m\u00e1quina calculadora mec\u00e1nica capaz de multiplicar y dividir.</p> <p>Siglo XIX:</p> <ul> <li>1822: Charles Babbage concibe la idea de la \"M\u00e1quina Diferencial\", un dispositivo mec\u00e1nico para calcular tablas matem\u00e1ticas y funciones polin\u00f3micas, precursor de las computadoras modernas.</li> <li>1837: Babbage desarrolla los dise\u00f1os de la \"M\u00e1quina Anal\u00edtica\", un dispositivo programable que puede realizar cualquier c\u00e1lculo matem\u00e1tico, introduciendo conceptos como la programaci\u00f3n y el almacenamiento de datos. </li> <li>1843: Ada Lovelace escribe el primer algoritmo destinado a ser procesado por la M\u00e1quina Anal\u00edtica, convirti\u00e9ndose as\u00ed en la primera programadora de la historia.</li> </ul> <p>Siglo XX:</p> <ul> <li>1936: Alan Turing publica su trabajo sobre las \"M\u00e1quinas de Turing\", sentando las bases te\u00f3ricas para la computaci\u00f3n moderna y la inteligencia artificial.</li> <li>1941: Konrad Zuse construye la Z3, la primera computadora electromec\u00e1nica programable.</li> <li>1943: Se construye el Colossus, la primera computadora digital electr\u00f3nica, utilizada para descifrar c\u00f3digos alemanes durante la Segunda Guerra Mundial.</li> <li>1945: John von Neumann formula el concepto de la arquitectura de computadoras de von Neumann, que separa la memoria de la CPU, sentando las bases para los dise\u00f1os de computadoras modernas.</li> <li>1946: La ENIAC (Electronic Numerical Integrator and Computer) es completada, siendo la primera computadora electr\u00f3nica y programable.</li> <li>1950: Alan Turing propone el \"Test de Turing\" para evaluar la inteligencia artificial de una m\u00e1quina.</li> <li>1951: Se construye la UNIVAC I, la primera computadora comercialmente disponible.</li> <li>1954: IBM lanza el IBM 650, la primera computadora empresarial ampliamente utilizada.</li> <li>1958: Jack Kilby inventa el primer circuito integrado en Texas Instruments, allanando el camino para la miniaturizaci\u00f3n de los componentes electr\u00f3nicos.</li> <li>1964: Se lanza el IBM System/360, el primer sistema de computadoras compatible con software y hardware, estableciendo un est\u00e1ndar para la industria inform\u00e1tica.</li> <li>1969: ARPANET, la precursora de Internet, se establece por primera vez como una red experimental de comunicaciones financiada por el Departamento de Defensa de los Estados Unidos.</li> <li>1971: Intel lanza el primer microprocesador, el Intel 4004, marcando el inicio de la era de los microcomputadoras.</li> <li>1976: Steve Wozniak y Steve Jobs fundan Apple Computer y lanzan el Apple I, el primer ordenador personal preensamblado y uno de los primeros ordenadores personales dise\u00f1ados para uso dom\u00e9stico.</li> <li>1977: Se lanza la serie de microordenadores Commodore PET, TRS-80 y Apple II, marcando el inicio de la era de los ordenadores personales.</li> <li>1981: IBM lanza la IBM PC, popularizando el formato de PC compatible con IBM.</li> <li>1983: Se lanza ARPANET, precursora de Internet, utilizando el protocolo TCP/IP.</li> <li>1985: Microsoft lanza Windows 1.0, el primer sistema operativo gr\u00e1fico para PCs.</li> <li>1989: Tim Berners-Lee inventa la World Wide Web en el CERN, sentando las bases para la era de la informaci\u00f3n en l\u00ednea.</li> <li>1991: Linus Torvalds crea el kernel de Linux, un sistema operativo de c\u00f3digo abierto.</li> <li>1994: Se funda Amazon.com como una librer\u00eda en l\u00ednea, inaugurando la era del comercio electr\u00f3nico masivo.</li> <li>1998: Google es fundado por Larry Page y Sergey Brin, revolucionando la b\u00fasqueda en l\u00ednea.</li> </ul> <p>Siglo XXI:</p> <ul> <li>2001: Se lanza Wikipedia, una enciclopedia en l\u00ednea colaborativa y de acceso gratuito.</li> <li>2007: Apple lanza el iPhone, popularizando los smartphones y cambiando la forma en que interactuamos con la tecnolog\u00eda.</li> <li>2010: Se lanza el iPad, impulsando la popularidad de las tabletas y cambiando la computaci\u00f3n m\u00f3vil.</li> <li>2016: AlphaGo, un programa de inteligencia artificial desarrollado por DeepMind, derrota al campe\u00f3n mundial de Go, demostrando avances significativos en la IA.</li> <li>2017: Se lanza TensorFlow, un marco de c\u00f3digo abierto para aprendizaje autom\u00e1tico desarrollado por Google.</li> <li>2019: IBM presenta el primer ordenador cu\u00e1ntico comercial, marcando un hito en la computaci\u00f3n cu\u00e1ntica.</li> </ul> <p>D\u00e9cada Actual (2020-2024):</p> <ul> <li>2020: La pandemia de COVID-19 impulsa la adopci\u00f3n masiva de tecnolog\u00edas de trabajo remoto y educaci\u00f3n en l\u00ednea.</li> <li>2021: Se producen avances significativos en la investigaci\u00f3n de la computaci\u00f3n cu\u00e1ntica, acerc\u00e1ndonos a la era de la computaci\u00f3n cu\u00e1ntica pr\u00e1ctica.</li> <li>2022: Se intensifican los debates sobre la \u00e9tica y la regulaci\u00f3n de la inteligencia artificial y la privacidad de datos.</li> <li>2023: Grandes avances en la inteligencia artificial impulsan aplicaciones en campos como la medicina, la agricultura y la movilidad urbana.</li> <li>2024: Se prev\u00e9 un mayor desarrollo en tecnolog\u00edas emergentes como la realidad aumentada, la computaci\u00f3n cu\u00e1ntica y la computaci\u00f3n en la nube.</li> </ul> <p>Esta cronolog\u00eda ofrece una visi\u00f3n general de los hitos m\u00e1s significativos en la evoluci\u00f3n de la inform\u00e1tica, desde los primeros conceptos te\u00f3ricos hasta las tecnolog\u00edas emergentes que est\u00e1n dando forma al futuro digital, destacando los avances tecnol\u00f3gicos y las innovaciones que han dado forma a la era digital en la que vivimos.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#generaciones-de-computadoras","title":"Generaciones de computadoras","text":"<p>En la historia de la inform\u00e1tica, se suelen reconocer cinco generaciones de computadoras (desde la primera hasta la quinta), cada una marcada por avances significativos en la tecnolog\u00eda de hardware y software. Pero nosotros vamos a mencionar algunas m\u00e1s:</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#generacion-0-precursoras-antes-de-1940","title":"Generaci\u00f3n 0: Precursoras (Antes de 1940):","text":"<p>Antes de la aparici\u00f3n de las computadoras electr\u00f3nicas, exist\u00edan dispositivos mec\u00e1nicos y electromec\u00e1nicos que realizaban funciones de c\u00e1lculo, como el \u00e1baco y la pascalina.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#primera-generacion-1940-1956","title":"Primera Generaci\u00f3n (1940-1956):","text":"<p>Caracter\u00edsticas principales: Utilizaban v\u00e1lvulas de vac\u00edo para procesamiento y almacenamiento de datos.</p> <p>Ejemplos: ENIAC, UNIVAC I, IBM 701.</p> <p>Programaci\u00f3n: Codificadas en lenguaje m\u00e1quina y en lenguajes ensambladores primitivos.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#segunda-generacion-1956-1963","title":"Segunda Generaci\u00f3n (1956-1963):","text":"<p>Caracter\u00edsticas principales: Utilizaban transistores en lugar de v\u00e1lvulas de vac\u00edo, lo que resultaba en computadoras m\u00e1s peque\u00f1as, m\u00e1s r\u00e1pidas y m\u00e1s confiables.</p> <p>Ejemplos: IBM 1401, UNIVAC 1107, DEC PDP-1.</p> <p>Programaci\u00f3n: Se introducen lenguajes de programaci\u00f3n de alto nivel como FORTRAN y COBOL.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#tercera-generacion-1964-1971","title":"Tercera Generaci\u00f3n (1964-1971):","text":"<p>Caracter\u00edsticas principales: Se introducen los circuitos integrados (chips), lo que permite la miniaturizaci\u00f3n y la creaci\u00f3n de computadoras m\u00e1s potentes y econ\u00f3micas.</p> <p>Ejemplos: IBM System/360, DEC PDP-11, IBM System/370.</p> <p>Programaci\u00f3n: Se desarrollan nuevos lenguajes de programaci\u00f3n como PL/I, ALGOL y BASIC.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#cuarta-generacion-1971-1980","title":"Cuarta Generaci\u00f3n (1971-1980):","text":"<p>Caracter\u00edsticas principales: Se introducen los microprocesadores, lo que lleva a la creaci\u00f3n de los primeros ordenadores personales y la popularizaci\u00f3n de la inform\u00e1tica.</p> <p>Ejemplos: Altair 8800, Apple II, IBM System/38.</p> <p>Programaci\u00f3n: Se desarrollan lenguajes de programaci\u00f3n de alto nivel m\u00e1s avanzados como C y Pascal. Tambi\u00e9n se desarrollan sistemas operativos m\u00e1s complejos, como UNIX.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#quinta-generacion-1980-presente","title":"Quinta Generaci\u00f3n (1980-presente):","text":"<p>Caracter\u00edsticas principales: Se caracteriza por el desarrollo de la tecnolog\u00eda de circuitos integrados a gran escala (VLSI), la proliferaci\u00f3n de las redes de computadoras y la aparici\u00f3n de la inteligencia artificial y el procesamiento paralelo.</p> <p>Ejemplos: IBM PC, Macintosh, IBM AS/400.</p> <p>Programaci\u00f3n: Se introducen lenguajes de programaci\u00f3n orientados a objetos como C++, Java y Python. Se desarrollan tecnolog\u00edas de inteligencia artificial como redes neuronales y algoritmos de aprendizaje autom\u00e1tico. Estas generaciones representan hitos importantes en la evoluci\u00f3n de la inform\u00e1tica, desde las primitivas computadoras de la primera generaci\u00f3n hasta los sistemas avanzados de la quinta generaci\u00f3n que caracterizan nuestra era digital actual.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#sexta-generacion-anos-2000-en-adelante","title":"Sexta Generaci\u00f3n (A\u00f1os 2000 en adelante):","text":"<p>Caracter\u00edsticas principales: Se caracteriza por el avance de la tecnolog\u00eda en \u00e1reas como la computaci\u00f3n m\u00f3vil, la inteligencia artificial, el Internet de las cosas y la computaci\u00f3n en la nube. Se ha visto un \u00e9nfasis en la computaci\u00f3n distribuida y el procesamiento de grandes vol\u00famenes de datos en tiempo real.</p> <p>Ejemplos: El surgimiento de dispositivos port\u00e1tiles, as\u00ed como la integraci\u00f3n de la inteligencia artificial en la vida cotidiana, son indicativos de esta generaci\u00f3n.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#perspectivas-adicionales","title":"Perspectivas adicionales:","text":"<p>Algunos expertos tambi\u00e9n consideran una \"Generaci\u00f3n 7\" que se centra en avances futuros a\u00fan no realizados, como la computaci\u00f3n cu\u00e1ntica a gran escala, la fusi\u00f3n de la inteligencia artificial con interfaces cerebro-m\u00e1quina y la creaci\u00f3n de sistemas de computaci\u00f3n a\u00fan m\u00e1s avanzados y adaptables.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#paralelos-en-el-desarrollo-internacional","title":"Paralelos en el Desarrollo Internacional:","text":"<p>Aunque la cronolog\u00eda presentada se basa principalmente en los avances tecnol\u00f3gicos occidentales, es importante reconocer que otros pa\u00edses, como Jap\u00f3n, China y la Uni\u00f3n Sovi\u00e9tica, tambi\u00e9n han contribuido significativamente al desarrollo de la inform\u00e1tica con sus propios hitos y avances tecnol\u00f3gicos.</p>"},{"location":"unidades/introduccion-a-la-informatica/breve-historia-de-la-informatica/#impacto-social-y-cultural","title":"Impacto Social y Cultural:","text":"<p>Adem\u00e1s de los avances tecnol\u00f3gicos, cada generaci\u00f3n de computadoras ha tenido un impacto significativo en la sociedad y la cultura, desde la automatizaci\u00f3n de tareas industriales en la segunda generaci\u00f3n hasta la transformaci\u00f3n de la vida cotidiana y las interacciones sociales en la quinta y sexta generaci\u00f3n.</p> <p>En resumen, las generaciones en la historia de la inform\u00e1tica proporcionan un marco \u00fatil para comprender la evoluci\u00f3n de la tecnolog\u00eda inform\u00e1tica a lo largo del tiempo. Sin embargo, es importante reconocer que este esquema es una simplificaci\u00f3n y que la historia de la inform\u00e1tica es un campo complejo y multifac\u00e9tico que sigue evolucionando constantemente con nuevos avances y descubrimientos.</p>"},{"location":"unidades/introduccion-a-la-informatica/importancia-y-aplicaciones-de-la-informatica-en-la-sociedad-actual/","title":"Importancia y aplicaciones de la inform\u00e1tica en la sociedad actual","text":"<p>Rev. 16/03/2024</p> <p>La inform\u00e1tica desempe\u00f1a un papel fundamental en la sociedad actual debido a su amplia gama de aplicaciones y su impacto en pr\u00e1cticamente todos los aspectos de la vida diaria. Aqu\u00ed se destacan algunas de las razones clave por las que la inform\u00e1tica es importante y sus diversas aplicaciones en la sociedad:</p> <ul> <li> <p>Comunicaci\u00f3n: La inform\u00e1tica facilita la comunicaci\u00f3n instant\u00e1nea a trav\u00e9s de internet, correos electr\u00f3nicos, redes sociales, aplicaciones de mensajer\u00eda, entre otros. Esto ha revolucionado la forma en que nos conectamos y nos comunicamos a nivel personal y profesional, permitiendo la colaboraci\u00f3n global y la difusi\u00f3n r\u00e1pida de informaci\u00f3n.</p> </li> <li> <p>Educaci\u00f3n: La inform\u00e1tica ha transformado la educaci\u00f3n, proporcionando acceso a recursos educativos en l\u00ednea, plataformas de aprendizaje electr\u00f3nico, software educativo interactivo y herramientas de colaboraci\u00f3n en l\u00ednea. Esto permite un aprendizaje personalizado, accesible y globalizado.</p> </li> <li> <p>Negocios: La inform\u00e1tica es esencial para las operaciones comerciales modernas, desde la gesti\u00f3n de bases de datos y el procesamiento de transacciones hasta el an\u00e1lisis de datos y la automatizaci\u00f3n de procesos. Las empresas utilizan sistemas inform\u00e1ticos para mejorar la eficiencia, la productividad y la toma de decisiones.</p> </li> <li> <p>Entretenimiento: Los videojuegos, la m\u00fasica, las pel\u00edculas y otros medios de entretenimiento se han vuelto m\u00e1s accesibles y sofisticados gracias a la inform\u00e1tica. Las tecnolog\u00edas como la realidad virtual (VR) y la realidad aumentada (AR) ofrecen experiencias de entretenimiento inmersivas y emocionantes.</p> </li> <li> <p>Salud: La inform\u00e1tica juega un papel vital en la atenci\u00f3n m\u00e9dica, desde la gesti\u00f3n de registros m\u00e9dicos electr\u00f3nicos hasta la investigaci\u00f3n biom\u00e9dica y el desarrollo de tecnolog\u00edas m\u00e9dicas avanzadas. Los sistemas de informaci\u00f3n de salud ayudan a mejorar la precisi\u00f3n del diagn\u00f3stico, la eficiencia del tratamiento y la calidad de la atenci\u00f3n m\u00e9dica.</p> </li> <li> <p>Ciencia y tecnolog\u00eda: La inform\u00e1tica es fundamental para la investigaci\u00f3n cient\u00edfica y el desarrollo tecnol\u00f3gico en una amplia gama de disciplinas, incluyendo la f\u00edsica, la biolog\u00eda, la qu\u00edmica, la ingenier\u00eda y la astronom\u00eda. Se utiliza para modelar fen\u00f3menos complejos, simular experimentos, analizar grandes conjuntos de datos y dise\u00f1ar nuevos productos y tecnolog\u00edas.</p> </li> <li> <p>Gobierno: Los gobiernos utilizan la inform\u00e1tica para administrar servicios p\u00fablicos, recopilar datos demogr\u00e1ficos, mantener la seguridad nacional, facilitar la participaci\u00f3n ciudadana y mejorar la eficiencia administrativa. Los sistemas de gobierno electr\u00f3nico permiten a los ciudadanos acceder a servicios gubernamentales en l\u00ednea y participar en procesos democr\u00e1ticos.</p> </li> <li> <p>Medio ambiente: La inform\u00e1tica se utiliza en la monitorizaci\u00f3n y gesti\u00f3n ambiental, la predicci\u00f3n y mitigaci\u00f3n de desastres naturales, el an\u00e1lisis de datos clim\u00e1ticos, la conservaci\u00f3n de recursos naturales y la optimizaci\u00f3n de procesos industriales para reducir el impacto ambiental.</p> </li> </ul> <p>En resumen, la inform\u00e1tica es fundamental para la sociedad actual debido a su capacidad para facilitar la comunicaci\u00f3n, mejorar la educaci\u00f3n, impulsar los negocios, proporcionar entretenimiento, mejorar la atenci\u00f3n m\u00e9dica, impulsar la investigaci\u00f3n cient\u00edfica y tecnol\u00f3gica, facilitar la gobernanza, y abordar desaf\u00edos ambientales, entre otros aspectos. </p> <p>Su importancia seguir\u00e1 creciendo a medida que la tecnolog\u00eda contin\u00fae avanzando y se integre a\u00fan m\u00e1s en todos los aspectos de nuestras vidas.</p>"},{"location":"unidades/introduccion-a-la-informatica/introduccion-a-la-informatica/","title":"Introducci\u00f3n a la Inform\u00e1tica","text":"<p>Rev. 16/03/2024</p>"},{"location":"unidades/introduccion-a-la-informatica/introduccion-a-la-informatica/#fundamentacion","title":"Fundamentaci\u00f3n","text":"<p>En la era moderna, la inform\u00e1tica ha emergido como una disciplina fundamental que impregna todos los aspectos de la sociedad contempor\u00e1nea. </p> <p>Desde la comunicaci\u00f3n hasta la medicina, desde el sistema bancario y financiero hasta el entretenimiento, la inform\u00e1tica es omnipresente y desempe\u00f1a un papel crucial en la vida cotidiana. </p> <p>Entender los conceptos b\u00e1sicos de la inform\u00e1tica es esencial no solo para los profesionales de la tecnolog\u00eda, sino tambi\u00e9n para cualquier persona que desee comprender el mundo digital en el que vivimos. Esta unidad de Introducci\u00f3n a la Inform\u00e1tica se fundamenta en la premisa de que la alfabetizaci\u00f3n inform\u00e1tica es una habilidad esencial en el siglo XXI y busca proporcionar a los estudiantes una base s\u00f3lida en los principios y conceptos fundamentales de la inform\u00e1tica.</p>"},{"location":"unidades/introduccion-a-la-informatica/introduccion-a-la-informatica/#introduccion","title":"Introducci\u00f3n","text":"<p>Exploraremos el fascinante mundo de la inform\u00e1tica y sus aplicaciones en la sociedad moderna. Examinaremos conceptos fundamentales como la diferencia entre datos e informaci\u00f3n, la representaci\u00f3n y el almacenamiento de datos, el funcionamiento de los sistemas de informaci\u00f3n, la importancia de la seguridad inform\u00e1tica y las tendencias emergentes en el campo de la tecnolog\u00eda. Nuestro objetivo es proporcionarte una comprensi\u00f3n s\u00f3lida de los principios b\u00e1sicos de la inform\u00e1tica, as\u00ed como una apreciaci\u00f3n de c\u00f3mo estos principios se aplican en una variedad de contextos y disciplinas.</p>"},{"location":"unidades/introduccion-a-la-informatica/introduccion-a-la-informatica/#que-es-la-informatica","title":"\u00bfQu\u00e9 es la Inform\u00e1tica?","text":"<p>Definici\u00f3n</p> <p>La inform\u00e1tica es una disciplina que se ocupa del estudio, desarrollo y aplicaci\u00f3n de dispositivos y sistemas inform\u00e1ticos para el procesamiento autom\u00e1tico de informaci\u00f3n. </p> <p>Esto incluye el dise\u00f1o y la implementaci\u00f3n de hardware (como computadoras y dispositivos perif\u00e9ricos) y software (como programas y sistemas operativos), as\u00ed como la gesti\u00f3n y organizaci\u00f3n de datos. </p> <p>La inform\u00e1tica abarca una amplia gama de \u00e1reas, como la programaci\u00f3n, la ingenier\u00eda de software, la inteligencia artificial, las redes de computadoras, la seguridad inform\u00e1tica y la computaci\u00f3n en la nube, entre otras.</p>"},{"location":"unidades/introduccion-a-la-informatica/introduccion-a-la-informatica/#aplicaciones-de-la-informatica","title":"Aplicaciones de la inform\u00e1tica","text":"<p>La inform\u00e1tica tiene una amplia gama de aplicaciones en diferentes \u00e1reas de la vida cotidiana y en diversos sectores profesionales. Aqu\u00ed tienes algunos ejemplos:</p> <ul> <li> <p>Comunicaciones: La inform\u00e1tica se utiliza en la creaci\u00f3n y gesti\u00f3n de sistemas de comunicaci\u00f3n, como correos electr\u00f3nicos, redes sociales, aplicaciones de mensajer\u00eda instant\u00e1nea y videoconferencias.</p> </li> <li> <p>Educaci\u00f3n: En la educaci\u00f3n, la inform\u00e1tica se utiliza para la ense\u00f1anza y el aprendizaje a trav\u00e9s de programas educativos, plataformas de aprendizaje en l\u00ednea, herramientas interactivas, simulaciones y software educativo.</p> </li> <li> <p>Salud: En el campo de la salud, la inform\u00e1tica se aplica en sistemas de gesti\u00f3n de registros m\u00e9dicos electr\u00f3nicos, diagn\u00f3stico por im\u00e1genes, sistemas de informaci\u00f3n hospitalaria, telemedicina y an\u00e1lisis de datos para la investigaci\u00f3n m\u00e9dica.</p> </li> <li> <p>Negocios y Finanzas: En el \u00e1mbito empresarial, la inform\u00e1tica se utiliza en la gesti\u00f3n de recursos humanos, contabilidad, gesti\u00f3n de inventario, an\u00e1lisis de datos financieros, sistemas de pago electr\u00f3nicos y comercio electr\u00f3nico.</p> </li> <li> <p>Entretenimiento: La inform\u00e1tica juega un papel fundamental en la industria del entretenimiento, incluyendo videojuegos, pel\u00edculas digitales, efectos especiales, animaci\u00f3n por computadora, m\u00fasica digital y realidad virtual.</p> </li> <li> <p>Dise\u00f1o y Arquitectura: En el dise\u00f1o y la arquitectura, la inform\u00e1tica se utiliza en la creaci\u00f3n de modelos 3D, renderizado de im\u00e1genes, dise\u00f1o asistido por computadora (CAD), dise\u00f1o gr\u00e1fico y dise\u00f1o de productos.</p> </li> <li> <p>Transporte: La inform\u00e1tica se utiliza en sistemas de navegaci\u00f3n GPS, gesti\u00f3n de tr\u00e1fico, sistemas de reserva de vuelos y transporte p\u00fablico, seguimiento de env\u00edos y log\u00edstica.</p> </li> <li> <p>Ciencia y Tecnolog\u00eda: En la investigaci\u00f3n cient\u00edfica y la tecnolog\u00eda, la inform\u00e1tica se utiliza en la simulaci\u00f3n de fen\u00f3menos naturales, modelado molecular, an\u00e1lisis de datos cient\u00edficos, astronom\u00eda computacional, rob\u00f3tica y desarrollo de nuevas tecnolog\u00edas.</p> </li> </ul> <p>Estos son solo algunos ejemplos de c\u00f3mo la inform\u00e1tica se aplica en diferentes \u00e1mbitos de la vida y el trabajo. Su versatilidad y alcance contin\u00faan expandi\u00e9ndose con los avances tecnol\u00f3gicos.</p>"},{"location":"unidades/introduccion-a-la-programacion/_el-mejor-camino-para-aprender-a-programar/","title":"El mejor camino para aprender a programar","text":""},{"location":"unidades/introduccion-a-la-programacion/_el-mejor-camino-para-aprender-a-programar/#cual-es-el-mejor-camino-para-aprender-a-programar","title":"\u00bfCu\u00e1l es el mejor camino para aprender a programar?","text":"<p>Aprender a programar puede ser una tarea desafiante, pero hay varios caminos que puedes tomar para que el proceso sea m\u00e1s fluido. Aqu\u00ed hay algunos pasos que se deben seguir para aprender a programar:</p> <ol> <li> <p>Elige un lenguaje de programaci\u00f3n: comienza seleccionando un lenguaje de programaci\u00f3n para aprender. Algunos lenguajes de programaci\u00f3n populares incluyen Java, Python, JavaScript, Ruby, C++ y C#. Cada idioma tiene sus propias fortalezas y debilidades, as\u00ed que elige el idioma que mejor se adapte a tus intereses y objetivos.</p> </li> <li> <p>Configura tu entorno de desarrollo: una vez que hayas elegido un lenguaje, configura tu entorno de desarrollo. Esto implica instalar el compilador o int\u00e9rprete correspondiente y un editor de texto o un entorno de desarrollo integrado (IDE) para escribir tu c\u00f3digo. Muchos lenguajes tienen herramientas y entornos espec\u00edficos para facilitar el desarrollo.</p> </li> <li> <p>Aprende la sintaxis de los conceptos b\u00e1sicos: familiar\u00edzate con la sintaxis b\u00e1sica del lenguaje de programaci\u00f3n que has elegido. Esto incluye aprender c\u00f3mo se definen las variables, las estructuras de control de flujo (como bucles y condicionales), c\u00f3mo se definen las funciones y c\u00f3mo se realiza la entrada y salida de datos. Puedes encontrar una variedad de recursos en l\u00ednea que pueden ayudarte a aprender.</p> </li> <li> <p>Practica la codificaci\u00f3n con ejemplos simples: la mejor manera de aprender a programar es practicando la codificaci\u00f3n. Comienza a escribir programas simples para poner en pr\u00e1ctica lo que has aprendido, probar tu conocimiento y desarrollar tus habilidades. Esto te ayudar\u00e1 a comprender mejor los conceptos y la sintaxis del lenguaje. Puedes comenzar con ejercicios b\u00e1sicos como imprimir \"Hola, mundo\", realizar operaciones matem\u00e1ticas simples o trabajar con estructuras de datos simples como listas o matrices. </p> </li> <li> <p>Aprende sobre estructuras de datos y algoritmos: para desarrollar habilidades s\u00f3lidas de programaci\u00f3n, es importante comprender las estructuras de datos y los algoritmos comunes. Estos son fundamentales para la resoluci\u00f3n eficiente de problemas y el desarrollo de aplicaciones robustas. Aprende sobre conceptos como arrays, listas enlazadas, pilas, colas, \u00e1rboles, algoritmos de b\u00fasqueda y ordenamiento, entre otros.</p> </li> <li> <p>Explora bibliotecas y frameworks: muchos lenguajes de programaci\u00f3n tienen bibliotecas y frameworks disponibles que proporcionan funcionalidades predefinidas para tareas espec\u00edficas. Investiga y familiar\u00edzate con las bibliotecas populares en tu lenguaje de elecci\u00f3n. Estas bibliotecas pueden facilitar tareas como el manejo de bases de datos, la creaci\u00f3n de interfaces gr\u00e1ficas de usuario, el procesamiento de im\u00e1genes, entre otras.</p> </li> <li> <p>\u00danete a una comunidad: unirse a una comunidad en l\u00ednea de programadores puede ser una excelente manera de aprender de otros y obtener comentarios sobre tu c\u00f3digo. Puedes encontrar comunidades de programaci\u00f3n en sitios como Reddit, GitHub y Stack Overflow.</p> </li> <li> <p>Participa en proyectos o crea los tuyos propios: una excelente manera de mejorar tus habilidades es participar en proyectos de diversa \u00edndole. O crea los tuyos prpios. Esto te brindar\u00e1 la oportunidad de trabajar en proyectos pr\u00e1cticos, colaborar con otros programadores y aprender de su experiencia. Es una gran manera de aplicar lo que has aprendido y mejorar tus habilidades. Comienza con proyectos peque\u00f1os y avanza hacia proyectos m\u00e1s complejos.</p> </li> <li> <p>Contin\u00faa aprendiendo: la programaci\u00f3n es un campo en constante evoluci\u00f3n, por lo que es importante seguir aprendiendo y mantenerse actualizado con las \u00faltimas tendencias y tecnolog\u00edas. Lee libros, asiste a conferencias y toma cursos para continuar desarrollando tus habilidades. </p> </li> </ol> <p>\u00a1Para recordar!</p> <p>Aprender a programar es un proceso de aprendizaje continuo que requiere tiempo y pr\u00e1ctica. </p> <p>Amplica adquirir una serie de conocimientos progresivos. </p> <p>A medida que adquieras m\u00e1s experiencia, podr\u00e1s enfrentar desaf\u00edos m\u00e1s complejos y ampliar tus conocimientos en \u00e1reas espec\u00edficas de inter\u00e9s.</p> <p>ANo tengas miedo de experimentar y aprender! \u00a1Y no te desanimes si encuentras desaf\u00edos complicados y obst\u00e1culos en el camino!</p> <p>Con persistencia y dedicaci\u00f3n, puedes convertirte en un programador exitoso.</p>"},{"location":"unidades/introduccion-a-la-programacion/_el-mejor-camino-para-aprender-a-programar/#camino-de-aprendizaje-propuesto","title":"Camino de aprendizaje propuesto","text":"<p>Aqu\u00ed tienes un temario exhaustivo para un curso de programaci\u00f3n. Este temario cubre los conceptos fundamentales y las habilidades necesarias para convertirse en un programador competente. </p> <p>Puedes adaptarlo seg\u00fan tus necesidades y nivel de experiencia.</p> <ol> <li> <p>Introducci\u00f3n a la programaci\u00f3n</p> <ul> <li>\u00bfQu\u00e9 es la programaci\u00f3n?</li> <li>Historia de la programaci\u00f3n</li> <li>Lenguajes de programaci\u00f3n</li> </ul> </li> <li> <p>Algoritmos</p> <ul> <li>Conceptos b\u00e1sicos de algoritmos</li> <li>Algoritmos de b\u00fasqueda y ordenamiento</li> </ul> </li> <li> <p>Variables y tipos de dato</p> <ul> <li>Variables</li> <li>tipos de dato</li> <li>Operadores</li> </ul> </li> <li> <p>Estructuras de control de flujo</p> <ul> <li>If/else</li> <li>Bucles (for, while)</li> <li>Switch/case</li> </ul> </li> <li> <p>Funciones</p> <ul> <li>Declaraci\u00f3n de funciones</li> <li>Par\u00e1metros</li> <li>Retorno de valores</li> <li>Recursividad</li> </ul> </li> <li> <p>Estructuras de datos</p> <ul> <li>Tipos de estructuras de datos (listas, colas, pilas, \u00e1rboles)</li> <li>Operaciones con estructuras de datos</li> </ul> </li> <li> <p>Arrays</p> <ul> <li>Definici\u00f3n de arrays</li> <li>Operaciones con arrays (inserci\u00f3n, eliminaci\u00f3n, b\u00fasqueda, ordenamiento)</li> </ul> </li> <li> <p>Programaci\u00f3n funcional</p> <ul> <li>Funciones de orden superior</li> <li>Cierres</li> <li>Inmutabilidad</li> </ul> </li> <li> <p>Objetos y clases</p> <ul> <li>Definici\u00f3n de objetos y clases</li> <li>Propiedades y m\u00e9todos</li> <li>Herencia y polimorfismo</li> </ul> </li> <li> <p>Excepciones</p> <ul> <li>Manejo de excepciones</li> <li>Creaci\u00f3n de excepciones personalizadas</li> </ul> </li> <li> <p>Programaci\u00f3n orientada a objetos</p> <ul> <li>Encapsulamiento</li> <li>Abstracci\u00f3n</li> <li>Herencia</li> <li>Polimorfismo</li> </ul> </li> <li> <p>Programaci\u00f3n de bases de datos</p> <ul> <li>Conceptos b\u00e1sicos de bases de datos</li> <li>Lenguajes de consulta (SQL)</li> </ul> </li> <li> <p>Programaci\u00f3n de redes</p> <ul> <li>Conceptos b\u00e1sicos de redes</li> <li>Protocolos de red</li> <li>Comunicaci\u00f3n cliente-servidor</li> </ul> </li> <li> <p>Desarrollo de software</p> <ul> <li>Ciclo de vida del software</li> <li>Pruebas de software</li> <li>Control de versiones</li> </ul> </li> <li> <p>Introducci\u00f3n a la programaci\u00f3n web</p> <ul> <li>HTML</li> <li>CSS</li> <li>JavaScript</li> <li>Servidores web</li> </ul> </li> <li> <p>Desarrollo m\u00f3vil</p> <ul> <li>Plataformas m\u00f3viles</li> <li>Desarrollo nativo vs.  desarrollo h\u00edbrido</li> <li>Frameworks de desarrollo m\u00f3vil</li> </ul> </li> </ol> <p>Este es uno de los caminos de aprendizaje sugeridos, que cubre los conceptos fundamentales m\u00e1s importantes de la l\u00f3gica de programaci\u00f3n, proporcion\u00e1ndote una base s\u00f3lida para desarrollar habilidades en la creaci\u00f3n de algoritmos y resoluci\u00f3n de problemas. </p> <p>A medida que contin\u00faes aprendiendo y profundicemos en cada tema, explorando ejemplos pr\u00e1cticos para afianzar tus conocimientos, te dar\u00e1s cuenta de que hay muchos otros temas relacionados con la programaci\u00f3n que tambi\u00e9n son importantes. Pero con estos temas, tendr\u00e1s una preparaci\u00f3n excelente para seguir avanzando en el mundo de la programaci\u00f3n.</p> <p>Info</p> <p>recuerda que este temario es bastante extenso y puedes ajustarlo seg\u00fan la duraci\u00f3n y el enfoque del curso. </p> <p>Tambi\u00e9n puedes agregar ejercicios pr\u00e1cticos y proyectos para reforzar los conceptos te\u00f3ricos. </p> <p>\u00a1Buena suerte en tu curso de programaci\u00f3n!</p>"},{"location":"unidades/introduccion-a-la-programacion/_resumen-sobre-introduccion-a-la-programacion/","title":"Introducci\u00f3n a la programaci\u00f3n: resumen","text":""},{"location":"unidades/introduccion-a-la-programacion/_resumen-sobre-introduccion-a-la-programacion/#que-es-la-programacion","title":"\u00bfQ\u00fae es la programaci\u00f3n?","text":"<p>A trav\u00e9s del estudio de la programaci\u00f3n, se adquieren conocimientos y habilidades que permiten a las personas crear software, aplicaciones y soluciones tecnol\u00f3gicas que pueden impactar en diferentes \u00e1reas de la sociedad moderna.</p> <p>La programaci\u00f3n es accesible: aunque puede parecer intimidante al principio, la programaci\u00f3n es una habilidad que puede ser aprendida por cualquier persona. Existen numerosos recursos, cursos en l\u00ednea y herramientas que facilitan el proceso de aprendizaje.</p> <p>Pensamiento l\u00f3gico y resoluci\u00f3n de problemas: la programaci\u00f3n fomenta el desarrollo del pensamiento l\u00f3gico y la capacidad de resolver problemas de manera estructurada. Estas habilidades son \u00fatiles no solo en el campo de la programaci\u00f3n, sino tambi\u00e9n en otras \u00e1reas de la vida.</p> <p>Creatividad y capacidad de innovaci\u00f3n: la programaci\u00f3n permite materializar ideas y convertirlas en soluciones concretas. A medida que se adquieren m\u00e1s conocimientos y experiencia en programaci\u00f3n, se desarrolla la capacidad de crear aplicaciones y programas innovadores que pueden resolver problemas o satisfacer necesidades espec\u00edficas.</p> <p>Colaboraci\u00f3n y trabajo en equipo: la programaci\u00f3n no es un esfuerzo individual. En proyectos m\u00e1s grandes, es com\u00fan trabajar en equipo colaborativamente, donde diferentes programadores contribuyen con sus habilidades y conocimientos. La colaboraci\u00f3n y la capacidad de trabajar en equipo son habilidades cruciales en el mundo laboral actual.</p> <p>Error y aprendizaje continuo: la programaci\u00f3n implica experimentar y enfrentarse a errores. Es importante entender que cometer errores es parte del proceso de aprendizaje. Los programadores aprenden a depurar y solucionar problemas, lo que les permite crecer y mejorar constantemente.</p> <p>Aplicabilidad en diversas disciplinas: la programaci\u00f3n no se limita a un solo campo de estudio o trabajo.  Es una habilidad transversal que se aplica en diferentes \u00e1reas como ingenier\u00eda, dise\u00f1o, medicina, ciencia,  finanzas, entre otros. El conocimiento de programaci\u00f3n abre puertas a diversas oportunidades laborales.</p> <p>\u00a1Para recordar!</p> <p>la introducci\u00f3n a la programaci\u00f3n es una experiencia enriquecedora que desarrolla habilidades fundamentales para el siglo XXI, la era digital en la que vivimos. Adem\u00e1s de permitir la creaci\u00f3n de software y aplicaciones, fomenta el pensamiento l\u00f3gico, la resoluci\u00f3n de problemas, la creatividad y la colaboraci\u00f3n. </p> <p>Aprender a programar puede abrir un mundo de posibilidades y contribuir al desarrollo personal y profesional</p>"},{"location":"unidades/introduccion-a-la-programacion/el-arte-de-programar/","title":"El arte de programar","text":"<p>Rev. 27/02/2024</p> <p>El arte de programar se refiere a la habilidad de no solo escribir c\u00f3digo, sino tambi\u00e9n de dise\u00f1ar soluciones eficientes y efectivas a problemas complejos. Es una combinaci\u00f3n de pensamiento l\u00f3gico, creatividad y conocimiento t\u00e9cnico.</p> <p>Programar es una habilidad fundamental en el campo de la inform\u00e1tica y la tecnolog\u00eda de la informaci\u00f3n. Es una habilidad esencial en la era digital moderna y tiene una gran demanda, ya que es fundamental para el desarrollo de la tecnolog\u00eda moderna. Ha revolucionado la forma en que vivimos, trabajamos, nos divertimos y nos comunicamos.</p> <p>Aplicaciones de escritorio, aplicaciones m\u00f3viles, sitios web, sistemas operativos, juegos, bases de datos y otros tipos de aplicaciones y herramientas digitales que usamos en nuestra vida diaria son ejemplos pr\u00e1cticos de programas desarrollados mediante el uso de diversos lenguajes de programaci\u00f3n.</p>"},{"location":"unidades/introduccion-a-la-programacion/el-arte-de-programar/#que-es-un-programa","title":"\u00bfQu\u00e9 es un programa?","text":"<p>!!! important \"\u00a1Para recordar!\" Un programa es una secuencia de instrucciones escritas en un lenguaje de programaci\u00f3n que controla el comportamiento de una computadora o de otro dispositivo electr\u00f3nico.</p> <p>Un programa es una secuencia finita de instrucciones escritas en un lenguaje de programaci\u00f3n que controla el comportamiento de una computadora o de otro dispositivo electr\u00f3nico.</p> <p>Estas instrucciones son ejecutadas por la computadora para realizar una tarea espec\u00edfica.</p> <p>\u00a1Para recordar!</p> <p>Un programa puede ser algo tan simple como un script que muestra \"Hola Mundo\" en la pantalla, o tan complejo como un sistema operativo completo.</p>"},{"location":"unidades/introduccion-a-la-programacion/el-arte-de-programar/#la-tarea-del-programador","title":"La tarea del programador","text":"<p>Los programadores utilizan su conocimiento de los lenguajes de programaci\u00f3n y de la l\u00f3gica para dise\u00f1ar, escribir, probar y mantener el c\u00f3digo que hace que las computadoras y otros dispositivos electr\u00f3nicos funcionen.</p> <p>La tarea principal del programador</p> <p>La tarea principal del programador es la de resolver problemas. \u00bfY c\u00f3mo lo hace? Entre tantos procesos, pues claro: programando.</p> <p>Los lenguajes de programaci\u00f3n m\u00e1s populares son Python, JavaScript, Ruby, Java, C++ y C# y PHP entre otros. Estos lenguajes se utilizan para escribir el c\u00f3digo que le dice a una computadora lo que debe hacer.</p> <p>A lo largo de este curso, estudiaremos cada tema abordando los ejemplos, ejercicios y otras cuestiones pr\u00e1cticas con Python, JavaScript, y alg\u00fan otro lenguaje m\u00e1s... </p> <p>Elige uno (te recomendamos Python), o varios y \u00a1comienza tu aventura de aprender a escribir c\u00f3digo y escribir programas!</p> <p>\u00a1Para recordar!</p> <p>Aprender a programar va a ser todo un desaf\u00edo, pero una vez que incorpores el conocimiento te resultar\u00e1 muy gratificante y valioso para tu carrera profesional, aunque tu trabajo principal no sea ser programador.</p> <p>Va a ayudarte a desarrollar habilidades de pensamiento cr\u00edtico, mejorar tus habilidades para resolver problemas e incluso impulsar tus perspectivas profesionales. </p> <p>Adem\u00e1s, es muy \u00fatil tener una experiencia pr\u00e1ctica en la creaci\u00f3n de programas, ya que la programaci\u00f3n es una habilidad pr\u00e1ctica que se desarrolla a trav\u00e9s de la pr\u00e1ctica y la experiencia.</p> <p>Por lo tanto, con los recursos y la dedicaci\u00f3n adecuados, cualquier persona puede aprender a programar.</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/","title":"Paradigmas de programaci\u00f3n","text":"<p>Rev. 10/01/2024</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#que-es-un-paradigma","title":"\u00bfQu\u00e9 es un paradigma?","text":"<p>Definici\u00f3n</p> <p>m. Teor\u00eda o conjunto de teor\u00edas cuyo n\u00facleo central se acepta sin cuestionar y que suministra la base y modelo para resolver problemas y avanzar en el conocimiento.</p> <p>Definici\u00f3n de la Real Academia Espa\u00f1ola Puedes leer la definici\u00f3n completa haciendo clic aqu\u00ed</p> <p>Para que te sea m\u00e1s f\u00e1cil entender, paradigma es sin\u00f3nimo o af\u00edn de prototipo, modelo, ejemplo, entre otros.</p> <p>\u00a1Para recordar!</p> <p>Los paradigmas de programaci\u00f3n son una manera de clasificar los lenguajes de programaci\u00f3n seg\u00fan sus caracter\u00edsticas. Se trata de modelos formados por un conjunto de m\u00e9todos sistem\u00e1ticos aplicables en todos los niveles del dise\u00f1o de programas para resolver problemas computacionales. </p> <p>Existen varios paradigmas de programaci\u00f3n que se utilizan para desarrollar software. Cada paradigma proporciona un enfoque particular para resolver problemas y organizar el c\u00f3digo del programa. </p> <p>Los paradigmas de programaci\u00f3n han evolucionado a lo largo del tiempo, a medida que los desarrolladores han buscado nuevas formas de abordar los problemas de programaci\u00f3n. </p> <p>Aqu\u00ed est\u00e1 una cronolog\u00eda aproximada de los principales paradigmas:</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-imperativaprocedural-1950s","title":"Programaci\u00f3n imperativa/procedural (1950s)","text":"<p>Este es uno de los paradigmas m\u00e1s antiguo, b\u00e1sico y ampliamente utilizado. Los programas consisten en una sucesi\u00f3n de instrucciones detalladas y concretas sobre c\u00f3mo se deben ejecutar las tareas en orden. </p> <p>Utiliza instrucciones que cambian el estado del programa. Los programas imperativos consisten en comandos para la computadora, detallando paso a paso c\u00f3mo se deben ejecutar las tareas.</p> <p>Los lenguajes de programaci\u00f3n imperativos suelen utilizar variables, asignaciones, estructuras repetitivas (bucles) y estructuras alternativas (condicionales) para controlar el flujo de ejecuci\u00f3n. Los bucles, como for y while, se utilizan para repetir un bloque de c\u00f3digo varias veces. Las estructuras condicionales, como if y switch, se utilizan para ejecutar diferentes bloques de c\u00f3digo dependiendo de ciertas condiciones. Estas estructuras de control son fundamentales para la programaci\u00f3n imperativa y permiten a los programadores escribir c\u00f3digo que puede manejar, paso por paso, una variedad de situaciones y realizar tareas complejas.</p> <p>Los lenguajes como Fortran y COBOL, C, Pascal y C++ son ejemplos de este paradigma.</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-procedimental-1950s","title":"Programaci\u00f3n procedimental (1950s)","text":"<p>La programaci\u00f3n procedimental es un subtipo del paradigma de programaci\u00f3n imperativa donde el flujo de la ejecuci\u00f3n del programa se controla con procedimientos, o rutinas, que son llamados en un orden espec\u00edfico. Estos procedimientos, que engloban un n\u00famero de expresiones repetidas, son llamados cada vez que tengan que ser ejecutadas las mencionadas expresiones y pueden modificar el estado del programa.</p> <p>Por lo tanto, los programas se construyen a partir de procedimientos, tambi\u00e9n conocidos como funciones o rutinas, que son una serie de instrucciones que realizan una tarea espec\u00edfica en un determinado momento de ejecuci\u00f3n del programa. </p> <p>Los procedimientos pueden ser llamados por otros procedimientos, permitiendo la reutilizaci\u00f3n de c\u00f3digo y la estructuraci\u00f3n del programa en bloques de c\u00f3digo m\u00e1s manejables. </p> <p>Los procedimientos pueden manipular variables, realizar operaciones y controlar el flujo del programa a trav\u00e9s de estructuras de control como bucles y condicionales.</p> <p>Algunos lenguajes de programaci\u00f3n que utilizan el paradigma procedimental incluyen Fortran, COBOL, Pascal, C y C++.</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-funcional-1950s-1980s","title":"Programaci\u00f3n funcional (1950s-1980s)","text":"<p>La programaci\u00f3n procedimental y la programaci\u00f3n funcional son dos paradigmas de programaci\u00f3n diferentes, aunque ambos involucran el uso de funciones.</p> <p>El \u00e9nfasis de la programaci\u00f3n funcional est\u00e1 en la evaluaci\u00f3n de expresiones y en la aplicaci\u00f3n de funciones matem\u00e1ticas, evita el uso de estados mutables (evita cambiar el estado) y bucles, y se enfoca en la inmutabilidad de los datos. </p> <p>El c\u00e1lculo lambda, que es la base de la programaci\u00f3n funcional, es un sistema formal en la l\u00f3gica matem\u00e1tica y la ciencia de la computaci\u00f3n que se utiliza para investigar funciones, aplicaciones de funciones y la recursi\u00f3n. </p> <p>Se basa en la abstracci\u00f3n de funciones y la aplicaci\u00f3n de funciones. En t\u00e9rminos simples, permite tratar las funciones como entidades de primera clase (funciones puras), lo que significa que las funciones pueden ser pasadas como argumentos a otras funciones, devueltas como valores de otras funciones, y asignadas a variables. </p> <p>Estas funciones no tienen efectos secundarios y siempre producen el mismo resultado para los mismos datos de entrada.</p> <p>Aunque Lisp, uno de los primeros lenguajes funcionales, se desarroll\u00f3 en los a\u00f1os 50, este paradigma no se populariz\u00f3 hasta los a\u00f1os 80 con lenguajes como ML y Haskell, m\u00e1s tarde con Java, Scala y Kotlin y m\u00e1s recientemente con versiones funcionales de lenguajes como JavaScript y Python.</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-estructurada-1960s","title":"Programaci\u00f3n estructurada (1960s)","text":"<p>La programaci\u00f3n estructurada surgi\u00f3 como una manera de mejorar la claridad y la eficiencia de los programas escritos en lenguajes de programaci\u00f3n imperativos. </p> <p>Por lo tanto, es un subtipo de programaci\u00f3n imperativa que introduce conceptos adicionales para mejorar la claridad y eficiencia del c\u00f3digo. La programaci\u00f3n estructurada enfatiza un flujo de control claro y estructurado, utilizando estructuras de control como bucles y condicionales, y evitando el uso de instrucciones de salto como \"goto\". La idea es dividir un programa en partes m\u00e1s peque\u00f1as o secciones, generalmente utilizando subrutinas (tambi\u00e9n conocidas como funciones o procedimientos).</p> <p>Por lo tanto, la principal diferencia entre la programaci\u00f3n imperativa y la programaci\u00f3n estructurada es que la programaci\u00f3n estructurada introduce reglas y pr\u00e1cticas adicionales para mejorar la claridad y la eficiencia del c\u00f3digo. Todos los programas estructurados son imperativos, pero no todos los programas imperativos son estructurados.</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-orientada-a-objetos-oop-1960s-1970s","title":"Programaci\u00f3n orientada a objetos / OOP (1960s-1970s)","text":"<p>Este paradigma se centra en la organizaci\u00f3n del c\u00f3digo para construir modelos de objetos (estructura abstracta que, de manera m\u00e1s fiable, describe un posible objeto del mundo real y su relaci\u00f3n con el resto del mundo que lo rodea a trav\u00e9s de interfaces), que son instancias de clases, que representan elementos (objetos) del problema a resolver. </p> <p>Estos objetos tienen atributos o propiedades (datos) y m\u00e9todos (funciones), y se comunican entre s\u00ed a trav\u00e9s de mensajes, permitiendo separar los diferentes componentes de un programa, simplificando as\u00ed su creaci\u00f3n, depuraci\u00f3n y posteriores mejoras. </p> <p>Se populariz\u00f3 con lenguajes como Simula y Smalltalk, y m\u00e1s tarde con C++, Java, C# y Python.</p> <p>Permite el encapsulamiento de datos y la modularidad, como caracter\u00edsticas principales, disminuyendo los errores y promocionando la reutilizaci\u00f3n del c\u00f3digo. </p> <p>Este paradigma es una manera especial de programar, que se acerca de alguna manera a c\u00f3mo expresar\u00edamos las cosas en la vida real, puesto que se sirve de diferentes conceptos como:</p> <ul> <li> <p>Abstracci\u00f3n de datos</p> </li> <li> <p>Encapsulamiento</p> </li> <li> <p>Eventos</p> </li> <li> <p>Modularidad</p> </li> <li> <p>Herencia</p> </li> <li> <p>Polimorfismo</p> </li> </ul>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-modular-1960s-1070s","title":"Programaci\u00f3n modular (1960s-1070s)","text":"<p>La programaci\u00f3n modular es un paradigma que enfatiza la separaci\u00f3n de la funcionalidad de un programa en m\u00f3dulos independientes e intercambiables, cada uno de los cuales contiene todo lo necesario para ejecutar una \u00fanica funci\u00f3n de la l\u00f3gica del programa, con el fin de hacerlo m\u00e1s manejable y legible, permitiendo resolver problemas de programaci\u00f3n m\u00e1s complejos.</p> <p>La programaci\u00f3n modular fue popularizada por lenguajes como Modula, Ada y, m\u00e1s recientemente, Python y Java.</p> <p>Los lenguajes que soportan la programaci\u00f3n modular incluyen, pero no se limitan a, Python, Java, C, C++, JavaScript, Ruby, Swift, y muchos otros.</p> <p>La programaci\u00f3n modular es un subparadigma de la programaci\u00f3n procedimental, pero tambi\u00e9n se puede utilizar en otros paradigmas como la programaci\u00f3n orientada a objetos. La idea es que los m\u00f3dulos pueden ser probados de manera independiente y luego ensamblados para formar un programa completo, lo que puede mejorar la reutilizaci\u00f3n del c\u00f3digo, la legibilidad y el mantenimiento.</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-logica-1970s","title":"Programaci\u00f3n l\u00f3gica (1970s)","text":"<p>En este paradigma, los programas son un conjunto de declaraciones l\u00f3gicas, y la ejecuci\u00f3n del programa es un proceso de inferencia l\u00f3gica. </p> <p>Es decir, se basa en la l\u00f3gica formal y en la resoluci\u00f3n de problemas mediante la deducci\u00f3n l\u00f3gica. </p> <p>Los programas l\u00f3gicos est\u00e1n compuestos por reglas y por hechos y se utiliza la inferencia l\u00f3gica para derivar conclusiones. </p> <p>Prolog, desarrollado en los a\u00f1os 70, es el principal representante de este paradigma.</p>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-declarativa-1980s","title":"Programaci\u00f3n declarativa (1980s)","text":"<p>La programaci\u00f3n declarativa es un paradigma de programaci\u00f3n que se centra en \"qu\u00e9\" se debe hacer, en lugar de \"c\u00f3mo\" se debe hacer. En otras palabras, en lugar de escribir c\u00f3digo detallado paso a paso para lograr una tarea, simplemente se declara lo que se desea y se deja que el lenguaje y el sistema de tiempo de ejecuci\u00f3n figuren c\u00f3mo hacerlo.</p> <p>Asi, no necesita definir algoritmos puesto que describe el problema en lugar de encontrar una soluci\u00f3n al mismo.</p> <p>Este paradigma utiliza el principio del razonamiento l\u00f3gico para responder a las preguntas o cuestiones consultadas.</p> <p>Un ejemplo de programaci\u00f3n declarativa podr\u00eda ser una consulta SQL. En lugar de describir exactamente c\u00f3mo obtener los datos de una base de datos (recorrer filas, abrir y cerrar conexiones, etc.), simplemente declaras lo que quieres:</p> Programaci\u00f3n declarativa<pre><code>SELECT name, age FROM users WHERE age &gt; 18;\n</code></pre> <p>En este c\u00f3digo, simplemente est\u00e1s declarando que quieres los nombres y las edades de los usuarios que son mayores de 18 a\u00f1os. No te preocupas por c\u00f3mo SQL va a buscar esa informaci\u00f3n.</p> <p>Algunos lenguajes que utilizan el paradigma de programaci\u00f3n declarativa son:</p> <ul> <li> <p>SQL: utilizado para consultas de bases de datos.</p> </li> <li> <p>HTML: utilizado para describir la estructura de las p\u00e1ginas web. S\u00ed, HTML (HyperText Markup Language) es considerado un lenguaje declarativo. No es un lenguaje de programaci\u00f3n en el sentido tradicional, ya que no tiene estructuras de control como bucles o condicionales. Sin embargo, es un lenguaje en el sentido de que tiene una sintaxis y reglas definidas que se utilizan para describir la estructura de las p\u00e1ginas web. En este contexto, \"declarativo\" significa que con HTML declaras qu\u00e9 elementos deben aparecer en la p\u00e1gina web y en qu\u00e9 orden, pero no c\u00f3mo deben implementarse o renderizarse, eso es manejado por el navegador web.</p> </li> <li> <p>CSS: utilizado para describir la presentaci\u00f3n de las p\u00e1ginas web. S\u00ed, CSS (Cascading Style Sheets) es considerado un lenguaje declarativo. Al igual que HTML, no es un lenguaje de programaci\u00f3n en el sentido tradicional, ya que no tiene estructuras de control como bucles o condicionales. Sin embargo, es un lenguaje en el sentido de que tiene una sintaxis y reglas definidas que se utilizan para describir la presentaci\u00f3n de las p\u00e1ginas web. En este contexto, \"declarativo\" significa que con CSS declaras c\u00f3mo deben verse los elementos en la p\u00e1gina web, pero no c\u00f3mo se implementa esa presentaci\u00f3n, eso es manejado por el navegador web.</p> </li> <li> <p>Prolog: utilizado en inteligencia artificial y ling\u00fc\u00edstica computacional.</p> </li> <li> <p>Haskell: un lenguaje de programaci\u00f3n funcional que tambi\u00e9n es declarativo.</p> </li> <li> <p>XSLT: utilizado para transformar documentos XML.</p> </li> <li> <p>Terraform: utilizado para describir infraestructura como c\u00f3digo.</p> </li> </ul>"},{"location":"unidades/introduccion-a-la-programacion/paradigmas-de-programacion/#programacion-reactiva-2000s","title":"Programaci\u00f3n reactiva (2000s)","text":"<p>La programaci\u00f3n reactiva es un paradigma enfocado en la programaci\u00f3n y el trabajo con flujos de datos finitos o infinitos de manera as\u00edncrona y la propagaci\u00f3n de cambios. Se basa en escuchar lo que emite un evento o cambios en el flujo de datos, en donde los objetos reaccionan a los valores que reciben de dicho cambio.</p> <p>Ha ganado popularidad en los \u00faltimos a\u00f1os con lenguajes y bibliotecas como React.js y RxJava.</p> <p>React/Angular usan RxJs para hacer uso de la programaci\u00f3n reactiva.</p> <p>Su concepci\u00f3n y evoluci\u00f3n ha ido ligada a la publicaci\u00f3n del Reactive Manifesto, que establec\u00eda las bases de los sistemas reactivos, los cuales deben ser:</p> <ul> <li> <p>Responsivos: aseguran la calidad del servicio cumpliendo unos tiempos de respuesta establecidos.</p> </li> <li> <p>Resilientes: se mantienen responsivos incluso cuando se enfrentan a situaciones de error.</p> </li> <li> <p>El\u00e1sticos: se mantienen responsivos incluso ante aumentos en la carga de trabajo.</p> </li> <li> <p>Orientados a mensajes: minimizan el acoplamiento entre componentes al establecer interacciones basadas en el intercambio de mensajes de manera as\u00edncrona.</p> </li> </ul> <p>La motivaci\u00f3n detr\u00e1s de este nuevo paradigma procede de la necesidad de responder a las limitaciones de escalado presentes en los modelos de desarrollo actuales, que se caracterizan por su desaprovechamiento del uso de la CPU debido a la interacci\u00f3n de entrada y salida (I/O), el sobre uso de memoria y la ineficiencia de las interacciones bloqueantes.</p> <p>\u00a1Para recordar!</p> <p>Cada paradigma tiene sus propias ventajas y desventajas, y se adapta mejor a ciertos tipos de problemas que a otros. </p> <p>Es importante tener en cuenta que estos paradigmas no son mutuamente excluyentes.  </p> <p>Muchos lenguajes modernos, como Python y JavaScript, adoptan uno o varios paradigmas en funci\u00f3n del tipo de \u00f3rdenes que permiten implementar, es decir, son soportan m\u00faltiples paradigmas o son multi paradigmas.  </p> <p>Adem\u00e1s, nuevos paradigmas contin\u00faan emergiendo a medida que los desarrolladores buscan nuevas formas de abordar los problemas de programaci\u00f3n.</p>"},{"location":"unidades/introduccion-a-la-programacion/que-es-la-programacion/","title":"\u00bfQu\u00e9 es la programaci\u00f3n?","text":"<p>Rev. 27/02/2024</p> <p>Definici\u00f3n</p> <p>La programaci\u00f3n es el proceso de crear un conjunto de instrucciones que las computadoras pueden seguir para realizar una tarea o resolver un problema. </p> <p>Estas instrucciones, conocidas como c\u00f3digo, se escriben en lenguajes de programaci\u00f3n, que tienen su propia sintaxis y reglas.</p> <p>Adem\u00e1s, la programaci\u00f3n tambi\u00e9n implica la resoluci\u00f3n de problemas, ya que los programadores a menudo deben encontrar soluciones creativas y eficientes a los desaf\u00edos t\u00e9cnicos. Esto puede incluir la depuraci\u00f3n de c\u00f3digo (encontrar y corregir errores), la optimizaci\u00f3n del rendimiento y la garant\u00eda de que el c\u00f3digo es seguro y f\u00e1cil de mantener.</p> <p>De hecho, la programaci\u00f3n se utiliza en una amplia variedad de campos e industrias, incluyendo desde el desarrollo de software, la ciencia de datos, la inteligencia artificial hasta la ingenier\u00eda general y aplicada, las ciencias, la medicina, las finanzas, el entretenimiento y m\u00e1s.</p>"},{"location":"unidades/introduccion-a-la-programacion/que-es-la-programacion/#por-que-es-importante-la-programacion","title":"\u00bfPor qu\u00e9 es importante la programaci\u00f3n?","text":"<p>La programaci\u00f3n es importante por varias razones:</p> <ol> <li> <p>Resoluci\u00f3n de problemas: La programaci\u00f3n ense\u00f1a a pensar de manera l\u00f3gica y a resolver problemas de manera eficiente. Estas habilidades son \u00fatiles en muchas \u00e1reas, no solo en la inform\u00e1tica.</p> </li> <li> <p>Base de la tecnolog\u00eda moderna: Casi todas las tecnolog\u00edas que usamos hoy en d\u00eda, desde las aplicaciones m\u00f3viles hasta los sistemas operativos y las bases de datos, se crean con programaci\u00f3n. Sin programaci\u00f3n, estas tecnolog\u00edas no existir\u00edan.</p> </li> <li> <p>Alta demanda laboral: Hay una gran demanda de programadores en muchas industrias. Las habilidades de programaci\u00f3n son valiosas y a menudo bien remuneradas.</p> </li> <li> <p>Creatividad: La programaci\u00f3n permite crear nuevas herramientas, juegos, aplicaciones y sitios web. Es una forma de expresi\u00f3n creativa.</p> </li> <li> <p>Automatizaci\u00f3n: La programaci\u00f3n permite automatizar tareas repetitivas, lo que puede ahorrar tiempo y reducir errores.</p> </li> </ol> <p>\u00a1Para recordar!</p> <p>La programaci\u00f3n es una habilidad esencial en la era digital moderna.</p> <p>No solo es fundamental para el desarrollo de la tecnolog\u00eda, sino que tambi\u00e9n proporciona habilidades valiosas para resolver problemas y pensar de manera l\u00f3gica.</p> <p>Si vamos un paso m\u00e1s all\u00e1 podemos decir que, desde que nacemos hasta que dejamos este mundo, vivimos programando.</p> <p>En cada cosa que hacemos, pensamos como hacerla de la mejor manera, y en ese proceso creamos una secuencia de pasos para llegar a la soluci\u00f3n m\u00e1s \u00f3ptima.</p> <p>Veamos un ejemplo cotidiano que nos ayudar\u00e1 a comprender qu\u00e9 es la programaci\u00f3n:</p> <p>Ejercicio: Dise\u00f1ando un Algoritmo Simple</p> <p>Objetivo:</p> <ul> <li>Comprender los conceptos b\u00e1sicos de la programaci\u00f3n y c\u00f3mo se crea un algoritmo.</li> </ul> <p>Instrucciones:</p> <ul> <li> <p>T\u00edtulo: \"Preparando un S\u00e1ndwich\"</p> </li> <li> <p>Descripci\u00f3n: Imagina que eres un robot encargado de preparar s\u00e1ndwiches. Tu tarea es dise\u00f1ar un algoritmo paso a paso para hacer un s\u00e1ndwich de jam\u00f3n y queso.</p> </li> </ul> Ver soluci\u00f3n propuesta <p>Pasos: </p> <ul> <li>Paso 1: Coloca dos rebanadas de pan en una superficie limpia. </li> <li>Paso 2: Extiende una capa de mayonesa en cada una de las rebanadas de pan. </li> <li>Paso 3: Coloca una feta de jam\u00f3n sobre la mayonesa. d. </li> <li>Paso 4: A\u00f1ade una feta de queso encima del jam\u00f3n.</li> <li>Paso 5: Cubre la feta de queso con la otra rebanada de pan, colocando la cara con la capa de mayonesa hacia abajo</li> </ul> <p>\u00a1Listo! Has creado un s\u00e1ndwich de jam\u00f3n y queso. \u00a1Buen provecho!</p> <p>Preguntas de Reflexi\u00f3n:</p> <p>\u00bfQu\u00e9 es un algoritmo? \u00bfC\u00f3mo se relaciona con los pasos que dise\u00f1aste?</p> <p>\u00bfPor qu\u00e9 es importante seguir los pasos en el orden correcto al preparar un s\u00e1ndwich?</p> <p>Recuerda que la programaci\u00f3n tambi\u00e9n se basa en dise\u00f1ar algoritmos para resolver problemas.</p> <p>Ya estudiaremos en profundidad a los algoritmos, m\u00e1s adelante.</p>"},{"location":"unidades/introduccion-a-la-programacion/teoria-de-los-lenguajes/","title":"Teor\u00eda de los lenguajes","text":"<p>Rev. 10/01/2024</p> <p>La teor\u00eda de los lenguajes de programaci\u00f3n es un subcampo de estudio de la inform\u00e1tica que se ocupa de comprender los lenguajes de programaci\u00f3n desde una perspectiva te\u00f3rica. Se centra en el dise\u00f1o, implementaci\u00f3n, an\u00e1lisis, caracterizaci\u00f3n y clasificaci\u00f3n de lenguajes de programaci\u00f3n y sus caracter\u00edsticas individuales. Se trata de un campo multidisciplinario con una intersecci\u00f3n entre la ciencia de la computaci\u00f3n y la ling\u00fc\u00edstica.</p> <p>Antes de sumergirnos en los algoritmos, es importante tener una comprensi\u00f3n b\u00e1sica de la programaci\u00f3n.  Sin embargo, aprender interactuando con un lenguaje de programaci\u00f3n, como Python, te ayudar\u00e1 a entender, a comprender e internalizar mucho mejor, m\u00e1s r\u00e1pido y de manera m\u00e1s simple todos los temas relacionados con la programaci\u00f3n.</p> <p>Volviendo a la teor\u00eda de los lenguajes de programaci\u00f3n, en t\u00e9rminos m\u00e1s espec\u00edficos, puede incluir los siguientes temas:</p> <p>Sintaxis </p> <p>Es la forma en que se organizan las palabras y los s\u00edmbolos en un lenguaje de programaci\u00f3n.  </p> <p>La sintaxis define c\u00f3mo se deben estructurar las declaraciones y las expresiones en un programa. Se refiere a las reglas gramaticales de un lenguaje de programaci\u00f3n que permiten construir programas v\u00e1lidos en ese lenguaje. </p> <p>Es importante aprender la sintaxis del lenguaje de programaci\u00f3n que se est\u00e1 utilizando para que el software pueda compilar correctamente. Esto incluye la estructura y la forma en que se escriben las instrucciones, las expresiones y otros elementos del c\u00f3digo.</p> <p>Gram\u00e1tica y aut\u00f3matas</p> <p>Ambos conceptos son fundamentales en la teor\u00eda de los lenguajes de programaci\u00f3n y se utilizan para describir y analizar la sintaxis, la estructura y el comportamiento de los lenguajes de programaci\u00f3n:</p> <ul> <li> <p>Gram\u00e1tica: En este contexto, una gram\u00e1tica es un conjunto de reglas que define c\u00f3mo se pueden formar las sentencias o expresiones en un lenguaje de programaci\u00f3n. Estas reglas especifican la sintaxis del lenguaje, es decir, c\u00f3mo se deben organizar los s\u00edmbolos y estructuras para formar sentencias v\u00e1lidas. Un ejemplo com\u00fan de gram\u00e1tica es la gram\u00e1tica de Backus-Naur (BNF), que se utiliza para describir la sintaxis de muchos lenguajes de programaci\u00f3n; o las gram\u00e1ticas formales, como las gram\u00e1ticas libres de contexto, que se utilizan para especificar las reglas de construcci\u00f3n de las expresiones y declaraciones en un lenguaje.</p> </li> <li> <p>Aut\u00f3matas: Un aut\u00f3mata es un modelo matem\u00e1tico de una m\u00e1quina que puede estar en uno de un n\u00famero finito de estados. El aut\u00f3mata cambia de estado en respuesta a entradas externas seg\u00fan un conjunto de reglas definidas. En la teor\u00eda de los lenguajes de programaci\u00f3n, los aut\u00f3matas se utilizan para modelar y analizar el comportamiento de los programas. Un ejemplo de aut\u00f3mata es la m\u00e1quina de Turing, que es un modelo te\u00f3rico de una computadora; o los aut\u00f3matas finitos o las expresiones regulares, que se utilizan para reconocer y analizar la estructura de los programas.</p> </li> </ul> <p>Sem\u00e1ntica </p> <p>La sem\u00e1ntica, en el contexto de la teor\u00eda de lenguajes de programaci\u00f3n, se refiere al significado significado de las declaraciones y expresiones de los programas en un lenguaje de programaci\u00f3n. </p> <p>Define c\u00f3mo se deben manipular los datos, interpretar las declaraciones y las expresiones y ejecutar las instrucciones en un programa. Es decir, qu\u00e9 hace un programa cuando se ejecuta. </p> <p>Hay varias maneras de describir la sem\u00e1ntica de un lenguaje de programaci\u00f3n, tres de las m\u00e1s comunes son:</p> <ul> <li> <p>Sem\u00e1ntica Operacional: Esta describe el comportamiento de un programa en t\u00e9rminos de operaciones de un \"m\u00e1quina abstracta\". Es decir, describe c\u00f3mo se ejecuta un programa paso a paso. Es \u00fatil para implementar int\u00e9rpretes y compiladores, y para razonar sobre el comportamiento de los programas.</p> </li> <li> <p>Sem\u00e1ntica Denotacional: Esta describe el comportamiento de un programa en t\u00e9rminos de funciones matem\u00e1ticas. En lugar de describir c\u00f3mo se ejecuta un programa, describe qu\u00e9 calcula un programa. Es \u00fatil para razonar sobre la equivalencia de programas y para demostrar propiedades de los programas, como la correcci\u00f3n y la eficiencia.</p> </li> <li> <p>Sem\u00e1ntica Axiom\u00e1tica: La sem\u00e1ntica axiom\u00e1tica se centra en los efectos de las instrucciones y declaraciones en un programa, y se utiliza para demostrar propiedades sobre los programas, como la correcci\u00f3n parcial o total.</p> </li> </ul> <p>Todas son maneras de describir la sem\u00e1ntica de un lenguaje de programaci\u00f3n, pero desde diferentes perspectivas y con diferentes prop\u00f3sitos.</p> <p>tipos de dato </p> <p>Los lenguajes de programaci\u00f3n a menudo definen un conjunto de tipos de dato, que son los diferentes tipos de valores que se pueden almacenar en una variable.</p> <p>Los lenguajes de programaci\u00f3n tienen sistemas de tipos de dato que los permiten clasificar en tipos primitivos como enteros, flotantes, caracteres y booleanos, y en tipos compuestos como cadenas de caracteres, listas y objetos, por ejemplo.</p> <p>La teor\u00eda de los tipos de dato se ocupa de estudiar las propiedades y las reglas de cada uno de estos sistemas. </p> <p>Estructuras de datos</p> <p>Las estructuras de datos son formas de organizar y almacenar datos en la memoria RAM para que puedan ser utilizados de manera eficiente en un programa. Algunas estructuras de datos comunes incluyen cadenas de caracteres, arreglos, listas, pilas, colas, \u00e1rboles y grafos.</p> <p>Variables</p> <p>Una variable es un espacio reservado de la memoria central (RAM) que permite almacenar un dato a la vez. </p> <p>Es decir, cada variable es un contenedor que almacenar\u00e1 un valor del tipo o estructura de datos definida previamente (a menos que la definici\u00f3n sea din\u00e1mica, ya lo veremos m\u00e1s adelante) que podr\u00e1 ser accedido, manipulado y modificado m\u00e1s adelante durante la ejecuci\u00f3n del programa.</p> <p>Control de flujo</p> <p>Los lenguajes de programaci\u00f3n a menudo proporcionan construcciones, estructuras de control conformadas por sentencias utilizadas para controlar el flujo de ejecuci\u00f3n en un programa, como bucles for y while y condicionales como if y switch.</p> <p>Memoria y gesti\u00f3n de recursos</p> <p>Los lenguajes de programaci\u00f3n pueden proporcionar mecanismos para gestionar la memoria y otros recursos del sistema.</p> <p>Paradigmas de programaci\u00f3n</p> <p>Los lenguajes de programaci\u00f3n a menudo se clasifican en paradigmas, como la programaci\u00f3n imperativa, la programaci\u00f3n orientada a objetos, la programaci\u00f3n funcional, etc.</p> <p>Lenguajes de programaci\u00f3n</p> <p>Un lenguaje de programaci\u00f3n es un conjunto de reglas y s\u00edmbolos utilizados para escribir programas de computadora. Se utilizan para comunicar instrucciones a una computadora. </p> <p>Existen muchos lenguajes de programaci\u00f3n diferentes, como Python, Java, JavaScript, C++, Ruby, PHP, entre otros.</p> <p>Compiladores e int\u00e9rpretes</p> <p>Los compiladores y int\u00e9rpretes son herramientas fundamentales en la programaci\u00f3n, ya que permiten la traducci\u00f3n del c\u00f3digo fuente escrito en un lenguaje de programaci\u00f3n a instrucciones que la computadora puede ejecutar.</p> <p>Un compilador toma un programa completo escrito en un lenguaje de programaci\u00f3n (c\u00f3digo fuente) y lo traduce a un conjunto de instrucciones de bajo nivel (c\u00f3digo objeto) que la m\u00e1quina puede entender y ejecutar. Este proceso se realiza antes de la ejecuci\u00f3n del programa. Una vez que el c\u00f3digo ha sido compilado, puede ser ejecutado repetidamente sin necesidad de una nueva compilaci\u00f3n. Ejemplos de lenguajes que utilizan compiladores son C, C++ y Java.</p> <p>Un int\u00e9rprete, por otro lado, traduce y ejecuta el c\u00f3digo fuente l\u00ednea por l\u00ednea mientras el programa est\u00e1 en ejecuci\u00f3n. No produce un archivo de c\u00f3digo objeto, por lo que cada vez que se ejecuta el programa, el int\u00e9rprete debe traducir nuevamente el c\u00f3digo. Esto puede hacer que los programas interpretados sean m\u00e1s lentos que los compilados, pero tambi\u00e9n permite una mayor flexibilidad, como la ejecuci\u00f3n interactiva de c\u00f3digo y la modificaci\u00f3n del programa durante su ejecuci\u00f3n. Ejemplos de lenguajes que utilizan int\u00e9rpretes son Python, Ruby y JavaScript.</p> <p>Es importante notar que la distinci\u00f3n entre compiladores e int\u00e9rpretes no es absoluta. Algunos lenguajes utilizan una combinaci\u00f3n de ambos enfoques, como Java, que compila el c\u00f3digo fuente a un c\u00f3digo intermedio llamado bytecode, que luego es interpretado o compilado en tiempo de ejecuci\u00f3n por la M\u00e1quina Virtual de Java (JVM).</p> <p>Proceso de compilaci\u00f3n</p> <p>El proceso de compilaci\u00f3n se divide generalmente en varias fases. Cada fase transforma el c\u00f3digo fuente de una forma a otra. Aqu\u00ed est\u00e1n las fases t\u00edpicas:</p> <ol> <li> <p>An\u00e1lisis l\u00e9xico: Esta fase lee el c\u00f3digo fuente y lo divide en unidades l\u00e9xicas o \"tokens\", como identificadores, palabras clave y operadores, que son las unidades m\u00e1s peque\u00f1as de significado en el lenguaje de programaci\u00f3n.</p> </li> <li> <p>An\u00e1lisis sint\u00e1ctico: Esta fase toma los tokens producidos por el an\u00e1lisis l\u00e9xico y los organiza en una estructura de \u00e1rbol llamada \"\u00e1rbol de sintaxis abstracta\" (AST). El AST representa la estructura gramatical del c\u00f3digo fuente. Es ecir, se encarga de analizar la estructura del c\u00f3digo fuente seg\u00fan las reglas de la gram\u00e1tica del lenguaje.</p> </li> <li> <p>An\u00e1lisis sem\u00e1ntico: Esta fase utiliza el AST para verificar si el c\u00f3digo fuente tiene sentido desde el punto de vista del lenguaje de programaci\u00f3n. Por ejemplo, verifica si las variables est\u00e1n definidas antes de ser utilizadas.</p> </li> <li> <p>Generaci\u00f3n de c\u00f3digo intermedio: Esta fase transforma el AST en una representaci\u00f3n intermedia del c\u00f3digo que es m\u00e1s f\u00e1cil de traducir al c\u00f3digo de m\u00e1quina.</p> </li> <li> <p>Optimizaci\u00f3n de c\u00f3digo: Esta fase intenta mejorar el c\u00f3digo intermedio para que el programa resultante se ejecute m\u00e1s r\u00e1pido o utilice menos recursos.</p> </li> <li> <p>Generaci\u00f3n de c\u00f3digo: Esta es la \u00faltima fase del compilador. Toma el c\u00f3digo intermedio (posiblemente optimizado) y lo traduce al c\u00f3digo de m\u00e1quina que puede ser ejecutado por la computadora.</p> </li> </ol> <p>Cada compilador puede tener variaciones en este proceso b\u00e1sico, pero estas son las fases t\u00edpicas que se encuentran en la mayor\u00eda de los compiladores.</p> <p>Algoritmos</p> <p>Un algoritmo es un conjunto de instrucciones paso a paso que se utilizan para resolver un problema espec\u00edfico. En programaci\u00f3n, los algoritmos son esenciales ya que proporcionan una estrategia para dise\u00f1ar soluciones eficientes y escalables a problemas. En otras palabras, un algoritmo es como una receta para un programa de computadora, que detalla exactamente qu\u00e9 pasos debe seguir la computadora para completar una tarea o resolver un problema.</p> <p>Programas</p> <p>Un programa es una secuencia finita de instrucciones escritas en un lenguaje de programaci\u00f3n que se ejecutan en una computadora para realizar una tarea espec\u00edfica. Un programa puede ser tan simple como un script que imprime \"Hola, mundo\" en la pantalla, o tan complejo como un sistema operativo completo o una aplicaci\u00f3n de software de gran escala.</p> <p>Un programa se compone de una serie de instrucciones que la computadora puede entender y ejecutar. Estas instrucciones pueden incluir operaciones matem\u00e1ticas, manipulaci\u00f3n de datos, interacci\u00f3n con el sistema operativo, entre otras cosas.</p> <p>Los programas son escritos por programadores utilizando lenguajes de programaci\u00f3n como Python, Java, C++, entre otros. Estos lenguajes proporcionan una sintaxis y sem\u00e1ntica que permiten a los programadores expresar las instrucciones de manera que la computadora pueda interpretarlas y ejecutarlas.</p> <p>\u00a1Para recordar!</p> <p>Aunque parecen ser lo mismo, un algoritmo no necesariamente es un programa. Un algoritmo es un conjunto de instrucciones paso a paso para resolver un problema espec\u00edfico. Un programa, por otro lado, es una implementaci\u00f3n de uno o m\u00e1s algoritmos en un lenguaje de programaci\u00f3n espec\u00edfico. </p> <p>Por lo tanto, un algoritmo puede ser la base para un programa, pero no son lo mismo. As\u00ed, un algoritmo es una idea conceptual y un programa es esa idea puesta en pr\u00e1ctica.</p> <p>Instrucciones</p> <p>Las instrucciones en programaci\u00f3n son comandos que le dicen a la computadora qu\u00e9 hacer. Estos pueden ser operaciones matem\u00e1ticas, estructuras de control de flujo (como bucles y condicionales), llamadas a funciones, entre otros.</p> <p>Cada instrucci\u00f3n es una orden espec\u00edfica que la computadora puede entender y ejecutar. Por ejemplo, una instrucci\u00f3n puede decirle a la computadora que sume dos n\u00fameros, que imprima un mensaje en la pantalla, que repita una acci\u00f3n varias veces, o que tome una decisi\u00f3n basada en ciertas condiciones.</p> <p>Las instrucciones son la base de cualquier programa y se escriben utilizando la sintaxis y sem\u00e1ntica de un lenguaje de programaci\u00f3n espec\u00edfico.</p> <p>Comentarios </p> <p>Los comentarios son texto descriptivo que se utiliza para explicar el c\u00f3digo y hacerlo m\u00e1s legible para los programadores. Los comentarios no se ejecutan y son ignorados por la computadora.</p> <p>Operandos y Operadores</p> <p>En la teor\u00eda de los lenguajes de programaci\u00f3n, los operandos y operadores se estudian para entender c\u00f3mo los lenguajes de programaci\u00f3n utilizan estos conceptos y los implementan para realizar c\u00e1lculos y manipular datos. </p> <ul> <li> <p>Un operando es un t\u00e9rmino t\u00e9cnico que se refiere a los valores o variables con los que se realizan operaciones. Por ejemplo, en la expresi\u00f3n 5 + 3, los n\u00fameros 5 y 3 son operandos.</p> </li> <li> <p>Un operador es un s\u00edmbolo que indica una operaci\u00f3n espec\u00edfica a realizar con uno o m\u00e1s operandos. Pueden ser de varios tipos, incluyendo operadores aritm\u00e9ticos, de comparaci\u00f3n, l\u00f3gicos, o de asignaci\u00f3n, entre otros y se para manipular valores y variables en un programa. Por ejemplo, en la expresi\u00f3n 5 + 3, el s\u00edmbolo + es un operador que indica la operaci\u00f3n de suma.</p> </li> </ul> <p>Procedimientos (subrutinas) </p> <p>Un procedimiento o subrutina es un bloque de c\u00f3digo reutilizable que realiza una tarea espec\u00edfica. </p> <p>Se puede llamar a este bloque desde otras partes del programa. </p> <p>Los procedimientos pueden aceptar argumentos y realizar c\u00e1lculos. Son \u00fatiles para organizar el c\u00f3digo y hacerlo m\u00e1s f\u00e1cil de entender y mantener. </p> <p>A diferencia de las funciones, los procedimientos no devuelven un resultado.</p> <p>Funciones</p> <p>Una funci\u00f3n es un bloque de c\u00f3digo reutilizable que realiza una tarea espec\u00edfica y devuelve un valor. </p> <p>Se puede llamar a este bloque desde otras partes del programa, a menudo con diferentes entradas, lo que permite realizar la misma operaci\u00f3n con diferentes datos. </p> <p>Las funciones son fundamentales en la programaci\u00f3n porque permiten dividir programas grandes en tareas m\u00e1s peque\u00f1as y manejables.</p> <p>La principal diferencia entre un procedimiento y una funci\u00f3n es que una funci\u00f3n devuelve un resultado, mientras que un procedimiento no. </p> <p>Estos son algunos de los muchos conceptos de programaci\u00f3n que cualquier principiante debe conocer. </p> <p>Una vez que comprendas estos conceptos y a medida que contin\u00faes aprendiendo y practicando, seguir\u00e1s descubriendo nuevos conceptos y t\u00e9cnicas que te ayudar\u00e1n a mejorar tus habilidades como programador. </p>"},{"location":"unidades/introduccion-a-la-programacion/vision-general-de-los-lenguajes-de-programacion/","title":"Visi\u00f3n general de los lenguajes de programaci\u00f3n","text":"<p>Rev. 11/01/2024</p> <p>Los lenguajes de programaci\u00f3n son herramientas que permiten a los desarrolladores escribir instrucciones para que las computadoras las ejecuten. </p> <p>En el mundo de la programaci\u00f3n, existen numerosos lenguajes de programaci\u00f3n que se utilizan para desarrollar software. </p> <p>Cada lenguaje tiene sus propias caracter\u00edsticas, ventajas y desventajas; y se utiliza en diferentes contextos.</p> <p>Aqu\u00ed te dejo una visi\u00f3n general:</p> <ol> <li> <p>Lenguajes de Alto Nivel: Estos lenguajes se centran en la facilidad de uso y la legibilidad del c\u00f3digo. Est\u00e1n dise\u00f1ados para ser m\u00e1s f\u00e1ciles de leer y escribir para los humanos. Son m\u00e1s abstractos y menos detallados en comparaci\u00f3n con los lenguajes de bajo nivel. Ejemplos de estos lenguajes incluyen Python, Java, C#, JavaScript, Ruby, etc.</p> </li> <li> <p>Lenguajes de Bajo Nivel: Estos lenguajes se centran en el control directo del hardware y la eficiencia. Est\u00e1n m\u00e1s cerca del hardware y proporcionan un control m\u00e1s detallado sobre lo que hace la computadora. Son m\u00e1s dif\u00edciles de leer y escribir para los humanos. Ejemplos de estos lenguajes incluyen C, C++, Assembly, etc.</p> </li> <li> <p>Lenguajes Compilados: Estos lenguajes requieren un paso de compilaci\u00f3n antes de que puedan ser ejecutados. El c\u00f3digo fuente se traduce a c\u00f3digo de m\u00e1quina, que puede ser ejecutado directamente por la computadora.  Ejemplos de estos lenguajes incluyen C, C++, Go, Rust, etc.</p> </li> <li> <p>Lenguajes Interpretados: Estos lenguajes son ejecutados l\u00ednea por l\u00ednea por un int\u00e9rprete. No necesitan ser compilados antes de la ejecuci\u00f3n.  Ejemplos de estos lenguajes incluyen Python, Ruby, JavaScript, etc.</p> </li> <li> <p>Lenguajes de Programaci\u00f3n Orientada a Objetos (OOP): Estos lenguajes utilizan el concepto de objetos y clases que pueden contener propiedades y m\u00e9todos.  Ejemplos de estos lenguajes incluyen Java, C#, Python, etc.</p> </li> <li> <p>Lenguajes de Programaci\u00f3n Funcional: Estos lenguajes se centran en la programaci\u00f3n basada en funciones y en la inmutabilidad de los datos. Tratan la computaci\u00f3n como la evaluaci\u00f3n de funciones matem\u00e1ticas y evitan cambiar el estado y los datos mutables.  Ejemplos de estos lenguajes incluyen Haskell, Erlang, Clojure, Lisp, Scala, etc.</p> </li> <li> <p>Lenguajes de Marcado: Estos lenguajes se utilizan para describir la apariencia de un documento o una interfaz de usuario.  Ejemplos de estos lenguajes incluyen HTML, XML, Markdown, etc.</p> </li> <li> <p>Lenguajes de Consulta: Estos lenguajes se utilizan para hacer consultas en bases de datos y sistemas de informaci\u00f3n.  Ejemplos de estos lenguajes incluyen SQL, XQuery, etc.</p> </li> </ol> <p>Cada lenguaje de programaci\u00f3n tiene su propio uso y es adecuado para diferentes tipos de tareas. La elecci\u00f3n del lenguaje de programaci\u00f3n depende del problema que se est\u00e9 tratando de resolver, las necesidades del proyecto y las preferencias del desarrollador.</p> <p>\u00a1Para recordar!</p> <p>Los lenguajes de programaci\u00f3n son herramientas poderosas que permiten a los desarrolladores crear software y aplicaciones de todo tipo. </p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis y conjunto de reglas que deben seguirse para escribir c\u00f3digo v\u00e1lido. </p> <p>Adem\u00e1s, cada lenguaje tiene su propia comunidad de desarrolladores y recursos disponibles para aprender y mejorar las habilidades de programaci\u00f3n.</p> <p>La elecci\u00f3n del lenguaje de programaci\u00f3n adecuado depender\u00e1 del contexto y los requisitos del proyecto.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/","title":"Pensamiento Computacional","text":"<p>Rev. 10/03/2024</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#introduccion","title":"Introducci\u00f3n","text":"<p>El pensamiento computacional es una disciplina que ha sido definida como \"el conjunto de procesos de pensamiento implicados en la formulaci\u00f3n de problemas y sus soluciones, de manera que dichas soluciones sean representadas de una forma que puedan ser efectivamente ejecutadas por un agente de procesamiento de informaci\u00f3n\", entendiendo por esto \u00faltimo a un humano, una m\u00e1quina o una combinaci\u00f3n de ambos.</p> <p>El ser humano piensa y se comporta como tal siguiendo una secuencia l\u00f3gica de acciones.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#que-es-el-pensamiento-computacional","title":"\u00bfQu\u00e9 es el pensamiento computacional?","text":"<p>Definici\u00f3n</p> <p>El pensamiento computacional es una habilidad fundamental en la programaci\u00f3n y en la resoluci\u00f3n de problemas en general que se basa en la aplicaci\u00f3n herramientas b\u00e1sicas como la l\u00f3gica, el razonamiento, la descomposici\u00f3n, la abstracci\u00f3n, el reconocimiento de patrones y la algoritmia. </p> <p>Est\u00e1 ampliamente aceptado que estas herramientas sirven a cualquier persona que deba resolver problemas, con lo cual el pensamiento computacional deviene en una t\u00e9cnica de resoluci\u00f3n de problemas. </p> <p>Si bien el pensamiento computacional no necesariamente requiere del uso de computadoras, la programaci\u00f3n de computadoras se convierte en su complemento ideal:</p> <ul> <li>Permite comprobar, mediante la codificaci\u00f3n de un algoritmo en un programa, la validez de la soluci\u00f3n encontrada al problema, de manera sencilla y pr\u00e1cticamente inmediata. </li> <li>Programar incentiva la creatividad, la capacidad para la auto organizaci\u00f3n y el trabajo en equipo. </li> <li>La programaci\u00f3n constituye un recurso habitual del trabajo en el campo profesional de la ingenier\u00eda.</li> </ul> <p>\u00a1Bienvenidos y Bienvenidas!</p> <p>\u00a1Esta materia es m\u00e1s que programaci\u00f3n de computadoras!</p> <p>Resulta que la inform\u00e1tica se trataba menos de programaci\u00f3n que de resoluci\u00f3n de problemas. De hecho, \u00a1esta materia trata sobre la resoluci\u00f3n de problemas de una manera que es extremadamente enriquecedora! </p> <p>Es probable que tomes la resoluci\u00f3n de problemas que aprendas aqu\u00ed y que la apliques instant\u00e1neamente a tu trabajo m\u00e1s all\u00e1 de esta clase e incluso a tu vida en general.</p> <p>Sin embargo, \u00a1no ser\u00e1 f\u00e1cil! Estar\u00e1s \u201cbebiendo de la manguera\u201d del conocimiento durante cada clase. Y aunque puede haber frustraci\u00f3n por sentirse atascado o cometer errores, tambi\u00e9n habr\u00e1 una gran sensaci\u00f3n de gratificaci\u00f3n y orgullo por hacer que algo funcione o completar alguna tarea. Te sorprender\u00e1s de lo que podr\u00e1s lograr semana a semana.</p> <p>Entonces, se trata mucho m\u00e1s de que avances a nivel personal que de alcanzar alg\u00fan nivel estandarizado y generalizado a nivel colectivo. Lo que finalmente importa no es tanto d\u00f3nde terminas en relaci\u00f3n con tus compa\u00f1eros de clase, sino d\u00f3nde terminas en relaci\u00f3n contigo mismo cuando comenzaste.</p> <p>La consideraci\u00f3n m\u00e1s importante es que te des el tiempo que necesites para aprender a lo largo del a\u00f1o. Todo el mundo aprende de manera diferente. </p> <p>Si algo no funciona bien al principio, debes saber que con el tiempo ir\u00e1s adquiriendo m\u00e1s conocimientos y mejorando tus habilidades para resolver todos los problemas que se presenten.</p> <p>Por ejemplo, un programa que calcula el cuadrado de un n\u00famero podr\u00eda verse as\u00ed:</p> Python<pre><code>def calcular_cuadrado(numero):\n    return numero * numero\n\nnumero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nprint (f\"El cuadrado de {numero} es {calcular_cuadrado(numero)}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero entero: 4\nEl cuadrado de 4 es 16\n</code></pre> <p>Aunque este programa (escrito en un lenguaje de programaci\u00f3n en lugar de un lenguaje natural como el castellano) parece cr\u00edptico al principio, pueden pasar semanas o meses antes de que podamos comprender los conceptos principales de programaci\u00f3n e incluso aprender nuevos lenguajes.</p> <p>Definici\u00f3n</p> <p>Seguramente te est\u00e9s preguntando que es cr\u00edptico: un lenguaje cr\u00edptico en programaci\u00f3n es un tipo de lenguaje de programaci\u00f3n dise\u00f1ado para ser extremadamente dif\u00edcil de entender o leer, generalmente con el objetivo de complicar la comprensi\u00f3n del c\u00f3digo fuente por parte de otras personas.</p> <p>As\u00ed que no te preocupes, con tiempo y pr\u00e1ctica ir\u00e1s sintiendo al lenguaje de programaci\u00f3n como algo menos cr\u00edptico y m\u00e1s natural, \u00a1Esa es la idea!</p> <p>Pero ahora volvamos a la definici\u00f3n de pensamiento computacional aplicado al ejemplo anterior:</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#logica","title":"L\u00f3gica","text":"<p>Se refiere a la capacidad de razonar sistem\u00e1ticamente y de resolver problemas de manera efectiva basadas en condiciones establecidas. En programaci\u00f3n, la l\u00f3gica se utiliza para dise\u00f1ar algoritmos, estructurar c\u00f3digo y tomar decisiones basadas en condiciones espec\u00edficas.   </p> Python<pre><code>def calcular_cuadrado(numero):\n    return numero * numero\n\nnumero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nprint (f\"El cuadrado de {numero} es {calcular_cuadrado(numero)}\")\n</code></pre> <p>En este programa, la l\u00f3gica se utiliza para calcular el cuadrado de un n\u00famero. \u00bfC\u00f3mo?</p> <ol> <li> <p>Se define una funci\u00f3n llamada <code>calcular_cuadrado</code> que toma un argumento llamado <code>numero</code>. Esta funci\u00f3n devuelve el cuadrado de <code>numero</code> (es decir, <code>numero * numero</code>).</p> </li> <li> <p>Luego, el programa solicita al usuario que ingrese un n\u00famero entero. La funci\u00f3n <code>input</code> recoge la entrada del usuario como una cadena, por lo que se utiliza la funci\u00f3n <code>int</code> para convertir esa entrada en un n\u00famero entero.</p> </li> <li> <p>Finalmente, el programa imprime el cuadrado del n\u00famero ingresado por el usuario. Utiliza la funci\u00f3n <code>calcular_cuadrado</code> para calcular el cuadrado del n\u00famero y luego lo imprime en la consola con una cadena formateada.</p> </li> </ol> <p>Por lo tanto, la l\u00f3gica del programa es solicitar un n\u00famero al usuario, calcular el cuadrado de ese n\u00famero y luego imprimir el resultado.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#razonamiento","title":"Razonamiento","text":"<p>Se refiere a la capacidad de pensar de manera l\u00f3gica y estructurada para resolver problemas. En el contexto de la programaci\u00f3n, el razonamiento se utiliza para entender c\u00f3mo y por qu\u00e9 un algoritmo o un fragmento de c\u00f3digo funciona de la manera en que lo hace.  </p> Python<pre><code>def calcular_cuadrado(numero):\n    return numero * numero\n\nnumero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nprint (f\"El cuadrado de {numero} es {calcular_cuadrado(numero)}\")\n</code></pre> <p>En este programa, el razonamiento se podr\u00eda aplicar para entender c\u00f3mo la funci\u00f3n <code>calcular_cuadrado</code> toma un n\u00famero como entrada y devuelve el cuadrado de ese n\u00famero. Tambi\u00e9n se podr\u00eda usar para entender c\u00f3mo el programa recibe una entrada del usuario, la pasa a la funci\u00f3n <code>calcular_cuadrado</code>, y luego imprime el resultado. \u00bfC\u00f3mo?</p> <ol> <li> <p>Se define una funci\u00f3n <code>calcular_cuadrado</code> que toma un n\u00famero como argumento. Esta funci\u00f3n se encarga de realizar una operaci\u00f3n espec\u00edfica, que es calcular el cuadrado de un n\u00famero. La raz\u00f3n para definir esta funci\u00f3n es encapsular la l\u00f3gica de calcular el cuadrado de un n\u00famero, lo que permite reutilizar esta l\u00f3gica en cualquier parte del c\u00f3digo simplemente llamando a la funci\u00f3n.</p> </li> <li> <p>Luego, el programa solicita al usuario que ingrese un n\u00famero. Se utiliza la funci\u00f3n <code>input</code> para recoger la entrada del usuario y luego se convierte esa entrada a un n\u00famero entero con la funci\u00f3n <code>int</code>. La raz\u00f3n para hacer esto es que la funci\u00f3n <code>input</code> siempre devuelve una cadena, pero necesitamos un n\u00famero para poder calcular su cuadrado.</p> </li> <li> <p>Finalmente, el programa imprime el cuadrado del n\u00famero ingresado por el usuario. Se utiliza una cadena formateada para generar un mensaje que incluye el n\u00famero original y su cuadrado. La raz\u00f3n para hacer esto es proporcionar una salida que sea f\u00e1cil de entender para el usuario.</p> </li> </ol> <p>Por lo tanto, el razonamiento detr\u00e1s de este c\u00f3digo es utilizar una funci\u00f3n para encapsular la l\u00f3gica de calcular el cuadrado de un n\u00famero, convertir la entrada del usuario a un n\u00famero y proporcionar una salida que sea f\u00e1cil de entender para el usuario.</p> <p>Aunque la l\u00f3gica y el razonamiento est\u00e1n estrechamente relacionados en el pensamiento computacional, no son exactamente lo mismo. Mientras que la l\u00f3gica se refiere a las reglas y estructuras que gu\u00edan nuestras decisiones y pensamientos, el razonamiento es el proceso de usar esas reglas y estructuras para llegar a una conclusi\u00f3n o resolver un problema.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#descomposicion","title":"Descomposici\u00f3n","text":"<p>Es el proceso de dividir un problema complejo en partes m\u00e1s peque\u00f1as y manejables, que pueden ser resueltas de manera m\u00e1s f\u00e1cil para llegar a una soluci\u00f3n de manera exitosa. Cada una de estas partes m\u00e1s peque\u00f1as puede ser un problema en s\u00ed mismo que requiere una soluci\u00f3n.  </p> <p>Al descomponer un problema, puedes concentrarte en una secci\u00f3n a la vez, lo que puede hacer que el problema sea m\u00e1s f\u00e1cil de entender y resolver.</p> Python<pre><code>def calcular_cuadrado(numero):\n    return numero * numero\n\nnumero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nprint (f\"El cuadrado de {numero} es {calcular_cuadrado(numero)}\")\n</code></pre> <p>En este programa, la descomposici\u00f3n se puede ver en c\u00f3mo el problema general de calcular el cuadrado de un n\u00famero se divide en tareas m\u00e1s peque\u00f1as:</p> <ol> <li>Solicitar al usuario que ingrese un n\u00famero.</li> <li>Convertir la entrada del usuario a un n\u00famero entero.</li> <li>Calcular el cuadrado del n\u00famero utilizando la funci\u00f3n <code>calcular_cuadrado</code>.</li> <li>Imprimir el resultado.</li> </ol> <p>Cada una de estas tareas es una descomposici\u00f3n del problema general. \u00bfC\u00f3mo?</p> <ol> <li> <p>Definici\u00f3n de la funci\u00f3n <code>calcular_cuadrado</code> (l\u00edneas 1-2): Esta es la primera parte del problema. La funci\u00f3n toma un n\u00famero como argumento y devuelve el cuadrado de ese n\u00famero. Esta es una tarea individual que se ha aislado en su propia funci\u00f3n.</p> </li> <li> <p>Solicitud de entrada del usuario (l\u00ednea 4): Esta es la segunda parte del problema. El programa solicita al usuario que ingrese un n\u00famero entero. La entrada del usuario se recoge como una cadena, por lo que se utiliza la funci\u00f3n <code>int</code> para convertirla en un n\u00famero entero.</p> </li> <li> <p>Impresi\u00f3n del resultado (l\u00ednea 6): Esta es la tercera y \u00faltima parte del problema. El programa calcula el cuadrado del n\u00famero ingresado por el usuario utilizando la funci\u00f3n <code>calcular_cuadrado</code> y luego imprime el resultado en la consola.</p> </li> </ol> <p>Por lo tanto, el problema general de calcular el cuadrado de un n\u00famero ingresado por el usuario se ha descompuesto en tres partes m\u00e1s peque\u00f1as: definir la funci\u00f3n de c\u00e1lculo, recoger la entrada del usuario e imprimir el resultado.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#abstraccion","title":"Abstracci\u00f3n","text":"<p>Es el proceso de simplificar un problema complejo al ignorar los detalles menos relevantes y centrarse en los aspectos m\u00e1s importantes. En programaci\u00f3n, la abstracci\u00f3n a menudo implica la creaci\u00f3n de funciones o clases que encapsulan ciertos detalles y proporcionan una interfaz simple para realizar una tarea.</p> Python<pre><code>def calcular_cuadrado(numero):\n    return numero * numero\n\nnumero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nprint (f\"El cuadrado de {numero} es {calcular_cuadrado(numero)}\")\n</code></pre> <p>En este programa, la funci\u00f3n <code>calcular_cuadrado</code> es un ejemplo de abstracci\u00f3n. Esta funci\u00f3n toma un n\u00famero y devuelve su cuadrado, ocultando los detalles de c\u00f3mo se realiza este c\u00e1lculo.  </p> <p>No necesitas entender c\u00f3mo funciona internamente para usarla. Todo lo que necesitas saber para usar la funci\u00f3n es que toma un n\u00famero y devuelve su cuadrado.</p> <p>Adem\u00e1s, la l\u00ednea que solicita la entrada del usuario con la sentencia <code>numero = int(input(\"Ingrese un n\u00famero entero: \"))</code> tambi\u00e9n es una forma de abstracci\u00f3n. Oculta los detalles de c\u00f3mo se recoge la entrada del usuario y c\u00f3mo se convierte esa entrada a un n\u00famero entero.</p> <p>Por lo tanto, la abstracci\u00f3n en este c\u00f3digo permite centrarse en lo que hace el c\u00f3digo (calcula el cuadrado de un n\u00famero y lo imprime) en lugar de c\u00f3mo lo hace.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#reconocimiento-de-patrones","title":"Reconocimiento de patrones","text":"<p>Es la habilidad de identificar tendencias, regularidades o recurrencias en datos o problemas. En programaci\u00f3n, esto puede implicar identificar y utilizar patrones en el c\u00f3digo para simplificar la soluci\u00f3n de un problema.</p> Python<pre><code>def calcular_cuadrado(numero):\n    return numero * numero\n\nnumero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nprint (f\"El cuadrado de {numero} es {calcular_cuadrado(numero)}\")\n</code></pre> <p>En este programa, el reconocimiento de patrones puede no ser inmediatamente evidente porque el c\u00f3digo es bastante simple y no contiene estructuras repetitivas obvias. Sin embargo, aqu\u00ed hay algunas formas en que podr\u00edamos interpretar el reconocimiento de patrones:</p> <ol> <li> <p>Uso de funciones para tareas espec\u00edficas: La funci\u00f3n <code>calcular_cuadrado</code> se utiliza para realizar una tarea espec\u00edfica: calcular el cuadrado de un n\u00famero. Este es un patr\u00f3n que se utiliza a menudo en programaci\u00f3n: definir funciones para tareas espec\u00edficas que se pueden reutilizar en diferentes partes del c\u00f3digo. Es decir que cada vez que necesitas calcular el cuadrado de un n\u00famero, puedes usar esta funci\u00f3n en lugar de escribir el c\u00e1lculo manualmente. Este es un patr\u00f3n que puedes reconocer y utilizar para simplificar tu c\u00f3digo.</p> </li> <li> <p>Patr\u00f3n de entrada-procesamiento-salida: Este c\u00f3digo sigue un patr\u00f3n com\u00fan en programaci\u00f3n conocido como el patr\u00f3n de entrada-procesamiento-salida. Primero, el programa recoge una entrada del usuario (ingreso por teclado), luego procesa esa entrada (calcula su cuadrado) y finalmente produce una salida (imprime el resultado).</p> </li> <li> <p>Uso de la funci\u00f3n print para la salida: Este c\u00f3digo utiliza la funci\u00f3n <code>print</code> para mostrar la salida al usuario. Este es un patr\u00f3n com\u00fan en programaci\u00f3n: usar <code>print</code> para la salida.</p> </li> </ol> <p>Por lo tanto, aunque este c\u00f3digo es bastante simple, todav\u00eda contiene algunos patrones que son comunes en programaci\u00f3n.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#algoritmia","title":"Algoritmia","text":"<p>Se refiere a la capacidad de definir una serie de pasos ordenados y finitos (que tienen fin, no son infinitos) para resolver un problema o realizar una tarea. En programaci\u00f3n, un algoritmo es una lista de instrucciones que un programa sigue para completar una tarea espec\u00edfica.</p> <p>Un algoritmo es esencialmente un plan o una receta para resolver un problema.</p> Python<pre><code>def calcular_cuadrado(numero):\n    return numero * numero\n\nnumero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nprint (f\"El cuadrado de {numero} es {calcular_cuadrado(numero)}\")\n</code></pre> <p>En este programa, el algoritmo se puede ver en la secuencia de operaciones que se realizan:</p> <ol> <li>Solicitar al usuario que ingrese un n\u00famero.</li> <li>Convertir la entrada del usuario a un n\u00famero entero.</li> <li>Calcular el cuadrado del n\u00famero utilizando la funci\u00f3n calcular_cuadrado.</li> <li>Imprimir el resultado.</li> </ol> <p>Cada uno de estos pasos es una parte del algoritmo que tu programa sigue para calcular el cuadrado de un n\u00famero. \u00bfC\u00f3mo ser\u00eda entonces el algoritmo?</p> <ol> <li> <p>Definir la funci\u00f3n <code>calcular_cuadrado</code>: Esta funci\u00f3n toma un n\u00famero como argumento y devuelve el cuadrado de ese n\u00famero.</p> </li> <li> <p>Solicitar la entrada del usuario: El programa solicita al usuario que ingrese un n\u00famero entero. La entrada del usuario se recoge como una cadena, por lo que se utiliza la funci\u00f3n <code>int</code> para convertirla en un n\u00famero entero.</p> </li> <li> <p>Calcular el cuadrado del n\u00famero: El programa utiliza la funci\u00f3n <code>calcular_cuadrado</code> para calcular el cuadrado del n\u00famero ingresado por el usuario.</p> </li> <li> <p>Imprimir el resultado: Finalmente, el programa imprime el cuadrado del n\u00famero en la consola.</p> </li> </ol> <p>Por lo tanto, el algoritmo de este c\u00f3digo es una serie de pasos que se siguen para solicitar un n\u00famero al usuario, calcular el cuadrado de ese n\u00famero y luego imprimir el resultado.</p> <p>A simple vista, la descomposici\u00f3n y la algoritmia parecen lo mismo, pero no lo son. La descomposici\u00f3n es una estrategia que se utiliza para entender un problema, mientras que la algoritmia es una estrategia que se utiliza para resolver un problema. A menudo, despu\u00e9s de descomponer un problema, usar\u00edas la algoritmia para crear un plan para resolver cada parte m\u00e1s peque\u00f1a.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#conclusiones","title":"Conclusiones","text":"<p>\u00a1No temas! ERES el programador. Escribe el c\u00f3digo. Ejecuta el c\u00f3digo.</p> <p>\u00a1Para programar, \u00a1Debes \u201chablar\u201d y \"escribir\" en lenguaje de programaci\u00f3n!</p> <p>Como dijimos, puede haber frustraci\u00f3n por sentirse atascado o cometer errores, pero tambi\u00e9n habr\u00e1 una gran sensaci\u00f3n de gratificaci\u00f3n y orgullo por hacer que algo funcione o completar alguna tarea.</p> <p>De hecho, David Malan (profesor titular de la c\u00e1tedra de Computer Science CS50 en la Universidad de Harvard, Estados Unidos) perdi\u00f3 dos puntos en su primera tarea por no seguir todas las instrucciones correctamente. Y hoy, sin embargo, es una autoridad reconocida en la materia.</p> <p></p> <p>El c\u00f3digo de la imagen es casi correcto para imprimir en pantalla en C, pero le falta incluir la biblioteca <code>stdlib.h</code>, que es necesaria para la funci\u00f3n <code>exit(0);</code>.</p> C - Ejercicio corregido<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{\n    printf(\"Hello, World!\\n\");\n}\n</code></pre> <p>Adem\u00e1s, nota que es m\u00e1s com\u00fan usar <code>int main()</code> en lugar de <code>void main()</code>. La funci\u00f3n <code>int main()</code> deber\u00eda devolver un entero al final (generalmente 0 para indicar \u00e9xito), que se usa como el estado de salida del programa. En el caso del profesor Malan, utiliz\u00f3 <code>exit(0)</code>, que tambi\u00e9n termina el programa con un estado de 0, por lo que no est\u00e1 mal, pero es menos com\u00fan.</p> <p>Todo lo explicado en este ejemplo por ahora no es importante. Solo te lo cuento para que veas que si al principio la cosa es complicada, con el correr del tiempo ver\u00e1s como en realidad no lo es.</p> <p>Para tu tranquilidad, dos tercios de los estudiantes de CS50 en Harvard nunca antes hab\u00edan tomado un curso de inform\u00e1tica como (casi) seguramente tu tampoco lo hiciste. As\u00ed que a no desanimarse y a meter todas las energ\u00edas.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/","title":"\u00bfQue es el pensamiento computacional?","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#que-es-el-pensamiento-computacional","title":"\u00bfQu\u00e9 es el pensamiento computacional?","text":"<p>Definici\u00f3n</p> <p>El pensamiento computacional es una forma de resolver problemas y abordar desaf\u00edos utilizando t\u00e9cnicas y conceptos fundamentales de la ciencia de la computaci\u00f3n.</p> <p>El objetivo principal es desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico que sean fundamentales para comprender y resolver problemas en el \u00e1mbito de la inform\u00e1tica. Se basa en la aplicaci\u00f3n de la l\u00f3gica, el razonamiento y la capacidad de descomponer problemas complejos en componentes m\u00e1s peque\u00f1os y manejables.</p> <p>El pensamiento computacional implica un enfoque anal\u00edtico y estructurado para resolver problemas, con \u00e9nfasis en la resoluci\u00f3n algor\u00edtmica.</p> <p>Se centra en la capacidad de dise\u00f1ar y seguir pasos o instrucciones precisas para llegar a una soluci\u00f3n.</p> <p>Esencialmente, la programaci\u00f3n de computadoras equivale a pensar en\u00a0la resoluci\u00f3n de un problema\u00a0como el proceso de tomar alguna entrada (un problema que queremos resolver) y generar alguna salida (la soluci\u00f3n a nuestro problema), resolviendo as\u00ed dicho problema. Lo que sucede entre la entrada y la salida, es lo que podr\u00edamos llamar una caja negra, que por ahora ser\u00e1 una inc\u00f3gnita que develaremos a lo largo de la materia.</p> <p>4</p> <p>Pero para comenzar, necesitaremos una forma de representar entradas y salidas, para que podamos almacenar y trabajar con informaci\u00f3n de manera estandarizada. Profundizaremos el tema, m\u00e1s adelante, en la bibliograf\u00eda \u201cRepresentaci\u00f3n de datos en la computadora\u201d.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#componentes-del-pensamiento-computacional","title":"Componentes del pensamiento computacional","text":"<p>Algunos elementos clave del pensamiento computacional que ayudan a desarrollar habilidades de resoluci\u00f3n de problemas y pensamiento l\u00f3gico en el contexto de la inform\u00e1tica son:</p> <ol> <li> <p>Resoluci\u00f3n de problemas a partir de la descomposici\u00f3n: consiste en descomponer problemas complejos en subproblemas m\u00e1s peque\u00f1os y manejables. Esto ayuda a comprender mejor el problema y permite abordar cada parte de forma individual. Se exploran t\u00e9cnicas como la divisi\u00f3n y conquista, la recursividad y el enfoque iterativo.</p> </li> <li> <p>Patrones y reconocimiento de patrones: el objetivo es identificar patrones y regularidades en los datos o en el problema en s\u00ed. Esto puede ayudar a simplificar el problema y proporcionar una base para encontrar soluciones.</p> </li> <li> <p>Abstracci\u00f3n: la abstracci\u00f3n implica la capacidad de identificar los aspectos esenciales e importantes de un problema y omitir, separar, los detalles irrelevantes y no esenciales a partir del estudio de t\u00e9cnicas de abstracci\u00f3n para simplificar la resoluci\u00f3n de problemas y crear modelos m\u00e1s manejables. Esto permite enfocarse en los conceptos clave y simplificar la comprensi\u00f3n del problema. </p> </li> <li> <p>Algoritmos: los algoritmos son la base para implementar soluciones en programaci\u00f3n a partir del dise\u00f1o de una serie de pasos o de instrucciones l\u00f3gicas que resuelven un problema de manera eficiente y sistem\u00e1tica. Es decir, son secuencias ordenadas de pasos o de instrucciones l\u00f3gicas que describen c\u00f3mo resolver un problema. Es fundamental aprender a dise\u00f1ar, analizar y mejorar algoritmos a partir de la aplicaci\u00f3n de las buenas pr\u00e1cticas de programaci\u00f3n y de la aplicaci\u00f3n de las diferentes metodolog\u00edas de las ciencias de la computaci\u00f3n.</p> </li> <li> <p>Estructuras de datos: las estructuras de datos son maneras de organizar y almacenar datos en la memoria de una computadora. Se exploran conceptos como listas, arreglos, pilas, colas y \u00e1rboles, y se estudia c\u00f3mo elegir la estructura adecuada para un problema dado.</p> </li> <li> <p>Pensamiento l\u00f3gico: el pensamiento l\u00f3gico es esencial en la programaci\u00f3n. Se aprende a formular proposiciones l\u00f3gicas, utilizar operadores l\u00f3gicos (AND, OR, NOT), construir tablas de verdad y aplicar principios de l\u00f3gica para la resoluci\u00f3n de problemas.</p> </li> <li> <p>Programaci\u00f3n: aunque la programaci\u00f3n puede ser un tema en s\u00ed mismo, en la introducci\u00f3n al pensamiento computacional se puede proporcionar una introducci\u00f3n b\u00e1sica a la programaci\u00f3n. Se pueden utilizar lenguajes de programaci\u00f3n como Python o Scratch para familiarizarse con conceptos como variables, condicionales, bucles y funciones.</p> </li> <li> <p>Paralelismo y concurrencia: a medida que los sistemas inform\u00e1ticos se vuelven cada vez m\u00e1s paralelos, es importante comprender c\u00f3mo manejar la concurrencia y los desaf\u00edos asociados. Se pueden introducir conceptos como hilos de ejecuci\u00f3n, sincronizaci\u00f3n y comunicaci\u00f3n entre procesos.</p> </li> </ol> <p>Info</p> <p>El objetivo principal del pensamiento computacional es desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico que sean fundamentales para comprender y resolver problemas en el \u00e1mbito de la inform\u00e1tica.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#aplicaciones-del-pensamiento-computacional","title":"Aplicaciones del pensamiento computacional","text":"<ul> <li> <p>Resoluci\u00f3n de problemas en la programaci\u00f3n.</p> </li> <li> <p>Resoluci\u00f3n de problemas en matem\u00e1ticas, ciencias y otras disciplinas.</p> </li> <li> <p>Dise\u00f1o de sistemas complejos.</p> </li> <li> <p>Desarrollo de soluciones innovadoras para problemas cotidianos.</p> </li> </ul>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#ejemplos-de-pensamiento-computacional","title":"Ejemplos de pensamiento computacional","text":"<ul> <li> <p>Resolver un rompecabezas o acertijo.</p> </li> <li> <p>Crear un flujo de trabajo para realizar una tarea repetitiva de manera eficiente.</p> </li> <li> <p>Analizar los datos para identificar patrones y tendencias.</p> </li> <li> <p>Desarrollar un plan para resolver un problema de programaci\u00f3n complejo.</p> </li> </ul>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#beneficios-de-pensamiento-computacional","title":"Beneficios de pensamiento computacional","text":"<ul> <li> <p>Mejora la capacidad de resoluci\u00f3n de problemas y la creatividad.</p> </li> <li> <p>Ayuda a entender mejor el funcionamiento de los sistemas complejos.</p> </li> <li> <p>Desarrolla habilidades de pensamiento cr\u00edtico y l\u00f3gico.</p> </li> <li> <p>Facilita la comunicaci\u00f3n y colaboraci\u00f3n en proyectos de equipo.</p> </li> </ul>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#herramientas-para-desarrollar-el-pensamiento-computacional","title":"Herramientas para desarrollar el pensamiento computacional","text":"<p>A continuaci\u00f3n, te presentamos algunas herramientas que pueden ayudarte a desarrollar el pensamiento computacional y mejorar tus habilidades. Estas herramientas puedes clasificarse seg\u00fan su tipo:</p> <ul> <li> <p>Juegos y acertijos que requieren pensamiento cr\u00edtico y l\u00f3gico</p> </li> <li> <p>Ejercicios de programaci\u00f3n y algoritmos</p> </li> <li> <p>T\u00e9cnicas de descomposici\u00f3n y abstracci\u00f3n</p> </li> <li> <p>Ejercicios de reconocimiento de patrones</p> </li> </ul> <p>Lenguajes de programaci\u00f3n: Aprender a programar en lenguajes como Python, Java, C++ o JavaScript es una excelente manera de desarrollar el pensamiento computacional. Estos lenguajes te permiten escribir algoritmos y solucionar problemas de manera estructurada.</p> <p>**Scratch: Es un entorno de programaci\u00f3n visual desarrollado por el MIT especialmente dise\u00f1ado para principiantes. Con Scratch, puedes arrastrar y soltar bloques de c\u00f3digo para crear historias interactivas, juegos y animaciones, lo que te ayuda a comprender los conceptos b\u00e1sicos de la programaci\u00f3n.</p> <p>Pilas Bloques: Similar a Scratch, es un entorno de programaci\u00f3n visual basado en bloques. Puedes utilizarlo para crear programas y algoritmos de manera interactiva, arrastrando y soltando bloques para formar secuencias l\u00f3gicas.</p> <p>App Inventor: Desarrollado tambi\u00e9n por el MIT, App Inventor es una herramienta que te permite crear aplicaciones m\u00f3viles para dispositivos Android sin necesidad de tener conocimientos avanzados de programaci\u00f3n. Puedes dise\u00f1ar interfaces y programar la funcionalidad de tus aplicaciones utilizando bloques de c\u00f3digo.</p> <p>Minecraft: Este juego de construcci\u00f3n y aventura puede ser utilizado como herramienta para desarrollar el pensamiento computacional. Minecraft: Education Edition incluye caracter\u00edsticas espec\u00edficas para la programaci\u00f3n, donde puedes crear y ejecutar comandos y scripts para automatizar tareas dentro del juego.</p> <p>Code.org: Es una plataforma educativa que ofrece cursos gratuitos de programaci\u00f3n y recursos para ense\u00f1ar pensamiento computacional a trav\u00e9s de juegos y actividades interactivas. Code.org est\u00e1 dirigido tanto a estudiantes como a educadores.</p> <p>Rob\u00f3tica educativa: Utilizar kits de rob\u00f3tica como LEGO Mindstorms o Arduino puede ser una excelente manera de aplicar el pensamiento computacional en la pr\u00e1ctica. Estos kits te permiten construir robots y programar su comportamiento, fomentando el pensamiento l\u00f3gico y la resoluci\u00f3n de problemas.</p> <p>\u00a1Para recordar! que m\u00e1s all\u00e1 de las herramientas espec\u00edficas, desarrollar el pensamiento computacional implica adoptar una mentalidad anal\u00edtica y orientada a la resoluci\u00f3n de problemas. Es importante practicar la l\u00f3gica, el razonamiento algor\u00edtmico y la abstracci\u00f3n en diferentes contextos, tanto dentro como fuera de las herramientas mencionadas.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#ejercicios","title":"Ejercicios","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#resumen","title":"Resumen","text":"<ul> <li> <p>El pensamiento computacional no se limita a la programaci\u00f3n o a la resoluci\u00f3n de problemas relacionados con la inform\u00e1tica. Sus principios y enfoques se pueden aplicar en diversas disciplinas y contextos, como la resoluci\u00f3n de problemas matem\u00e1ticos, la toma de decisiones, la planificaci\u00f3n y organizaci\u00f3n de tareas, la resoluci\u00f3n de problemas cient\u00edficos y muchos otros \u00e1mbitos.</p> </li> <li> <p>Los principios del pensamiento computacional pueden ser ense\u00f1ados a personas de todas las edades.</p> </li> <li> <p>Su ense\u00f1anza se centra en desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico y puede ser integrada en diferentes materias y disciplinas.</p> </li> </ul> <p>Success</p> <p>Adem\u00e1s de ser una habilidad esencial en la programaci\u00f3n, el pensamiento computacional fomenta el desarrollo de habilidades de resoluci\u00f3n de problemas, el pensamiento cr\u00edtico, la creatividad, la capacidad de abstracci\u00f3n y la capacidad de colaboraci\u00f3n y trabajo en equipo.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/resumen-sobre-pensamiento-computacional/","title":"Pensamiento computacional: resumen","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/resumen-sobre-pensamiento-computacional/#resumen","title":"Resumen","text":"<ul> <li> <p>El pensamiento computacional no se limita a la programaci\u00f3n o a la resoluci\u00f3n de problemas relacionados con la inform\u00e1tica. Sus principios y enfoques se pueden aplicar en diversas disciplinas y contextos, como la resoluci\u00f3n de problemas matem\u00e1ticos, la toma de decisiones, la planificaci\u00f3n y organizaci\u00f3n de tareas, la resoluci\u00f3n de problemas cient\u00edficos y muchos otros \u00e1mbitos.</p> </li> <li> <p>Los principios del pensamiento computacional pueden ser ense\u00f1ados a personas de todas las edades.</p> </li> <li> <p>Su ense\u00f1anza se centra en desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico y puede ser integrada en diferentes materias y disciplinas.</p> </li> </ul> <p>Success</p> <p>Adem\u00e1s de ser una habilidad esencial en la programaci\u00f3n, el pensamiento computacional fomenta el desarrollo de habilidades de resoluci\u00f3n de problemas, el pensamiento cr\u00edtico, la creatividad, la capacidad de abstracci\u00f3n y la capacidad de colaboraci\u00f3n y trabajo en equipo.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/ejercitacion/ejercitacion-pensamiento-computacional/","title":"Pensamiento computacional: ejercitaci\u00f3n","text":"<p>Te proponemos algunos ejercicios para ejercitar el pensamiento computacional. Te ayudar\u00e1n a familiarizarte con los conceptos b\u00e1sicos de pensamiento computacional como secuencias, bucles, condicionales, algoritmos de b\u00fasqueda y ordenamiento. </p> <p>Resu\u00e9lvelos en tu carpeta digital, simplemente escribiendo el algoritmo paso a paso. M\u00e1s adelante, tambi\u00e9n, podr\u00e1s resolverlos utilizando un lenguaje de programaci\u00f3n.</p> <p>\u00a1Para recordar! que el pensamiento computacional implica analizar los problemas descomponi\u00e9ndolos en pasos m\u00e1s peque\u00f1os, identificar patrones, utilizar estructuras de datos adecuadas y emplear la l\u00f3gica para dise\u00f1ar algoritmos para resolverlos de manera eficiente. </p> <p>\u00a1Espero que estos ejercicios te ayuden a desarrollar y a fortalecer tus habilidades de pensamiento computacional y que el proceso de aprendizaje sea divertido! </p> <p>\u00a1Buena suerte!</p> <ol> <li> <p>Problema de secuencia l\u00f3gica: Completa la siguiente secuencia de n\u00fameros: 2, 4, 6, 8, , . \u00bfCu\u00e1les son los dos n\u00fameros que faltan en la secuencia? </p> </li> <li> <p>Problema de algoritmo de suma: Dise\u00f1a un algoritmo que tome dos n\u00fameros como entrada y devuelva la suma de esos dos n\u00fameros.</p> </li> <li> <p>Problema de condicional: Escribe un programa que solicite al usuario un n\u00famero e indique si ese n\u00famero es positivo, negativo o cero.</p> </li> <li> <p>Problema de bucle: Escribe un programa que imprima los primeros 10 n\u00fameros naturales en orden ascendente.</p> </li> <li> <p>Problema de dise\u00f1o de juego con decisiones: Dise\u00f1a un juego de \"Adivina el n\u00famero\" en el que la computadora elija un n\u00famero aleatorio y el jugador deba adivinarlo. La computadora deber\u00eda dar pistas de si el n\u00famero es mayor o menor que el n\u00famero propuesto por el jugador.</p> </li> <li> <p>Mejora el juego de \"Adivina el n\u00famero\" implementando el c\u00f3digo para mostrar cantidad de intentos realizados hasta adivinar.</p> </li> <li> <p>Problema de factorial: Escribe un programa que tome un n\u00famero como entrada y calcule su factorial utilizando un bucle. El factorial de un n\u00famero entero n se representa como n! y se calcula multiplicando todos los n\u00fameros desde 1 hasta n. Luego, muestra el resultado.</p> </li> <li> <p>Problema de recursividad: Escribe una funci\u00f3n recursiva para calcular el factorial de un n\u00famero dado. </p> </li> <li> <p>Problema de dise\u00f1o de algoritmo recursivo: Dise\u00f1a una funci\u00f3n recursiva que calcule la suma de los d\u00edgitos de un n\u00famero entero dado. Por ejemplo, si el n\u00famero es 123, la suma de los d\u00edgitos ser\u00eda 1 + 2 + 3 = 6.</p> </li> <li> <p>Problema de recursividad avanzada: Escribe una funci\u00f3n recursiva para calcular el en\u00e9simo t\u00e9rmino de la secuencia de Fibonacci. La secuencia de Fibonacci comienza con 0 y 1, y cada t\u00e9rmino posterior es la suma de los dos t\u00e9rminos anteriores.</p> </li> <li> <p>Problema de b\u00fasqueda: Imagina que tienes una lista de n\u00fameros: [4, 7, 2, 9, 1, 5]. \u00bfC\u00f3mo podr\u00edas encontrar el n\u00famero m\u00e1s grande en esa lista utilizando programaci\u00f3n?</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda: Dise\u00f1a un algoritmo que busque un n\u00famero espec\u00edfico en una lista de n\u00fameros y devuelva la posici\u00f3n en la que se encuentra.</p> </li> <li> <p>Problema de algoritmo de ordenamiento con selecci\u00f3n: Dise\u00f1a un algoritmo de ordenamiento por selecci\u00f3n que ordene una lista de n\u00fameros en orden ascendente.</p> </li> <li> <p>Problema de algoritmo de ordenamiento: Dise\u00f1a un algoritmo que ordene una lista de n\u00fameros en orden ascendente utilizando el m\u00e9todo \u201cburbuja\u201d.</p> </li> <li> <p>Problema de dise\u00f1o de algoritmo: Imagina que tienes una lista de n\u00fameros y quieres eliminar los duplicados de esa lista. \u00bfC\u00f3mo dise\u00f1ar\u00edas un algoritmo eficiente para lograrlo?</p> </li> <li> <p>Problema de algoritmo de suma acumulada: Escribe un programa que tome una lista de n\u00fameros como entrada y devuelva una nueva lista donde cada elemento sea la suma acumulada de los elementos anteriores. Por ejemplo, si la entrada es [1, 2, 3, 4], la salida deber\u00eda ser [1, 3, 6, 10]</p> </li> <li> <p>Problema de optimizaci\u00f3n con algoritmos voraces: Imagina que tienes un conjunto de monedas con diferentes denominaciones (por ejemplo, [1, 5, 10, 25]) y quieres determinar la forma m\u00e1s eficiente de dar cambio para una cantidad dada. \u00bfC\u00f3mo podr\u00edas dise\u00f1ar un algoritmo voraz para lograrlo?</p> </li> <li> <p>Problema de optimizaci\u00f3n: Tienes un conjunto de n\u00fameros enteros y deseas encontrar el par de n\u00fameros cuya diferencia sea la m\u00ednima. \u00bfC\u00f3mo dise\u00f1ar\u00edas un algoritmo eficiente para encontrar ese par de n\u00fameros?</p> </li> <li> <p>Problema de dise\u00f1o de algoritmo eficiente: Tienes una lista de n\u00fameros y deseas encontrar el par de n\u00fameros cuya suma sea igual a un valor objetivo dado. \u00bfC\u00f3mo dise\u00f1ar\u00edas un algoritmo eficiente para encontrar ese par de n\u00fameros?</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda en una cadena: Dise\u00f1a un algoritmo que busque una palabra en un texto y devuelva la cantidad de veces que aparece.</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda y reemplazo en una lista: Dise\u00f1a un algoritmo que tome una lista de palabras y una palabra objetivo, y reemplace todas las ocurrencias de la palabra objetivo por otra palabra dada.</p> </li> <li> <p>Problema de recursividad con cadenas: Escribe una funci\u00f3n recursiva para invertir una cadena. Por ejemplo, si se pasa la cadena \"Hola\", la funci\u00f3n deber\u00eda devolver \"aloH\".</p> </li> <li> <p>Problema de algoritmo de clasificaci\u00f3n: Dada una lista de palabras: [\"perro\", \"gato\", \"elefante\", \"rat\u00f3n\", \"mono\"], \u00bfc\u00f3mo podr\u00edas ordenar las palabras en orden alfab\u00e9tico utilizando alg\u00fan algoritmo de clasificaci\u00f3n?</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda y reemplazo: Dada una cadena de caracteresy una palabra objetivo, escribe un algoritmo que busque todas las ocurrencias de la palabra en la cadena y las reemplace por otra palabra dada.</p> </li> </ol>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/resumen-sobre-representacion-de-datos/","title":"Representaci\u00f3n de datos: resumen","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/resumen-sobre-representacion-de-datos/#resumen","title":"Resumen","text":"<p>El sistema unario es un sistema de numeraci\u00f3n que emplea un \u00fanico s\u00edmbolo, como una barra o un punto, para representar el valor \u201cuno\u201d. Los dem\u00e1s n\u00fameros se expresan mediante la repetici\u00f3n de este s\u00edmbolo.</p> <p>El sistema decimal es un sistema de numeraci\u00f3n que utiliza diez s\u00edmbolos distintos, conocidos como d\u00edgitos, para representar cualquier valor. Estos d\u00edgitos son el 0, 1, 2, 3, 4, 5, 6, 7, 8 y 9. </p> <p>Las computadoras utilizan el sistema binario, con solo dos d\u00edgitos, 0 (apagado) y 1 (encendido). Cada d\u00edgito binario se llama bit (binary digit) y es la m\u00ednima unidad de informaci\u00f3n.</p> <p>Adem\u00e1s, generalmente usan ocho bits para representar un n\u00famero. Por ejemplo, el c\u00f3digo binario 00000101 es el n\u00famero 5 en decimal. Estos ocho bits se denominan byte, conocido como la m\u00ednima unidad de palabra.</p> <p>As\u00ed como los n\u00fameros son patrones binarios de unos y ceros, \u00a1las letras tambi\u00e9n se representan usando unos y ceros!</p> <p>El mapeo est\u00e1ndar, llamado c\u00f3digo ASCII o est\u00e1ndar ASCII, se cre\u00f3 para asignar caracteres espec\u00edficos (letras may\u00fasculas y min\u00fasculas, n\u00fameros, puntuaci\u00f3n y s\u00edmbolos) a n\u00fameros espec\u00edficos. Con 8 bits, o 1 byte, podemos tener 28 = 256 valores diferentes (desde 0 hasta 255, el valor m\u00e1s alto que se puede formar con 8 bits).</p> <p>Sin embargo, dado que no hab\u00eda suficientes d\u00edgitos en binario para representar todos los diversos caracteres que pod\u00edan representar los humanos, el est\u00e1ndar Unicode ampli\u00f3 la cantidad de bits que las computadoras pueden transmitir y comprender.</p> <p>Cuando recibimos un emoji , nuestra computadora en realidad solo recibe un n\u00famero en binario que luego asigna a la imagen del emoji seg\u00fan el est\u00e1ndar Unicode.</p> <p>Con bits, tambi\u00e9n podemos asignar n\u00fameros a colores. Hay muchos sistemas diferentes para representar los colores, pero el sistema m\u00e1s conocido es RGB, que representa la cantidad de rojo, verde y azul que componen a un color espec\u00edfico.</p> <p>Las im\u00e1genes son simplemente colecciones de valores RGB.</p> <p>Los videos son secuencias de muchas im\u00e1genes, que cambian varias veces por segundo para darnos la apariencia de movimiento.</p> <p>La m\u00fasica tambi\u00e9n se puede representar con bits. MIDI es uno de esos formatos que representa la m\u00fasica con n\u00fameros para cada una de las notas y su duraci\u00f3n y volumen.</p> <p>Todas estas ideas son solo ceros y unos, interpretadas y utilizadas por el software que hemos escrito para interpretarlas de la manera que queremos.</p> <p>Hay otros formatos, algunos de los cuales usan compresi\u00f3n (formas matem\u00e1ticas de representar algunos datos con menos bits), o algunos que pueden ser contenedores que almacenan varios tipos de dato juntos.</p> <p>Y dado que hay muchas empresas y grupos que desarrollan software, existen muchos formatos de archivo diferentes, cada uno con sus propias formas de representar los datos. Pero tambi\u00e9n hay organizaciones que trabajan sobre cierto consenso, como la encargada de mantener el est\u00e1ndar Unicode.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/","title":"Sistemas de representaci\u00f3n","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-numeros-sistema-unario","title":"Representando n\u00fameros: sistema unario","text":"<p>Veamos un ejemplo donde necesitemos tomar asistencia para una clase. Para contar el n\u00famero de alumnos, podr\u00edamos comenzar usando los dedos, uno a la vez. Este sistema se llama sistema unario.</p> <p>El sistema unario es un sistema de numeraci\u00f3n que emplea un \u00fanico s\u00edmbolo, como una barra o un punto, para representar el valor \u201cuno\u201d. Los dem\u00e1s n\u00fameros se expresan mediante la repetici\u00f3n de este s\u00edmbolo.</p> <p>El sistema unario es considerado uno de los sistemas de numeraci\u00f3n m\u00e1s simples, pero tambi\u00e9n el menos eficiente en t\u00e9rminos de representaci\u00f3n compacta de n\u00fameros. Esto se debe a que para representar n\u00fameros m\u00e1s grandes se requiere una cantidad cada vez mayor de s\u00edmbolos repetidos.</p> <p>Por ejemplo, para representar el n\u00famero tres en el sistema unario, se utilizar\u00edan tres repeticiones del s\u00edmbolo elegido, mientras que para el n\u00famero diez se requerir\u00edan diez repeticiones. </p> <pre><code>El n\u00famero 1 se representa con un \u00fanico s\u00edmbolo \"|\"\nEl n\u00famero 2 se representa con dos s\u00edmbolos \"||\"\nEl n\u00famero 3 se representa con tres s\u00edmbolos \"|||\"\nEl n\u00famero 4 se representa con cuatro s\u00edmbolos \"||||\"\nEl n\u00famero 5 se representa con cinco s\u00edmbolos \"|||||\"\n</code></pre> <p>Cada s\u00edmbolo adicional representa un incremento de uno en el valor num\u00e9rico. As\u00ed, el sistema unario puede volverse engorroso y poco pr\u00e1ctico para representar n\u00fameros grandes. Por lo tanto, este sistema solo se utiliza en algunas aplicaciones espec\u00edficas, como en ciertas \u00e1reas de la inform\u00e1tica te\u00f3rica y en la l\u00f3gica matem\u00e1tica, donde se utiliza para simplificar algunos problemas y demostraciones. Sin embargo, en la vida cotidiana y en la mayor\u00eda de los contextos pr\u00e1cticos, se utilizan otros sistemas de numeraci\u00f3n m\u00e1s eficientes, como el sistema decimal o el sistema binario.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-numeros-sistema-decimal","title":"Representando n\u00fameros: sistema decimal","text":"<p>Para representar n\u00fameros grandes, es preciso utilizar un sistema que posea una mayor cantidad de s\u00edmbolos distintos que representen diferentes valores de manera m\u00e1s simple y pr\u00e1ctica. </p> <p>El sistema decimal es un sistema de numeraci\u00f3n que utiliza diez s\u00edmbolos distintos, conocidos como d\u00edgitos, para representar cualquier valor. Estos d\u00edgitos son el 0, 1, 2, 3, 4, 5, 6, 7, 8 y 9. </p> <p>Este sistema se basa en el valor posicional, lo que significa que el valor de cada d\u00edgito depende de su posici\u00f3n en el n\u00famero. Utilizando lugares de valor creciente de derecha a izquierda, cada lugar tiene un valor diez veces mayor que el lugar a su derecha. Para representar cantidades mayores que nueve, se utilizan m\u00faltiplos de diez. Entonces, decimos que el n\u00famero 10 se compone de un 1 en el lugar de las decenas y un 0 en el lugar de las unidades; el n\u00famero 100 se compone de un 1 en el lugar de las centenas y ceros en los lugares de las decenas y las unidades, y as\u00ed sucesivamente. </p> <p>Por ejemplo, sabemos que el siguiente n\u00famero en decimal representa ciento veintitr\u00e9s:</p> <pre><code>123\n</code></pre> <p>Cada lugar de un d\u00edgito representa una potencia de diez, ya que hay diez d\u00edgitos posibles para cada lugar. El lugar m\u00e1s a la derecha es para 10<sup>0</sup>, el del medio 10<sup>1</sup> y el lugar m\u00e1s a la izquierda 10<sup>2</sup>:</p> <pre><code> 10^2^ 10^1^ 10^0^ \n 1     2     3 \n</code></pre> <p>El 1 est\u00e1 en el lugar de las centenas, el 2 est\u00e1 en el lugar de las decenas y 3 est\u00e1 en el lugar de las unidades. As\u00ed 123 es 10<sup>2</sup> x 1 + 10<sup>1</sup> x 2 + 10<sup>0</sup> x 3 = 100 \u00d7 1 + 10 \u00d7 2 + 1 \u00d7 3 = 100 + 20 + 3 = 123</p> <p>El sistema decimal es ampliamente utilizado en todo el mundo para realizar operaciones matem\u00e1ticas y expresar cantidades en la vida cotidiana.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-numeros-sistema-binario","title":"Representando n\u00fameros: sistema binario","text":"<p>Las computadoras funcionan con electricidad. Pueden encenderse o apagarse. Con este concepto, dentro de las computadoras modernas hay miles de millones de peque\u00f1os interruptores llamados transistores que pueden encenderse o apagarse como si fueran \u201clamparitas\u201d, para representar diferentes valores. Dado que una \u201clamparita\u201d no puede estar m\u00e1s encendida ni menos apagada, el sistema de numeraci\u00f3n de las computadoras solo puede utilizar dos s\u00edmbolos distintos para representar cualquier valor. </p> <p>Info</p> <p>Definido as\u00ed, las computadoras utilizan el sistema binario, con solo dos d\u00edgitos, 0 (apagado) y 1 (encendido).  Cada d\u00edgito binario se llama bit (binary digit) y es la m\u00ednima unidad de informaci\u00f3n.</p> <p>El patr\u00f3n para contar en binario con m\u00faltiples bits es el mismo que el patr\u00f3n en decimal con m\u00faltiples d\u00edgitos.  Por ejemplo, si imaginas usar una sola lamparita, esta puede contar de cero (apagada) a uno (encendida). Sin embargo, si tuvieras tres lamparitas, \u00a1habr\u00eda m\u00e1s opciones de combinaci\u00f3n! </p> <p>Entonces, usando tres lamparitas y si pensamos en sistema binario, lo siguiente representar\u00eda el 0 (cero):</p> <pre><code>0 0 **0**\n</code></pre> <p>Del mismo modo, lo siguiente representar\u00eda el 1 (uno):</p> <pre><code>0 0 **1**\n</code></pre> <p>No necesitamos los ceros iniciales, pero los incluiremos para ver los patrones m\u00e1s f\u00e1cilmente.</p> <p>Por esta l\u00f3gica, como no hay un d\u00edgito para el 2, necesitaremos cambiar otro d\u00edgito del patr\u00f3n para representar el siguiente n\u00famero:</p> <pre><code>0 **1** 0\n</code></pre> <p>Extendiendo esta l\u00f3gica a\u00fan m\u00e1s, \u201dagregamos 1\u201d para representar el 3:</p> <pre><code>0 1 **1**\n</code></pre> <p>Siguiendo con el patr\u00f3n, el 4 se representar\u00eda como:</p> <pre><code>**1** 0 0\n</code></pre> <p>El 5 se representar\u00eda como:</p> <pre><code>1 0 **1**\n</code></pre> <p>El 6 se representar\u00eda como:</p> <pre><code>1 **1** 0 \n</code></pre> <p>\u00a1Podr\u00edamos, de hecho, usando solo tres lamparitas contar hasta siete!</p> <pre><code>1 1 **1**\n</code></pre> <p>\u00bfC\u00f3mo puede ser que el n\u00famero binario 111 represente el n\u00famero decimal 7, o viceversa? \u00bfC\u00f3mo llegamos a esta conclusi\u00f3n?</p> <p>Dijimos que en el sistema decimal, cada lugar de un d\u00edgito representa una potencia de diez, ya que hay diez d\u00edgitos posibles para cada lugar. Esto se denomina base-10. El lugar m\u00e1s a la derecha es para 10<sup>0</sup>, el del medio 10<sup>1</sup> y el lugar m\u00e1s a la izquierda 10<sup>2</sup>:</p> <pre><code> 102 101 100 \n 1   2   3 \n</code></pre> <p>Por otro lado, en el sistema binario, cada lugar de un d\u00edgito representa una potencia de 2, ya que hay dos d\u00edgitos posibles para cada valor posicional. Esto se denomina base-2. El lugar m\u00e1s a la derecha es para 2<sup>0</sup>, el del medio 2<sup>1</sup> y el lugar m\u00e1s a la izquierda 2<sup>2</sup>:</p> <pre><code> 22 21 20 \n 4  2  1 \n</code></pre> <p>As\u00ed el 000 binario es 22 x 0 + 21 x 0 + 20 x 0 = 4 \u00d7 0 + 2 \u00d7 0 + 1 \u00d7 0 = 0 + 0 + 0 = 0 decimal Y el 111 binario es 22 x 1 + 21 x 1 + 20 x 1 = 4 \u00d7 1 + 2 \u00d7 1 + 1 \u00d7 1 = 4 + 2 + 1 = 7 decimal</p> <p>Por lo tanto, se podr\u00eda decir que se requieren tres bits (el lugar del cuatro, el lugar del dos y el lugar del uno) para representar un n\u00famero tan alto como siete. Para contar m\u00e1s de 7, necesitar\u00edamos otro bit a la izquierda para representar un valor entre el 8 y el 15. Y as\u00ed sucesivamente, para valores m\u00e1s altos.</p> <p>Info</p> <p>Las computadoras generalmente usan ocho bits para representar un n\u00famero. Por ejemplo, el c\u00f3digo o patr\u00f3n binario 00000101 es el n\u00famero 5 en decimal.  Estos ocho bits se denominan byte, conocido como la m\u00ednima unidad de palabra.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representanto-texto-codigo-ascii","title":"Representanto texto: c\u00f3digo ASCII","text":"<p>As\u00ed como los n\u00fameros son patrones binarios de unos y ceros, \u00a1las letras tambi\u00e9n se representan usando unos y ceros!</p> <p>Para representar letras, todo lo que tenemos que hacer es decidir c\u00f3mo se asignan los n\u00fameros a las letras. </p> <p>Dado que existe una superposici\u00f3n entre los unos y los ceros que representan n\u00fameros y letras, algunas personas, hace muchos a\u00f1os, decidieron colectivamente un mapeo est\u00e1ndar de n\u00fameros a letras. La letra A, por ejemplo, es el n\u00famero 65, la B es el 66, y as\u00ed sucesivamente. En binario, la letra A es el c\u00f3digo o patr\u00f3n 01000001. Al usar este c\u00f3digo en un contexto, como el formato de archivo, diferentes programas pueden interpretar y mostrar los mismos bits como n\u00fameros o texto.</p> <p>Este mapeo est\u00e1ndar, llamado c\u00f3digo ASCII o est\u00e1ndar ASCII, se cre\u00f3 para asignar caracteres espec\u00edficos (letras may\u00fasculas y min\u00fasculas, n\u00fameros, puntuaci\u00f3n y s\u00edmbolos) a n\u00fameros espec\u00edficos.</p> <p></p> <p>\u00a1Gracias a Dios por est\u00e1ndares como ASCII que nos permiten estar de acuerdo con estos valores!</p> <p>Cuando recibimos un mensaje de texto, mape\u00e1ndolo en ASCII, obtenemos 3 patrones de bits que tienen los valores decimales 72, 73 y 33. Esos patrones se asignar\u00edan a los caracteres HI! y las secuencias de bits se ver\u00edan como 01001000, 01001001 y 00100001, 8 bits (1 byte) para cada car\u00e1cter:</p> <pre><code> H         I         !\n 72        73        33\n 01001000  01001001  00100001\n</code></pre> <p>Info</p> <p>Con 8 bits, o 1 byte, podemos tener 28 = 256 valores diferentes (desde 0 hasta 255, el valor m\u00e1s alto que se puede formar con 8 bits).</p> <p>Y es posible que ya estemos familiarizados con el uso de bytes como unidad de medida de datos, como en megabytes o gigabytes, para millones o miles de millones de bytes.</p> <p>Otros caracteres, como letras con acentos y s\u00edmbolos en otros idiomas, forman parte de un est\u00e1ndar llamado Unicode, que utiliza m\u00e1s bits que ASCII para acomodar todos estos caracteres.</p> <p>Puedes conocer m\u00e1s del c\u00f3digo de caracteres ASCII haciendo clic aqu\u00ed</p> <p>Puedes conocer m\u00e1s del est\u00e1ndar de codificaci\u00f3n UNICODE haciendo clic aqu\u00ed</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-emojis","title":"Representando emojis","text":"<p>A medida que pasa el tiempo, hay m\u00e1s y m\u00e1s formas de comunicarse a trav\u00e9s de mensajes de texto.</p> <p>Dado que no hab\u00eda suficientes d\u00edgitos en binario para representar todos los diversos caracteres que pod\u00edan representar los humanos, el est\u00e1ndar Unicode ampli\u00f3 la cantidad de bits que las computadoras pueden transmitir y comprender.</p> <p>Cuando recibimos un emoji , nuestra computadora en realidad solo recibe un n\u00famero en binario que luego asigna a la imagen del emoji seg\u00fan el est\u00e1ndar Unicode.</p> <p>Por ejemplo, el emoji de \u201ccara con mascarilla m\u00e9dica\u201d tiene solo cuatro bytes:</p> <pre><code>11110000 10011111 10011000 10110111\n</code></pre> <p></p> <p></p> <p>Hay emojis que probablemente uses todos los d\u00edas, como los que est\u00e1n aqu\u00ed representados.</p> <p>Los inform\u00e1ticos se enfrentaron a un desaf\u00edo al querer asignar varios tonos de piel a cada emoji para permitir que la comunicaci\u00f3n se personalizara a\u00fan m\u00e1s. En este caso, los creadores y colaboradores de los emojis decidieron que las partes iniciales ser\u00edan la estructura del emoji en s\u00ed, seguida del tono de la piel.</p> <p>Cada vez se agregan m\u00e1s funciones al est\u00e1ndar Unicode para representar m\u00e1s caracteres y emojis.</p> <p>Y resulta que las diferentes empresas que crean software para sus dispositivos tendr\u00e1n im\u00e1genes ligeramente diferentes que representan cada emoji, ya que solo se han estandarizado las descripciones.</p> <p>Puedes conocer m\u00e1s de los Emoji haciendo clic aqu\u00ed</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-imagenes-videos-y-sonidos","title":"Representando im\u00e1genes, videos y sonidos","text":"<p>Con bits, tambi\u00e9n podemos asignar n\u00fameros a colores. Hay muchos sistemas diferentes para representar los colores, pero el sistema m\u00e1s conocido es RGB, que representa la cantidad de rojo, verde y azul que componen a un color espec\u00edfico:</p> <p></p> <p>Por ejemplo, nuestro patr\u00f3n de bits anterior, 72, 73 y 33, que dec\u00eda HI! a trav\u00e9s de texto, indicar\u00eda la cantidad de rojo (72), verde (73) y azul (33) en un color. Y nuestros programas sabr\u00edan que esos bits se asignan a un color (lo interpretar\u00edan como un tono claro de amarillo) si abri\u00e9ramos un archivo de imagen, en lugar de recibirlos en un mensaje de texto:</p> <p></p> <p>Los puntos en nuestras pantallas se denominan p\u00edxeles, y las im\u00e1genes tambi\u00e9n se componen de muchos miles o millones de esos p\u00edxeles. </p> <p>Entonces, al usar tres bytes para representar el color de cada p\u00edxel, podemos crear im\u00e1genes. </p> <p>Podemos ver p\u00edxeles en un emoji si hacemos zoom, por ejemplo:</p> <p></p> <ul> <li> <p>Las im\u00e1genes son simplemente colecciones de valores RGB.</p> </li> <li> <p>Los videos son secuencias de muchas im\u00e1genes, que cambian varias veces por segundo para darnos la apariencia de movimiento, como lo har\u00eda un flipbook. Puedes ver un ejemplo en YouTube haciendo clic aqu\u00ed</p> </li> <li> <p>La m\u00fasica tambi\u00e9n se puede representar con bits. MIDI es uno de esos formatos que representa la m\u00fasica con n\u00fameros para cada una de las notas y su duraci\u00f3n y volumen. Puedes saber m\u00e1s sobre el est\u00e1ndar MIDI hacindo clic aqu\u00ed</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/","title":"Lenguajes de programaci\u00f3n","text":""},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#introduccion","title":"Introducci\u00f3n","text":"<p>Un lenguaje de programaci\u00f3n es un conjunto de reglas y s\u00edmbolos utilizados para escribir programas de computadora.</p> <p>Los programas escritos en un lenguaje de programaci\u00f3n son instrucciones que le dicen a una computadora qu\u00e9 hacer.</p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis y sem\u00e1ntica, que determinan c\u00f3mo se deben escribir y entender esas instrucciones.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#que-es-un-lenguaje-de-programacion","title":"\u00bfQu\u00e9 es un lenguaje de programaci\u00f3n?","text":"<p>Definici\u00f3n</p> <p>Un lenguaje de programaci\u00f3n es un lenguaje formal, artificial, formado por un conjunto de reglas gramaticales  y s\u00edmbolos que le proporcionan al programador las herramientas necesarias para poder escribir una serie de instrucciones de manera ordenada, denominado programa inform\u00e1tico, a partir de un algoritmo, con el fin de controlar el comportamiento f\u00edsico y/o l\u00f3gico de un sistema inform\u00e1tico, de manera que este pueda resolver un problema de manera eficiente, devolviendo resultados procesados a partir de una serie de datos de entrada.</p> <p>Los programas escritos en un lenguaje de programaci\u00f3n son instrucciones que le dicen a una computadora qu\u00e9 hacer. </p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis y sem\u00e1ntica, que determinan c\u00f3mo se deben escribir esas instrucciones para que la computadora pueda ejecutarlas correctamente.</p> <p>Cada lenguaje de programaci\u00f3n tiene sus propias caracter\u00edsticas y prop\u00f3sitos espec\u00edficos. Algunos lenguajes est\u00e1n especializados en ciertos dominios, como el desarrollo web, el an\u00e1lisis de datos, la inteligencia artificial o la programaci\u00f3n de sistemas. Otros lenguajes son m\u00e1s generales y se pueden utilizar en una amplia gama de aplicaciones.</p> <p>Cada lenguaje tiene su propia documentaci\u00f3n, tutoriales y recursos disponibles para ayudarte a profundizar en su estudio. </p> <p>Info</p> <p>recuerda que la pr\u00e1ctica es fundamental para mejorar tus habilidades de programaci\u00f3n.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#teoria-de-los-lenguajes-de-programacion","title":"Teor\u00eda de los lenguajes de programaci\u00f3n","text":"<p>La teor\u00eda de los lenguajes de programaci\u00f3n es un campo de estudio que se enfoca en el dise\u00f1o, la implementaci\u00f3n, la sem\u00e1ntica y el an\u00e1lisis de los lenguajes de programaci\u00f3n. A trav\u00e9s de la teor\u00eda de los lenguajes de programaci\u00f3n, se busca comprender c\u00f3mo los lenguajes de programaci\u00f3n funcionan y c\u00f3mo se pueden desarrollar de manera efectiva.</p> <p>Algunos conceptos clave dentro de la teor\u00eda de los lenguajes de programaci\u00f3n son:</p> Sintaxis tipos de dato Teor\u00eda de la complejidad Sem\u00e1ntica Compiladores e int\u00e9rpretes Teor\u00eda de la computabilidad An\u00e1lisis l\u00e9xico y an\u00e1lisis sint\u00e1ctico <p>La teor\u00eda de los lenguajes de programaci\u00f3n es fundamental para comprender y desarrollar lenguajes de programaci\u00f3n, dise\u00f1ar compiladores e int\u00e9rpretes, y analizar y optimizar programas. </p> <p>Ayuda a los programadores a comprender los fundamentos te\u00f3ricos detr\u00e1s de los lenguajes que utilizan y proporciona herramientas para abordar problemas de programaci\u00f3n de manera m\u00e1s efectiva.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#categorias-de-los-lenguajes-de-programacion","title":"Categor\u00edas de los lenguajes de programaci\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n se pueden clasificar en tres categor\u00edas principales:</p> <ul> <li> <p>Lenguajes de bajo nivel: estos lenguajes est\u00e1n m\u00e1s cerca del lenguaje de la m\u00e1quina y proporcionan un mayor control directo sobre el hardware de la computadora. Ejemplos de lenguajes de programaci\u00f3n de bajo nivel incluyen el lenguaje ensamblador y el lenguaje de m\u00e1quina. Estos lenguajes suelen ser m\u00e1s dif\u00edciles de aprender y de utilizar, pero ofrecen un mayor rendimiento y eficiencia.</p> </li> <li> <p>Lenguajes de alto nivel: estos lenguajes est\u00e1n m\u00e1s alejados del lenguaje de la m\u00e1quina y se centran en la facilidad de uso y la legibilidad del c\u00f3digo. Ejemplos de lenguajes de programaci\u00f3n de alto nivel populares incluyen Python, Java, JavaScript, C# y muchos otros. Estos lenguajes suelen ser m\u00e1s f\u00e1ciles de aprender y de utilizar, ya que est\u00e1n dise\u00f1ados para ser m\u00e1s cercanos al lenguaje humano.</p> </li> <li> <p>Lenguajes de nivel intermedio: el t\u00e9rmino \"lenguaje de nivel intermedio\" a menudo se utiliza para describir lenguajes que se encuentran entre los lenguajes de alto nivel y los lenguajes de bajo nivel. Estos lenguajes combinan caracter\u00edsticas y elementos de ambos extremos del espectro.</p> </li> </ul> <p>Atenci\u00f3n</p> <p>Es importante tener en cuenta que el nivel de un lenguaje no es una clasificaci\u00f3n absoluta y puede variar dependiendo del contexto y de las caracter\u00edsticas espec\u00edficas del lenguaje.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#lenguajes-de-bajo-nivel","title":"Lenguajes de bajo nivel","text":"<p>Estos lenguajes suelen tener una correspondencia directa con las instrucciones del procesador y no proporcionan abstracciones de alto nivel.</p> <ul> <li> <p>Lenguaje m\u00e1quina: es el conjunto de instrucciones directamente entendibles y ejecutables por el procesador de una computadora. Estas instrucciones est\u00e1n escritas en c\u00f3digo binario (0 y 1) y representan operaciones b\u00e1sicas a nivel de hardware, como cargar datos en registros o realizar operaciones aritm\u00e9ticas. Aunque el lenguaje m\u00e1quina es el lenguaje de m\u00e1s bajo nivel, no es pr\u00e1ctico para la programaci\u00f3n manual debido a su complejidad y falta de legibilidad.</p> </li> <li> <p>Lenguaje ensamblador (assembler): Es el lenguaje de m\u00e1s cercano al lenguaje m\u00e1quina. Utiliza mnem\u00f3nicos para representar las instrucciones que entiende directamente el procesador y realizar optimizaciones a nivel de bit. Es espec\u00edfico de la arquitectura del procesador y se utiliza para programaci\u00f3n de bajo nivel, optimizaci\u00f3n y desarrollo de controladores de hardware. Cada instrucci\u00f3n ensambladora se traduce directamente a una instrucci\u00f3n de m\u00e1quina. </p> </li> <li> <p>Lenguaje C: aunque el lenguaje C es considerado un lenguaje de nivel intermedio, tambi\u00e9n puede ser considerado un lenguaje de bajo nivel en comparaci\u00f3n con lenguajes de m\u00e1s alto nivel. C proporciona un control m\u00e1s cercano al hardware y permite la manipulaci\u00f3n directa de memoria y punteros.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#lenguajes-de-alto-nivel","title":"Lenguajes de alto nivel","text":"<p>Estos lenguajes ofrecen un alto nivel de abstracci\u00f3n y se alejan de los detalles espec\u00edficos del hardware de la computadora. Est\u00e1n dise\u00f1ados para facilitar la programaci\u00f3n y permitir un enfoque m\u00e1s orientado al problema en lugar de preocuparse por la implementaci\u00f3n a nivel de m\u00e1quina.</p> <ul> <li> <p>Python: es un lenguaje ampliamente utilizado que se destaca por su sintaxis clara y legible, lo que lo hace muy accesible para principiantes. Python ofrece una amplia gama de bibliotecas y marcos de trabajo que facilitan el desarrollo r\u00e1pido de aplicaciones.</p> </li> <li> <p>Java: es un lenguaje orientado a objetos. Se enfoca en la portabilidad y la capacidad de ejecutar programas en diferentes plataformas sin tener que preocuparse por los detalles de bajo nivel. Se utiliza ampliamente en el desarrollo de aplicaciones empresariales y en el desarrollo de aplicaciones para dispositivos m\u00f3viles.</p> </li> <li> <p>C#: pronunciado \"C sharp\u201d, es un lenguaje de programaci\u00f3n orientado a objetos que se utiliza com\u00fanmente en el desarrollo de aplicaciones para Windows y el entorno .NET.</p> </li> <li> <p>JavaScript: es un lenguaje de programaci\u00f3n de alto nivel utilizado principalmente para el desarrollo Web. JavaScript permite la interactividad en los navegadores y se ha convertido en un lenguaje fundamental para el desarrollo Web front-end.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#lenguajes-de-nivel-intermedio","title":"Lenguajes de nivel intermedio","text":"<p>Estos lenguajes combinan caracter\u00edsticas y elementos de los lenguajes de bajo y de alto nivel, ofreciendo, generalmente, un equilibrio entre el control de bajo nivel y las abstracciones de alto nivel.</p> <ul> <li> <p>C: El lenguaje C se considera a menudo un lenguaje de nivel intermedio, ya que ofrece un mayor control de bajo nivel en comparaci\u00f3n con los lenguajes de alto nivel, como Python o Java. C permite la manipulaci\u00f3n directa de memoria y el uso de punteros, lo que lo convierte en una opci\u00f3n popular para tareas que requieren un control cercano al hardware.</p> </li> <li> <p>C++: C++ es una extensi\u00f3n del lenguaje C que agrega caracter\u00edsticas de programaci\u00f3n orientada a objetos. Si bien C++ ofrece un nivel de abstracci\u00f3n m\u00e1s alto que el lenguaje C, tambi\u00e9n permite el control de bajo nivel y la manipulaci\u00f3n directa de memoria y punteros, consider\u00e1ndolo un lenguaje de nivel intermedio.</p> </li> <li> <p>Pascal: Pascal es un lenguaje de programaci\u00f3n estructurado que proporciona un equilibrio entre la facilidad de uso y el control de bajo nivel. Fue dise\u00f1ado para fomentar la claridad y la legibilidad del c\u00f3digo, lo que lo hace especialmente popular en entornos educativos.</p> </li> <li> <p>Ada: Ada es un lenguaje de programaci\u00f3n de prop\u00f3sito general que se utiliza en aplicaciones cr\u00edticas, como sistemas embebidos y aeroespaciales. Combina caracter\u00edsticas de alto nivel y control de bajo nivel para garantizar la seguridad y la fiabilidad de los sistemas.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#cada-lenguaje-un-lenguaje","title":"Cada lenguaje, un lenguaje","text":"<p>Es importante comprender que cada lenguaje posee su propia sintaxis. En algunos casos, esta sentencia puede ser id\u00e9ntica, en otros casos puede variar levemente, y en otros casos ser completamente diferente:</p> <p>C++<pre><code>std::cout &lt;&lt; \"Hola Mundo!\" &lt;&lt; std::endl;\n</code></pre> Pyton<pre><code>print(\"Hola Mundo!\")\n</code></pre> Java<pre><code>System.out.println(\"Hola Mundo!\");\n</code></pre> PHP<pre><code>echo \"Hola Mundo!\";\n</code></pre> C#<pre><code>Console.WriteLine(\"Hola Mundo!\");\n</code></pre> JavaScript<pre><code>console.log(\"Hola Mundo!\");\n</code></pre> Ruby<pre><code>puts \"Hola Mundo!\u201d\n</code></pre> Go<pre><code>fmt.Println(\"Hola Mundo!\")\n</code></pre> Swift<pre><code>print(\"Hola Mundo!\")\n</code></pre> Perl<pre><code>print \"Hola Mundo!\\n\";\n</code></pre> R<pre><code>print(\"Hola Mundo!\")\n</code></pre> MATLAB<pre><code>disp('Hola Mundo!')\n</code></pre></p> <p>Estos son solo algunos ejemplos adicionales. Hay una amplia variedad de lenguajes de programaci\u00f3n, cada uno con su propia sintaxis para imprimir \"Hola Mundo!\".</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#tipos-de-programas-segun-el-lenguaje-de-programacion","title":"Tipos de programas seg\u00fan el lenguaje de programaci\u00f3n","text":"<p>!!! warning \"secci\u00f3n en desarrollo</p> <p>Cada programa tiene un formato ejecutable que la computadora puede utilizar directamente para ejecutar las instrucciones. El mismo programa en su formato de c\u00f3digo fuente legible para humanos, del cual se derivan los programas ejecutables (por ejemplo, compilados), le permite a un programador estudiar y desarrollar sus algoritmos. </p> <p>Una colecci\u00f3n de programas de computadora y datos relacionados se conoce como software.</p> <ul> <li> <p>PROGRAMA FUENTE: tambi\u00e9n llamado c\u00f3digo fuente, es el conjunto de l\u00edneas de texto con los pasos que debe seguir la computadora para realizar una tarea. Este c\u00f3digo se escribe en un lenguaje de programaci\u00f3n que sigue uno de los paradigmas de programaci\u00f3n y que puede ser convertido en un archivo ejecutable (usualmente llamado un programa ejecutable) por un compilador y m\u00e1s tarde ejecutado por una computadora.</p> </li> <li> <p>PROGRAMA OBJETO: Programa escrito en lenguaje de m\u00e1quina. Es el que ejecuta la computadora.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#traductores-de-lenguaje-compiladores-vs-interpretes","title":"Traductores de lenguaje: compiladores vs. int\u00e9rpretes","text":"<p>Un compilador y un int\u00e9rprete son dos tipos de software usados para ejecutar programas de computadora. Traducen programas fuente a lenguaje de m\u00e1quina.</p> <p>Un compilador traduce todo el c\u00f3digo fuente de un programa en un lenguaje de programaci\u00f3n determinado a un lenguaje de bajo nivel, generalmente en forma de c\u00f3digo m\u00e1quina, que puede ser ejecutado directamente por el hardware de la computadora. El proceso de compilaci\u00f3n se realiza antes de la ejecuci\u00f3n y genera un archivo ejecutable independiente. </p> <p>El c\u00f3digo fuente se compila una sola vez, lo que puede llevar m\u00e1s tiempo, pero el programa compilado se ejecuta de manera m\u00e1s eficiente. Los ejemplos de compiladores incluyen GCC para C/C++ y Java JDK para Java.</p> <p>Por otro lado, un int\u00e9rprete lee y ejecuta el c\u00f3digo fuente de un programa l\u00ednea por l\u00ednea durante la ejecuci\u00f3n. No se genera un archivo ejecutable independiente antes de la ejecuci\u00f3n. El int\u00e9rprete traduce y ejecuta cada instrucci\u00f3n a medida que se encuentra en el c\u00f3digo fuente. Esto permite una ejecuci\u00f3n m\u00e1s r\u00e1pida del programa, pero puede llevar m\u00e1s tiempo en general, ya que la traducci\u00f3n y ejecuci\u00f3n ocurren repetidamente durante la ejecuci\u00f3n del programa. Los ejemplos de int\u00e9rpretes incluyen Python, JavaScript y Ruby.</p> <p>\u00a1Para recordar!</p> <p>En resumen, un compilador traduce el c\u00f3digo fuente a un lenguaje de bajo nivel antes de la ejecuci\u00f3n, lo que resulta en una ejecuci\u00f3n m\u00e1s eficiente, pero lleva m\u00e1s tiempo en la fase de compilaci\u00f3n. Un int\u00e9rprete lee y ejecuta el c\u00f3digo fuente l\u00ednea por l\u00ednea durante la ejecuci\u00f3n, lo que permite una ejecuci\u00f3n m\u00e1s r\u00e1pida, pero puede llevar m\u00e1s tiempo en general.</p> <p></p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#resumen","title":"Resumen","text":"<p>Warning</p> <p>Es igual al resumen de conceptos-basicos-de-la-programacion.md</p> <p>Es importante tener una comprensi\u00f3n clara de los conceptos b\u00e1sicos de la programaci\u00f3n, como variables, estructuras de control de flujo, funciones y programaci\u00f3n orientada a objetos, entre otros.  Dedica tiempo a aprender estos conceptos y aseg\u00farate de que los comprendes antes de avanzar.</p> <p>Hay muchos lenguajes de programaci\u00f3n diferentes para elegir, como Python, Java, JavaScript, C ++, entre otros. Elige un lenguaje que sea adecuado para tus objetivos y que te resulte c\u00f3modo de usar.</p> <p>Busca recursos en l\u00ednea disponibles para aprender programaci\u00f3n, como videos de tutoriales, documentaci\u00f3n y foros de programaci\u00f3n. Toma ventaja de estos recursos para profundizar tu aprendizaje.</p> <p>Busca ejercicios y desaf\u00edos en l\u00ednea para practicar lo que has aprendido. Intenta resolver los ejercicios y retos por ti mismo y luego compara tu soluci\u00f3n con la soluci\u00f3n proporcionada.</p> <p>Trabaja en proyectos. Es una excelente manera de aplicar lo que has aprendido y desarrollar tus habilidades de programaci\u00f3n. Comienza con proyectos peque\u00f1os y luego aumenta gradualmente la complejidad.</p> <p>La programaci\u00f3n requiere pr\u00e1ctica y perseverancia para dominarla. Dedica tiempo a practicar peri\u00f3dicamente y no te desanimes si encuentras obst\u00e1culos en el camino.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/","title":"Alcance de una variable","text":"<p>Rev. 11/01/2024</p> <p>Un concepto muy importante en programaci\u00f3n es lo que llamamos alcance de una variable (variable scope).</p> <p>Definici\u00f3n</p> <p>El alcance de una variable se refiere a la parte del c\u00f3digo donde una variable existe y es accesible para poder ser utilizada por el programa. </p> <p>Hay dos tipos principales de alcance: local, limitado a la parte del c\u00f3digo donde esa variable existe y puede ser accedida; o global, accesible desde cualquier parte del c\u00f3digo.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#que-es-el-ambito-de-aplicacion","title":"\u00bfQu\u00e9 es el \u00e1mbito de aplicaci\u00f3n?","text":"<p>En el contexto de la programaci\u00f3n, los t\u00e9rminos \"\u00e1mbito\" y \"alcance\" se utilizan a menudo de manera intercambiable para referirse a la regi\u00f3n o parte de c\u00f3digo donde una variable es visible y accesible.</p> <p>Por ejemplo, si decimos que una variable tiene \"alcance local\", significa que la variable es accesible solo dentro de la regi\u00f3n o parte de c\u00f3digo donde se declara. De manera similar, si decimos que una variable est\u00e1 en el \"\u00e1mbito local\", estamos diciendo lo mismo.</p> <p>Entonces, el \u00e1mbito de aplicaci\u00f3n de una variable es el alcance que tiene la variable, que no es ni m\u00e1s ni menos que la regi\u00f3n o parte de c\u00f3digo donde la variable existe y es accesible.</p> <p>Por lo tanto, puedes usar cualquiera de los dos t\u00e9rminos para describir d\u00f3nde una variable puede ser utilizada en tu c\u00f3digo.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#ambito-global-o-ambito-local","title":"\u00bf\u00c1mbito global o \u00e1mbito local?","text":"<p>Hemos dicho que b\u00e1sicamente podemos dividir a las variables, en funci\u00f3n del \u00e1mbito de aplicaci\u00f3n donde existen y son accesibles, como locales o globales. Y que la principal diferencia entre una variable global y otra local radica en su alcance o \u00e1mbito de aplicaci\u00f3n, es decir, en la regi\u00f3n o parte de c\u00f3digo donde son visibles y accesibles.</p> <p>Evaluemos un ejemplo de utilizaci\u00f3n de variables globales y locales en Python:</p> Python<pre><code># Variable global\na = 10\n\ndef mi_funcion():\n    # Variable local\n    b = 20\n    print(a)  # Esto es v\u00e1lido, porque 'a' es global\n    print(b)  # Esto es v\u00e1lido, porque 'b' es local a esta funci\u00f3n\n\nmi_funcion()\n\nprint(a)  # Esto es v\u00e1lido, porque 'a' es global\nprint(b)  # Esto dar\u00e1 un error, porque 'b' es local a 'mi_funcion' y no existe aqu\u00ed\n</code></pre> <p>El c\u00f3digo anterior demuestra la diferencia entre las variables globales y las variables locales:</p> <p><code>a = 10</code>: Aqu\u00ed, <code>a</code> es una variable global. Se declara fuera de cualquier funci\u00f3n, por lo que es accesible desde cualquier lugar del c\u00f3digo.</p> <p><code>def mi_funcion()</code>: Esta es la definici\u00f3n de una funci\u00f3n llamada <code>mi_funcion</code>.</p> <p><code>b = 20</code>: Dentro de <code>mi_funcion</code>, se declara <code>b</code> como una variable local. Solo es accesible dentro de <code>mi_funcion</code>.</p> <p><code>print(a)</code>: Dentro de <code>mi_funcion</code>, se puede acceder a la variable global <code>a</code>. Por lo tanto, esta l\u00ednea imprimir\u00e1 el valor de <code>a</code>, que es <code>10</code>.</p> <p><code>print(b)</code>: Tambi\u00e9n se puede acceder a la variable local <code>b</code> dentro de <code>mi_funcion</code>. Esta l\u00ednea imprimir\u00e1 el valor de <code>b</code>, que es <code>20</code>.</p> <p><code>mi_funcion()</code>: Esta l\u00ednea llama a <code>mi_funcion</code>, lo que provocar\u00e1 que se impriman los valores de <code>a</code> y <code>b</code>.</p> <p><code>print(a)</code>: Despu\u00e9s de llamar a <code>mi_funcion</code>, esta l\u00ednea imprime el valor de la variable global <code>a</code> nuevamente. Esto es v\u00e1lido y imprimir\u00e1 <code>10</code>.</p> <p><code>print(b)</code>: Intenta imprimir el valor de <code>b</code>. Sin embargo, dado que <code>b</code> es una variable local a <code>mi_funcion</code>, no es accesible fuera de esa funci\u00f3n. Por lo tanto, esta l\u00ednea dar\u00e1 un error, indicando que <code>b</code> no est\u00e1 definida.</p> <p>Estudiaremos estos conceptos con mayor profundidad, a continuaci\u00f3n.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#variable-de-alcance-global","title":"Variable de alcance global","text":"<p>El \u00e1mbito donde se encuentra el c\u00f3digo principal de un programa, generalmente definido como <code>main()</code> en algunos lenguajes, se llama \u00e1mbito global. </p> <p>\u00a1Para recordar!</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, incluyendo Python, cualquier c\u00f3digo que no est\u00e1 dentro de una funci\u00f3n o clase se ejecuta en el \u00e1mbito global.</p> <p>Por lo tanto, una variable global es aquella que se define en el c\u00f3digo principal de un programa fuera de cualquier otro \u00e1mbito, como ser funciones o bloques de c\u00f3digo, por ejemplo. </p> <p>Las variables globales existen, son visibles, son accesibles y pueden ser modificadas desde cualquier parte del c\u00f3digo. Por este motivo, su uso debe ser limitado ya que puede llevar a comportamientos inesperados debido a modificaciones no controladas.</p> <p>Aqu\u00ed tenemos varios ejemplos en diferentes lenguajes:</p> Python<pre><code>variable_global = \"Soy una variable global\"\n\ndef mi_funcion():\n    print(variable_global)  # Esto es v\u00e1lido! Output : Soy una variable global\n\nmi_funcion()  \n</code></pre> JavaScript<pre><code>var variableGlobal = \"Soy una variable global\";\n\nfunction miFuncion() {\n    console.log(variableGlobal);  // Esto es v\u00e1lido! Output : Soy una variable global\n}\n\nmiFuncion();  \n</code></pre> Java<pre><code>public class Main {\n    static String variableGlobal = \"Soy una variable global\";\n\n    public static void main(String[] args) {\n        System.out.println(variableGlobal);  // Esto es v\u00e1lido! Output : Soy una variable global\n    }\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\n\nstd::string variableGlobal = \"Soy una variable global\";\n\nint main() {\n    std::cout &lt;&lt; variableGlobal;  // Esto es v\u00e1lido! Output : Soy una variable global\n    return 0;\n}\n</code></pre> <p>De todos estos c\u00f3digos, solo nos detendremos en el detalle de que la variable global se declara en el \u00e1mbito global, fuera de cualquier funci\u00f3n, y luego es accedida desde alg\u00fan \u00e1mbito, en cualquier parte del c\u00f3digo.</p> <p>\u00a1Atenci\u00f3n!</p> <p>Es importante tener cuidado al usar variables globales, ya que pueden ser modificadas desde cualquier parte del c\u00f3digo, lo que puede llevar a comportamientos inesperados. </p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#variable-de-alcance-local","title":"Variable de alcance local","text":"<p>En t\u00e9rminos generales, en la mayor\u00eda de los lenguajes de programaci\u00f3n, una variable local es una variable que se declara dentro un \u00e1mbito local como una funci\u00f3n o un bloque de c\u00f3digo. </p> <p>Esta variable solo puede ser accesible y modificada dentro de dicho \u00e1mbito, es decir, su \u00e1mbito se limita al bloque de c\u00f3digo donde se declara. Esto proporciona un control m\u00e1s estricto sobre su utilizaci\u00f3n. </p> <p>A su vez, los \u00e1mbitos que se encuentren contenidos dentro del \u00e1mbito de declaraci\u00f3n tambi\u00e9n tendr\u00e1n visibilidad y acceso a la variable en cuesti\u00f3n.</p> <p>Una vez que la ejecuci\u00f3n del programa abandona el \u00e1mbito en cuesti\u00f3n, la variable local deja de existir (es destruida) y ya no ser\u00e1 posible acceder a ella.</p> <p>Por ejemplo, si declaras una variable dentro de una funci\u00f3n, esa variable es local a esa funci\u00f3n. No puedes acceder a esa variable fuera de la funci\u00f3n o desde otras funciones. Esto ayuda a evitar conflictos de nombres de variables y a mantener el c\u00f3digo m\u00e1s organizado y legible.</p> <p>Aqu\u00ed tienes un ejemplo gen\u00e9rico:</p> C\u00f3digo gen\u00e9rico<pre><code>def mi_funcion():\n    variable_local = \"Soy una variable local\"\n    print(variable_local)  # Esto es v\u00e1lido! Output : Soy una variable local\n\nprint(variable_local)  # Esto dar\u00e1 un error porque 'variable_local' no est\u00e1 definida en este \u00e1mbito\n</code></pre> <p>En este ejemplo, <code>variable_local</code> es una variable local a <code>mi_funcion</code> y solo puede ser utilizada dentro de <code>mi_funcion</code>. Intentar acceder a <code>variable_local</code> fuera de <code>mi_funcion</code> dar\u00e1 un error.</p> <p>Los \u00e1mbitos de aplicaci\u00f3n de una variable local pueden ser los siguientes:</p> <ol> <li> <p>\u00c1mbito de funci\u00f3n: Una variable local declarada dentro de una funci\u00f3n solo puede ser accedida dentro de esa funci\u00f3n. No es visible fuera de la funci\u00f3n.</p> Python<pre><code>def func():\n    j = 20  # Esta es una variable local\n    print(j)  # Podemos acceder a la variable local 'j'\n\nfunc()  # Output : 20\nprint(j)  # Esto dar\u00e1 un error porque 'j' no est\u00e1 definida en el \u00e1mbito global\n</code></pre> <p>En el c\u00f3digo, <code>j</code> es una variable local a la funci\u00f3n <code>func()</code>. No puede ser accedida fuera de <code>func()</code>, por lo que el intento de imprimir <code>j</code> fuera de la funci\u00f3n resulta en un error.</p> </li> <li> <p>\u00c1mbito de bloque: En algunos lenguajes de programaci\u00f3n, una variable local puede tener un \u00e1mbito limitado a un bloque espec\u00edfico de c\u00f3digo, como un bucle o una estructura condicional. </p> <p>Aqu\u00ed tienes ejemplos de c\u00f3mo se maneja el \u00e1mbito de bloque en diferentes lenguajes de programaci\u00f3n:</p> JavaScript<pre><code>for (let i = 0; i &lt; 5; i++) {\n    let x = i;  // En JavaScript, la palabra clave 'let' declara la variable como local. As\u00ed, 'x' NO es accesible fuera del bucle\n}\n\nconsole.log(x);  // Esto dar\u00e1 un error en JavaScript\n</code></pre> Java<pre><code>for (int i = 0; i &lt; 5; i++) {\n    int x = i;  // En Java, 'x' NO es accesible fuera del bucle\n}\n\nSystem.out.println(x);  // Esto dar\u00e1 un error en Java\n</code></pre> C++<pre><code>for (int i = 0; i &lt; 5; i++) {\n    int x = i;  // En C++, 'x' NO es accesible fuera del bucle\n}\n\nstd::cout &lt;&lt; x;  // Esto dar\u00e1 un error en C++\n</code></pre> <p>En los tres c\u00f3digos, donde se utilizan variables locales de bloque, estas variables solo son accesibles dentro de ese bloque.</p> \u00bfQu\u00e9 ocurre con las variables locales de bloque en Python? <p>En Python, sin embargo, las variables declaradas dentro de un bloque de c\u00f3digo como un bucle <code>for</code> o una declaraci\u00f3n <code>if</code> no son locales a ese bloque solamente. En cambio, son visibles en el alcance en el que se encuentra ese bloque. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>for i in range(5):\n    x = i  # En Python, 'x' es accesible fuera del bucle\n\nif (x &gt; 0):\n    print(\"x es mayor que 0 y vale\", x)  # Esto es v\u00e1lido! Output : x es mayor que 0 y vale 4\n    variable_en_bloque = \"Soy una variable en un bloque\"\n\nprint(variable_en_bloque)  # Esto es v\u00e1lido! Output : Soy una variable en un bloque\n</code></pre> <p>Este es un ejemplo de c\u00f3mo Python maneja el \u00e1mbito de las variables. Aqu\u00ed est\u00e1 lo que sucede paso a paso:</p> <p>El bucle <code>for</code> se ejecuta 5 veces, con <code>i</code> tomando los valores de <code>0</code> a <code>4</code>. En cada iteraci\u00f3n, <code>i</code> se asigna a <code>x</code>. Por lo tanto, al final del bucle, <code>x</code> es igual a <code>4</code>.</p> <p>Despu\u00e9s del bucle, hay una estructura alternativa <code>if</code> que comprueba si <code>x</code> es mayor que <code>0</code>. Dado que <code>x</code> es <code>4</code>, la condici\u00f3n es verdadera, por lo que se ejecuta el bloque de c\u00f3digo dentro del <code>if</code>.</p> <p>Dentro de dicho bloque, se imprime un mensaje que dice \"x es mayor que 0 y vale 4\". Luego, se declara una variable llamada <code>variable_en_bloque</code> y se le asigna la cadena \"Soy una variable en un bloque\".</p> <p>Despu\u00e9s de estructura alternativa <code>if</code>, se imprime <code>variable_en_bloque</code>. Aunque <code>variable_en_bloque</code> se declar\u00f3 dentro de la estructura alternativa <code>if</code>, todav\u00eda es accesible fuera de ella. </p> <p>Esto se debe a que Python no tiene un \u00e1mbito de bloque como algunos otros lenguajes de programaci\u00f3n; en su lugar, tiene un \u00e1mbito de funci\u00f3n.</p> <p>Por lo tanto, la salida de este c\u00f3digo ser\u00e1:</p> Terminal (Entrada/Salida)<pre><code>x es mayor que 0 y vale 4\nSoy una variable en un bloque\n</code></pre> <p>Como podemos evaluar, las variables locales de bloque en Python se comportan de manera diferente a muchos otros lenguajes de programaci\u00f3n, donde las variables declaradas dentro de un bloque de c\u00f3digo son locales a ese bloque solamente. </p> <p>\u00a1Para recordar!</p> <p>En Python, las variables son locales a las funciones, no a los bloques de c\u00f3digo.</p> </li> <li> <p>\u00c1mbito de clase (en lenguajes orientados a objetos): En lenguajes de programaci\u00f3n orientados a objetos como Python, Java, C++, etc., una variable local puede ser declarada dentro de un m\u00e9todo de una clase. Esta variable solo ser\u00e1 accesible dentro de ese m\u00e9todo.</p> Puedes analizar un ejemplo aqu\u00ed: Python<pre><code>class Mi_Clase:\n    def mi_metodo(self):\n        x = 10  # Variable local\n        print(x)  # Esto es v\u00e1lido\n\n    def otro_metodo(self):\n        print(x)  # Esto dar\u00e1 un error, 'x' no es accesible fuera de 'mi_metodo'\n\nobj = Mi_Clase()\nobj.mi_metodo()\nobj.otro_metodo()\n</code></pre> <p>Este c\u00f3digo define una clase llamada <code>Mi_Clase</code> que tiene dos m\u00e9todos: <code>mi_metodo</code> y <code>otro_metodo</code>.</p> <p>En el m\u00e9todo <code>mi_metodo</code>, se declara una variable local <code>x</code> y se le asigna el valor <code>10</code>. Luego, este valor se imprime.</p> <p>En el m\u00e9todo <code>otro_metodo</code>, se intenta imprimir la variable <code>x</code>. Sin embargo, dado que <code>x</code> es una variable local dentro del m\u00e9todo <code>mi_metodo</code>, no es accesible desde <code>otro_metodo</code>. Por lo tanto, este intento de imprimir <code>x</code> resultar\u00e1 en un error.</p> <p>Finalmente, se crea un objeto <code>obj</code> de la clase <code>Mi_Clase</code> y se llaman ambos m\u00e9todos. La llamada a <code>obj.mi_metodo()</code> imprimir\u00e1 <code>10</code>, mientras que la llamada a <code>obj.otro_metodo()</code> dar\u00e1 un error porque <code>x</code> no est\u00e1 definida en ese contexto.</p> </li> <li> <p>\u00c1mbito de objeto: En la programaci\u00f3n orientada a objetos, las variables definidas dentro de un objeto (a menudo llamadas propiedades o atributos del objeto) tienen un \u00e1mbito local al objeto.</p> Puedes analizar un ejemplo aqu\u00ed: Python<pre><code>class MiClase:\n    def __init__(self, valor):\n        self.mi_variable = valor\n\n    def muestra_variable(self):\n        print(self.mi_variable)\n\n\n# Crear un objeto de MiClase\nobjeto = MiClase(\"Hola, mundo!\")\n\n# Acceder a mi_variable a trav\u00e9s del objeto\nprint(objeto.mi_variable)  # Esto imprimir\u00e1: Hola, mundo!\n\n# Usar un m\u00e9todo del objeto para acceder a mi_variable\nobjeto.muestra_variable()  # Esto tambi\u00e9n imprimir\u00e1: Hola, mundo!   \n</code></pre> <p>En este c\u00f3digo, <code>mi_variable</code> tiene un \u00e1mbito de objeto. Solo es accesible a trav\u00e9s de una instancia de <code>MiClase</code> (en este caso, <code>objeto</code>). Dentro de la clase, puedes acceder a <code>mi_variable</code> usando <code>self.mi_variable</code>. Fuera de la clase, puedes acceder a <code>mi_variable</code> usando <code>objeto.mi_variable</code>.</p> </li> </ol> <p>Existen otros \u00e1mbitos m\u00e1s espec\u00edficos que por su utilizaci\u00f3n, solo vamos a referenciarlos:</p> <ol> <li> <p>\u00c1mbito de m\u00f3dulo o archivo: En algunos lenguajes de programaci\u00f3n como Python o JavaScript (Node.js), las variables definidas en un archivo o m\u00f3dulo son locales a ese archivo. No son accesibles desde otros archivos a menos que se exporten o se importen expl\u00edcitamente.</p> Puedes analizar un ejemplo aqu\u00ed: <p>En Python, las variables definidas en un archivo son locales a ese archivo. Aqu\u00ed tienes un ejemplo:</p> <p>Supongamos que tienes dos archivos Python: <code>archivo1.py</code> y <code>archivo2.py</code>.</p> <p>En <code>archivo1.py</code>, defines una variable:</p> Python<pre><code># archivo1.py\nmi_variable = \"Hola, mundo!\"\n</code></pre> <p>Si intentas acceder a <code>mi_variable</code> desde <code>archivo2.py</code> sin importarla expl\u00edcitamente, obtendr\u00e1s un error:</p> Python<pre><code># archivo2.py\nprint(mi_variable)  # Esto dar\u00e1 un error, mi_variable no est\u00e1 definida en este archivo\n</code></pre> <p>Para acceder a <code>mi_variable</code> desde <code>archivo2.py</code>, necesitas importarla:</p> Python<pre><code># archivo2.py\nfrom archivo1 import mi_variable\n\nprint(mi_variable)  # Esto imprimir\u00e1: Hola, mundo!\n</code></pre> <p>En este c\u00f3digo, <code>mi_variable</code> tiene un \u00e1mbito de m\u00f3dulo o archivo. Solo es accesible dentro de <code>archivo1.py</code> a menos que se importe expl\u00edcitamente en otro archivo.</p> </li> <li> <p>\u00c1mbito de espacio de nombres (namespace): En lenguajes como C++ o Python, puedes definir espacios de nombres que proporcionan \u00e1mbitos para las variables. Las variables definidas dentro de un espacio de nombres son locales a ese espacio de nombres.</p> Puedes analizar un ejemplo aqu\u00ed: <p>En Python, un espacio de nombres (namespace) es una forma de encapsular variables, funciones y clases. Un ejemplo com\u00fan de un espacio de nombres es un m\u00f3dulo. </p> <p>Supongamos que tienes dos archivos Python: <code>modulo1.py</code> y <code>modulo2.py</code>.</p> <p>En <code>modulo1.py</code>, defines una variable y una funci\u00f3n:</p> Python<pre><code># modulo1.py\nmi_variable = \"Hola, mundo!\"\n\ndef mi_funcion():\n    return \"\u00a1Hola desde modulo1!\"\n</code></pre> <p>En <code>modulo2.py</code>, puedes acceder a <code>mi_variable</code> y <code>mi_funcion()</code> import\u00e1ndolas desde <code>modulo1</code>:</p> Python<pre><code># modulo2.py\nimport modulo1\n\nprint(modulo1.mi_variable)  # Esto imprimir\u00e1: Hola, mundo!\nprint(modulo1.mi_funcion())  # Esto imprimir\u00e1: \u00a1Hola desde modulo1!\n</code></pre> <p>En este c\u00f3digo, <code>modulo1</code> es un espacio de nombres. <code>mi_variable</code> y <code>mi_funcion()</code> est\u00e1n en el espacio de nombres de <code>modulo1</code>, y puedes acceder a ellas usando la sintaxis <code>modulo1.mi_variable</code> y <code>modulo1.mi_funcion()</code>. Esto ayuda a evitar conflictos entre nombres de variables y funciones en diferentes m\u00f3dulos.</p> </li> <li> <p>\u00c1mbito de cierre (closure): En algunos lenguajes de programaci\u00f3n que admiten funciones de primera clase o funciones anidadas, una variable definida en una funci\u00f3n externa puede ser accesible en una funci\u00f3n interna. Este es un concepto avanzado conocido como cierre o closure.</p> Puedes analizar un ejemplo aqu\u00ed: <p>Un cierre en Python es una funci\u00f3n que recuerda los valores de las variables del \u00e1mbito en el que fue creada, incluso si ese \u00e1mbito ya no existe.</p> Python<pre><code>def funcion_externa(x):\n    def funcion_interna(y):\n        return x + y\n    return funcion_interna\n\nmi_closure = funcion_externa(10)\n\n# Aunque la funci\u00f3n externa ya ha terminado de ejecutarse,\n# mi_closure recuerda el valor de x\nprint(mi_closure(5))  # Esto imprimir\u00e1: 15   \n</code></pre> <p>En este c\u00f3digo, <code>funcion_interna</code> es un cierre que recuerda el valor de <code>x</code> del \u00e1mbito de <code>funcion_externa</code>. Cuando llamamos a <code>mi_closure(5)</code>, <code>funcion_interna</code> todav\u00eda puede acceder al valor de <code>x</code>, incluso aunque <code>funcion_externa</code> ya ha terminado de ejecutarse. Esto es posible gracias al \u00e1mbito de cierre.</p> </li> </ol> <p>\u00a1Para recordar!</p> <p>El \u00e1mbito de una variable determina d\u00f3nde puede ser accesible en el c\u00f3digo. </p> <p>Una variable global es accesible y modificable desde todo el c\u00f3digo del programa.</p> <p>Una variable local es accesible y modificable solo dentro del \u00e1mbito donde es accesible y modificable, ya sea una funci\u00f3n, un bloque de c\u00f3digo espec\u00edfico o un m\u00e9todo de una clase; y no desde todo el c\u00f3digo del programa.</p> <p>Es importante entender estos \u00e1mbitos para evitar errores y escribir c\u00f3digo m\u00e1s limpio y mantenible.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#ventajas-de-utilizar-variables-locales","title":"Ventajas de utilizar variables locales","text":"<p>Las variables locales tienen varias ventajas sobre las variables globales:</p> <ol> <li> <p>Evitan colisiones de nombres: Las variables locales existen solo dentro de la funci\u00f3n donde se definen, lo que significa que puedes usar el mismo nombre de variable en diferentes funciones sin que se produzcan conflictos.</p> </li> <li> <p>Facilitan la lectura y el mantenimiento del c\u00f3digo: Al limitar el alcance de una variable a una sola funci\u00f3n, se hace m\u00e1s f\u00e1cil entender qu\u00e9 hace esa variable y c\u00f3mo se utiliza.</p> </li> <li> <p>Promueven la modularidad y la reutilizaci\u00f3n del c\u00f3digo: Las funciones que utilizan solo variables locales (y par\u00e1metros) son independientes del estado global del programa, lo que significa que pueden ser f\u00e1cilmente reutilizadas en diferentes contextos.</p> </li> <li> <p>Evitan efectos secundarios inesperados: Cuando usas variables globales, cualquier funci\u00f3n podr\u00eda cambiar su valor, lo que puede llevar a comportamientos inesperados. Con las variables locales, tienes un control total sobre cu\u00e1ndo y c\u00f3mo cambia su valor.</p> </li> </ol> <p>Buena pr\u00e1ctica</p> <p>Es una buena pr\u00e1ctica de programaci\u00f3n limitar el uso de variables globales y utilizar variables locales siempre que sea posible para evitar colisiones de nombres, facilitar la lectura y el mantenimiento del c\u00f3digo, promover la modularidad y la reutilizaci\u00f3n del c\u00f3digo y evitar efectos secundarios inesperados.</p> <p>En Python, el \u00e1mbito de una variable se refiere a la parte del c\u00f3digo donde esa variable es accesible. Aqu\u00ed est\u00e1n los \u00e1mbitos en los que una variable puede existir:</p> <p>\u00c1mbito Local: Una variable declarada dentro de una funci\u00f3n o m\u00e9todo es local a esa funci\u00f3n o m\u00e9todo. Solo puede ser accedida dentro de esa funci\u00f3n o m\u00e9todo.</p> <p>\u00c1mbito Encerrado (Nonlocal): Este \u00e1mbito se refiere a las variables en la funci\u00f3n m\u00e1s cercana que encierra a la funci\u00f3n actual. Espec\u00edficamente, se aplica a las funciones anidadas. Una variable declarada en la funci\u00f3n externa es accesible en la funci\u00f3n interna, pero no al rev\u00e9s.</p> <p>\u00c1mbito Global: Una variable declarada fuera de todas las funciones es una variable global. Puede ser accedida desde cualquier parte del c\u00f3digo, aunque para modificarla dentro de una funci\u00f3n, necesitas declararla como global dentro de esa funci\u00f3n.</p> <p>\u00c1mbito Incorporado (Built-in): Este es el \u00e1mbito m\u00e1s amplio. Incluye nombres predefinidos en Python, como funciones incorporadas (built-in functions) y excepciones. Estos nombres est\u00e1n disponibles en todas partes en tu c\u00f3digo.</p> <p>Estos \u00e1mbitos se buscan en el orden: Local \u2192 Encerrado (Nonlocal) \u2192 Global \u2192 Incorporado (Built-in). Este es el concepto de LEGB en Python.</p> <p>En Python, por ejemplo, hay cuatro tipos principales de alcance que son la base de la regla LEGB.  LEGB significa Local (Local) \u2192 Envolvente, Padre o Superior (Enclosing) \u2192 Global (Global) \u2192 Integrado o Incorporado (Built-in) y es la l\u00f3gica seguida por un int\u00e9rprete de Python cuando ejecuta su programa.</p> <p></p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#diferentes-ambitos-de-alcance-de-una-variable","title":"Diferentes \u00e1mbitos de alcance de una variable","text":"<p>Como dijimos, en programaci\u00f3n, el alcance de una variable se refiere a la parte del c\u00f3digo donde esta es declarada y puede ser accedida. Los tipos m\u00e1s comunes de alcances en la programaci\u00f3n son:</p> <ol> <li> <p>\u00c1mbito global (Global): las variables declaradas como globales en el bloque principal del programa, afuera de una funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo, tienen un \u00e1mbito y una duraci\u00f3n global, y son accesibles durante toda la ejecuci\u00f3n del programa desde cualquier lugar del bloque principal del programa, funci\u00f3n, clase, instancia o bloque de c\u00f3digo. </p> </li> <li> <p>\u00c1mbito local (Local): las variables declaradas dentro de una funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo tienen un \u00e1mbito local. Solo son accesibles dentro de esa funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo y tienen una duraci\u00f3n que se extiende desde el punto de declaraci\u00f3n hasta el final de la mencionada funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo.</p> </li> <li> <p>\u00c1mbito envolvente (Enclosing): todas las variables locales declaradas dentro de un bloque son accesibles dentro de los bloques internos que este bloque contenga, por no viceversa. Es decir que todas las variables locales declaradas dentro del bloque interno no son accesibles en el bloque externo. Al \u00e1mbito envolvente se lo considera un \u00e1mbito anidado (Nested scope).</p> </li> <li> <p>\u00c1mbito de bloque (Block): algunos lenguajes de programaci\u00f3n, como C, C++ y JavaScript, permiten \u00e1mbitos de nivel de bloque. Las variables declaradas dentro de un bloque, como dentro de una estructura alternativa o de un bucle, tienen un alcance limitado a ese bloque. Solo son accesibles dentro del bloque y sus bloques anidados. La vida \u00fatil de las variables de \u00e1mbito de bloque depende del idioma y el contexto espec\u00edfico.</p> </li> <li> <p>\u00c1mbito de funci\u00f3n (Function): las variables declaradas dentro de una funci\u00f3n se comportan como variables locales. Solo son accesibles dentro de esa funci\u00f3n y tienen una duraci\u00f3n que se extiende desde el punto de declaraci\u00f3n hasta el final de la mencionada funci\u00f3n.</p> </li> <li> <p>\u00c1mbito de clase (Class): en la programaci\u00f3n orientada a objetos, las variables declaradas dentro de una clase pero fuera de cualquier m\u00e9todo se conocen como variables de clase o variables est\u00e1ticas. Estas variables pertenecen a la clase misma en lugar de instancias de la clase. Son accesibles para todas las instancias de la clase y tienen una duraci\u00f3n vinculada a la duraci\u00f3n del programa.</p> </li> <li> <p>\u00c1mbito de instancia (Instance): las variables de instancia se declaran dentro de una clase y se asocian con instancias u objetos espec\u00edficos de esa clase. Cada instancia de la clase tiene su propio conjunto de variables de instancia, y solo se puede acceder a ellas a trav\u00e9s de la instancia misma. Las variables de instancia tienen una vida \u00fatil vinculada a la vida \u00fatil del objeto correspondiente.</p> </li> <li> <p>\u00c1mbito integrado (Built-in): El \u00e1mbito integrado est\u00e1 comprendido por la colecci\u00f3n de identificadores y funciones predefinidos que est\u00e1n autom\u00e1ticamente disponibles para cualquier parte del programa sin necesidad de una declaraci\u00f3n o importaci\u00f3n expl\u00edcita. Estos identificadores y funciones son parte de la biblioteca est\u00e1ndar o funcionalidad principal de cada lenguaje de programaci\u00f3n e incluyen operaciones fundamentales, tipos de dato, estructuras de control y funciones de utilidad que se usan com\u00fanmente en la programaci\u00f3n. </p> <p>Esta colecci\u00f3n puede variar seg\u00fan el lenguaje de programaci\u00f3n, pero algunos ejemplos comunes son:</p> <ol> <li>tipos de dato b\u00e1sicos: el \u00e1mbito integrado suele incluir tipos de dato est\u00e1ndar, como n\u00fameros enteros, n\u00fameros de punto flotante, valores booleanos, caracteres, cadenas, matrices y, en ocasiones, estructuras de datos m\u00e1s complejas, como listas o diccionarios.</li> <li>Funciones matem\u00e1ticas: muchos lenguajes de programaci\u00f3n proporcionan funciones matem\u00e1ticas integradas, como funciones trigonom\u00e9tricas (sin, cos, tan), funciones logar\u00edtmicas (log, exp) y operaciones aritm\u00e9ticas (suma, resta, multiplicaci\u00f3n, divisi\u00f3n, etc.).</li> <li>Funciones de entrada/salida: las funciones integradas suelen estar disponibles para realizar operaciones de entrada/salida, como leer o escribir en la consola, leer y escribir archivos y manejar la entrada del usuario.</li> <li>Estructuras de control: las estructuras de control b\u00e1sicas como alternativas (if, switch) y bucles (for, while) suelen formar parte del \u00e1mbito integrado.</li> <li>Manejo de errores: la funcionalidad integrada a menudo incluye mecanismos para manejar las excepciones o los errores que pueden ocurrir durante la ejecuci\u00f3n del programa, como los bloques try-catch o las funciones de informe de errores.</li> <li>Manipulaci\u00f3n de cadenas: las funciones para operaciones de cadenas como la concatenaci\u00f3n, la extracci\u00f3n de sub cadenas, la b\u00fasqueda y el reemplazo a menudo se proporcionan en el \u00e1mbito integrado.</li> <li>Funciones de fecha y hora: muchos lenguajes de programaci\u00f3n incluyen funciones integradas para manejar fechas, horas y zonas horarias, lo que permite operaciones como formateo de fechas, c\u00e1lculo de horas y conversiones de zonas horarias.</li> </ol> </li> </ol> <p>Los elementos y las funcionalidades espec\u00edficas pueden variar significativamente entre los lenguajes de programaci\u00f3n, por lo que es importante consultar la documentaci\u00f3n o los recursos espec\u00edficos del lenguaje para explorar el alcance integrado de un lenguaje de programaci\u00f3n en particular.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#como-identificar-el-ambito-de-una-variable","title":"\u00bfC\u00f3mo identificar el \u00e1mbito de una variable?","text":"<p>Cada variable solo existe y es accesible dentro del \u00e1mbito en el que ha sido declarada. Cuando hablamos de la existencia y accesibilidad dentro de un \u00e1mbito, nos referimos a su alcance. </p> <p>Para determinar su \u00e1mbito, hay que identificar las marcas de apertura y cierre de bloque de c\u00f3digo m\u00e1s cercanas que rodean la declaraci\u00f3n de la variable. </p> <p>\u00a1Para recordar!</p> <p>La mayor\u00eda de los lenguajes de programaci\u00f3n utilizan llaves ( {} ) para marcar el principio y el final de un bloque de c\u00f3digo.</p> <p>Una variable global estar\u00e1 disponible en todos los bloques de c\u00f3digo dentro del programa.</p> <p>Y una variable local solo estar\u00e1 disponible dentro del bloque de c\u00f3digo en el que se haya declarado. Si este bloque contiene a su vez otros bloques, la variable local tambi\u00e9n ser\u00e1 accesible dentro de ellos. </p> <p></p> <p>Aqu\u00ed vemos que la variable soyGlobal ha sido declarada entre las dos llaves marcadas con un c\u00edrculo azul. El alcance de esa variable es todo lo que se encuentra entre esas dos llaves.  El mismo concepto se aplica para las variables localVarB1 y localVarB2, cuyos alcances est\u00e1n limitados por las llaves de cada funci\u00f3n marcadas con un c\u00edrculo verde.</p> <p>Para pensar:</p> <p>\u00bfQu\u00e9 ocurre, entonces, con las variables localVarB1 y localVarB2 cuando son accedidas dentro de las funciones bloque1() y bloque2()?</p> <p>En caso de que se utilice el mismo nombre de variable declarado en varios niveles de anidamiento (significa que hay al menos un bloque dentro de otro bloque), prevalecer\u00e1 la declaraci\u00f3n del bloque m\u00e1s interno, evitando el acceso, durante la ejecuci\u00f3n del bloque interno, a la variable declarada en el bloque externo.</p> <p></p> <p>Para pensar:</p> <p>\u00bfQu\u00e9 ocurre ahora, en cada caso, con la variable declarada dentro de cada bloque con el mismo nombre localVar cuando se accede a su valor?</p> <p>Importante</p> <p>Dada su escasa legibilidad, las\u00a0declaraciones anidadas\u00a0de un mismo nombre de variable son situaciones que nunca deber\u00edan ocurrir en un programa bien dise\u00f1ado.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#alcance-global","title":"Alcance global","text":"JavaScript<pre><code>function mostrarNombre() {\n   // Acceder a la variable global\n   console.log(\"Mi nombre es \" + nombre)\n}\n// Bloque principal (main)\n{\n// Definici\u00f3n de variable global\n   var nombre = \"Juan\"\n\n   mostrarNombre()  // Salida: Mi nombre es Juan\n}\n</code></pre> <p>En este ejemplo, la variable nombre se declara como global fuera de cualquier tipo de bloque de c\u00f3digo. Sin embargo, al ser global, la funci\u00f3n mostrarNombre() puede acceder a ella y mostrar su valor en la consola</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#alcance-local","title":"Alcance local","text":"JavaScript<pre><code>function calcularSuma(a, b) {\n   // Definici\u00f3n de variable local\n   let suma = a + b\n   return suma\n}\n// Bloque principal (main)\n{ \n   console.log(calcularSuma(5, 3))  // Salida: 8\n   console.log(suma); // Error: suma no est\u00e1 definida (solo existe dentro de la funci\u00f3n calcularSuma)\n}\n</code></pre> <p>En este ejemplo, la variable suma se declara dentro de la funci\u00f3n calcularSuma() y, por lo tanto, tiene un alcance local. La variable solo puede ser accedida dentro de la funci\u00f3n y no est\u00e1 disponible fuera de ella.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#alcance-de-bloque","title":"Alcance de bloque","text":"JavaScript<pre><code>function verificarNumero(numero) {\n   if (numero &gt;= 0) {\n      let info = \"El n\u00famero es positivo\"; // Definici\u00f3n de variable de bloque\n      console.log(info)\n   } else {\n      let info = \"El n\u00famero es negativo\"; // Definici\u00f3n de variable de bloque\n      console.log(info)\n   }\n}\n// Bloque principal (main)\n{\n   verificarNumero(5)  // Salida: El n\u00famero es positivo\n   verificarNumero(-3)  // Salida: El n\u00famero es negativo\n   console.log(info)  // Error: mensaje no est\u00e1 definido (fuera de ambos bloques de la estructura if)\n}\n</code></pre> <p>En este ejemplo, se declaran dos variables, una dentro de un bloque verdadero y el otra dentro del bloque falso de la estructura alternativa, con el mismo nombre info. Al tener, cada una, un alcance de bloque (local), solo existir\u00e1n dentro del bloque de c\u00f3digo donde fueran declaradas.  } Fuera de su bloque, cada variable no est\u00e1 disponible, produciendo un error al intentar acceder a ellas.</p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#caso-practico-1-de-analisis-e-identificacion-de-ambitos-de-variables","title":"Caso pr\u00e1ctico 1 de an\u00e1lisis e identificaci\u00f3n de \u00e1mbitos de variables","text":"<p>\u00bfPara pensar?</p> <p>\u00bfPuedes analizar y entender como funciona este programa?</p> <p>Gu\u00edate por los colores. Si no, contin\u00faa leyendo y \u00a1lograr\u00e1s entenderlo!</p> <p></p> <p>JavaScript<pre><code>// Global scope (main)\n{\n   var g = 0  // Declara x como global en el cuerpo principal del programa (main)\n   outer()  // Llama a la funci\u00f3n outer() dentro del cuerpo principal del programa\n   console.log(\"La variable global g vale \", x)  // Imprime 0\n}\n</code></pre> <pre><code>function outer() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) llamada en main\n   // Local scope de outer() y Enclosing scope respecto de inner()\n   let x = 1  // Declara x localmente en outer()\n   let y = 1  // Declara y localmente en outer()\n</code></pre> <pre><code>   function inner() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) dentro de outer()\n      // Local scope de inner()\n      let x = 2  // declara x localmente en inner()\n      console.log(\"La variable local x dentro de inner() vale \", x)  // Imprime 2\n      console.log(\"La variable local y declarada en outer() vale \", y)  // Imprime 1\n   }\n</code></pre> <pre><code>   inner()  // Llama a la funci\u00f3n inner() dentro de outer()\n   console.log(\"La variable local x dentro de outer() vale \", x)  // Imprime 1\n   console.log(\"La variable global g dentro de outer() vale \", x)  // Imprime 0\n}\n</code></pre></p> Terminal (Entrada/Salida)<pre><code>Esto se ejecuta en el \u00e1mbito de inner():\nLa variable local x dentro de inner() vale  2\nLa variable local y declarada en outer() vale  1\n\nEsto se ejecuta en el \u00e1mbito de outer():\nLa variable local x dentro de outer() vale  1\nLa variable global g dentro de outer() vale  0\n\nEsto se ejecuta en el \u00e1mbito principal del programa:\nLa variable global x vale  0\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#caso-practico-2-de-analisis-e-identificacion-de-ambitos-de-variables","title":"Caso pr\u00e1ctico 2 de an\u00e1lisis e identificaci\u00f3n de \u00e1mbitos de variables","text":"<p>\u00bfPara pensar?</p> <p>Aqu\u00ed existe una ligera diferencia en la declaraci\u00f3n de una variable,</p> <p>\u00bfPuedes analizar y entender cu\u00e1l es el error de este programa?</p> <p>Si no, contin\u00faa leyendo y \u00a1lograr\u00e1s entenderlo!</p> <p>JavaScript<pre><code>// Global scope (main)\n{\n   let g = 0  // Declara x como local en el cuerpo principal del programa (main)\n   outer()  // Llama a la funci\u00f3n outer() dentro del cuerpo principal del programa\n   console.log(\"La variable local g vale \", x)  // Imprime 0\n}\n</code></pre> <pre><code>function outer() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) llamada en main\n   // Local scope de outer() y Enclosing scope respecto de inner()\n   let x = 1  // Declara x localmente en outer()\n   let y = 1  // Declara y localmente en outer()\n</code></pre> <pre><code>   function inner() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) dentro de outer()\n      // Local scope de inner()\n      let x = 2  // declara x localmente en inner()\n      console.log(\"La variable local x dentro de inner() vale \", x)  // Imprime 2\n      console.log(\"La variable local y declarada en outer() vale \", y)  // Imprime 1\n   }\n</code></pre> <pre><code>   inner()  // Llama a la funci\u00f3n inner() dentro de outer()\n   console.log(\"La variable local x dentro de outer() vale \", x)  // Imprime 1\n   console.log(\"La variable local g dentro de outer() vale \", x)  // \u00bf Imprime 0 ?\n}\n</code></pre></p> <p>Terminal (Entrada/Salida)<pre><code>Esto se ejecuta en el \u00e1mbito de inner():\nLa variable local x dentro de inner() vale  2\nLa variable local y declarada en outer() vale  1\n\nEsto se ejecuta en el \u00e1mbito de outer():\nLa variable local x dentro de outer() vale  1\n</code></pre> <pre><code>index.js:19\n  console.log(\"La variable local g dentro de outer() vale \", g)\n                                                             ^\nReferenceError: g is not defined\n</code></pre></p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#uso-de-variables-globales-en-funciones-locales","title":"Uso de variables globales en funciones locales","text":"Python<pre><code>global_var = 10\n\ndef local_function():\n    global global_var\n    local_var = 20\n\n    print(\"Var local:\", local_var)\n    print(\"Var global:\", global_var)\n\nlocal_function()\n</code></pre> <p>En Python se utiliza la palabra clave global seguida del nombre de la variable dentro de la funci\u00f3n local para poder tener alcance a la variable. Esto permite que la funci\u00f3n tenga acceso tanto a las variables locales definidas dentro de ella como a las variables globales definidas fuera de ella.</p> C++<pre><code>#include &lt;iostream&gt;\n\nint global_Var = 10;\n\nvoid local_function() {\n    int local_Var = 20;\n    std::cout &lt;&lt; \"Var local: \" &lt;&lt; local_Var &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Var global: \" &lt;&lt; global_Var &lt;&lt; std::endl;\n}\n\nint main() {\n    local_function();\n    return 0;\n}\n</code></pre> JavaScript<pre><code>function localFunction() {\n    let localVar = 20\n    console.log(\"Var local:\", localVar)\n    console.log(\"Var global:\", globalVar)\n}\n\n// Bloque principal (main)\n{ \n   var globalVar = 10\n   localFunction();\n}\n</code></pre> <p>En JavaScript y C++ se accede directamente a la variable global dentro de la funci\u00f3n local para poder utilizarla. Esto permite que la funci\u00f3n tenga acceso tanto a las variables locales definidas dentro de ella como a las variables globales definidas fuera de ella.</p> <p>En todos los ejemplos, se obtendr\u00eda el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>Var local: 20\nVar global: 10\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#modificacion-de-variables-globales-en-funciones-locales","title":"Modificaci\u00f3n de variables globales en funciones locales","text":"Python<pre><code>global_var = 10\n\ndef modify_global():\n    global global_var\n    global_var += 5\n\ndef use_global_locally():\n    local_var = global_var * 2\n    print(\"Var local:\", local_var)\n\nmodify_global()\nuse_global_locally()\n\nprint(\"Var global:\", global_var)\n</code></pre> JavaScript<pre><code>function modifyGlobal() {\n    globalVar += 5\n}\n\nfunction useGlobalLocally() {\n    let localVar = globalVar * 2\n    console.log(\"Var local:\", localVar)\n}\n\n// Bloque principal (main)\n{ \n   var globalVar = 10\n   modifyGlobal()\n   useGlobalLocally()\n   console.log(\"Var global:\", globalVar)\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\nint global_var = 10;\n\nvoid modifyGlobal() {\n    global_var += 5;\n}\nvoid useGlobalLocally() {\n    int local_var = global_var * 2;\n    std::cout &lt;&lt; \"Var local: \" &lt;&lt; local_Var &lt;&lt; std::endl;\n}\nint main() {\n    modifyGlobal();\n    useGlobalLocally();\n    std::cout &lt;&lt; \"Var global: \" &lt;&lt; global_Var &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>En estos ejemplos, la funci\u00f3n modify_global() o modifyGlobal() seg\u00fan el lenguaje, incrementa el valor de la variable global, mientras que la funci\u00f3n use_global_locally() o useGlobalLocally() utiliza la variable global en una variable local y la imprime. Al ejecutar el c\u00f3digo, puedes ver c\u00f3mo los cambios en la variable global se reflejan tanto dentro como fuera de la funci\u00f3n.</p> <p>En todos los ejemplos, se obtendr\u00eda el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>Var local: 30\nVar global: 15\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#conversion-de-variables-globales-en-locales","title":"Conversi\u00f3n de variables globales en locales","text":"Python<pre><code>global_var = 10\n\ndef convert_global_to_local():\n    global_var = 20\n    print(\"Var local:\", global_var)\n\nconvert_global_to_local()\n\nprint(\"Var global:\", global_var)\n</code></pre> JavaScript<pre><code>function convertGlobalToLocal() {\n    let globalVar = 20;\n    console.log(\"Var local:\", globalVar);\n}\n\n// Bloque principal (main)\n{ \n   var globalVar = 10\n   convertGlobalToLocal();\n   console.log(\"Var global:\", globalVar);\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\nint global_var = 10;\n\nvoid convertGlobalToLocal() {\n    int global_var = 20;\n    std::cout &lt;&lt; \"Var local: \" &lt;&lt; global _Var &lt;&lt; std::endl;\n}\nint main() {\n    convertGlobalToLocal();\n\n    std::cout &lt;&lt; \"Var global: \" &lt;&lt; global_Var &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> <p>En estos ejemplos, la funci\u00f3n convert_global_to_local() declara una nueva variable local llamada global_var con un valor de 20. Dentro del \u00e1mbito de la funci\u00f3n, cuando se hace referencia a global_var, se hace referencia a la variable local en lugar de la variable global. Fuera de la funci\u00f3n, la variable global mantiene su valor original de 10.</p> Terminal (Entrada/Salida)<pre><code>Var local: 20\nVar global: 10\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#puede-una-variable-local-reemplazar-a-una-global","title":"\u00bfPuede una variable local reemplazar a una global?","text":"<p>\u00a1Para recordar!</p> <p>Los conceptos vistos solo afectan a la variable dentro del \u00e1mbito de la funci\u00f3n o del bloque en los que se declara la variable local.</p> <p>Fuera de esa funci\u00f3n o bloque, la variable global seguir\u00e1 existiendo y mantendr\u00e1 su valor original.</p> <p>Asimismo, la variable local ser\u00e1 destruida al finalizar la funci\u00f3n o el bloque donde fuera creada. As\u00ed, su acceso o modificaci\u00f3n ser\u00e1 imposible a partir de dicha finalizaci\u00f3n.</p> <p>Veamos el siguiente ejemplo:</p> Python<pre><code>global_var = 10\n\ndef modify_global():\n    global global_var\n    global_var += 5\n\ndef use_global_locally():\n    local_var = global_var * 2\n    print(\"Var local:\", local_var)\n\nprint(\"Var global:\", global_var)\n\nmodify_global()\nuse_global_locally()\n\nprint(\"Var global:\", global_var)\nprint(\"Var local:\", local_var)\n</code></pre> <p>!!! question \u00bf\u00bfQu\u00e9 ocurrir\u00e1 cuando se ejecute la \u00faltima l\u00ednea del programa?</p> <p>Terminal (Entrada/Salida)<pre><code>Var global: 10\nVar local: 20\nVar global: 10\n</code></pre> <pre><code>Error: NameError: name \u2018local_var' is not defined\n</code></pre></p>"},{"location":"unidades/lenguajes-de-programacion/python/alcance-de-variable-en-python/#error-al-acceder-a-una-variable-local-fuera-de-su-alcance-scope","title":"Error al acceder a una variable local fuera de su alcance (scope)","text":"<p>Cuando intentas acceder a una variable local fuera de su alcance, es posible que encuentres un error dependiendo del lenguaje de programaci\u00f3n que est\u00e9s utilizando. Por lo general, las variables locales tienen un alcance limitado dentro del bloque de c\u00f3digo donde se definen. Una vez que el flujo de ejecuci\u00f3n sale de ese bloque, las variables locales ya no son accesibles.</p> <p>En el siguiente ejemplo, local_var se define dentro del \u00e1mbito de la funci\u00f3n local_function(). Cuando intentemos acceder a ella fuera de la funci\u00f3n, recibiremos un error de ReferenceError o de NameError (el nombre del error depender\u00e1 del lenguaje empleado) porque la variable no est\u00e1 definida en el \u00e1mbito (scope) actual.</p> Python<pre><code>def local_function():\n    local_var = 10\n    return local_var\n\nresult = local_function()\n\nprint(result)  \nprint(local_var)  \n</code></pre> Terminal (Entrada/Salida)<pre><code>10 # Imprime la l\u00ednea 7\nError: NameError: name 'local_var' is not defined # Error devuelto por la l\u00ednea 8\n</code></pre> JavaScript<pre><code>function local_function() {\n  let local_var = 10\n  return local_var\n}\n// Bloque principal (main)\n{\n   let result = myFunction();\n   console.log(result);  \n   console.log(local_var); \n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>10 # Imprime la l\u00ednea 8\nError: ReferenceError: local_var is not defined # Error devuelto por la l\u00ednea 9\n</code></pre> <p>Para resolver este problema, es necesario que el c\u00f3digo devuelva el valor almacenado en la variable local desde la funci\u00f3n y para ser almacenado en un variable en el \u00e1mbito de llamada. </p> <p>En el ejemplo, devolvemos el valor de <code>local_var</code> desde la funci\u00f3n <code>local_function()</code> y lo asignamos a la variable result en el \u00e1mbito de la llamada. As\u00ed, podremos acceder y utilizar el valor fuera de la funci\u00f3n sin encontrar un error.</p> <p>En Python, las variables que se declaran dentro de un bloque de c\u00f3digo, como un bucle for o una declaraci\u00f3n if, son visibles en el alcance en el que se encuentra ese bloque. No son locales al bloque en s\u00ed. Aqu\u00ed tienes un ejemplo:</p> <p><pre><code>if True:\n    variable_en_bloque = \"Soy una variable en un bloque\"\nprint(variable_en_bloque)  # Esto es v\u00e1lido y imprimir\u00e1 \"Soy una variable en un bloque\"\n</code></pre> En este ejemplo, variable_en_bloque se declara dentro del bloque if, pero a\u00fan as\u00ed es accesible fuera de ese bloque, en el mismo alcance en el que se encuentra el bloque if.</p> <p>Sin embargo, si la variable se declara dentro de una funci\u00f3n, entonces s\u00ed es una variable local a esa funci\u00f3n:</p> <pre><code>def mi_funcion():\n    variable_local = \"Soy una variable local\"\n\nmi_funcion()\nprint(variable_local)  # Esto dar\u00e1 un error porque variable_local no est\u00e1 definida en este alcance\n</code></pre> <p>En este segundo ejemplo, variable_local solo es accesible dentro de mi_funcion, y cualquier intento de acceder a ella fuera de la funci\u00f3n dar\u00e1 un error.</p> <p>En Python, el \u00e1mbito de una variable local se refiere al lugar en el c\u00f3digo donde esa variable puede ser accedida. Aqu\u00ed est\u00e1n los \u00e1mbitos en los que una variable local puede existir:</p> <p>Funciones: Una variable local declarada dentro de una funci\u00f3n solo puede ser accedida dentro de esa funci\u00f3n. No es visible fuera de la funci\u00f3n. Por ejemplo:</p> <pre><code>def mi_funcion():\n    variable_local = \"Soy una variable local\"\n    print(variable_local)  # Esto es v\u00e1lido\n\nmi_funcion()\nprint(variable_local)  # Esto dar\u00e1 un error porque variable_local no est\u00e1 definida en este alcance\n</code></pre> <p>Clases: Una variable local declarada dentro de un m\u00e9todo de una clase solo puede ser accedida dentro de ese m\u00e9todo. No es visible fuera del m\u00e9todo. Por ejemplo:</p> <pre><code>class MiClase:\n    def mi_metodo(self):\n        variable_local = \"Soy una variable local\"\n        print(variable_local)  # Esto es v\u00e1lido\n\nobj = MiClase()\nobj.mi_metodo()\nprint(variable_local)  # Esto dar\u00e1 un error porque variable_local no est\u00e1 definida en este alcance\n</code></pre> <p>Comprensiones de listas: En Python 3, las variables definidas en una comprensi\u00f3n de lista son locales a la comprensi\u00f3n. Por ejemplo:</p> <pre><code>[x for x in range(10)]\nprint(x)  # Esto dar\u00e1 un error porque x no est\u00e1 definida en este alcance\n</code></pre> <p>En todos estos casos, la variable local solo es visible dentro del bloque de c\u00f3digo donde se declara. Intentar acceder a la variable fuera de ese bloque de c\u00f3digo dar\u00e1 un error.</p> <p>En Python, puedes acceder a variables globales desde un \u00e1mbito local (como una funci\u00f3n), pero si intentas modificarlas directamente, Python las tratar\u00e1 como variables locales. Para modificar una variable global dentro de un \u00e1mbito local, debes usar la palabra clave global antes de la variable.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code># Variable global\nx = 10\n\ndef test():\n    # Intentando modificar la variable global\n    global x\n    x = 20\n\ntest()\n\n# Imprime: 20\nprint(x)\n</code></pre> <p>En este ejemplo, x es una variable global. Dentro de la funci\u00f3n test, usamos la palabra clave global para indicar que queremos usar la variable global x, no una nueva variable local con el mismo nombre. Luego, modificamos x a 20. Cuando imprimimos x despu\u00e9s de llamar a test, obtenemos 20, lo que indica que la variable global x ha sido modificada dentro de la funci\u00f3n.</p> <p>Sin embargo, el uso de variables globales debe minimizarse ya que pueden hacer que el c\u00f3digo sea dif\u00edcil de entender y propenso a errores. Es mejor pasar las variables como argumentos a las funciones y devolver los resultados.</p>"},{"location":"unidades/lenguajes-de-programacion/python/conversion-de-tipo-de-dato-de-una-variable/","title":"Conversion de tipo de dato de una variable","text":"<p>a = int(\"3\") + 4</p> <p>b = str(3) + \"4\"</p> <p>print(a, b)</p>"},{"location":"unidades/lenguajes-de-programacion/python/conversion-de-tipo-de-dato-de-una-variable/#ejercicios-de-aplicacion","title":"Ejercicios de aplicaci\u00f3n","text":"<ol> <li> <p>Escribe un programa que solicite el ingreso por teclado de datos referidos al nombre, el precio unitario y la cantidad de unidades vendidas de un producto. Luego que imprima por pantalla una salida de informaci\u00f3n formateada de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el nombre del producto: Palta\nIngrese el precio unitario del producto: 510.30\nIngrese la cantidad de unidades compradas: 3\n\nProducto: Palta\nPrecio unitario: 510.30\nCantidad: 3\n----------------------------------\nCosto total de compra: 1530.90\n</code></pre> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El costo total debe calcularse antes de realizar la impresi\u00f3n en pantalla. Presta atenci\u00f3n al tratamiento de los decimales. Estamos hablando de dinero en algunos casos.</p> Ver soluci\u00f3n propuesta Python<pre><code>nombre = input(\"Ingrese el nombre del producto: \")\nprecio_unitario = float(input(\"Ingrese el precio unitario del producto: \"))\ncantidad = int(input(\"Ingrese la cantidad de unidades compradas: \"))\n\ncosto_total = precio_unitario * cantidad\n\nprint(f\"Producto: {nombre}\")\nprint(f\"Precio unitario: {format(precio_unitario, '.2f')}\")\nprint(f\"Cantidad: {cantidad}\")\nprint(\"-\"*34)\nprint(f\"Costo total de compra: {format(costo_total, '.2f')}\")\n</code></pre> <p>\u00a1Para pensar!</p> <p>\u00bfQu\u00e9 crees que hace la siguiente instrucci\u00f3n <code>format(precio_unitario, '.2f')</code>?</p> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/estructras-de-control/","title":"Estructras de control","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructras-de-control/#for-in-range","title":"for \u2026 in range","text":"<p>En Python, el valor del paso en la funci\u00f3n range() se establece cuando se crea el objeto range, y no se puede cambiar despu\u00e9s. Por lo tanto, aunque cambies el valor de paso a 3 dentro del bucle, el bucle seguir\u00e1 incrementando n en pasos de 1.</p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/","title":"Funciones","text":""},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-sin-parametros","title":"Funciones sin par\u00e1metros","text":"Python<pre><code># Definici\u00f3n de funciones\n\n# Definimos una funci\u00f3n que imprime en pantalla un saludo\ndef saludar():\n    print (\"Hola, \u00bfc\u00f3mo est\u00e1s?\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n saludar()\nsaludar()\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-con-parametros","title":"Funciones con par\u00e1metros","text":"Python<pre><code># Definici\u00f3n de funciones\n\n# Definimos una funci\u00f3n que suma dos n\u00fameros pasados como argumentos desde la llamada a la funci\u00f3n\n# La funci\u00f3n posee dos par\u00e1metros, uno para cada uno de los argumentos mencionados\ndef sumar(num1, num2):\n    print(f\"La suma de los n\u00fameros enteros {num1} y {num2} es {num1 + num2}.\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n sumar():\nsumar(1, 100)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La suma de los n\u00fameros enteros 1 y 100 es 101.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#ejemplo-de-aplicacion","title":"Ejemplo de aplicaci\u00f3n","text":"<p>Teniendo en cuenta el ejemplo anterior, modificar el programa para que sume todos los n\u00fameros enteros entre 2 n\u00fameros espec\u00edficos.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Definimos una funci\u00f3n que suma todos los n\u00fameros enteros entre dos n\u00fameros pasados como argumentos desde la llamada a la funci\u00f3n\n# La funci\u00f3n posee dos par\u00e1metros, uno para cada uno de los argumentos mencionados\ndef sumar_entre(num_menor, num_mayor):\n    # Inicializamos la variable acumuladora\n    suma = 0   \n\n    for num in range(num_menor, num_mayor + 1):\n        suma += num\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n sumar_entre():\nsumar_entre(1, 100)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La suma de todos los n\u00fameros los enteros entre 1 y 100 es 5050.\n</code></pre> <p>\u00bfConoces la historia del peque\u00f1o Gauss y la suma de los n\u00fameros enteros entre 1 y 100?</p> <p>\"... Ocurri\u00f3 en la escuela de Brunswick, cierto d\u00eda de 1786, cuando Gauss contaba nueve a\u00f1os. El maestro encarg\u00f3 a sus alumnos que hiciesen como ejercicio de adici\u00f3n la suma de todos los n\u00fameros enteros desde el 1 hasta el 100, ambos inclusive. Se trataba de sumar la sucesi\u00f3n 1, 2, 3, 4, ... , 99, 100. Los alumnos, con una sola excepci\u00f3n, empezaron sumando 1 + 2; al resultado de esta suma, 3, le a\u00f1adieron el 3, lo cual les dio 6, luego 4, obteniendo 10 y as\u00ed sucesivamente. La suma de los cien sumandos (cada una de las cantidades parciales que han de acumularse o a\u00f1adirse unas a otras para formar la suma o cantidad total que se busca) por este procedimiento hab\u00eda de tener ocupados a los estudiantes por un buen rato. Sin embargo, cuentan las cr\u00f3nicas que, al poco tiempo de propuesta la tarea, cierto alumno, llamado Carl Friedrich Gauss, se present\u00f3 a su maestro con el resultado correcto: 5050.  El maestro, perplejo, le pregunt\u00f3 al peque\u00f1o c\u00f3mo se las hab\u00eda arreglado para hacer la tarea tan pronto. Gauss le explic\u00f3 que los n\u00fameros que se iban a sumar se pod\u00edan agrupar en parejas: 1 + 100, 2 + 99, 3 + 98, etc. cada una de las parejas sumando 101.  Como se formaban 50 parejas, bastaba hacer 101 \u00b7 50 = 5050. Gauss hab\u00eda descubierto por s\u00ed solo y a la edad de nueve a\u00f1os el m\u00e9todo para obtener la suma de las sucesiones aritm\u00e9ticas ...\"</p> <p>\"Gauss, un genio sobrehumano\" por Paulino Valderas Link al documento</p> <p>Este m\u00e9todo permite optimizar de manera incre\u00edble el algoritmo del programa para que sea mucho m\u00e1s eficiente en t\u00e9rminos de rapidez:</p> Python<pre><code># Definici\u00f3n de funciones\n\ndef sumar_numeros_entre(num_menor, num_mayor):\n    # Inicializamos la variable acumuladora\n    suma = 0   \n\n    for num in range(num_menor, num_mayor + 1):\n        suma += num\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\ndef sumar_sucesiones_aritmeticas(num_menor, num_mayor):\n    valor_pareja = num_menor + num_mayor\n    cant_parejas = (num_mayor - num_menor + 1) // 2\n    numero_intermedio_si_cant_numeros_es_impar = 0 # El 0 al ser neutro, es como si no existiese valor para sumar m\u00e1s adelante\n\n    # Esta estructura alternativa detecta si la cantidad de n\u00fameros es impar\n    # En caso de ser asi, el n\u00famero del medio de la serie no tendr\u00eda pareja\n    # Por lo tanto, necesita sumarse solo al conjunto de parejas\n    if (num_mayor - num_menor + 1) % 2 != 0:\n        numero_intermedio_si_cant_numeros_es_impar = (num_mayor - num_menor) // 2 + num_menor\n\n    # C\u00e1lculo seg\u00fan el algoritmo desarrollado por Gauss        \n    suma = valor_pareja * cant_parejas + numero_intermedio_si_cant_numeros_es_impar\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n sumar_entre():\nsumar_numeros_entre(5, 20)\n\n# Llamamos (invocamos) a la funci\u00f3n sumar_sucesiones_aritmeticas():\nsumar_sucesiones_aritmeticas(5, 20)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La suma de todos los n\u00fameros los enteros entre 5 y 20 es 200.\nLa suma de todos los n\u00fameros los enteros entre 5 y 20 es 200.\n</code></pre> <p>\u00a1Para recordar!</p> <p>Analizando ambas funciones del ejercicio anterior, podemos deducir que muchas veces la simplicidad del c\u00f3digo puede representar una ejecuci\u00f3n poco eficiente mientras que un c\u00f3digo con mayor complejidad (no siempre m\u00e1s l\u00edneas significan mayor complejidad) puede representar una ejecuci\u00f3n muy eficiente.</p> <p>Por eficiencia podemos hablar de velocidad en tiempo de ejecuci\u00f3n y/o cantidad de instrucciones ejecutadas y/o cantidad de recursos f\u00edsicos empleados (lease memoria RAM por ejemplo) entre otros par\u00e1metros.</p> <p>\u00bfPor qu\u00e9 la eficiencia de un algoritmo es muy importante?</p> <p>Podr\u00edamos hablar del tema durante horas y debatir mil cuestiones. Pero solo vamos a ir a un ejemplo concreto siguiendo con el m\u00e9todo Gauss:</p> <p>Ejecutamos ambos programas para calcular la suma de valores entre 1 y 100000</p> <p>El resultado fue determinante en cuestiones de tiempo de ejecuci\u00f3n:</p> Terminal (Entrada/Salida)<pre><code># Sin aplicar el m\u00e9todo de Gauss\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\nLa funci\u00f3n se ejecut\u00f3 en: 15.763926029205322 segundos (1705702169.002692 -&gt; 1705702184.766618)\n\n# Aplicando el m\u00e9todo de Gauss\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\nLa funci\u00f3n se ejecut\u00f3 en: 0.0 segundos (1705702184.766618 -&gt; 1705702184.766618)\n</code></pre> <p>Los dos valores entre par\u00e9ntesis representan el momento en que se inici\u00f3 y finaliz\u00f3 la ejecuci\u00f3n de la funci\u00f3n.</p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-con-parametros-opcionales","title":"Funciones con par\u00e1metros opcionales","text":"<p>Para entender el concepto de par\u00e1metro opcional, vamos a modificar el c\u00f3digo del ejemplo anterior para que:</p> <ul> <li>Se puedan ingresar los 2 n\u00fameros para realizar la suma</li> <li>Se pueda elegir, opcionalmente, si se desea conocer el tiempo que hubiera tardado la computadora en hacer el c\u00e1lculo con y sin el m\u00e9todo de Gauss</li> </ul> Python<pre><code># Importaci\u00f3n de los m\u00f3dulos necesarios para la ejecuci\u00f3n del programa\n\nimport time\n\n\n# Definici\u00f3n de funciones\n\ndef sumar_numeros_entre(num_menor, num_mayor, ver_tiempo_ejecucion = False):\n    suma = 0   \n\n    if ver_tiempo_ejecucion:\n        start_time = time.time()\n\n    for num in range(num_menor, num_mayor + 1):\n        suma += num\n\n    if ver_tiempo_ejecucion:\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(f\"La funci\u00f3n sin el m\u00e9todo de Gauss se ejecut\u00f3 en: {execution_time} segundos\\n{start_time} -&gt; {end_time} = {end_time-start_time}\")\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\ndef sumar_sucesiones_aritmeticas(num_menor, num_mayor, ver_tiempo_ejecucion = False):\n\n    if ver_tiempo_ejecucion:\n        start_time = time.time()\n\n    valor_pareja = num_menor + num_mayor\n    cant_parejas = (num_mayor - num_menor + 1) // 2\n    numero_intermedio_si_cant_numeros_es_impar = 0 \n\n    if (num_mayor - num_menor + 1) % 2 != 0:\n        numero_intermedio_si_cant_numeros_es_impar = (num_mayor - num_menor) // 2 + num_menor\n\n    suma = valor_pareja * cant_parejas + numero_intermedio_si_cant_numeros_es_impar\n\n    if ver_tiempo_ejecucion:\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(f\"La funci\u00f3n con el m\u00e9todo de Gauss se ejecut\u00f3 en: {execution_time} segundos\\n{start_time} -&gt; {end_time} = {end_time-start_time}\")\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\n\n# Bloque principal del programa\n\nnum_inicial = int(input(\"Ingrese el n\u00famero inicial de la serie: \"))\nnum_final = int(input(\"Ingrese el n\u00famero final de la serie: \"))\n\nver_tiempo_ejecucion = True if input(\"Desea ver el tiempo de ejecuci\u00f3n (s/n)? \").lower() == \"s\" else False\n\n\nif ver_tiempo_ejecucion:\n    sumar_numeros_entre(num_inicial, num_final, ver_tiempo_ejecucion)\n    sumar_sucesiones_aritmeticas(num_inicial, num_final, ver_tiempo_ejecucion)\n\nelse:\n    sumar_sucesiones_aritmeticas(num_inicial, num_final)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese el n\u00famero inicial de la serie: 1\nIngrese el n\u00famero final de la serie: 100000\nDesea ver el tiempo de ejecuci\u00f3n (s/n)? s\n\nLa funci\u00f3n sin el m\u00e9todo de Gauss se ejecut\u00f3 en: 0.0008780956268310547 segundos \n1705704419.080389 -&gt; 1705704419.081267 = 0.0008780956268310547\n\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\n\n\nLa funci\u00f3n con el m\u00e9todo de Gauss se ejecut\u00f3 en: 0.0 segundos \n1705704419.081267 -&gt; 1705704419.081267 = 0.0\n\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-con-parametros-posicionales-o-con-parametros-identificados","title":"Funciones con par\u00e1metros posicionales o con par\u00e1metros identificados","text":"<p>Veamos el caso de un programa que saluda al usuario de manera personalizada. Podr\u00eda darse el caso donde se conoce o no se conoce el nombre del usuario para nombrarlo. Tambi\u00e9n podr\u00eda saludar en funci\u00f3n del momento del d\u00eda: ma\u00f1ana, tarde o noche. Incluso podr\u00eda evaluar si el usuario utiliza poco o mucho el programa en funci\u00f3n del tiempo transcurrido desde su \u00faltimo uso. Y alentarlo a que lo haga m\u00e1s seguido.</p> Python<pre><code># Importaci\u00f3n de los m\u00f3dulos necesarios para la ejecuci\u00f3n del programa\n\nimport datetime\nfrom os import system\n\n# Definici\u00f3n de funciones\n\ndef saludar(nombre=None, momento_dia=None, ultimo_uso=None):\n\n    if momento_dia == \"tarde\":\n        print(\"\u00a1Buenas tardes!\")\n\n    elif momento_dia == \"noche\":\n        print(\"\u00a1Buenas noches!\")\n\n    else:\n        print(\"\u00a1Buenos d\u00edas!\")\n\n    print(\"\u00bfC\u00f3mo te encuentras hoy\", f\", {nombre}\" if nombre else \"\", \"?\", sep=\"\")\n\n    if ultimo_uso:\n        tiempo_transcurrido = datetime.datetime.now() - ultimo_uso\n\n        if tiempo_transcurrido.days &gt; 30:\n            print(\"Hace mucho que no usas el programa. \u00a1Qu\u00e9 bueno verte de nuevo por aqu\u00ed!\")\n        elif tiempo_transcurrido.days &lt; 5:\n            print(\"\u00a1Gracias por usar el programa regularmente!\")\n\n\n# Bloque principal del programa\n\n# Inicializaci\u00f3n de la variable de \u00faltimo uso para la simulaci\u00f3n de \u00faltimo acceso\nultimo_uso = None\n\nsystem(\"cls\")\n\n# Ejemplo de uso de la funci\u00f3n saludar():\n\n# 1) Pasando todos los argumentos en el orden que los recibir\u00e1n los par\u00e1metros (manera tradicional):\nprint(\"\\n\\nUsuario 1:\")\nultimo_uso = datetime.datetime.now() - datetime.timedelta(days=31)\nsaludar(\"Juan\", \"tarde\", ultimo_uso) # Argumentos pasados a par\u00e1metros posicionales\n\n# 2) Pasando todos los argumentos identificando los par\u00e1metros que los recibir\u00e1n:\nprint(\"\\n\\nUsuario 2:\")\nultimo_uso = datetime.datetime.now() - datetime.timedelta(days=15)\nsaludar(nombre=\"Jos\u00e9\", ultimo_uso=ultimo_uso, momento_dia=\"noche\") # Argumentos pasados a par\u00e1metros identificados\n\n# 3) Pasando todos los argumentos de manera mezclada:\nprint(\"\\n\\nUsuario 3:\")\nultimo_uso = datetime.datetime.now() - datetime.timedelta(days=4)\nsaludar(\"Pedro\", ultimo_uso=ultimo_uso, momento_dia=\"noche\") # Lee el destacado m\u00e1s abajo para entender esta sintaxis\n\n# 4) Pasando algunos argumentos solamente:\nprint(\"\\n\\nUsuario 4:\")\nsaludar(momento_dia=\"dia\") # Lee el destacado m\u00e1s abajo para entender esta sintaxis\n</code></pre> <p>\u00a1Muy importante!</p> <p>En el ejemplo anterior, vemos que podemos mezclar el orden de los argumentos dentro de la llamada a la funci\u00f3n respecto del orden de los par\u00e1metros en la definici\u00f3n de la funci\u00f3n si indicamos su nombre. </p> <p>Pero siempre es necesario que aquellos argumentos identificados con el nombre del par\u00e1metro est\u00e9n a la derecha de los argumentos que pasar\u00e1n a los par\u00e1metros posicionales, es decir, aquellos argumentos que se indican en la llamada a la funci\u00f3n sin especificar el nombre del par\u00e1metro y que se asocian por su posici\u00f3n.</p> <p>Y si no pasas todos los argumentos porque la funci\u00f3n posee par\u00e1metros opcionales, deber\u00e1s identificar todos los argumentos a partir del primer argumento pasado que no se encuentre en la posici\u00f3n del par\u00e1metro que debe recibirlo.</p> Terminal (Entrada/Salida)<pre><code>Usuario 1:\n\u00a1Buenas tardes!\n\u00bfC\u00f3mo te encuentras hoy, Juan?\nHace mucho que no usas el programa. \u00a1Qu\u00e9 bueno verte de nuevo por ac\u00e1!\n\n\nUsuario 2:\n\u00a1Buenas noches!\n\u00bfC\u00f3mo te encuentras hoy, Jos\u00e9?\n\n\nUsuario 3:\n\u00a1Buenas noches!\n\u00bfC\u00f3mo te encuentras hoy, Pedro?\n\u00a1Gracias por usar el programa regularmente!\n\n\nUsuario 4:\n\u00a1Buenos d\u00edas!\n\u00bfC\u00f3mo te encuentras hoy?\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-que-retornan-un-valor-return","title":"Funciones que retornan un valor (return)","text":"<p>La mayor\u00eda de las funciones de un programa cumplen con la tarea de realizar alg\u00fan c\u00e1lculo y retornar el resultado obtenido para ser utilizado en el bloque principal del programa.</p> <p>Por ejemplo, podemos definir una funci\u00f3n que calcule el \u00e1rea de un triangulo en base a determinados argumentos recibidos para luego retornar el resultado obtenido:</p> Python<pre><code># Definici\u00f3n de funciones\n\ndef area_triangulo(base, altura):\n\n    area = (base * altura) / 2\n\n    return area\n\n\n# Bloque principal del programa\n\n# Solicita al usuario que ingrese las medidas del tri\u00e1ngulo\nbase = float(input(\"Ingrese la base del tri\u00e1ngulo (en cm.): \"))\naltura = float(input(\"Ingrese la altura del tri\u00e1ngulo (en cm.): \"))\n\n# Se invoca a la funci\u00f3n area_triangulo() para luego almacenar el valor retornado en la variable *area*\narea = area_triangulo(base, altura)\n\n# Imprime en pantalla el resultado obtenido\nprint(f\"\\nEl \u00e1rea de un tri\u00e1ngulo con base = {base} cm. y altura = {altura} cm. es {area} cm\u00b2.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese la base del tri\u00e1ngulo (en cm.): 10\nIngrese la altura del tri\u00e1ngulo (en cm.): 8\n\nEl \u00e1rea de un tri\u00e1ngulo con base = 10.0 cm. y altura = 8.0 cm. es 40.0 cm\u00b2.\n</code></pre> <p>\u00a1Para recordar!</p> <p>recuerda que en Python todo es un objeto. Con esto en mente, es natural que una funci\u00f3n pueda devolver cualquier objeto. Asi, como en el ejemplo anterior devuelve un valor de punto flotante, tambi\u00e9n podr\u00eda devolver un valor entero, o un valor booleano, o un caracter, o incluso una estructura de datos como una cadena de texto, una lista, un diccionario, una tupla, un conjunto o cualquier otra estructura v\u00e1lida.</p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-que-retornan-mas-de-un-valor","title":"Funciones que retornan m\u00e1s de un valor","text":"<p>Python permite definir funciones que retornan m\u00e1s de un valor.</p> <p>Por ejemplo, definamos una funci\u00f3n que reciba una lista de n\u00fameros y devuelva el mayor y el menor de los n\u00fameros que se encuentren en ella:</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Esta funci\u00f3n recibe una lista de n\u00fameros y retorna una tupla con el mayor y el menor valor\ndef funcion_mayor_menor(lista):\n\n    if len(lista) == 0:\n        return None, None # Si la lista est\u00e1 vac\u00eda, no hay mayor ni menor valor\n\n    mayor = max(lista)\n    menor = min(lista)\n\n    # Retorna una tupla\n    if mayor == menor:\n        return None, None # Si mayor y menor son iguales, no hay mayor ni menor porque hay un solo valor o todos los valores son iguales    \n\n    else:\n        return (mayor, menor) # Tambi\u00e9n funciona sin aplicar los par\u00e9ntesis\n\n\n# Bloque principal del programa\n\n# Inicializa la lista de n\u00fameros\nnumeros = [1, 1, 2, 3, 4, 5, 5]\n\n# Se invoca a la funci\u00f3n con la lista de n\u00fameros y se recibe una tupla que es desempaquetada en 2 variables\nnum_mayor, num_menor = funcion_mayor_menor(numeros)\n\nif num_mayor and num_menor:\n    # Imprime en pantalla el resultado obtenido\n    print(f\"El mayor valor de la lista {numeros} es {num_mayor} y el menor valor es {num_menor}.\")\n\nelse:\n    print(f\"La lista {numeros} no posee mayor ni menor valor.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>El mayor valor de la lista [1, 1, 2, 3, 4, 5, 5] es 5 y el menor valor es 1.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/","title":"Funciones Lambda (an\u00f3nimas)","text":""},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#sintaxis","title":"sintaxis:","text":"<p>Completar esta parte</p> <p>variable = lambda par\u00e1metro_1, ... , parametro_n: return expresi\u00f3n </p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#ejemplos-de-aplicacion-simple","title":"Ejemplos de aplicaci\u00f3n simple","text":"<p>Ejemplo 1: calcular el cuadrado de un n\u00famero.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para calcular el cuadrado de un n\u00famero\n# Retorna el cuadrado de cada n\u00famero pasado a la funci\u00f3n\ncalcular_cuadrado = lambda x: x**2\n\n\n# Bloque principal del programa\n\nvalor = 4\nprint(\"El cuadrado de\", valor, \"es\", calcular_cuadrado(valor))\n</code></pre> Terminal (Entrada/Salida)<pre><code>El cuadrado de 4 es 16\n</code></pre> <p>Ejemplo 2: determinar si un n\u00famero es par o impar.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para determinar si un n\u00famero es par o impar\n# Retorna \"par\" o \"impar\"\nvalidar_si_numero_es_par_o_impar = lambda x: \"par\" if x % 2 == 0 else \"impar\" \n\n\n# Bloque principal del programa\n\nnumero = 13\nprint(f\"El {numero} es un n\u00famero {validar_si_numero_es_par_o_impar(numero)}\")\n\nnumero = 16\nprint(f\"El {numero} es un n\u00famero {validar_si_numero_es_par_o_impar(numero)}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>El 13 es un n\u00famero impar\nEl 16 es un n\u00famero par\n</code></pre> <p>Ejemplo 3: determinar si un n\u00famero es m\u00faltiplo de otro.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para determinar si un n\u00famero es m\u00faltiplo de otro\n# Retorna \"es m\u00faltiplo\" o \"no es m\u00faltiplo\"\nvalidar_si_es_multiplo = lambda x, y: \"es m\u00faltiplo\" if x % y == 0 else \"no es m\u00faltiplo\"\n\n\n# Bloque principal del programa\n\nvalor_menor = 5 \nvalor_mayor = 15\nprint(\"El \" + str(valor_mayor) + \" \" + validar_si_es_multiplo(valor_mayor, valor_menor) + \" de \" + str(valor_menor))\n\nvalor_menor = 4 \nvalor_mayor = 19\nprint(\"El \" + str(valor_mayor) + \" \" + validar_si_es_multiplo(valor_mayor, valor_menor) + \" de \" + str(valor_menor))\n</code></pre> Terminal (Entrada/Salida)<pre><code>El 15 es m\u00faltiplo de 5\nEl 19 no es m\u00faltiplo de 4\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#ejemplos-de-aplicacion-con-map","title":"Ejemplos de aplicaci\u00f3n con map","text":"<p>Ejemplo 1: calcular el cuadrado de una lista de n\u00fameros.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para calcular el cuadrado de un n\u00famero\n# Retorna una tupla con el n\u00famero y su cuadrado\ncalcular_cuadrado = lambda x: (x, x**2) \n\n\n# Bloque principal del programa\n\n# Inicializa una lista de n\u00fameros\nlista_de_numeros = [1, 2, 3, 4, 5]\n\n# Emplea la funci\u00f3n *map* para iterar con la lista, invocando a la funci\u00f3n calcular_cuadrado() con cada elemento como argumento y al finalizar almacena los resultados de cada invocaci\u00f3n en una lista\nlista_de_cuadrados = list(map(calcular_cuadrado, lista_de_numeros))\n\n# Itera con la lista de cuadrados imprimiendo en pantalla los resultados obtenidos para cada elemento de la lista de n\u00fameros\nfor nro, cuadrado_de_nro in lista_de_cuadrados:\n    print(\"El cuadrado de\", nro, \"es\", cuadrado_de_nro)\n</code></pre> Terminal (Entrada/Salida)<pre><code>El cuadrado de 1 es 1\nEl cuadrado de 2 es 4\nEl cuadrado de 3 es 9\nEl cuadrado de 4 es 16\nEl cuadrado de 5 es 25\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#ejemplos-de-aplicacion-con-map-y-lista-de-funciones","title":"Ejemplos de aplicaci\u00f3n con map y lista de funciones","text":"Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para calcular el cuadrado de un n\u00famero\n# Retorna el cuadrado de cada n\u00famero pasado a la funci\u00f3n\ncalcular_cuadrado = lambda x: x**2\n\n# Funci\u00f3n lambda para determinar si un n\u00famero es par o impar\n# Retorna \"par\" o \"impar\"\nvalidar_si_numero_es_par_o_impar = lambda x: \"par\" if x % 2 == 0 else \"impar\"\n\n\n# Bloque principal del programa\n\n# Se define la lista de funciones que se invocar\u00e1n\nlista_de_funciones = [calcular_cuadrado, validar_si_numero_es_par_o_impar]\n\n# Inicializa una lista de n\u00fameros\nlista_de_numeros = [1, 2, 3, 4, 5]\n\n\n# Recorro la lista de valores y aplico las funciones de la lista:\nfor elemento in lista_de_numeros:\n\n    valores = list(map(lambda x: x(elemento), lista_de_funciones))\n\n    print(f\"{elemento} es {valores[1]}, y elevado al cuadrado es {valores[0]}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>1 es impar, y elevado al cuadrado es 1\n2 es par, y elevado al cuadrado es 4\n3 es impar, y elevado al cuadrado es 9\n4 es par, y elevado al cuadrado es 16\n5 es impar, y elevado al cuadrado es 25\n</code></pre> <p>Si analizamos concretamente como resulta la estructura de datos, podemos reemplazar en nuestro c\u00f3digo inicial desde la l\u00ednea 21 por el siguiente c\u00f3digo:</p> Python<pre><code># Recorro la lista de valores y aplico las funciones de la lista:\nfor elemento in lista_de_numeros:\n\n    valores = list(map(lambda x: x(elemento), lista_de_funciones))\n\n    print(elemento, \"---&gt;\", valores)\n</code></pre> <p>Y podremos ver el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>1 ---&gt; [1, 'impar']\n2 ---&gt; [4, 'par']\n3 ---&gt; [9, 'impar']\n4 ---&gt; [16, 'par']\n5 ---&gt; [25, 'impar']\n</code></pre> <p>Por un lado, tenemos los elementos de la lista de n\u00fameros y, por otro lado, tenemos los elementos compuestos por la lista de resultados obtenidos para cada n\u00famero de la lista de n\u00fameros, almacenados en otra lista distinta.</p> <p>Es decir, los n\u00fameros y los resultados obtenidos a partir de ellos no est\u00e1n asociados o vinculados de ninguna manera. Esto puede resultar peligroso a nivel de integridad referencial de datos. Es decir, no hay una \"cadena\" que los ate de manera que no se pierdan ni se mezclen.</p> <p>Si quisi\u00e9ramos evitar este problema, deber\u00edamos vincular los elementos de ambas listas de manera ordenada en una \u00fanica lista. Para ello, podr\u00edamos escribir un c\u00f3digo con sentencias m\u00e1s complejas como las que veremos a continuaci\u00f3n y reemplazar el c\u00f3digo original a partir de la l\u00ednea 21: </p> Python<pre><code># Emplea la funci\u00f3n *map* para iterar con la lista de elementos y, en cada iteraci\u00f3n emplea otra funci\u00f3n *map* para iterar con la lista de funciones invocando a cada una  con cada elemento de la lista de elementos como argumento y al finalizar almacena el valor del elemento y los resultados de cada invocaci\u00f3n en una lista\n\n# El uso del operador de desempaquetado (unpacking operator) ( * ) permite desempaquetar la lista de elementos que genera la funci\u00f3n *map* en elementos individuales\nlista_de_valores = list(map(lambda elemento: list((elemento, *map(lambda x: x(elemento), lista_de_funciones))), lista_de_numeros))\n\n# Itera con la lista de valores imprimiendo en pantalla los resultados obtenidos para cada elemento de la lista de n\u00fameros\nfor elemento, cuadrado, paridad in lista_de_valores:\n    print(f\"{elemento} es {paridad}, y elevado al cuadrado es {cuadrado}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>1 es impar, y elevado al cuadrado es 1\n2 es par, y elevado al cuadrado es 4\n3 es impar, y elevado al cuadrado es 9\n4 es par, y elevado al cuadrado es 16\n5 es impar, y elevado al cuadrado es 25\n</code></pre> <p>Como podemos observar, el resultado final es el mismo, pero si analizamos concretamente como resulta la estructura de datos ahora veremos que es mucho m\u00e1s ordenada y robusta en cuanto a la vinculaci\u00f3n de todos los elementos:</p> Python<pre><code>print(lista_de_valores)\n</code></pre> Terminal (Entrada/Salida)<pre><code>[[1, 1, 'impar'], [2, 4, 'par'], [3, 9, 'impar'], [4, 16, 'par'], [5, 25, 'impar']]\n</code></pre> <p>Observamos que la lista contiene elementos que son listas que contienen elementos que corresponden al n\u00famero de la lista de n\u00fameros, al cuadrado de dicho n\u00famero y al tipo de paridad de dicho n\u00famero. </p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/","title":"Variable = input(\"Mensaje para usuario\") Para que el usuario ingrese un valor en la variable","text":""},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#el-int-se-utiliza-para-darle-a-la-variable-el-valor-de-un-numero-entero-si-no-se-guarda-texto","title":"El \"int\" se utiliza para darle a la variable el valor de un n\u00famero entero, si no, se guarda texto","text":"<p>num1 = int(input(\"Ingrese el primer n\u00famero: \"))</p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#se-imprime-la-variable-la-coma-es-para-que-haya-un-espacio-sino-se-usa","title":"Se imprime la variable, la coma es para que haya un espacio, sino se usa +","text":"<p>print(\"El valor almacenado en num1 es\" , num1) </p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#evitar-el-salto-de-linea-implicito","title":"Evitar el salto de linea impl\u00edcito","text":"<p>print(\"Esta linea arranca con un print\", end=\" \") print(\"y termina con otro print\")</p> <p>print(\"Hola\", end=\" hermoso divino genial \") # Todo print tiene implicito el parametro end=\"\\n\" que imprime salto del linea al final print(\"Mundo\") </p> <p>print() print(\"Hola Mundo\") print(\"Hola\" + \" Mundo\") # Concatenacion de cadenas de caracteres print(\"Hola\", \"Mundo\") # impresion de varios argumentos. La coma, por defecto, agrega un espacio</p> <p>print(\"Hola\", end=\" \") # el parametro end, por defecto es ENTER (end=\"\\n\"), permite modificar el final de la impresion print(\"Mundo\", end=\"\\n\\n\") print(\"\\nprimer\\nparametro\") # Puedo incluir el salto de linea (\\n) dentro de mi cadena de texto</p> <p>print(\"hipo\", \"potamo\", sep=\"\") # sep es un parametro para imprimir algo el lugar de la coma (por defecto es sep=\" \") print(\"1\", \"2\", \"3\", sep=\", \") # Esto imprime 1, 2, 3</p> <p>a = 1 b = 2</p> <p>print(a + b) # imprime 3 print(str(a) + str(b)) # imprime 12. str( valor ) convierte en cadena. Se lee \"12\"</p> <p>a = \"1\" b = \"2\"</p> <p>print(int(a) + int(b)) # imprime 3. int( cadena ) convierte en entero.</p> <p>print(f\"Hola {nombre}. Tienes {edad} a\u00f1os.\") # al ejecutar, la compu hace: Hola Pablo. Tienes 45 a\u00f1os / Es es siempre que nombre sea Pablo y edad sea 45. Reemplaza las variables por su contenido dentro de la cadena de texto. NO OLVIDAR LA f ADELANTE DE LA COMILLA DE APERTURA</p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#entrada-de-datos-al-programa","title":"Entrada de datos al programa","text":""},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#ejercicios-de-aplicacion","title":"Ejercicios de aplicaci\u00f3n","text":"<ol> <li> <p>Escribe un programa que solicite el ingreso por teclado de datos referidos al nombre, la edad y la nacionalidad de una persona. Luego que imprima por pantalla una salida de informaci\u00f3n formateada de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Hola {nombre}! Tienes {edad} a\u00f1os. Eres de nacionalidad {nacionalidad}\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>nombre = input(\"Ingrese su nombre: \")\nedad = input(\"Ingrese su edad: \")\nnacionalidad = input(\"Ingrese su nacionalidad: \")\n\nprint(f\"Hola {nombre}! Tienes {edad} a\u00f1os. Eres de nacionalidad {nacionalidad}\")\n</code></pre> </li> <li> <p>Escribe un programa que solicite el ingreso por teclado de datos referidos al nombre, la direcci\u00f3n y el tel\u00e9fono de una persona. Luego que imprima por pantalla una salida de informaci\u00f3n formateada de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Nombre: {nombre}\nDirecci\u00f3n: {direccion}\nTel\u00e9fonno: {telefono}\n</code></pre> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>La impresi\u00f3n en pantalla se debe realizar utilizando un solo comando print.</p> Ver soluci\u00f3n propuesta Python<pre><code>nombre = input(\"Ingresa tu nombre: \")\ndireccion = input(\"Ingresa tu direccion: \")\ntelefono = input(\"Ingresa tu telefono: \")\n\nprint(f\"Nombre: {nombre} \\nDireccion: {direccion} \\nTelefono: {telefono}\")\n</code></pre> <p>El <code>\\n</code> en un comando print se llama \"caracter de nueva l\u00ednea\" (newline character). Se utiliza para indicar el final de una l\u00ednea y el comienzo de una nueva. Cuando se usa en una cadena dentro de un comando print, hace que todo lo que sigue se imprima en la siguiente l\u00ednea.</p> <p>Otra manera de resolver el ejercicio ser\u00eda:</p> Python<pre><code>nombre = input(\"Ingresa tu nombre: \")\ndireccion = input(\"Ingresa tu direccion: \")\ntelefono = input(\"Ingresa tu telefono: \")\n\nprint(f\"Nombre: {nombre}\", f\"Direccion: {direccion}\", f\"Telefono: {telefono}\", sep=\"\\n\")\n</code></pre> <p>El <code>\\n</code> como argumento del par\u00e1metro sep le indica al comando print que debe hacer un salto de l\u00ednea al terminar de imprimir cada uno de los argumentos suministrados.</p> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/introduccion-a-python/","title":"Introduccion a python","text":"<p>print = \"7\"</p> <p>print(print)</p>"},{"location":"unidades/lenguajes-de-programacion/python/introduccion-a-python/#uso-de-comentarios","title":"Uso de comentarios","text":"<ol> <li> <p>Documentaci\u00f3n y comentarios: Este tema cubre la importancia de documentar el c\u00f3digo para que otros programadores (o incluso el propio programador en el futuro) puedan entenderlo f\u00e1cilmente.</p> Python<pre><code># Esto es un comentario de una linea. Su shortcut es CTRL + K + C\n</code></pre> Python<pre><code>'''\nEsto es un comentario\nde m\u00faltiples lineas.\nSe crea escribiendo el contenido entre 3 comillas simples.\n'''\n</code></pre> Python<pre><code>\"\"\"\nEsto es un comentario\nde m\u00faltiples lineas.\nPero se crea escribiendo el contenido entre 3 comillas dobles.\n\nAs\u00ed, este comentario se denomina doc strings.\nPara mayor informaci\u00f3n, visitar https://pandas.pydata.org/docs/index.html\n\nSu shortcut es SHIFT + ALT + A\n\"\"\"\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/introduccion-a-python/#entrada-y-salida-io-como-interactuar-con-el-usuario-a-traves-de-la-entrada-input-de-datos-y-la-salida-print-de-informacion","title":"Entrada y Salida (I/O): C\u00f3mo interactuar con el usuario a trav\u00e9s de la entrada (input) de datos y la salida (print) de informaci\u00f3n.","text":"<pre><code> ``` py title=\"Python\"\n # Se imprime \"Hola Mundo\" en pantalla\n print (\"Hola Mundo\")\n ```\n\n ``` title=\"Terminal (Entrada/Salida)\"\n Hola Mundo\n ```\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/introduccion-a-python/#uso-del-operador-en-cadenas-para-partirlas-en-mas-de-una-linea","title":"Uso del operador  en cadenas para partirlas en m\u00e1s de una l\u00ednea","text":"<p>Puedes usar el operador de continuaci\u00f3n de l\u00ednea ( \\ ) para dividir una cadena de texto en varias l\u00edneas sin interrumpir la cadena. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Esta es una cadena de texto muy larga que queremos dividir \\\nen varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\"\n\nprint(cadena)\n</code></pre> <p>Cuando ejecutes este c\u00f3digo, ver\u00e1s que la cadena se imprime como una sola l\u00ednea, a pesar de que en el c\u00f3digo fuente est\u00e1 dividida en dos l\u00edneas. Esto es porque el operador de continuaci\u00f3n de l\u00ednea ( \\ ) al final de la l\u00ednea le dice a Python que la l\u00ednea actual contin\u00faa en la siguiente l\u00ednea.</p> Terminal (Entrada/Salida)<pre><code>Esta es una cadena de texto muy larga que queremos dividir en varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\n</code></pre> <p>\u00a1Atenci\u00f3n!</p> <p>Aseg\u00farate de que no haya ning\u00fan espacio o cualquier otro car\u00e1cter despu\u00e9s del operador de continuaci\u00f3n de l\u00ednea ( \\ ), de lo contrario, Python interpretar\u00e1 el  como un car\u00e1cter literal en lugar de un indicador de continuaci\u00f3n de l\u00ednea.</p> <p>No solo con cadenas</p> <p>El operador de continuaci\u00f3n de l\u00ednea ( \\ ) tambi\u00e9n se utiliza en Python para indicar que una l\u00ednea de c\u00f3digo contin\u00faa en la siguiente l\u00ednea. Esto es \u00fatil cuando tienes una l\u00ednea de c\u00f3digo muy larga y quieres dividirla en varias l\u00edneas para mejorar la legibilidad de este.</p> Python<pre><code># Sin el operador de continuaci\u00f3n de l\u00ednea\nsuma = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n# Con el operador de continuaci\u00f3n de l\u00ednea \n# (\u00a1Para recordar! que no debe posee m\u00e1s caracteres a continuaci\u00f3n)\nsuma = 1 + 2 + 3 + 4 + \\\n    5 + 6 + 7 + 8 + \\\n    9 + 10\n\nprint(suma)  # Output: 55\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/matematica-con-python/","title":"M\u00f3dulo o resto","text":"<p>print(31%5)</p>"},{"location":"unidades/lenguajes-de-programacion/python/matematica-con-python/#division-entera","title":"Divisi\u00f3n entera","text":"<p>print(31//5)</p>"},{"location":"unidades/lenguajes-de-programacion/python/matematica-con-python/#los-numeros-decimales-tienen-varios-decimales-estudiar-esto","title":"los numeros decimales tienen varios decimales // estudiar esto","text":"<p>print(0.2 + 0.1) # Devuelve 0.30000000000000004 ???</p>"},{"location":"unidades/lenguajes-de-programacion/python/modulos-en-python/","title":"Uso de m\u00f3dulos en Python","text":"Python<pre><code># Importa el m\u00f3dulo os\nimport os\n\n# Limpia la pantalla\nos.system(\"cls\")\n</code></pre> <p>Tambi\u00e9n es posible importar solamente una parte del m\u00f3dulo, para ahorrar espacio en memoria:</p> Python<pre><code># Importa la m\u00f3dulo os\nfrom os import system\n\n# Limpia la pantalla\nsystem(\"cls\")\n</code></pre> <p>Cabe aclarar que la importaci\u00f3n de m\u00f3dulos ocupa espacio en memoria. Si se puede evitar, hay que tratar de hacerlo. Por ejemplo, el siguiente c\u00f3digo cumple con la mimsa tarea a nivel visual:</p> Python<pre><code># Limpia la pantalla\nprint(\"\\033[2J\\033[1H\") \n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/","title":"Ejercicios de cadenas de caracteres","text":"<ol> <li> <p>Dada la siguiente cadena \" Hola Mundo \" escribe un programa que imprima en pantalla lo siguiente:</p> Terminal (Entrada/Salida)<pre><code>*** Hola Mundo ***\n Hola Mundo\n Hola Mundo ***\n*** Hola Mundo\nHola Mundo\n</code></pre> <p>\u00a1Presta mucha atenci\u00f3n a las salidas propuestas, sobre todo, los espacios y las alineaciones!</p> Ver soluci\u00f3n propuesta Python<pre><code>cadena = \"*** Hola Mundo ***\"\n\nprint(cadena)\nprint(cadena.strip(\"*\"))\nprint(cadena.lstrip(\"*\"))\nprint(cadena.rstrip(\"*\"))\nprint(cadena.strip(\"*\").strip())\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#para-enunciar","title":"Para enunciar:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#find-devuelve-la-posicion-de-la-primera-ocurrencia-de-un-caracter","title":"find() devuelve la posici\u00f3n de la primera ocurrencia de un caracter","text":"<p>cadena = \"Es una cadena nada de nada\" print(cadena) print(cadena.find(\"nada\"))         # devuelve la posici\u00f3n de la primera ocurrencia de \"nada\" print(cadena.find(\"nada\", 15))     # busca desde la posici\u00f3n 15 print(cadena.find(\"nada\", 0, 10))  # -1 es que no encontr\u00f3 print()</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#rfind-devuelve-la-posicion-de-la-ultima-ocurrencia-de-un-caracter","title":"rfind() devuelve la posici\u00f3n de la \u00faltima ocurrencia de un caracter","text":"<p>cadena = \"Es una cadena nada de nada\" print(cadena) print(cadena.rfind(\"nada\"))         # devuelve la posici\u00f3n de la \u00faltima ocurrencia de \"nada\" print(cadena.rfind(\"nada\", 15))     # busca desde el final hasta la posici\u00f3n 15 print(cadena.rfind(\"nada\", 10, 20)) # busca desde la posici\u00f3n 10 hasta la posici\u00f3n 20 print()</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#ejemplo-6","title":"Ejemplo 6","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_1","title":"------------------------------------------------------------","text":"<p>numero = 12 color = \"verde\" print(\"El color es: \" + color + \" y el n\u00famero es: \" + str(numero)) print( f\"El color es: {color} y el n\u00famero es: {numero}\")</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_2","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#ejemplo-7","title":"Ejemplo 7","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_3","title":"------------------------------------------------------------","text":"<p>numero = 12 color = \"verde\" print(\"El color es: \" + color + \"\\n y el n\u00famero es: \" + str(numero))</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#operador-de-escape","title":"Operador de \"escape\"","text":"<p>print('El \\'color\\' es: ' + color + '\\n y el \\'n\u00famero\\' es: ' + str(numero)) print(\"a \\t \\t \\t otros \\t espacios\") print(\"a \\t c \\t varios \\t espacios\")</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_4","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#ejemplo-8","title":"Ejemplo 8","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_5","title":"------------------------------------------------------------","text":"<p>print( \"C:\\nombre\\Juan\\Desktop\\Python\\Python1\\05_Strings1.py\" ) print( r\"C:\\nombre\\Juan\\Desktop\\Python\\Python1\\05_Strings1.py\" ) #Raw String color = \"verde\" print( rf\"El \\numero es color: {color}\" )</p> <p>Formato de cadenas de caracteres nombre = \"Juan\" apellido = \"Perez\" edad = 30</p> <p>print (\"Hola, {} {}, tienes {} a\u00f1os\".format(nombre, apellido, edad)) print (\"Hola, {1} {0}, tienes {2} a\u00f1os\".format(nombre, apellido, edad))</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#slicing-cadenas-y-listas","title":"Slicing (cadenas y listas)","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#get-the-characters-from-position-2-to-position-5-not-included","title":"Get the characters from position 2 to position 5 (not included):","text":"<p>b = \"Hello, World!\" print(b[2:5])</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#slice-from-the-start","title":"Slice From the Start","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#by-leaving-out-the-start-index-the-range-will-start-at-the-first-character","title":"By leaving out the start index, the range will start at the first character:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#get-the-characters-from-the-start-to-position-5-not-included","title":"Get the characters from the start to position 5 (not included):","text":"<p>b = \"Hello, World!\" print(b[:5])</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#negative-indexing","title":"Negative Indexing","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#use-negative-indexes-to-start-the-slice-from-the-end-of-the-string","title":"Use negative indexes to start the slice from the end of the string:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#example","title":"Example","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#get-the-characters","title":"Get the characters:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#from-o-in-world-position-5","title":"From: \"o\" in \"World!\" (position -5)","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#to-but-not-included-d-in-world-position-2","title":"To, but not included: \"d\" in \"World!\" (position -2):","text":"<p>b = \"Hello, World!\" print(b[-5:-2])</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-entrada-salida-con-python/","title":"Python: ejercicios de I/O (entrada/salida)","text":"<ol> <li> <p>Imprime en pantalla \"Hola Mundo!\"</p> Ver soluci\u00f3n propuesta Python<pre><code># Imprime en pantalla \"Hola Mundo!\"\nprint(\"Hola Mundo!\")\n</code></pre> </li> <li> <p>Imprime en pantalla \"Hola Mundo!\" concatenando ambas palabras y el signo al momento de la impresi\u00f3n.</p> Ver soluci\u00f3n propuesta Python<pre><code># Imprime en pantalla \"Hola Mundo!\"\nprint(\"Hola\" + \" \" + \"Mundo\" + \"!\")\n</code></pre> <p>Para pensar</p> <p>\u00bfSe lograr\u00eda el mismo efecto de impresi\u00f3n si en lugar del operador de concatenacion ( + ) se usara la coma ( , )?</p> <p>Es decir <code>print(\"Hola\" , \" \" , \"Mundo\" , \"!\")</code></p> </li> <li> <p>Almacena en una variable la frase \"Hola Mundo!\". Luego, imprime en pantalla el contenido de la variable.</p> Ver soluci\u00f3n propuesta Python<pre><code># Almacena \"Hola Mundo!\" en una variable\nfrase = \"Hola Mundo!\"\n\n# Imprime en pantalla el contenido de la variable\nprint(frase)\n</code></pre> </li> <li> <p>Genera una l\u00ednea en blanco en la pantalla.</p> Ver soluci\u00f3n propuesta Python<pre><code>print()\n</code></pre> <p>La ejecuci\u00f3n del comando print sin argumentos -los par\u00e9ntesis vac\u00edos- imprime un salto de l\u00ednea solamente.</p> </li> <li> <p>Elije dos n\u00fameros enteros diferentes. Imprime la suma entre ambos, pero haciendo el c\u00e1lculo mental primero. No puedes usar ninguna expresi\u00f3n de c\u00e1lculo en el programa.   </p> <p>La salida en pantalla debe ser como se ve en el ejemplo:</p> Terminal (Entrada/Salida)<pre><code>La suma de 4 y de 7 es 11.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Imprime en pantalla la suma de 4 y de 7\nprint(\"La suma de 4 y de 7 es 11.\")\n</code></pre> </li> <li> <p>Modifica el ejercicio anterior para almacenar los n\u00fameros en dos variables distintas. Imprime la suma de ambos n\u00fameros almacenados. Ahora si puedes utilizar expresiones de c\u00e1lculo para realizar la tarea.  </p> <p>La salida en pantalla debe ser como se ve en el ejemplo:</p> Terminal (Entrada/Salida)<pre><code>La suma de 4 y de 7 es 11.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Inicializa dos variables con los valores enteros\nn1 = 4\nn2 = 7\n\n# Imprime en pantalla la suma de los valores almacenados en n1 y n2\nprint(\"La suma de\", n1, \"y de\", n2, \" es \", n1+n2, \".\")\n</code></pre> <p>\u00a1Para pensar!</p> <p>\u00bfPor qu\u00e9 siempre conviene resolver problemas como en este ejercicio y no como en el ejercicio anterior?</p> <p>\u00bfQu\u00e9 ocurrir\u00eda en cada caso si se precisan modificar los n\u00fameros?</p> </li> <li> <p>Ingresa un n\u00famero entero por teclado. Impr\u00edmelo en pantalla como el siguiente ejemplo (en este caso, se ingres\u00f3 un 10):</p> Terminal (Entrada/Salida)<pre><code>El n\u00famero ingresado es 10.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Ingresar un numero por teclado y almacenarlo como entero\nn = int(input(\"Ingrese un numero: \"))\n\n# Imprime en pantalla el n\u00famero\nprint(\"El numero ingresado es\", n)\n</code></pre> <p>\u00a1Para recordar!</p> <p>El comando input recibe un dato por teclado y siempre lo conviente a cadena de caracteres(str).</p> <p>Si es preciso almacenar dicho dato con otro tipo de dato, ser\u00e1 necesario convertirlo antes del almacenamiento.</p> </li> <li> <p>Ingresa un n\u00famero entero por teclado. Imprime en pantalla el doble del valor ingresado.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un numero: 5\nEl doble de 5 es 10\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Ingresa un numero por teclado. \n# Lo convierte a entero. \n# Lo almacena en una variable.\nn = int(input(\"Ingrese un numero: \")) # recuerda que el comando *input* siempre devuelve una cadena de texto\n\n# Imprime en pantalla el doble del valor ingresado\nprint(\"El doble de\", n, \"es\", n*2)\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-alternativas-con-python/","title":"Python: ejercicios de estructuras alternativas","text":"<ol> <li> <p>Escribe un programa que pida al usuario un n\u00famero y muestre un mensaje si el n\u00famero es neutro.</p> Ver soluci\u00f3n propuesta Python<pre><code>numero = int(input(\"Introduce un n\u00famero: \"))\n\nif numero == 0:\n    print(\"El n\u00famero es neutro.\")\n</code></pre> </li> <li> <p>Escribe un programa que pida al usuario un n\u00famero y muestre el mensaje: <code>n\u00famero es divisible por 5</code>. Donde dice <code>n\u00famero</code> debe imprimir el n\u00famero ingresado.</p> Ver soluci\u00f3n propuesta Python<pre><code>numero = int(input(\"Ingrese un n\u00famero: \"))\n\n# El operador % realiza la divisi\u00f3n y devuelve el resto de esta\nif numero % 5 == 0:\n    print(numero, \"es divisible por 5\")\n</code></pre> </li> <li> <p>Modifica el programa del ejercicio anterior para que ahora indique lo mismo pero que tambi\u00e9n lo haga si el n\u00famero ingresado no es divisible por 5.</p> Ver soluci\u00f3n propuesta Python<pre><code>numero = int(input(\"Ingrese un n\u00famero: \"))\n\n# El operador % realiza la divisi\u00f3n y devuelve el resto de esta\nif numero % 5 == 0:\n    print(numero, \"es divisible por 5\")\n\nelse:\n    print(numero, \"no es divisible por 5\")  \n</code></pre> </li> <li> <p>Escribe un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es par o impar.</p> Ver soluci\u00f3n propuesta Python<pre><code>numero = int(input(\"Ingrese un n\u00famero entero: \"))\n\n# El operador % realiza la divisi\u00f3n y devuelve el resto de esta\nif numero % 2 == 0:\n    print(\"El n\u00famero es par\")\n\nelse:\n    print(\"El n\u00famero es impar\")\n</code></pre> </li> <li> <p>Escribe un programa que pida al usuario dos n\u00fameros (que ser\u00e1n diferentes siempre) y muestre el mayor de ellos.</p> Ver soluci\u00f3n propuesta Python<pre><code>num1 = int(input(\"Introduce el primer n\u00famero: \"))\nnum2 = int(input(\"Introduce el segundo n\u00famero: \"))\n\nif num1 &gt; num2:\n    print(\"El n\u00famero mayor es:\", num1)\nelse:\n    print(\"El n\u00famero mayor es:\", num2)\n</code></pre> </li> <li> <p>Escribe un programa que pida al usuario dos n\u00fameros y muestre por pantalla su divisi\u00f3n.  </p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Si el divisor es cero programa debe mostrar un error y no realizar la divisi\u00f3n.</p> Ver soluci\u00f3n propuesta Python<pre><code>dividendo = float(input(\"Ingrese el dividendo: \"))\ndivisor = float(input(\"Ingrese el divisor: \"))\n\n# Controlar que el divisor no sea 0 evitar\u00e1 que la expresi\u00f3n `dividendo / divisor` retorne un error no esperado\nif divisor == 0:\n    print(\"Error: El divisor no puede ser cero porque no se puede dividir por cero.\")\n\nelse:\n    print(\"La divisi\u00f3n entre\", dividendo, \"y\", divisor, \"da:\", dividendo / divisor)  \n</code></pre> <p>Es importante realizar control de errores que puedan sucederse durante la ejecuci\u00f3n del programa para evitar que este falle y se fuerce su finalizaci\u00f3n de manera abrupta.</p> </li> <li> <p>Ingresa tu edad por teclado. Imprime en pantalla si eres mayor o menor de edad. Recuerda que una persona es mayor de edad al cumplir 18 a\u00f1os.</p> <p>Respeta la sintaxis de salida como muestran los ejemplos:</p> Terminal (Entrada/Salida)<pre><code>Ingrese su edad: 21\nUsted es mayor de edad con 21 a\u00f1os.\n\nIngrese su edad: 18\nUsted es mayor de edad con 18 a\u00f1os.\n\nIngrese su edad: 5\nUsted es menor de edad con 5 a\u00f1os.\n</code></pre> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Asumimos que el usuario siempre va a ingresar una edad v\u00e1lida. Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.</p> Ver soluci\u00f3n propuesta Python<pre><code>'''\nSolicita el ingreso de la edad por teclado. \nConvierte el dato devuelto por el comando input (siempre devuelve una cadena) en entero. \nAlmacena el dato convertido en la variable edad\n'''\nedad = int(input(\"Ingrese su edad: \"))\n\n# Evalua si la edad ingresada corresponde a un mayor de edad o a un menor de edad\n\n# Si la edad es mayor o igual a 18\nif edad &gt;= 18:\n    print(\"Usted es mayor de edad con\", edad, \"a\u00f1os.\")\n\n# Si la edad no es mayor ni igual a 18\nelse:\n    print(\"Usted es menor de edad con\", edad, \"a\u00f1os.\")\n</code></pre> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: El programa, luego de almacenar la edad ingresada, debe imprimir en pantalla el resultado correspondiente en el siguiente orden de evaluaci\u00f3n:</p> <ul> <li>Eres mayor de edad (si has cumplido 18 a\u00f1os)</li> <li>Eres un adulto joven (si no has cumplido 35 a\u00f1os)</li> <li>Eres un adulto mayor (si has cumplido 65 a\u00f1os)</li> <li>Eres menor de edad (si no has cumplido 18 a\u00f1os)</li> <li>Eres un adolescente (si has cumplido 13 a\u00f1os)</li> <li>Eres un ni\u00f1o (si has cumplido 2 a\u00f1os)</li> <li>Eres un beb\u00e9 (si no has cumplido 2 a\u00f1os)</li> </ul> Ver soluci\u00f3n propuesta Python<pre><code>edad = int(input(\"Ingrese su edad: \"))\n\nif edad &gt;= 18:\n    print(\"Eres mayor de edad\")\n    if edad &lt; 35:\n        print(\"Eres un adulto joven\")\n    elif edad &gt;= 65:\n        print(\"Eres un adulto mayor\")\nelse:\n    print(\"Eres menor de edad\")\n    if edad &gt;= 13:\n        print(\"Eres un adolescente\")\n    elif edad &gt;= 2:\n        print(\"Eres un ni\u00f1o\")\n    else:\n        print(\"Eres un beb\u00e9\")\n</code></pre> <p>Este programa primero pide al usuario que ingrese su edad.  </p> <p>Luego, verifica si la edad es mayor o igual a 18. Si es as\u00ed, imprime \"Eres mayor de edad\" y luego verifica si la edad es menor a 35 o mayor o igual a 65 para imprimir \"Eres un adulto joven\" o \"Eres un adulto mayor\" respectivamente.  </p> <p>Si la edad es menor a 18, imprime \"Eres menor de edad\" y luego verifica si la edad es mayor o igual a 13, mayor o igual a 2 o menor a 2 para imprimir \"Eres un adolescente\", \"Eres un ni\u00f1o\" o \"Eres un beb\u00e9\" respectivamente.</p> </li> <li> <p>Escribe un programa que pida al usuario un n\u00famero entero.  Si el n\u00famero es mayor a 10, mostrar si es par o impar.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>recuerda que todo programa siempre debe dar un resultado cada vez que se ejecute. No puede haber ejecuci\u00f3n sin un resultado asociado. </p> Ver soluci\u00f3n propuesta Python<pre><code>numero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nif numero &gt; 10:\n\n    if numero % 2 == 0:\n        print(\"El n\u00famero ingresado es par\")\n\n    else:\n        print(\"El n\u00famero ingresado es impar\")\n\nelse:\n    print(\"El n\u00famero ingresado no es mayor a 10\")\n</code></pre> </li> <li> <p>Escribe un programa que pida al usuario una calificaci\u00f3n (0-100) y determine la letra correspondiente: A para 90-100, B para 80-89, C para 70-79, D para 60-69, F para 0-59.</p> Ver soluci\u00f3n propuesta Python<pre><code>calificacion = float(input(\"Introduce una calificaci\u00f3n: \"))\n\nif calificacion &gt;= 90:\n    print(\"La calificaci\u00f3n es A.\")\n\nelif calificacion &gt;= 80:\n    print(\"La calificaci\u00f3n es B.\")\n\nelif calificacion &gt;= 70:\n    print(\"La calificaci\u00f3n es C.\")\n\nelif calificacion &gt;= 60:\n    print(\"La calificaci\u00f3n es D.\")\n\nelse:\n    print(\"La calificaci\u00f3n es F.\")\n</code></pre> <ol> <li>Escribe un programa que pida al usuario un n\u00famero entero.  Si el valor ingresado es 2, 4 o 6 muestra en pantalla su valor en letras.</li> </ol> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Recuerda que todo programa siempre debe dar un resultado cada vez que se ejecute. No puede haber ejecuci\u00f3n sin un resultado asociado. </p> Ver soluci\u00f3n propuesta Python<pre><code>numero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nif numero == 2:\n    print(\"El n\u00famero ingresado es el DOS\")\n\nelif numero == 4:\n    print(\"El n\u00famero ingresado es el CUATRO\")\n\nelif numero == 6:\n    print(\"El n\u00famero ingresado es el SEIS\")\n\nelse:\n    print(\"El n\u00famero ingresado no el es 2 ni el 4 ni el 6\")\n</code></pre> </li> <li> <p>Ingresa 2 n\u00fameros por teclado. Almac\u00e9nalos en 2 variables. Luego, imprime en pantalla cada valor ingresado. Luego, imprime en pantalla si el primer n\u00famero es mayor, igual o menor que el segundo n\u00famero.  </p> <p>Por ejemplo, para los valores 4 y 5 la salida ser\u00eda:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el primer n\u00famero: 4\nIngrese el segundo n\u00famero: 5\n\nEl valor almacenado en num1 es 4\nEl valor almacenado en num2 es 5\n\n4 es menor que 5\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Almacena 2 valores ingresados por teclado en 2 variables\nnum1 = int(input(\"Ingrese el primer n\u00famero: \"))\nnum2 = int(input(\"Ingrese el segundo n\u00famero: \"))\n\n# Se imprimen los valores almacenados en las variables\nprint(\"El valor almacenado en num1 es\" , num1) \nprint(\"El valor almacenado en num2 es\" , num2)\n\n# Estructura alternativa anidada\nif (num1 &gt; num2):\n    print(num1 , \"es mayor que\" , num2)\n\nelif (num2 == num1):\n    print(num1 , \"es igual a\" , num2)\n\nelse:   \n    print(num1 , \"es menor que\" , num2)    \n</code></pre> </li> <li> <p>Escribe un programa que pida al usuario tres n\u00fameros distintos y muestre por pantalla el mayor de ellos.</p> Ver soluci\u00f3n propuesta Python<pre><code>num1 = float(input(\"Introduce el primer n\u00famero: \"))\nnum2 = float(input(\"Introduce el segundo n\u00famero: \"))\nnum3 = float(input(\"Introduce el tercer n\u00famero: \"))\n\nif num1 &gt;= num2 and num1 &gt;= num3:\n    print(\"El mayor es: \", num1)\n\nelif num2 &gt;= num1 and num2 &gt;= num3:\n    print(\"El mayor es: \", num2)\n\nelse:\n    print(\"El mayor es: \", num3)\n</code></pre> </li> <li> <p>Ingresa una cadena de caracteres por teclado. Si es \"hola\" mostrarla en pantalla.</p> Ver soluci\u00f3n propuesta Python<pre><code>cadena = input(\"Ingrese una cadena: \")\n\n# El m\u00e9todo lower() aplicado a `cadena` convierte la cadena en min\u00fasculas, temporalmente, antes de hacer la comparaci\u00f3n\nif cadena.lower() == \"hola\":\n    print(cadena)\n</code></pre> <p>\u00a1Para pensar!</p> <p>\u00bfPor qu\u00e9 crees que se debe aplicar el m\u00e9todo <code>lower()</code> en este programa?</p> Ver respuesta <p>El m\u00e9todo <code>lower()</code> se utiliza en este programa para convertir la cadena de entrada en min\u00fasculas. Esto se hace para que la comparaci\u00f3n no distinga entre may\u00fasculas y min\u00fasculas.</p> <p>Por ejemplo, si el usuario ingresa \"Hola\", \"HOLA\" u \"hOlA\", al aplicar el m\u00e9todo <code>lower()</code>, todas estas entradas se convierten en \"hola\", lo que permite que la comparaci\u00f3n <code>cadena.lower() == \"hola\"</code> sea verdadera en todos estos casos.</p> <p>Por lo tanto, el uso de <code>lower()</code> aqu\u00ed permite que el programa acepte la entrada independientemente de c\u00f3mo el usuario elija usar las may\u00fasculas y min\u00fasculas.</p> <p>\u00bfQu\u00e9 significa convertir temporalmente un tipo de dato en otro durante el c\u00e1lculo de una expresi\u00f3n?</p> Ver respuesta <p>Convertir temporalmente un tipo de dato en otro durante el c\u00e1lculo de una expresi\u00f3n se refiere a cambiar el tipo de dato de una variable o valor para realizar una operaci\u00f3n espec\u00edfica, que si no fuera convertido resultar\u00eda imposible de realizar por ser incompatible.</p> <p>\u00bfPor qu\u00e9 se utiliza este procedimiento temporal? \u00bfY c\u00f3mo se lo llamaba?</p> Ver respuesta <p>Es importante notar que esta conversi\u00f3n es temporal y no afecta el valor original. En el programa anterior, el valor almacenado en <code>cadena</code> despu\u00e9s de la operaci\u00f3n <code>cadena.lower()</code> sigue siendo el mismo que fuera ingresado por el usuario.</p> <p>Convertir temporalmente un tipo de dato en otro durante el c\u00e1lculo de una expresi\u00f3n se refiere al concepto de \"casting\" o \"conversi\u00f3n de tipos\" en programaci\u00f3n.   </p> </li> <li> <p>Escribe un programa que pida al usuario un car\u00e1cter y muestre un mensaje si el car\u00e1cter es una vocal.</p> Ver soluci\u00f3n propuesta con una estructura alternativa doble anidada Python<pre><code>caracter = input(\"Introduce un car\u00e1cter: \")\n\nif caracter.lower() == 'a':\n    print(\"El car\u00e1cter\", caracter, \"es una vocal.\")\n\nelif caracter.lower() == 'e':\n    print(\"El car\u00e1cter\", caracter, \"es una vocal.\")\n\nelif caracter.lower() == 'i':\n    print(\"El car\u00e1cter\", caracter, \"es una vocal.\")\n\nelif caracter.lower() == 'o':\n    print(\"El car\u00e1cter\", caracter, \"es una vocal.\")\n\nelif caracter.lower() == 'u':\n    print(\"El car\u00e1cter\", caracter, \"es una vocal.\")\n\nelse:\n    print(\"El car\u00e1cter\", caracter, \"no es una vocal.\")\n</code></pre> Ver soluci\u00f3n propuesta con una expresi\u00f3n condicional compuesta Python<pre><code>caracter = input(\"Introduce un car\u00e1cter: \")\n\nif caracter.lower() == 'a' or caracter.lower() == 'e' or caracter.lower() == 'i' or caracter.lower() == 'o' or caracter.lower() == 'u':\n    print(\"El car\u00e1cter\", caracter, \"es una vocal.\")\n\nelse:\n    print(\"El car\u00e1cter\", caracter, \"no es una vocal.\")\n</code></pre> Ver soluci\u00f3n propuesta en Python Python<pre><code>caracter = input(\"Introduce un car\u00e1cter: \")\n\nif caracter.lower() in 'aeiou':\n    print(\"El car\u00e1cter\", caracter, \"es una vocal.\")\n\nelse:\n    print(\"El car\u00e1cter\", caracter, \"no es una vocal.\")\n</code></pre> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese su nombre, su nacionalidad y su edad.  Si la nacionalidad es argentina y el usuario es mayor de edad, permitirle votar. Si no, indicarle el motivo por el cual no puede votar.</p> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: argentina\nIngrese su edad: 45\n\nBienvenido Pablo. Puedes pasar a votar.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: argentina \nIngrese su edad: 17\n\nLo lamento Pablo. No puedes pasar a votar porque no eres mayor de edad.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: ingles \nIngrese su edad: 56\n\nLo lamento Pablo. No puedes pasar a votar porque no eres de nacionalidad argentina.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: ingles\nIngrese su edad: 17\n\nLo lamento Pablo. No puedes pasar a votar porque no eres de nacionalidad argentina y no eres mayor de edad.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>nombre = input(\"Ingrese su nombre: \")\nnacionalidad = input(\"Ingrese su nacionalidad: \")\nedad = int(input(\"Ingrese su edad: \"))\n\n# La persona es argentina y es mayor de edad\nif nacionalidad == \"argentina\" and edad &gt;= 18:\n    print(f\"Bienvenido {nombre}. Puedes pasar a votar.\")\n\nelse:\n    print(f\"Lo lamento {nombre}. No puedes pasar a votar porque\", end=\" \")\n\n    # La persona no es argentina ni es mayor de edad\n    if nacionalidad != \"argentina\" and edad &lt; 18:\n        print(\"no eres de nacionalidad argentina ni eres mayor de edad.\")\n\n    # La persona no es argentina\n    elif nacionalidad != \"argentina\":\n        print(\"no eres de nacionalidad argentina.\")\n\n    # La persona no es mayor de edad\n    else:\n        print(\"no eres mayor de edad.\")\n</code></pre> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese un texto. El Programa deber\u00e1 indicar, luego, si el texto est\u00e1 todo en may\u00fasculas o todo en min\u00fasculas.</p> <p>\u00a1Para recordar!</p> <p>Todo programa, siempre, debe devolver un resultado.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Asumimos que el usuario siempre va a ingresar un texto v\u00e1lido. Es decir, con letras. Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.</p> Ver soluci\u00f3n propuesta Python<pre><code>texto = input(\"Ingrese un texto: \")\n\nif texto.isupper():\n    print(\"Todo el texto est\u00e1 en may\u00fasculas.\")\n\nelif texto.islower():\n    print(\"Todo el texto est\u00e1 en min\u00fasculas.\")\n\nelse:\n    print(\"El texto est\u00e1 en may\u00fasculas y en min\u00fasculas.\")\n</code></pre> </li> <li> <p>Escribe un programa que pida al usuario dos palabras y determine si son un anagrama (una palabra es un anagrama de otra si usa las mismas letras en un orden diferente).</p> <p>\u00a1Una ayudita!</p> <p>En Python, una cadena de caracteres puede ser tratada como una lista de caracteres. Esto significa que cada caracter es un elemento individual de un grupo de caracteres. Y que cada grupo puede ser ordenado para una mayor conveniencia utilizando la palabra clave o funci\u00f3n  </p> <pre><code>sorted(grupo_para_ordenar)\n</code></pre> <p>Donde <code>grupo_para_ordenar</code> es la variable que contiene la cadena de caracteres o la cadena de caracteres (literal) directamente.</p> <p>Teniendo en cuenta lo indicado, \u00bfC\u00f3mo se te ocurre que podemos aprovechar esta funci\u00f3n para resolver el problema?</p> Ver soluci\u00f3n propuesta Python<pre><code>palabra1 = input(\"Introduce la primera palabra: \")\npalabra2 = input(\"Introduce la segunda palabra: \")\n\nif sorted(palabra1) == sorted(palabra2):\n    print(\"Las palabras son anagramas.\")\n\nelse:\n    print(\"Las palabras no son anagramas.\")\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/","title":"Python: ejercicios de estructuras de datos","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-listas","title":"Ejercicios con listas","text":"<ol> <li> <p>Crea una lista con 8 elementos (n\u00fameros enteros del 1 al 8). Imprime en pantalla la lista. Luego, agrega 2 elementos m\u00e1s (9 y 10) al final de la lista, uno a la vez. Imprime en pantalla la lista. Luego, reemplaza el valor almacenado en el quinto elemento por -5. Imprime en pantalla la lista. Luego, elimina la posici\u00f3n 5. Almacena el valor en la variable elemento_eliminado. Imprime en pantalla la lista. Luego, vuelve a almacenar el valor 5 insert\u00e1ndolo en la posici\u00f3n 5. Esto significa que todos los elementos se correr\u00e1n una posici\u00f3n a partir de la posici\u00f3n 5. Imprime en pantalla la lista. Luego, agrega el valor almacenado en la variable elemento_eliminado al final de la lista. Imprime en pantalla la lista. Luego, elimina el elemento que contenga el valor almacenado en la variable elemento_eliminado. Imprime en pantalla la lista.</p> Terminal (Entrada/Salida)<pre><code>[1, 2, 3, 4, 5, 6, 7, 8]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, -5, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -5]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Crea una lista con 8 elementos \nlista_de_numeros = [1, 2, 3, 4, 5, 6, 7, 8]\n\nprint(lista_de_numeros)\n\n# Agrega 2 elementos m\u00e1s al final de la lista, uno a la vez\nlista_de_numeros.append(9)\nlista_de_numeros.append(10)\n\nprint(lista_de_numeros)\n\n# Reemplaza el valor almacenado en el quinto elemento por -5\nlista_de_numeros[4] = -5\n\nprint(lista_de_numeros)\n\n# Luego, elimina la posici\u00f3n 5 almacenando el valor en la variable *elemento_eliminado*\nelemento_eliminado = lista_de_numeros.pop(4)\n\nprint(lista_de_numeros)\n\n# Almacena el valor 5 insert\u00e1ndolo en la posici\u00f3n 5 de la lista\nlista_de_numeros.insert(4, 5)\n\nprint(lista_de_numeros)\n\n# Agrega el valor almacenado en la variable *elemento_eliminado* al final de la lista  \nlista_de_numeros.append(elemento_eliminado)\n\nprint(lista_de_numeros)\n\n# Elimina el elemento que contenga el valor almacenado en la variable *elemento_eliminado*  \nlista_de_numeros.remove(elemento_eliminado)\n\nprint(lista_de_numeros)    \n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-for-in","title":"Ejercicios con for \u2026 in","text":"<ol> <li> <p>Dada la siguiente lista:</p> Python<pre><code>numeros = [4, -78, 9, 84, -7, 0, 1]\n</code></pre> <p>Imprime en pantalla cada uno de los elementos que la componen, rengl\u00f3n por rengl\u00f3n:</p> Terminal (Entrada/Salida)<pre><code>4\n-78\n9\n84\n-7\n0\n1\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>numeros = [4, -78, 9, 84, -7, 0, 1]\n\nfor numero in numeros:\n    print(numero)\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-for-in-enumerate","title":"Ejercicios con for \u2026 in enumerate","text":"<ol> <li> <p>Crea dos listas seg\u00fan el ejemplo:</p> Python<pre><code>lista_1 = [1, 2, 3, 4, 5]\n\nlista_2 = [10, 9, 8, 7, 6]\n</code></pre> <p>Luego, une ambas listas en una tercera lista llamada lista_unida. Luego, imprime la lista_unida, en una misma l\u00ednea, separados por una coma. Presta atenci\u00f3n que el \u00faltimo n\u00famero no debe tener una coma a continuaci\u00f3n.</p> Ver soluci\u00f3n propuesta Python<pre><code>lista_1 = [1, 2, 3, 4, 5]\nlista_2 = [10, 9, 8, 7, 6]\n\n# Une las 2 listas con el operador de adici\u00f3n y asigna el resultado a la lista_unida\nlista_unida = lista_1 + lista_2\n\n# Imprime la lista_unida en un solo rengl\u00f3n, separando los elementos con una coma, sin incluir la coma al final\nfor index, numero in enumerate(lista_unida):\n    print(numero, end=\", \" if index &lt; (len(lista_unida) - 1) else \"\\n\")\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-while-loop","title":"Ejercicios con while \u2026 loop","text":"<ol> <li> <p>Ingresa n\u00fameros por teclado y almac\u00e9nalos en una lista. Repite la operaci\u00f3n hasta que se ingrese un 0 por teclado. El 0 no debe ser almacenado en la lista. Luego, imprime en pantalla la cantidad de elementos que posee la lista.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero o el cero para terminar el ingreso: 5\nIngrese un n\u00famero o el cero para terminar el ingreso: 7\nIngrese un n\u00famero o el cero para terminar el ingreso: 3\nIngrese un n\u00famero o el cero para terminar el ingreso: 9\nIngrese un n\u00famero o el cero para terminar el ingreso: 0\nLa lista posee 4  elementos.\nEstos son:  [5, 7, 3, 9]\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>lista = []\n\n# Limpia la pantalla\nprint(\"\\033[2J\\033[1H\")\n\n\n# Solicita el ingreso de n\u00fameros y los almacena en la lista hasta que se ingrese un 0\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero o el cero para terminar el ingreso: \"))\n    if n == 0:\n        break\n    lista.append(n)\n\n# Imprime por pantalla la longitud de la lista\nprint(\"La lista posee\", len(lista), \" elementos.\")\n\n# Imprime por pantalla los elementos almacenados en la lista\nprint(\"Estos son:\", lista)\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-cadenas-de-caracteres","title":"Ejercicios con cadenas de caracteres","text":"<ol> <li> <p>Ingresa tu nombre por teclado y almac\u00e9nalo en una variable. Luego imprime en pantalla si posee letras repetidas. Puedes usar otras estructuras de datos para realizar la tarea de manera m\u00e1s simple.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo Andres\nSu nombre posee letras repetidas.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Ramon Fidel\nSu nombre no posee letras repetidas.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Solicita el ingreso de datos por teclado y los convierte en min\u00fasculas antes de almacenarlos en la variable\nnombre = input(\"Ingrese su nombre: \").lower()\n\n# Elimina los espacios que puedan existir almacenados en la variable\nnombre = nombre.replace(\" \", \"\")\n\n# Convierte cada caracter de la cadena de caracteresen elementos de una lista \nletras = list(nombre)\n\n# set es un comando que eval\u00faa un conjunto de elementos y devuelve un conjunto de elementos \u00fanicos (elimina los duplicados)\nif (len(letras) == len(set(letras))):\n    print(\"Su nombre no posee letras repetidas.\")\nelse:\n    print(\"Su nombre posee letras repetidas.\")\n</code></pre> </li> <li> <p>Ingresa una palabra por teclado. Luego imprime cuantas letras la componen. Luego imprime todas sus letras de manera ordenada alfab\u00e9ticamente. Luego imprime todas sus letras de manera ordenada alfab\u00e9ticamente inversa. Antes de empezar el ejercicio, analiza el ejemplo siguiente. Las salidas por pantalla deben ser iguales en su estructura.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese una palabra: paracaidas\nLa palabra paracaidas contiene 10 letras.\nLas letras ordenadas alfab\u00e9ticamente son a, a, a, a, c, d, i, p, r, s\nLas letras ordenadas alfab\u00e9ticamente inversoa son s, r, p, i, d, c, a, a, a, a\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>palabra = input(\"Ingrese una palabra: \")\n\nprint(\"La palabra\", palabra, \"contiene\", len(palabra), \"letras.\")\n\nletras = list(palabra)\n\n# Ordena los elementos de la lista de manera alfab\u00e9tica\nletras.sort()\n\nprint(\"Las letras ordenadas alfab\u00e9ticamente son\", ', '.join(letras))\n\n# Ordena los elementos de la lista de manera alfab\u00e9tica inversa\nletras.sort(reverse=True)\n\nprint(\"Las letras ordenadas alfab\u00e9ticamente inversoa son\", ', '.join(letras))\n</code></pre> <p>En este c\u00f3digo <code>', '.join(letras)</code> une todos los elementos de la lista en una cadena, con cada elemento separado por una coma y un espacio.</p> </li> <li> <p>Inicializa una variable con la cadena de caracteres\"La mar estaba serena serena estaba la mar\". Luego imprime en pantalla cuantos caracteres tiene la cadena de texto. Luego imprime en pantalla toda la cadena de texto, en un solo rengl\u00f3n, caracter por caracter. Luego imprime en pantalla, rengl\u00f3n por rengl\u00f3n, cada una de las palabras de la cadena de texto. (Puedes utilizar otra estructura de datos que te facilite el trabajo).  </p> Terminal (Entrada/Salida)<pre><code>La cadena de caracteres\"La mar estaba serena serena estaba la mar\" tiene 41 caracteres.\n\nLa mar estaba serena serena estaba la mar\n\nLa\nmar\nestaba\nserena\nserena\nestaba\nla\nmar\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>texto = \"La mar estaba serena serena estaba la mar\"\n\n# Imprime en pantalla cuantos caracteres tiene la cadena de texto\nprint(\"La cadena de caracteres\\\"\" + texto + \"\\\" tiene\", len(texto), \"caracteres.\")\n\n# Imprime en pantalla toda la cadena de texto, en un solo rengl\u00f3n, caracter por caracter\nfor letra in texto:\n    print(letra, end=\"\")\n\n# Al finalizar el cclo, el cursor qued\u00f3 a continuaci\u00f3n de la \u00faltima letra impresa.\n# Entonces, es necesario realizar un salto de l\u00ednea para que el pr\u00f3ximo contenido que se imprima en pantalla, se haga en un rengl\u00f3n siguiente.\n\n# Emtonces, imprime en pantalla el salto de l\u00ednea\nprint()\n\n# Separa la cadena de caracteresen palabras, almacen\u00e1ndolas como elementos de la lista *palabras*\npalabras = texto.split(\" \")\n\n# Imprime en pantalla, rengl\u00f3n por rengl\u00f3n, cada una de las palabras de la cadena de texto\nfor palabra in palabras:\n    print(palabra)\n</code></pre> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n agrega el c\u00f3digo necesario para que realice lo siguiente: Reemplaza todas las vocales por la letra \"a\". Imprime en pantalla la cadena de texto. Repite la operaci\u00f3n con todas las vocales.</p> Terminal (Entrada/Salida)<pre><code>\u22ee\nLa mar astaba sarana sarana astaba la mar\nLe mer estebe serene serene estebe le mer\nLi mir istibi sirini sirini istibi li mir\nLo mor ostobo sorono sorono ostobo lo mor\nLu mur ustubu surunu surunu ustubu lu mur\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>texto = \"La mar estaba serena serena estaba la mar\"\n\n# Imprime en pantalla cuantos caracteres tiene la cadena de texto\nprint(\"La cadena de caracteres\\\"\" + texto + \"\\\" tiene\", len(texto), \"caracteres.\")\n\n# Imprime en pantalla toda la cadena de texto, en un solo rengl\u00f3n, caracter por caracter\nfor letra in texto:\n    print(letra, end=\"\")\n\n# Al finalizar el cclo, el cursor qued\u00f3 a continuaci\u00f3n de la \u00faltima letra impresa.\n# Entonces, es necesario realizar un salto de l\u00ednea para que el pr\u00f3ximo contenido que se imprima en pantalla, se haga en un rengl\u00f3n siguiente.\n\n# Emtonces, imprime en pantalla el salto de l\u00ednea\nprint()\n\n# Separa la cadena de caracteresen palabras, almacen\u00e1ndolas como elementos de la lista *palabras*\npalabras = texto.split(\" \")\n\n# Imprime en pantalla, rengl\u00f3n por rengl\u00f3n, cada una de las palabras de la cadena de texto\nfor palabra in palabras:\n    print(palabra)\n\n# Reemplaza todas las vocales por la \"a\"\nfor vocal in 'aeiouAEIOU':\n    texto = texto.replace(vocal, 'a')\n\n# Imprime el texto resultante en pantalla\nprint(texto)\n\n# Reemplaza la vocal del texto (son todas la misma) por la siguiente vocal e imprime el texto resultante en pantalla\ntexto = texto.replace('a', 'e')\nprint(texto)\ntexto = texto.replace('e', 'i')\nprint(texto)\ntexto = texto.replace('i', 'o')\nprint(texto)\ntexto = texto.replace('o', 'u')\nprint(texto)\n</code></pre> <p>Podemos mejorar el c\u00f3digo implementando diccionario de mapeo (mapping dictionary) y un ciclo:</p> Python<pre><code>\u22ee\n# Reemplaza la vocal del texto (son todas la misma) por la siguiente vocal e imprime el texto resultante en pantalla\nmapping = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u'}\nfor k, v in mapping.items():\n    texto = texto.replace(k, v)\n    print(texto)\n</code></pre> <p>Aqu\u00ed, <code>k</code> representa la llave (key) y el caracter a reemplazar Y <code>v</code> representa el valor asociado (value) y el caracter de reemplazo</p> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-compuestos","title":"Ejercicios compuestos","text":"<ol> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: La impresi\u00f3n en pantalla de los elementos debe realizarse en el mismo rengl\u00f3n, separ\u00e1ndolos con un espacio y sin corchetes. Luego, se debe imprimir en pantalla la serie de n\u00fameros entre el valor del primer elemento almacenado y el valor del \u00faltimo elemento almacenado, incluy\u00e9ndolos.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero o el cero para terminar el ingreso: 4\nIngrese un n\u00famero o el cero para terminar el ingreso: -6\nIngrese un n\u00famero o el cero para terminar el ingreso: 9\nIngrese un n\u00famero o el cero para terminar el ingreso: 8\nIngrese un n\u00famero o el cero para terminar el ingreso: 0\nLa lista posee 4 elementos.\nEstos son: 4 -6 9 8 \nLos n\u00fameros entre 4 y 8, incluy\u00e9ndolos, son: 4 5 6 7 8\n</code></pre> <p>\u00a1Para recordar!</p> <p>La serie de n\u00fameros podr\u00eda resultar ascendente, como en el ejemplo, o podr\u00eda resultar descendente. El programa debe funcionar correctamente en ambos sentidos.</p> Ver soluci\u00f3n propuesta Python<pre><code>lista = []\n\n# Limpia la pantalla\nprint(\"\\033[2J\\033[1H\")\n\n\n# Solicita el ingreso de n\u00fameros y los almacena en la lista hasta que se ingrese un 0\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero o el cero para terminar el ingreso: \"))\n    if n == 0:\n        break\n    lista.append(n)\n\n# Imprime por pantalla la longitud de la lista\nprint(\"La lista posee\", len(lista), \"elementos.\")\n\n# Imprime por pantalla los elementos almacenados en la lista\nprint(\"Estos son:\", end=\" \")\n\nfor n in lista:\n    print(n, end=\" \")\n\nprint() # Realiza el salto de l\u00ednea luego de la impresi\u00f3n de los elementos en el ciclo anterior\n\n# Almacena el primer y el \u00faltimo elemento en dos variables \nprimer_elemento = lista[0]\nultimo_elemento = lista[-1] # len(lista)-1\n\n# La variable paso almacenar\u00e1 uno positivo o uno negativo, con el objetivo de configurar el ciclo cerrado a continuaci\u00f3n para su correcto funcionamiento.\npaso = 1 if primer_elemento &lt;= ultimo_elemento else - 1\n\n# Imprime en pantalla los n\u00fameros comprendidos entre el valor del primer elemento y el valor del \u00faltimo elemento de la lista\n\nprint(\"Los n\u00fameros entre \" + str(primer_elemento) + \" y \" + str(ultimo_elemento) + \", incluy\u00e9ndolos, son:\", end=\" \")\n\nfor n in range(primer_elemento, ultimo_elemento + paso, paso):\n    print(n, end=\" \")\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/","title":"Python: ejercicios de estructuras repetitivas","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/#ejercicios-con-for-in-range","title":"Ejercicios con for \u2026 in range","text":"<ol> <li> <p>Imprime en pantalla la secuencia de n\u00fameros desde el 1 hasta el 10, de 1 en 1, utilizando un ciclo cerrado.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>for n in range(1, 11):\n    print(n)\n</code></pre> <p>\u00bfPor qu\u00e9 colocamos un 11 como fin de rango en el c\u00f3digo pero NO aparece impreso en pantalla?</p> <p>Recuerda que la sintaxis de esta estructura indica que el par\u00e1metro que representa al valor final del ciclo no lo incluye en este. Por lo tanto, como se ve en el ejercicio, el ciclo iterar\u00e1 entre el 1 y el 10. El 11 ser\u00eda el primer valor que hace falsa la condici\u00f3n, haciendo que el ciclo deje de repetirse (iterarse).</p> <p>Recuerda tambi\u00e9n que por iteraci\u00f3n entendemos que es el proceso de repetir una estructura de c\u00f3digo determinada una cierto n\u00famero de veces.</p> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: Imprime en pantalla la misma secuencia, pero de 2 en 2.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>1\n3\n5\n7\n9\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>for n in range(1, 11, 2):\n    print(n)\n</code></pre> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: Inicializa una variable que ser\u00e1 utilizada para controlar el paso del ciclo, con el valor 3. Imprime en pantalla la misma secuencia, utilizando el valor ingresado como paso de n\u00famero en n\u00famero.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>1\n4\n7\n10\n</code></pre> <p>Para pensar</p> <p>\u00bfQu\u00e9 nombre le dar\u00edas a la variable que ser\u00e1 utilizada para controlar el paso del ciclo?</p> Ver soluci\u00f3n propuesta Python<pre><code>paso = 3\n\nfor n in range(1, 11, paso):\n    print(n)\n</code></pre> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: Solicita el ingreso de un n\u00famero entero que le indique el paso al ciclo. Imprime en pantalla la misma secuencia, utilizando el valor ingresado como paso.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero para el paso: 3 \n\n1\n4\n7\n10\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>paso = int(input(\"Ingrese un n\u00famero para el paso: \"))\n\nfor n in range(1, 11, paso):\n    print(n)\n</code></pre> </li> <li> <p>Escribe en pantalla los m\u00faltiplos de 3 entre 1 y 100. S\u00famalos y muestra la suma al finalizar el ciclo.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El valor inicial del ciclo debe ser 1 y el valor inicial debe ser 100.</p> Ver soluci\u00f3n propuesta Python<pre><code># Inicializa la variable acumuladora\nsuma = 0\n\nfor n in range(1, 101):\n    if n % 3 == 0:\n        print(n)    # Imprime en pantalla el m\u00faltiplo de 3\n        suma += n   # Suma el m\u00faltiplo de 3 en la variable acumuladora\n\nprint(\"La suma de los m\u00faltiplos de 3 impresos es:\", suma)\n</code></pre> </li> <li> <p>Escribe en pantalla la serie de n\u00fameros enteros entre dos n\u00fameros enteros solicitados al usuario.</p> <p>La salida por pantalla debe ser como el ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Escriba el n\u00famero inicial de la serie (Debe ser el menor): 1\nEscriba el n\u00famero final de la serie (Debe ser el mayor): 9\nEscriba el n\u00famero para indicar el incremento entre cada n\u00famero de la serie (el paso del ciclo): 5\n\nImprimiendo una serie de 2 valores, entre el 1 y el 9 de 5 en 5\n\nEl valor n\u00famero 1 en un ciclo de 5 en 5 es 1\nEl valor n\u00famero 2 en un ciclo de 5 en 5 es 6\n</code></pre> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El problema debe resolverse implementando un ciclo cerrado. Asumimos que el primer valor ingresado ser\u00e1 menor o igual al segundo valor ingresado. Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.</p> <p>\u00a1Una ayudita!</p> <p>Para calcular la cantidad de valores que ser\u00e1n impresos de acuerdo con el valor inicial, el valor final y el valor de paso ingresados, utiliza la siguiente expresi\u00f3n:</p> Python<pre><code>((valor_final - valor_inicial) // paso) + 1\n</code></pre> <p>recuerda que <code>//</code> en Python es el operador de divisi\u00f3n entera. Devuelve el cociente entero, sin decimales. Si programas en otro lenguaje, deber\u00e1s utilizar el operador o comando correspondiente para conseguir el mismo resultado.</p> Ver soluci\u00f3n propuesta Python<pre><code>valor_inicial = int(input(\"Escriba el n\u00famero inicial de la serie (Debe ser el menor): \"))\nvalor_final = int(input(\"Escriba el n\u00famero final de la serie (Debe ser el mayor): \"))\npaso = int(input(\"Escriba el n\u00famero para indicar el incremento entre cada n\u00famero de la serie (el paso del ciclo): \"))\n\nnro_valor = 1\n\nprint(\"Imprimiendo una serie de\", ((valor_final - valor_inicial) // paso) + 1,\"valores, entre el\", valor_inicial,\"y el\",valor_final, \"de\", paso,\"en\", paso)\n\nfor valor in range(valor_inicial, valor_final + 1, paso):\n    print(\"El valor n\u00famero\", nro_valor, \"en un ciclo de\", paso,\"en\", paso, \"es\", valor)\n    nro_valor +=1\n</code></pre> </li> <li> <p>Ingresa una cadena de caracterespor teclado. Simula una l\u00ednea de texto que se desplaza de izquierda a derecha, a lo largo de 40 caracteres. Para ello, debes limpiar la pantalla antes de cada impresi\u00f3n. Y luego de imprimir cada l\u00ednea, el programa deber\u00e1 esperar 0.1 segundos antes de volver a limpiar la pantalla y e imprimir el texto un caracter corrido hacia la derecha.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese una cadena de texto: * * * Coma en lo de Charly * * *\n</code></pre> <p>Al ingresar el texto, limpia la pantalla y muestra el texto por primera vez, pegado a la izquierda del terminal</p> Terminal (Entrada/Salida)<pre><code>* * * Coma en lo de Charly * * *\n</code></pre> <p>0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto un caracter corrido hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code> * * * Coma en lo de Charly * * *\n</code></pre> <p>0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto un caracter corrido hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code>  * * * Coma en lo de Charly * * *\n</code></pre> <p>0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto un caracter corrido hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code>   * * * Coma en lo de Charly * * *\n</code></pre> <p>\u22ee</p> <p>Finalmente, 0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto corrido 40 caracteres hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code>                                    * * * Coma en lo de Charly * * *\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>import os, time\n\ntexto = input(\"Ingrese una cadena de texto: \")\n\nfor cant_espacios in range(0, 41):\n    os.system(\"cls\")\n\n    print(\" \" * cant_espacios + texto)\n    time.sleep(0.1)\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/#ejercicios-con-while-loop","title":"Ejercicios con while \u2026 loop","text":"<ol> <li> <p>Imprime en pantalla la secuencia de n\u00fameros desde el 1 hasta el 10, de 1 en 1, utilizando un ciclo abierto.</p> Ver soluci\u00f3n propuesta <p>``` py title=\"Python\"</p> </li> <li> <p>Escribe en pantalla la serie de n\u00fameros enteros entre dos n\u00fameros enteros solicitados al usuario.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El problema debe resolverse implementando un ciclo abierto. Asumimos que el primer valor ingresado ser\u00e1 menor o igual al segundo valor ingresado. Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.</p> Ver soluci\u00f3n propuesta Python<pre><code>valor_inicial = int(input(\"Escriba el n\u00famero inicial de la serie (Debe ser el menor): \"))\nvalor_final = int(input(\"Escriba el n\u00famero final de la serie (Debe ser el mayor): \"))\n\nprint(\"Imprimiendo la serie de n\u00fameros entre\", valor_inicial, \"y\", valor_final)\n\nwhile valor_inicial &lt;= valor_final:\n    print(valor_inicial)\n\n    valor_inicial += 1\n</code></pre> <p>En este caso, el nombre de la variable valor_inicial queda raro respecto de su aplicaci\u00f3n. Sin embargo, en estos casos no es necesario desperdiciar recursos en otra variable solamente para que la sem\u00e1ntica del programa quede prolija. </p> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese n\u00fameros enteros positivos y los muestre por pantalla hasta que ingrese un n\u00famero negativo cualquiera. Al finalizar, el programa debe informar la cantidad de n\u00fameros positivos ingresados.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Al finalizar el ingreso de n\u00fameros positivos, la respuesta que de el programa debe ser gramaticalmente correcta (singular / plural)</p> Ver soluci\u00f3n propuesta Python<pre><code># Inicializa la variable acumuladora\nn_positivos = 0\n\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero positivo (o un n\u00famero negativo para finalizar el ingreso): \"))\n\n    if n &lt; 0:\n        break\n\n    print(\"El n\u00famero ingresado fue\", n)\n    n_positivos += 1\n\n# De acuerdo a la cantidad de n\u00fameros ingresaros, se muestra la respuesta gramaticalmente correcta\nif n_positivos == 0:\n    print(\"No se ingresaron n\u00fameros positivos.\")\n\nelif n_positivos == 1:\n    print(\"Se ingres\u00f3 1 n\u00famero positivo.\")\n\nelse:\n    print(\"Se ingresaron\", n_positivos, \"n\u00fameros positivos.\")\n</code></pre> </li> <li> <p>Leer n\u00fameros enteros, y contar la cantidad de pares e impares que se han ingresado hasta que se ingrese un n\u00famero negativo.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Al finalizar el ingreso de n\u00fameros, la respuesta que de el programa debe ser gramaticalmente correcta (singular / plural)</p> Ver soluci\u00f3n propuesta Python<pre><code># Inicializa las variables acumuladoras\npares = 0\nimpares = 0\n\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero positivo (o un n\u00famero negativo para finalizar el ingreso): \"))\n\n    if n &lt; 0:\n        break\n\n    if n % 2 == 0:\n        pares += 1\n\n    else:\n        impares += 1\n\n# Imprime en pantalla cuantos n\u00fameros son pares\nif pares == 0:\n    print(\"No hay n\u00fameros pares ingresados.\")\n\nelif pares == 1:\n    print(\"1 n\u00famero ingresado es par.\")\n\nelse:    \n    print(pares, \"n\u00fameros ingresados son pares.\")\n\n# Imprime en pantalla cuantos n\u00fameros son impares\nif impares == 0:\n    print(\"No hay n\u00fameros impares ingresados.\")\n\nelif impares == 1:\n    print(\"1 n\u00famero ingresado es impar.\")\n\nelse:    \n    print(impares, \"n\u00fameros ingresados son impares.\")      \n</code></pre> </li> <li> <p>Recordando el siguiente ejercicio:  </p> <p>Escribe en pantalla los m\u00faltiplos de 3 entre 1 y 100. S\u00famalos y muestra la suma al finalizar el ciclo.</p> Python<pre><code># Inicializa la variable acumuladora\nsuma = 0\n\nfor n in range(1, 101):\n    if n % 3 == 0:\n        print(n)    # Imprime en pantalla el m\u00faltiplo de 3\n        suma += n   # Suma el m\u00faltiplo de 3 en la variable acumuladora\n\nprint(\"La suma de los m\u00faltiplos de 3 impresos es:\", suma)\n</code></pre> </li> </ol> <p>El primer problema de eficiencia que se presenta aqu\u00ed es que se repite el c\u00f3digo 100 veces, solo para aprovechar un tercio de esas repeticiones.</p> <p>Podr\u00edamos, entonces, pensar en modificar el paso del ciclo para que sea de 3 en 3, pero si el ciclo debe iniciar en 1, entonces los valores ser\u00edan 1, 4, 7, 10... y ninguno ser\u00eda m\u00faltiplo de 3.</p> <pre><code>``` py title=\"Python\"\n\u22ee\nfor n in range(1, 101, 3):\n    print(n)\n\u22ee\n```\n\n&gt; Imprime el 1, 4, 7, 10 ...\n</code></pre> <p>Entonces, podr\u00edamos utilizar una variable para el paso y pensar en algo como esto:</p> <pre><code>``` py title=\"Python\"\n\u22ee\npaso = 1\n\nfor n in range(1, 101, paso):\n    if n % 3 == 0:\n        paso = 3\n        print(n) \n\u22ee\n```\n\n&gt; n va a valer 1, 2, 3, 6, 9, 12 ...\n</code></pre> <p>En la mayor\u00eda de los lenguajes, cuando n valga 3, se imprime el 3 y adem\u00e1s se modifica la variable paso para que a partir de ahora el ciclo se repita con n de 3 en 3.</p> <p>Sin embargo, en Python el valor del paso en la funci\u00f3n range() se establece cuando se crea el objeto range, y no se puede cambiar despu\u00e9s. Por lo tanto, aunque cambies el valor de paso a 3 dentro del ciclo, el ciclo seguir\u00e1 incrementando n en pasos de 1.</p> <p>Si necesitas un comportamiento donde el paso cambie durante la ejecuci\u00f3n, tendr\u00e1s que implementarlo manualmente usando un ciclo while. Entonces, refactoriza el ejercicio utilizando un ciclo abierto.</p> <pre><code>!!! warning \"\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n\"\n    El valor inicial a validar en el ciclo debe ser 1.\n\n??? example \"Ver soluci\u00f3n propuesta\"\n    ``` py title=\"Python\"\n    # Inicializa la variable acumuladora\n    suma = 0\n\n    # Inicializa las variables para controlar la ejecuci\u00f3n del ciclo abierto\n    n = 1\n    paso = 1\n\n    while n &lt; 101:\n\n        if n % 3 == 0:\n            paso = 3\n            print(n)    # Imprime en pantalla el m\u00faltiplo de 3\n            suma += n   # Suma el m\u00faltiplo de 3 en la variable acumuladora\n\n        n += paso\n\n    print(\"La suma de los m\u00faltiplos de 3 impresos es:\", suma)\n    ```\n\n---\n</code></pre> <ol> <li> <p>Ingresa n\u00fameros enteros por teclado hasta que se ingrese un cero, el cual no ser\u00e1 contabilizado. Luego imprime por pantalla la cantidad de n\u00fameros ingresados. Luego imprime por pantalla la cantidad de n\u00fameros positivos ingresados. Luego imprime por pantalla la cantidad de n\u00fameros negativos ingresados. Luego imprime en pantalla cuantos n\u00fameros son pares. Luego imprime en pantalla cuantos n\u00fameros son impares. Luego imprime en pantalla en una misma l\u00ednea cuales fueron el menor y el mayor n\u00famero ingresado. Luego, si hay menor y mayor, imprime la secuencia de n\u00fameros entre el mayor y el menor, sin incluirlos, de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 8\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 4\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 0\nSe han ingresado 2 n\u00fameros.\nTodos han sido positivos. 2 en total.\n2 n\u00fameros son pares.\nNo hay n\u00fameros impares.\nEl menor valor fue el 4 y el mayor valor fue el 8\nLos n\u00fameros entre el 8 y el 4 son: 7 6 5\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 5\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 4\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 0\nSe han ingresado 2 n\u00fameros.\nTodos han sido positivos. 2 en total.\n1 n\u00fameros son pares.\n1 n\u00fameros son impares.\nEl 4 ha sido el menor valor y el 5 ha sido el mayor valor.\nNo hay n\u00fameros entre el mayor y el menor.\n</code></pre> <p>\u00a1Atenci\u00f3n! Limitaci\u00f3n</p> <p>No est\u00e1 permitido emplear una variable para almacenar la cantidad total de n\u00fameros ingresados. No est\u00e1 permitido utilizar ninguna variable para almacenar la cantidad de n\u00fameros impares. Para imprimir la secuencia de n\u00fameros entre el mayor y el menor solo se permite implementar un ciclo abierto con la condici\u00f3n a la entrada. No se permite modificar el valor de las variables que contengan los valores de mayor y menor para imprimir la secuencia.</p> <p>Ver resultado (1)</p> <pre><code>1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    #variables acumuladoras\n    pos = 0\n    neg = 0\n\n    pares = 0\n\n    mayor = False # Identificar inicialmente al mayor como False significa que aun no hay un mayor almacenado \n    menor = False # Identificar inicialmente al menor como False significa que aun no hay un menor almacenado \n\n    # Solicita el ingreso de numeros hasta que se ingrese el 0\n    while True:\n        n = int(input(\"Ingrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): \"))\n\n        # Si el numero ingresado es el 0, fuerza la salida del ciclo\n        if n == 0:\n            break\n\n        # Detecta si el numero ingresado es positivo o negativo\n        if n &gt; 0:\n            pos += 1 # pos = pos + 1\n        else:\n            neg += 1 # neg = neg + 1\n\n        # Detecta si el numero ingresado es par\n        if n % 2 == 0:    \n            pares += 1\n\n        # Detecta si el numero ingresado es el mayor\n        if not mayor: \n            mayor = n\n        elif n &gt; mayor:\n            mayor = n\n\n        # Detecta si el numero ingresado es el menor\n        if not menor:\n            menor = n \n        if n &lt; menor:\n            menor = n\n\n    # Imprime en pantalla la respuesta adecuada a la cantidad de n\u00fameros ingresados, tanto positivos como negativos\n    if pos == 0 and neg == 0:\n        print(\"No se han ingresado n\u00fameros.\")\n\n    else:    \n        print(\"Se han ingresado\", pos + neg, \"n\u00fameros.\")\n\n        if pos == 0:\n            print(\"Todos han sido negatidos.\", neg, \"en total.\")\n\n        elif neg == 0:\n            print(\"Todos han sido positivos.\", pos, \"en total.\")\n\n        else:\n            print(pos, \"han sido positivos.\")\n            print(neg, \"han sido negativos.\")\n\n        # Imprime en pantalla cuantos n\u00fameros son pares\n        if pares &gt; 0:\n            print(pares, \"n\u00fameros son pares.\")\n        else:\n            print(\"No hay n\u00fameros pares.\")\n\n        # Imprime en pantalla cuantos n\u00fameros son impares\n        if pares == pos + neg:\n            print(\"No hay n\u00fameros impares.\")\n        else:\n            print(pos + neg - pares, \"n\u00fameros son impares.\")\n\n        # Imprime en pantalla el mayor y el menor numero ingresado solo si hay m\u00e1s de un n\u00famero ingresado y no son los mismos\n        if mayor == menor:\n            print(\"No hay un valor mayor y otro valor menor ingresados porque\", end=\" \")\n            if pos + neg == 1:\n                print(\"solo se ha ingresado un n\u00famero.\")\n            else:\n                print(\"todos los n\u00fameros ingresados son iguales.\")\n        else:\n            print(\"El\", menor, \"ha sido el menor valor y el\", mayor, \"ha sido el mayor valor.\")\n\n            numero = mayor - 1\n\n            if not (numero &gt; menor):\n                print(\"No hay n\u00fameros entre el mayor y el menor.\")\n\n            else:\n                print(\"Los n\u00fameros entre el\", mayor, \"y el\", menor, \"son: \", end=\"\")\n                while numero &gt; menor:\n                    print(numero, end=\" \")\n                    numero -= 1\n    ```\n</code></pre> </li> <li> <p>Escribe un programa que solicite un n\u00famero o una palabra por teclado. Luego, que indique si es capic\u00faa (se lee igual de izquierda a derecha como de derecha a izquierda) o no. El programa debe repetirse hasta que no se ingrese ning\u00fan n\u00famero o palabra.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El programa solo debe evaluar el n\u00famero o la palabra si tiene al menos 2 caracteres de longitud.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): 12\n12 no es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): 1\nEl dato ingresado debe tener al menos 2 caracteres para evaluar si es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): capicua\ncapicua no es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): a\nEl dato ingresado debe tener al menos 2 caracteres para evaluar si es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): neuquen\nneuquen es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): _\n\u22ee\n</code></pre> <p>??? example \"Ver soluci\u00f3n propuesta\"     Python<pre><code># Limpia la pantalla\nprint(\"\\033[H\\033[J\")\n\nwhile True:\n    # El dato ingresado se convierte a min\u00fasculas para que la comparaci\u00f3n de caracteres sea exacta por letra y se almacena como cadena\n    dato = input(\"Ingrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo presiona ENTER para finalizar): \").lower()\n\n    # Si solo se presion\u00f3 ENTER el comando *input* devolvi\u00f3 una cadena vac\u00eda forzando la finalizaci\u00f3n del ciclo\n    if dato == \"\":\n        break\n\n    # Si la cadena ingresada no posee al menos 2 caracteres, no se evaluar\u00e1 si es capic\u00faa\n    if len(dato) &lt; 2:\n        print(\"El dato ingresado debe tener al menos 2 caracteres para evaluar si es capic\u00faa!\")\n\n    else:   \n\n        #El ciclo recorrer\u00e1 la cadena almacenada, caracter por caracter, desde el extremo hacia el centro de la misma.\n        for n in range(1, len(dato) + 1):\n\n            # Si en alg\u00fan punto de la cadena almacenada el los caracteres a igual distancia de los extremos no coinciden se fuerza la salida del ciclo\n            if dato[n - 1] != dato[-n]:\n                break\n\n        # Se eval\u00faa el valor de n respecto de la longitud de la cadena\n        # Si no son iguales, significa que en alg\u00fan punto de la cadena no hubo igualdad de caracteres    \n        if n == len(dato):\n            print(dato, \"es capic\u00faa!\")\n\n        else:\n            print(dato, \"no es capic\u00faa!\")\n</code></pre></p> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/#inicializa-las-variables-para-controlar-la-ejecucion-del-ciclo-abierto","title":"Inicializa las variables para controlar la ejecuci\u00f3n del ciclo abierto","text":"<p>n = 1</p> <p>while n &lt;= 10:     print(n)     n += 1</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-funciones-con-python/","title":"Python: ejercicios de funciones","text":"<ol> <li> <p>Ingresa 2 n\u00fameros por teclado. Almac\u00e9nalos en 2 variables. Luego, imprime en pantalla cada valor ingresado. Luego, crea una funci\u00f3n con 2 par\u00e1metros que reciban los dos n\u00fameros para devolverlos intercambiados. Los valores intercambiados deben ser almacenados en las variables iniciales. Luego, imprime en pantalla los valores intercambiados.</p> <p>Por ejemplo, para los valores 4 y 5 la salida ser\u00eda:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el primer n\u00famero: 4\nIngrese el segundo n\u00famero: 5\n\nEl valor almacenado en num1 es 4\nEl valor almacenado en num2 es 5\n\nAhora, el valor almacenado en num1 es 5\nAhora, el valor almacenado en num2 es 4\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones (se utiliza la palabra clave \"def\")\ndef intercambiar(numero1 , numero2):\n\n    # El comando *return* se utiliza para devolver un valores desde la funci\u00f3n hacia la l\u00ednea de c\u00f3digo que origin\u00f3 la llamada a la funci\u00f3n\n    return numero2 , numero1\n\n# Bloque principal del programa\n\n# Almacena 2 valores ingresados por teclado en 2 variables\nnum1 = int(input(\"Ingrese el primer n\u00famero: \"))\nnum2 = int(input(\"Ingrese el segundo n\u00famero: \"))\n\n# Se imprimen los valores almacenados en las variables\nprint(\"El valor almacenado en num1 es\" , num1) \nprint(\"El valor almacenado en num2 es\" , num2)\n\nnum1, num2 = intercambiar(num1, num2)   \n\nprint(\"Ahora, el valor almacenado en num1 es\" , num1) \nprint(\"Ahora, el valor almacenado en num2 es\" , num2)\n</code></pre> </li> <li> <p>Escribe un programa que defina una funci\u00f3n que retorne por resultado un tri\u00e1ngulo es rect\u00e1ngulo o no, a partir de la longitud de sus catetos e hipotenusa. Una terna pitag\u00f3rica es una tupla ordenada de tres valores positivos <code>a</code>, <code>b</code>, <code>c</code> que se pueden asociar con las longitudes de los dos catetos y de la hipotenusa correspondiente, formando un tri\u00e1ngulo rect\u00e1ngulo.</p> <p>Por ejemplo, utilizando la siguiente lista:</p> Python<pre><code>triangulos = [(3,4,5), (5,12,13), (9,15,17), (12,35,37), (13,36,39)]\n</code></pre> <p>El programa deber\u00e1 devolver los siguientes resultados:</p> Terminal (Entrada/Salida)<pre><code>El tri\u00e1ngulo de catetos de 3 cm. y 4 cm. y de hipotenusa de 5 cm. es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 5 cm. y 12 cm. y de hipotenusa de 13 cm. es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 9 cm. y 15 cm. y de hipotenusa de 17 cm. no es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 12 cm. y 35 cm. y de hipotenusa de 37 cm. es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 13 cm. y 36 cm. y de hipotenusa de 39 cm. no es rect\u00e1ngulo.\n</code></pre> <p>\u00a1Una ayudita!</p> <p>La funci\u00f3n debe contener la siguiente sentencia:</p> Python<pre><code>hipotenusa_calculada = (cateto1 ** 2 + cateto2 ** 2) ** 0.5\n</code></pre> <p>recuerda que <code>**</code> en Python es el operador de potencia. <code>** 2</code> equivale a potencia de 2. <code>** 0.5</code> equivale a ra\u00edz cuadrada.</p> <p><code>cateto1</code> y <code>cateto2</code> son los par\u00e1metros que recibe la funci\u00f3n. Luego del c\u00e1lculo deber\u00e1s hacer algo con <code>hipotenusa_calculada</code> y la hipotenusa que reciba la funci\u00f3n por par\u00e1metro para retornar un resultado que sirva para determinar si el tri\u00e1ngulo es o no es rect\u00e1ngulo.</p> <p>Analiza el siguiente fragmento del programa para poder completarlo correctamente.</p> Python<pre><code>\u22ee\n# Lista de tri\u00e1ngulos identificados por (cateto1, cateto2, hipotenusa) en cm.\ntriangulos = [(3,4,5), (5,12,13), (9,15,17), (12,35,37), (13,36,39)]\n\n# Se evalua la lista de triangulos\nfor cateto1, cateto2, hipotenusa in triangulos:\n    # Invocamos a la funcion area_triangulo():\n    print(f\"\\nEl tri\u00e1ngulo de catetos de {cateto1} cm. y {cateto2} cm. y de hipotenusa de {hipotenusa} cm. {\"es\" if es_triangulo_rect\u00e1ngulo(cateto1, cateto2, hipotenusa) else \"no es\"} rect\u00e1ngulo.\")\n\u22ee\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones \n\ndef es_triangulo_rect\u00e1ngulo(cateto1, cateto2, hipotenusa):\n    hipotenusa_calculada = (cateto1 ** 2 + cateto2 ** 2) ** 0.5\n\n    if hipotenusa_calculada == hipotenusa:\n        return True\n    else:\n        return False\n\n\n# Bloque principal del programa\n\n# Lista de tri\u00e1ngulos identificados por (cateto1, cateto2, hipotenusa) en cm.\ntriangulos = [(3,4,5), (5,12,13), (9,15,17), (12,35,37), (13,36,39)]\n\n# Se eval\u00faa la lista de triangulos\nfor cateto1, cateto2, hipotenusa in triangulos:\n\n    # Se invoca a la funci\u00f3n area_triangulo() dentro del argumento del comando print directamente\n    print(f\"\\nEl tri\u00e1ngulo de catetos de {cateto1} cm. y {cateto2} cm. y de hipotenusa de {hipotenusa} cm. {\"es\" if es_triangulo_rect\u00e1ngulo(cateto1, cateto2, hipotenusa) else \"no es\"} rect\u00e1ngulo.\")\n</code></pre> </li> <li> <p>Escribe un programa que defina una funci\u00f3n que reciba 2 listas de elementos y retorne otra lista con los elementos que se encuentran en ambas listas solamente.</p> <p>Por ejemplo, utilizando la siguientes listas:</p> Python<pre><code>lista1 = [1, 2, 3, 4, 5]\nlista2 = [4, 5, 6, 7, 8]\n</code></pre> <p>El programa deber\u00e1 devolver el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>lista_interseccion = [4, 5]\n</code></pre> <p>Y utilizando la siguientes listas:</p> Python<pre><code>lista1 = ['a', 'b', 'c', 'd', 'e']\nlista2 = ['c', 'd', 'e', 'f', 'g']\n</code></pre> <p>El programa deber\u00e1 devolver el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>lista_interseccion = ['c', 'd', 'e']\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones \n\ndef intersectar_listas(lista1, lista2):\n\n    # Se inicializa la lista que contendr\u00e1 los elementos que se encuentren en ambas listas pasadas a la funci\u00f3n\n    lista_interseccion = []\n\n    # Se crea un conjunto de cada lista para eliminar los elementos duplicados\n    lista1 = set(lista1)\n    lista2 = set(lista2)\n\n    # elemento por elemento del conjunto de la lista1\n    for elemento in lista1: \n\n        # Se valida si el elemento se encuentra dentro del conjunto de la lista2\n        if elemento in set(lista2):\n\n            # Se agrega el elemento a la lista de elementos en com\u00fan\n            lista_interseccion.append(elemento)\n\n    # Ordena la lista alfab\u00e9ticamente y/o num\u00e9ricamente ascendente\n    lista_interseccion.sort()\n\n    # Se retorna la lista resultante   \n    return lista_interseccion\n\n\n# Bloque principal del programa\n\n# Se inicializan las listas con sus elementos\nlista1 = [1, 2, 3, 4, 5]\nlista2 = [4, 5, 6, 7, 8]\n\n# Se invoca a la funci\u00f3n pas\u00e1ndole las dos listas y se almacena la lista retornada por la funci\u00f3n en la lista de intersecci\u00f3n\nlista_interseccion = intersectar_listas(lista1, lista2)\n\n# Se imprime en pantalla la lista resultante\nprint(\"lista_interseccion =\", lista_interseccion)\n\n# Se inicializan las listas con otros elementos\nlista1 = ['a', 'b', 'c', 'd', 'e']\nlista2 = ['c', 'd', 'e', 'f', 'g']\n\n# Se invoca a la funci\u00f3n pas\u00e1ndole las dos listas y se almacena la lista retornada por la funci\u00f3n en la lista de intersecci\u00f3n\nlista_interseccion = intersectar_listas(lista1, lista2)\n\n# Se imprime en pantalla la lista resultante\nprint(\"lista_interseccion =\", lista_interseccion)\n</code></pre> <p>!!! tip \"Claramente el programa puede funcionar con elementos de tipo num\u00e9rico como alfanum\u00e9rico.</p> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-listas/","title":"Ejercitaci\u00f3n de listas con Python","text":"<ol> <li> <p>Escribe un programa que solicite una palabra por teclado. Luego, convierte los caracteres de la palabra ingresada en una lista de elementos. A continuaci\u00f3n, imprime en pantalla la lista. Por \u00faltimo, imprime en pantalla todos los elementos de la lista, un elemento por rengl\u00f3n.</p> Terminal (Entrada/Salida)<pre><code>Ingrese una palabra: palabra\n['p', 'a', 'l', 'a', 'b', 'r', 'a']\np\na\nl\na\nb\nr\na\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>palabra = input(\"Ingrese una palabra: \")\nlista = list(palabra)\nprint(lista)\nfor elemento in lista:\n    print(elemento)\n</code></pre> </li> <li> <p>Escribe un programa que cree una lista con los siguientes elementos: blanco, rojo, violeta, azul, gris, verde y amarillo.</p> Ver soluci\u00f3n propuesta Python<pre><code>colores = [\"blanco\", \"rojo\", \"violeta\", \"azul\", \"gris\", \"verde\", \"amarillo\"]\n</code></pre> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente: Imprime en pantalla cuantos elementos contiene la lista, con el siguiente formato y utilizando f-strings (si no \u00a1Para recordar!s que son las f-strings puedes repasarlo aqu\u00ed).</p> Terminal (Entrada/Salida)<pre><code>La lista contiene 7 elementos.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>print(f\"La lista contiene {len(colores)} elementos.\")\n</code></pre> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:</p> <ol> <li>Agrega el color \"lila\" al final de la lista</li> <li>Agrega el color \"Celeste\" insert\u00e1ndolo en la posici\u00f3n 4 (piensa, no es un reemplazo y hablamos de ubicaci\u00f3n)</li> <li>Agrega el color \"Marr\u00f3n\" insert\u00e1ndolo luego de \"azul\" (debes encontrar la posici\u00f3n de \"azul\" primero)</li> <li>Por \u00faltimo, imprime la nueva longitud de la lista con la misma salida que el ejercicio anterior, pero empleando el m\u00e9todo format() (si no \u00a1Para recordar!s el m\u00e9todo format() puedes repasarlo aqu\u00ed).</li> </ol> <p>Imprime la lista luego de cada instrucci\u00f3n para visualizar como se va modificando.</p> Terminal (Entrada/Salida)<pre><code>\u22ee\n['blanco', 'rojo', 'violeta', 'azul', 'gris', 'verde', 'amarillo', 'lila']\n['blanco', 'rojo', 'violeta', 'celeste', 'azul', 'gris', 'verde', 'amarillo', 'lila']\n['blanco', 'rojo', 'violeta', 'celeste', 'azul', 'Marr\u00f3n', 'gris', 'verde', 'amarillo', 'lila']\nLa lista contiene 10 elementos.\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>colores = [\"blanco\", \"rojo\", \"violeta\", \"azul\", \"gris\", \"verde\", \"amarillo\"]\n\nprint(f\"La lista contiene {len(colores)} elementos.\")\n\ncolores.append(\"lila\")\nprint(colores)\n\ncolores.insert(3, \"celeste\")\nprint(colores)\n\nposicion = colores.index(\"azul\")\ncolores.insert((posicion + 1), \"Marr\u00f3n\")\nprint(colores)\n\nprint(\"La lista contiene {} elementos.\".format(len(colores)))\n</code></pre> </li> <li> <p>Escribe un programa que sume las siguientes listas y las muestre en pantalla:</p> <p>Terminal (Entrada/Salida)<pre><code>lista1 = [ 1, 2, 3, 4, 5 ]\nlista2 = [ 6, 7, 8, 9, 10]\n</code></pre> La suma debe efectuarse de la siguiente manera:</p> <pre><code>1. Utilizando el operador de concatenaci\u00f3n.\n\n2. Utilizando el m\u00e9todo extend().\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code>lista1 = [ 1, 2, 3, 4, 5 ]\nlista2 = [ 6, 7, 8, 9, 10]\n\nprint(lista1 + lista2) # Output : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nlista1.extend(lista2)\nprint(lista1) # Output : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p>Para pensar</p> <p>\u00bfCu\u00e1l es la diferencia m\u00e1s importante que observar al emplear cada manera?</p> <p>\u00bfPodemos decir que una es destructiva y la otra no? \u00bfPor qu\u00e9?</p> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>lista = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p>Modifica los valores pares para que sean iguales al doble de su valor.</p> Terminal (Entrada/Salida)<pre><code>lista = [ 1, 4, 3, 8, 5, 12, 7, 16, 9, 20]\n</code></pre> Ver soluci\u00f3n propuesta <p>``` py title=\"Python\" lista = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p> <p>for i in range( 1, len(lista), 2):     lista[i] = 2 * lista[i]</p> <p>print(lista)</p> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>lista = [10, 3, 4, 9, 6, 8, 4]\n</code></pre> <p>Imprime en pantalla empleando textos formateados:</p> <ol> <li> <p>La lista.</p> </li> <li> <p>Cual es el mayor valor.</p> </li> <li> <p>Cual es el menor valor.</p> </li> <li> <p>El tercer valor.</p> </li> <li> <p>El quinto valor.</p> </li> <li> <p>La suma del segundo y del cuarto valor.</p> </li> <li> <p>La lista es una serie de valores, pero est\u00e1n desordenados. Ord\u00e9nala de manera ascendente.</p> </li> <li> <p>Cuantas veces aparece el valor 4 en la lista.</p> </li> <li> <p>Elimina los elementos duplicados utilizando el m\u00e9todo correspondiente.</p> </li> <li> <p>La lista final.</p> </li> </ol> Ver soluci\u00f3n propuesta Python<pre><code>lista = [10, 3, 4, 9, 6, 8, 4]\n\nprint(\"La lista es\", lista)\n\nprint(f\"El mayor valor es {max(lista)}\")\n\nprint(f\"El menor valor es {min(lista)}\")\n\nprint(f\"El tercer valor es {lista[2]}\")\n\nprint(f\"El quinto valor es {lista[4]}\")\n\nprint( f\"La suma del segundo y del cuarto valor es {lista[1] + lista[3]}\")\n\nlista.sort()\n\nprint(f\"El 4 aparece {lista.count(4)} veces en la lista\")\n\nlista.remove(4)\n\nprint(\"La lista sin duplicados es\", lista)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La lista es [10, 3, 4, 9, 6, 8, 4]\nEl mayor valor es 10\nEl menor valor es 3\nEl tercer valor es 4\nEl quinto valor es 6\nLa suma del segundo y del cuarto valor es 12\nEl 4 aparece 2 veces en la lista\nLa lista es [3, 4, 6, 8, 9, 10]\n</code></pre> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>colores = [ 'rojo', 'azul', 'verde', 'amarillo' ]\n</code></pre> <p>Impr\u00edmela al derecho y al rev\u00e9s sin utilizar ning\u00fan bucle ni otras variables o listas.</p> Ver soluci\u00f3n propuesta Python<pre><code>print(colores)\n\ncolores.reverse()\n\nprint(colores)\n</code></pre> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>countdown = [0, 1, 2, 3, 4, 5]\n</code></pre> <p>Util\u00edzala para tomar cada valor e imprimir una cuenta regresiva.  </p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Puedes modificar la lista a tu conveniencia pero solo un elemento a la vez. No puedes agregar elementos ni cambiar el valor de un elemento existente. Debes utilizar un ciclo abierto para controlar el funcionamiento del programa.</p> Ver soluci\u00f3n propuesta Python<pre><code>countdown = [0, 1, 2, 3, 4, 5]\n\nwhile len(countdown) &gt; 0:\n    num = countdown.pop()\n    print(num)\n</code></pre> </li> <li> <p>Escribe un programa que realice lo siguiente:</p> <ol> <li>Crear una lista de valores del 1 al 5.</li> <li>Imprimir la lista en pantalla.</li> <li>Desempaqueta la lista en variables.</li> <li> <p>Utilizando las variables, imprime la siguiente salida:</p> Terminal (Entrada/Salida) los valores entre llaves son los almacenados en las variables<pre><code>n1 vale {n1}, n2 vale {n2}, n2 vale \u2026\n</code></pre> </li> </ol> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Crea la lista\nnumeros = list(range(1, 6))\n\n# Imprime la lista\nprint(numeros)\n\n# Desempaca la lista en variables\nn1, n2, n3, n4, n5 = numeros\n\n# Imprime en pantalla\nprint(f\"n1 vale {n1}, n2 vale {n2}, n3 vale {n3}, n4 vale {n4}, n5 vale {n5}\")\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite un n\u00famero del 1 al 10. Luego, que cree una lista de la tabla de multiplicar del n\u00famero ingresado. Por \u00faltimo, que genere en pantalla una salida como la siguiente, para el n\u00famero 4 por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero entre 1 y 10: 4\n\nTabla de multiplicaci\u00f3n para 4:\n\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Solicita un n\u00famero al usuario entre 1 y 10\nnum = int(input(\"Ingrese un n\u00famero entre 1 y 10: \"))\n\n# Crea una lista con los m\u00faltiplos del n\u00famero ingresado\n# multiplos = [num * i for i in range(1, 11)] ser\u00eda una excelente soluci\u00f3n\nmultiplos = list(range(num, (10 * num) + 1, num))\n\n# Imprime los m\u00faltiplos de num en un formato agradable\nprint(f\"\\nTabla de multiplicaci\u00f3n para {num}:\\n\")\n\nfor i in range(1, 11):\n    print(f\"{num} x {i} = {multiplos[i-1]}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/estructuras-de-datos-en-python/","title":"Estructuras de datos en python","text":"Es mutable Es ordenada Permite indexaci\u00f3n Permite rebanado Permite duplicar elementos cadena de caracteres NO SI SI SI SI Lista NO SI SI SI SI Diccionario NO SI SI SI SI Tupla NO SI SI SI SI Conjunto SI NO NO NO NO <p>Cada estructura de datos posee caracter\u00edsticas espec\u00edficas:</p> <ul> <li> <p>Es mutable: Puede cambiar su contenido luego de ser creada.</p> </li> <li> <p>Es ordenada: Los elementos de la estructura tienen un orden espec\u00edfico que se mantiene.</p> </li> <li> <p>Permite indexaci\u00f3n: Es posible acceder a cada elemento de la estructura por su \u00edndice, que comienza en 0.</p> </li> <li> <p>Permite rebanado (slicing): Es posible obtener sub grupos de elementos de una estructura utilizando la sintaxis de rebanado.</p> </li> <li> <p>Permite duplicar elementos: Una estructura puede contener caracteres duplicados.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/","title":"Cadenas de caracteres en Python","text":"<p>Python, al igual que la mayor\u00eda de los lenguajes de programaci\u00f3n actuales, provee un tipo de dato espec\u00edfico para tratar las cadenas de caracteres (strings).</p> <p>Se trata de un tipo de dato con longitud variable, ya que deben adecuarse a la cantidad de caracteres que albergue la cadena.</p> <p>Este tipo de dato posee una buena cantidad de m\u00e9todos y propiedades que facilita su uso.</p> <p>El siguiente c\u00f3digo demuestra como es posible almacenar una cadena de caracteres en una variable. Este procedimiento se denomina inicializaci\u00f3n cuando se crea la variable por primera vez en el programa y se la almacena un primer valor; o asignaci\u00f3n cuando la variable ya existe en el programa y se le almacena un nuevo valor.</p> Python - Inicializaci\u00f3n de variables de cadena de caracteres<pre><code># Definici\u00f3n de cadenas de caracteres usando comillas dobles\ndia1 = \"Lunes\"\nvacio = \"\"\n\n# Definici\u00f3n de cadenas de caracteres usando comillas simples\ndia2 = 'Martes'\nnumero_que_no_es_numero = \"121\"\n</code></pre> <p><code>vacio</code> es una cadena de caracteres de longitud cero. <code>numero_que_no_es_numero</code> contiene n\u00fameros, pero es una cadena de caracteres porque estos n\u00fameros est\u00e1n entre comillas.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#ingreso-de-cadenas-vacias","title":"Ingreso de cadenas vac\u00edas","text":"<p>En Python, cuando el usuario presiona solo ENTER en respuesta a la funci\u00f3n <code>input()</code>, se devuelve una cadena vac\u00eda. Por lo tanto, puedes verificar si el usuario presion\u00f3 solo ENTER comprobando si dato es una cadena vac\u00eda: </p> Python<pre><code>valor_ingresado = input(\"Ingrese algo por teclado (o solo ENTER para ingresar una cadena vac\u00eda): \")\n\nif valor_ingresado == '':\n    print(\"Has ingresado una cadena vac\u00eda.\")\nelse:\n    print(\"Has ingresado\", valor_ingresado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese algo por teclado (o solo ENTER para ingresar una cadena vac\u00eda): Pablo \nHas ingresado Pablo\n\nIngrese algo por teclado (o solo ENTER para ingresar una cadena vac\u00eda): \nHas ingresado una cadena vac\u00eda.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-triple-comillas-en-cadenas-de-mas-de-una-linea","title":"Uso de triple comillas en cadenas de m\u00e1s de una l\u00ednea","text":"<p>El uso de triple comillas para crear una cadena de caracteres provee un m\u00e9todo sencillo para usar m\u00e1s de una l\u00ednea de c\u00f3digo para definir su contenido:</p> Python<pre><code># Definici\u00f3n de cadenas usando comillas dobles triples:\ncadena1 = \"\"\"En Python es posible \ndefinir cadenas de caracteres \nutilizando m\u00e1s de una l\u00ednea de c\u00f3digo\"\"\"\n\n# Definici\u00f3n de cadenas usando comillas simples triples:\ncadena2 = '''Por supuesto, se puede hacer lo mismo \nutilizando comillas simples'''\n\nprint(cadena1)\nprint(cadena2)\n</code></pre> Terminal (Entrada/Salida)<pre><code>En Python es posible\ndefinir cadenas de caracteres \nutilizando m\u00e1s de una l\u00ednea de c\u00f3digo\n\nPor supuesto, se puede hacer lo mismo \nutilizando comillas simples\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#iterar-sobre-una-cadena-de-caracteres","title":"Iterar sobre una cadena de caracteres","text":"<p>Como hemos visto anteriormente, <code>for</code> es una estructura de control que permite repetir un bloque de c\u00f3digo un n\u00famero determinado de veces. </p> <p>En Python, puedes usar un bucle for para iterar sobre cada car\u00e1cter en una cadena. Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Hola Mundo\"\n\nfor caracter in cadena:\n    print(caracter)\n</code></pre> Terminal (Entrada/Salida)<pre><code>H\no\nl\na\n\nM\nu\nn\nd\no\n</code></pre> <p>En este c\u00f3digo, <code>for caracter in cadena:</code> inicia un bucle que itera sobre cada car\u00e1cter en cadena. En cada iteraci\u00f3n del bucle, <code>caracter</code> es una cadena de un solo car\u00e1cter de <code>cadena</code>, y <code>print(caracter)</code> imprime este car\u00e1cter.  </p> <p>Por lo tanto, este c\u00f3digo imprime cada car\u00e1cter en <code>cadena</code> en una l\u00ednea separada.</p> <p>Otro ejemplo podr\u00eda ser enumerar cada caracter como se ve en la salida:</p> Terminal (Entrada/Salida)<pre><code>1\u00b0: H  /  2\u00b0: o  /  3\u00b0: l  /  4\u00b0: a  /  5\u00b0:    /  6\u00b0: M  /  7\u00b0: u  /  8\u00b0: n  /  9\u00b0: d  /  10\u00b0: o\n</code></pre> <p>Esto requiere que el programa sea m\u00e1s complejo para lograr el resultado propuesto.</p> Python<pre><code>cadena = \"Hola Mundo\"\n\n# Se utiliza para controlar como debe comportarse *print*\n# en cada iteraci\u00f3n del ciclo\npos = 1\n\n# Se utiliza para modificar el comportamiento del par\u00e1metro *end* \n# de *print* durante la ejecuci\u00f3n del ciclo\nchar_end = \"  /  \"\n\nfor caracter in cadena:\n\n    # Modifica el comportamiento del par\u00e1metro *end* \n    # si es la \u00faltima iteraci\u00f3n del ciclo\n    if pos == len(cadena):\n        char_end = \"\\n\"\n\n    print(pos, \"\u00b0: \", caracter, sep=\"\", end = char_end)\n    pos = pos + 1\n</code></pre> <p>Para pensar</p> <p>Analiza el \u00faltimo c\u00f3digo para entender como es el funcionamiento.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#acceso-a-cada-caracter-de-una-cadena-de-caracteres","title":"Acceso a cada caracter de una cadena de caracteres","text":"<p>Para entenderlo de manera muy simple, una cadena de caracteres es como una fila ordenada de caracteres donde cada caracter se ubica en una posici\u00f3n \u00fanica, uno a continuaci\u00f3n de otro, y cuyo primer valor posicional es el cero [0].</p> <p>Esta posici\u00f3n se denomina \u00edndice (index). </p> <p>Tambi\u00e9n se lo suele llamar sub\u00edndice aunque este nombre no es correcto y no debe ser adoptado para identificar posiciones.</p> <p>Asi, en Python se puede acceder a uno o a un conjunto de caracteres dentro de una cadena de caracteres simplemente con llamar el nombre de la variable de la cadena de caracteres seguido del \u00edndice de referencia:</p> Python<pre><code>cadena = \"Hola Mundo!\"\n\nprint(cadena[0])\nprint(cadena[5])\n</code></pre> Terminal (Entrada/Salida)<pre><code>H # Es el primer caracter de la cadena, identificado con el \u00edndice 0\nM # Es el sexto caracter de la cadena, identificado con el \u00edndice 5\n</code></pre> <p>Cuando el \u00edndice es negativo, las posiciones se identifican de atr\u00e1s para adelante, siendo -1 el \u00edndice del \u00faltimo caracter, siendo -2 el \u00edndice del ante \u00faltimo caracter y as\u00ed sucesivamente.</p> <p>\u00a1Para recordar!</p> <p>Cuando utilizas \u00edndices negativos, la primera posici\u00f3n no es 0, es -1</p> Python<pre><code>cadena = \"Hola Mundo!\"\n\nprint(cadena[-1])\nprint(cadena[-2])\n</code></pre> Terminal (Entrada/Salida)<pre><code>! # Es el primer caracter de la cadena de atr\u00e1s para adelante, identificado con el \u00edndice -1\no # Es el segundo caracter de la cadena de atr\u00e1s para adelante, identificado con el \u00edndice -2\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#rebanadas-slicing","title":"Rebanadas (Slicing)","text":"<p>Las rebanadas o slicing en Python se utilizan para extraer una parte de la cadena de caracteres (un intervalo de posiciones de la cadena de caracteres). </p> <p>Aqu\u00ed tienes un ejemplo b\u00e1sico:</p> Python<pre><code># Crear una cadena\nmi_cadena = \"Hola Mundo\"\n\n# Obtener los caracteres del \u00edndice 5 al \u00edndice 9 (el 10 se excluye)\nsub_cadena = mi_cadena[5:10]\n\nprint(sub_cadena)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Mundo\n</code></pre> <p>En este c\u00f3digo, <code>mi_cadena[5:10]</code> crea una nueva cadena que contiene los caracteres de <code>mi_cadena</code> desde el \u00edndice 5 hasta el \u00edndice 9.  </p> <p>Adem\u00e1s, puedes omitir el \u00edndice inicial para empezar desde el principio de la cadena, o puedes omitir el \u00edndice final para ir hasta el final de la cadena. </p> <p>Tambi\u00e9n puedes usar un tercer n\u00famero para especificar el paso de la rebanada. Por ejemplo, mi_lista[::2] obtendr\u00eda todos los elementos de mi_lista con \u00edndices pares.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#ejemplos-de-aplicacion","title":"Ejemplos de aplicaci\u00f3n","text":"Python<pre><code>cadena = \"Hola Mundo!\"\n\n# Imprime los caracteres en los \u00edndices 5 y 6 (\"Mu\")\nprint(cadena[5:7])      \n\n# Imprime los caracteres en los \u00edndices -10, -9 y -8 (\"ola\")\nprint(cadena[-10:-7])   \n\n# Imprime los caracteres desde el \u00edndice 5 hasta el final (\"Mundo!\")\nprint(cadena[5:])       \n\n# Imprime los caracteres desde el inicio hasta el \u00edndice 3 (\"Hola\")\nprint(cadena[:4])      \n\n# Imprime cada segundo car\u00e1cter desde el \u00edndice 2 hasta el 10 (\"l ud\")\nprint(cadena[2:11:2])  \n\n# Imprime la cadena completa (\"Hola Mundo!\")\nprint(cadena[:])       \n\n# Imprime cada segundo car\u00e1cter de la cadena completa (\"Hl ud!\")\nprint(cadena[::2])      \n\n# Imprime la cadena en orden inverso (\"!odnuM aloH\")\nprint(cadena[::-1])  \n</code></pre> <p>Cada l\u00ednea imprime una parte diferente de la cadena, utilizando diferentes maneras de indexaci\u00f3n y segmentaci\u00f3n.</p> Terminal (Entrada/Salida)<pre><code># Son los caracteres comprendidos en el intervalo de posiciones sexta hasta s\u00e9ptima, con \u00edndices 5 al 6  \nMu      \n\n# Son los caracteres comprendidos en el intervalo de posiciones d\u00e9cima desde atr\u00e1s hasta octava desde atr\u00e1s, con \u00edndices -10 al -8 \nola     \n\n# Son los caracteres comprendidos en el intervalo de posiciones sexta hasta el final, con \u00edndices 5 en adelante \nMundo!  \n\n# Son los caracteres comprendidos en el intervalo de posiciones primera hasta cuarta, con \u00edndices 0 al 3 \nHola    \n\n# Son los caracteres comprendidos en el intervalo de posiciones tercera hasta und\u00e9cima, saltando de dos en dos, con \u00edndices 2 al 10 con paso 2\nl ud    \n\n# Son todos los caracteres de la cadena, desde el inicio hasta el final\nHola Mundo! \n\n# Son los caracteres comprendidos en toda la cadena, saltando de dos en dos, con \u00edndices desde el inicio hasta el final con paso 2\nHl ud!  \n\n# Son todos los caracteres de la cadena, desde el final hasta el inicio, es decir, la cadena invertida\n!odnuM aloH \n</code></pre> <p>\u00a1Para recordar!</p> <p>El subconjunto resultante de la cadena de caracteres incluye el valor del \u00edndice de inicio, pero no el valor del \u00edndice de fin si no su valor anterior.</p> <p>Y un tercer valor permite determinar un paso, que incluso puede ser negativo.</p> <p>\u00a1Precauci\u00f3n!</p> <p>Cuando trabajas con \u00edndices, estos siempre deben ser v\u00e1lidos. Cualquier intento de acceso a una posici\u00f3n inexistente (fuera de rango) resultar\u00e1 en un error de ejecuci\u00f3n del programa.</p> Python<pre><code>print(cadena[-2:-6]) # No devuelve ninguna subcadena\nprint(cadena[-6:10]) # Output: Mundo\nprint(cadena[5:-1]) # Output: Mundo\nprint(cadena[5:15]) # Output: Mundo!\n\nprint(cadena[15]) IndexError: string index out of range\n\nprint(cadena[-16]) IndexError: string index out of range\n</code></pre> <p>Presta atenci\u00f3n que seg\u00fan el caso, utilizar un \u00edndice fuera de rango no siempre resulta en error.  </p> <p>En el primer ejemplo, la rebanada no devuelve ninguna subcadena porque los \u00edndices est\u00e1n invertidos.  </p> <p>En el cuarto ejemplo, la rebana se realiza sin problemas. Claro, independientemente que el \u00edndice de fin est\u00e9 fuera de rango, la rebanada se efectuar\u00e1 desde la sexta posici\u00f3n (\u00edndice 5) hasta la quinceava posici\u00f3n (\u00edndice 14) o hasta alcanzar el final de la cadena de caracteres, lo que ocurra primero.</p> <p>Pero en el quinto y sexto ejemplo si se produce un error de fuera de rango ya que la cadena no posee 16 caracteres.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-operadores-con-cadenas-de-caracteres","title":"Uso de operadores con cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-en-cadenas-para-partirlas-en-mas-de-una-linea","title":"Uso del operador  en cadenas para partirlas en m\u00e1s de una l\u00ednea","text":"<p>Puedes usar el operador de continuaci\u00f3n de l\u00ednea ( \\ ) para dividir una cadena de texto en varias l\u00edneas sin interrumpir la cadena. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Esta es una cadena de texto muy larga que queremos dividir \\\nen varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\"\n\nprint(cadena)\n</code></pre> <p>Cuando ejecutes este c\u00f3digo, ver\u00e1s que la cadena se imprime como una sola l\u00ednea, a pesar de que en el c\u00f3digo fuente est\u00e1 dividida en dos l\u00edneas. Esto es porque el operador de continuaci\u00f3n de l\u00ednea ( \\ ) al final de la l\u00ednea le dice a Python que la l\u00ednea actual contin\u00faa en la siguiente l\u00ednea.</p> Terminal (Entrada/Salida)<pre><code>Esta es una cadena de texto muy larga que queremos dividir en varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\n</code></pre> <p>\u00a1Atenci\u00f3n!</p> <p>Aseg\u00farate de que no haya ning\u00fan espacio o cualquier otro car\u00e1cter despu\u00e9s del operador de continuaci\u00f3n de l\u00ednea ( \\ ), de lo contrario, Python interpretar\u00e1 el  como un car\u00e1cter literal en lugar de un indicador de continuaci\u00f3n de l\u00ednea.</p> <p>No solo con cadenas</p> <p>El operador de continuaci\u00f3n de l\u00ednea ( \\ ) tambi\u00e9n se utiliza en Python para indicar que una l\u00ednea de c\u00f3digo contin\u00faa en la siguiente l\u00ednea. Esto es \u00fatil cuando tienes una l\u00ednea de c\u00f3digo muy larga y quieres dividirla en varias l\u00edneas para mejorar la legibilidad de este.</p> Python<pre><code># Sin el operador de continuaci\u00f3n de l\u00ednea\nsuma = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n# Con el operador de continuaci\u00f3n de l\u00ednea \n# (\u00a1Para recordar! que no debe posee m\u00e1s caracteres a continuaci\u00f3n)\nsuma = 1 + 2 + 3 + 4 + \\\n    5 + 6 + 7 + 8 + \\\n    9 + 10\n\nprint(suma)  # Output: 55\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#replicacion-de-cadenas-de-caracteres","title":"Replicaci\u00f3n de cadenas de caracteres","text":"<p>Una cadena puede replicarse con el operador de repetici\u00f3n ( * ):</p> Python<pre><code>risa = 'ja'\ncarcajada = risa * 5 # jajajajaja\n\nasteriscos = \"*\" * 10\n\nprint(carcajada)\nprint(asteriscos)\n</code></pre> Terminal (Entrada/Salida)<pre><code>jajajajaja\n**********\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#concatenacion-de-cadenas-de-caracteres","title":"Concatenaci\u00f3n de cadenas de caracteres","text":"<p>Las cadenas de caracteres pueden concatenarse (Unir o enlazar dos o m\u00e1s cadenas) utilizando el operador de concatenaci\u00f3n ( + ):</p> Python<pre><code>mensaje =\"Buenos d\u00edas\"\nnombre = \"Pablo\"\napellido = \"Roca\"\n\nsaludo = mensaje + \" \" + nombre + \" \" + apellido\n\nprint(saludo)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Buenos d\u00edas Pablo Roca\n</code></pre> <p>\u00a1Para recordar!</p> <p>La funci\u00f3n de concatenaci\u00f3n es propia de las cadenas de caracteres. El uso del operador de concatenaci\u00f3n ( + ) en otro tipo o estructura de datos podr\u00eda comportarse de diferente manera o devolver un error.</p> Python<pre><code>var1 = 3 + 5        # 8 (entero)\nvar2 = \"3\" + \"5\"    # 35 (cadena de caracteres)\nvar3 = str(3) + \"5\" # 35 (cadena de caracteres)\nvar4 = 3 + int(\"5\") # 8 (entero)\nvar5 = 3 + \"5\"      # TypeError: unsupported operand type(s) for +: 'int' and 'str'   \n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#comparacion-de-cadenas-de-caracteres","title":"Comparaci\u00f3n de cadenas de caracteres","text":"<p>Es posible comparar dos o m\u00e1s cadenas de caracteres en una expresi\u00f3n utilizando los operadores de comparaci\u00f3n:</p> Python<pre><code>cadena1 = \"caso\"\ncadena2 = \"caos\"\n\nprint(cadena1 &gt; cadena2)\nprint(cadena1 == cadena2)\nprint(cadena1 &lt; cadena2)\n</code></pre> <p>La comparaci\u00f3n no es por cantidad de caracteres sino por el caracter que se encuentra en cada posici\u00f3n de una cadena respecto del caracter que se encuentra en la misma posici\u00f3n de otra cadena:</p> Terminal (Entrada/Salida)<pre><code>True\nFalse\nFalse\n</code></pre> <p>Solo la primera comparaci\u00f3n del ejemplo anterior es verdadera: reci\u00e9n hay diferencia de caracteres en la tercera posici\u00f3n donde <code>cadena1</code> posee una <code>s</code> y <code>cadena2</code> posee una <code>o</code>, siendo la <code>s</code> mayor en valor posicional a la <code>o</code></p> <p>Lo mismo ocurre con la comparaci\u00f3n de caracteres num\u00e9ricos cuando estos son almacenados como caracteres de texto:</p> Python<pre><code>cadena1 = \"num_10\"\ncadena2 = \"num_2\"\n\nprint(cadena1 &gt; cadena2)\nprint(cadena1 == cadena2)\nprint(cadena1 &lt; cadena2)\n</code></pre> Terminal (Entrada/Salida)<pre><code>False\nFalse\nTrue\n</code></pre> <p>Solo la tercera comparaci\u00f3n del ejemplo anterior es verdadera: reci\u00e9n hay diferencia de caracteres en la quinta posici\u00f3n donde <code>cadena1</code> posee un caracter <code>1</code> y <code>cadena2</code> posee un caracter <code>2</code>, siendo el <code>1</code> menor en valor posicional al <code>2</code></p> <p>\u00a1Para recordar!</p> <p>En Python, la comparaci\u00f3n es case sensitive, es decir, que distingue entre may\u00fasculas y min\u00fasculas:</p> Python<pre><code>cadena1 = \"Mundo\"\ncadena2 = \"mundo\"\nprint(cadena1 == cadena2)\n</code></pre> Terminal (Entrada/Salida)<pre><code>False\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#comprobar-si-una-subcadena-se-encuentra-o-no-dentro-de-una-cadena-de-caracteres","title":"Comprobar si una subcadena se encuentra, o no, dentro de una cadena de caracteres","text":"<p>Las subcadenas son caracteres secuenciales dentro de una cadena de caracteres.  </p> <p>Por ejemplo, la cadena \"abc\" tiene las siguientes subcadenas: \"\" , \"a\" , \"ab\" , \"abc\" , \"b\" , \"bc\" , \"c\"</p> <p>Para comprobar si una subcadena se encuentra, o no, dentro de una cadena de caracteres, se utilizan los siguientes operadores:</p> <ul> <li> <p>in: devuelve True si un valor se encuentra en la secuencia y False de lo contrario.</p> </li> <li> <p>not in: devuelve True si un valor no se encuentra en la secuencia y False de lo contrario.</p> </li> </ul> Python<pre><code>cadena = \"Hola, mundo!\"\n\nprint(\"mundo\" in cadena)  # Output: True\nprint(\"adios\" in cadena)  # Output: False\n\nprint(\"mundo\" not in cadena)  # Output: False\nprint(\"adios\" not in cadena)  # Output: True\n</code></pre> <p>M\u00e1s adelante veremos que podremos realizar estas comparaciones directamente mediante el uso de m\u00e9todos.</p> <p>''' info \"\u00a1\u00a1Para recordar! que estos operadores tambi\u00e9n funcionan con otras estructuras de datos!\"</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-funciones-con-cadenas-de-caracteres","title":"Uso de funciones con cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#longitud-de-una-cadena-de-caracteres","title":"Longitud de una cadena de caracteres","text":"<p>Python posee la funci\u00f3n <code>len()</code> que retorna la longitud de una cadena de caracteres:</p> Python<pre><code>cadena = \"Hola Mundo!\"\nprint(\"La cadena de caracteres\", cadena, \"tiene\", len(cadena), \"caracteres.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>La cadena de caracteres Hola Mundo! tiene 11 caracteres.\n</code></pre> <p>\u00a1Para recordar!</p> <p><code>len()</code> cuenta todos los caracteres: los 4 de 'Hola', los 5 de 'Mundo', 1 del signo de exclamaci\u00f3n y 1 del espacio, totalizando 11. Es decir, que cualquier caracter que se encuentre dentro de las comillas ser\u00e1 contado.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#minimo-y-maximo-elemento-de-una-cadena-de-caracteres","title":"M\u00ednimo y m\u00e1ximo elemento de una cadena de caracteres","text":"<p>Las funciones min() y max() tambi\u00e9n pueden ser utilizadas con cadenas:</p> <ul> <li> <p>min(): devuelve el car\u00e1cter con el valor ASCII m\u00e1s peque\u00f1o.</p> </li> <li> <p>max() devuelve el car\u00e1cter con el valor ASCII m\u00e1s grande.</p> </li> </ul> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"HolaMundo\"\n\nprint(min(cadena))  # Output: 'H'\nprint(max(cadena))  # Output: 'u'\n</code></pre> <p>En este caso, 'H' tiene el valor ASCII m\u00e1s peque\u00f1o en la cadena y 'u' tiene el valor ASCII m\u00e1s grande.  </p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-metodos-de-cadenas-de-caracteres","title":"Uso de m\u00e9todos de cadenas de caracteres","text":"<p>En general, las funciones son bloques de c\u00f3digo independientes que realizan una tarea espec\u00edfica y pueden ser llamadas por su nombre. </p> <p>Los m\u00e9todos, por otro lado, est\u00e1n asociados a un objeto espec\u00edfico (en este caso, una cadena de caracteres) y pueden modificar el estado de ese objeto o realizar una operaci\u00f3n que est\u00e1 de alguna manera relacionada con ese objeto.</p> <p>Las cadenas de caracteres en Python tienen muchos m\u00e9todos incorporados para realizar diversas operaciones. </p> <p>Aqu\u00ed est\u00e1n algunos de los m\u00e1s comunes:</p> <ul> <li> <p>format(*args, **kwargs): Realiza una operaci\u00f3n de formato de cadena. Este m\u00e9todo ser\u00e1 explicado m\u00e1s adelante cuando tratemos el tema de formateo de cadenas de caracteres.</p> </li> <li> <p>capitalize(): Convierte el primer car\u00e1cter a may\u00fasculas.</p> </li> <li> <p>title(): Devuelve una copia de la cadena convirtiendo la primera letra de cada palabra de la cadena a may\u00fasculas y el resto de las letras a min\u00fasculas. </p> Python<pre><code>cadena = \"hola MUNDO\"\n\ncadena_titulada = cadena.title()\n\nprint(cadena_titulada)  # Output: \"Hola Mundo\"\n</code></pre> <p>En este c\u00f3digo, <code>cadena.title()</code> convierte la cadena \"hola mundo\" a \"Hola Mundo\", donde la primera letra de cada palabra es may\u00fascula y todas las dem\u00e1s letras son min\u00fasculas.</p> </li> <li> <p>lower(): Devuelve una copia de la cadena convirtiendo toda la cadena a min\u00fasculas.</p> </li> <li> <p>upper(): Devuelve una copia de la cadena convirtiendo toda la cadena a may\u00fasculas.</p> </li> <li> <p>swapcase(): Devuelve una copia de la cadena invirtiendo el caso (may\u00fasculas \u27f7 min\u00fasculas) de cada car\u00e1cter.</p> Python<pre><code>cadena = \"hola Mundo\"\n\nprint(cadena.capitalize())  # Output: \"Hola mundo\"\n\nprint(cadena.lower())       # Output: \"hola mundo\"\n\nprint(cadena.upper())       # Output: \"HOLA MUNDO\"\n\nprint(cadena.swapcase())    # Output: \"HOLA mUNDO\"\n\nprint(cadena)               # Output: \"hola Mundo\"\n</code></pre> <p>Estos m\u00e9todos no modifican la cadena de caracteres original.</p> </li> <li> <p>istitle(): Comprueba si la cadena est\u00e1 formateada como t\u00edtulo.</p> </li> <li> <p>islower(): Comprueba si todos los caracteres en la cadena est\u00e1n en min\u00fasculas.</p> </li> <li> <p>isupper(): Comprueba si todos los caracteres en la cadena est\u00e1n en may\u00fasculas.</p> </li> <li> <p>isspace(): Comprueba si todos los caracteres en la cadena son espacios en blanco.</p> </li> <li> <p>isprintable(): Comprueba si todos los caracteres en la cadena son imprimibles o no.</p> Python<pre><code>cadena1 = \"Hola Mundo\"\ncadena2 = \"hola mundo\"\ncadena3 = \"HOLA MUNDO\"\n\nprint(cadena1.istitle())  # Output: True\nprint(cadena1.islower())  # Output: False\nprint(cadena1.isupper())  # Output: False\n\nprint(cadena2.istitle())  # Output: False\nprint(cadena2.islower())  # Output: True\nprint(cadena2.isupper())  # Output: False\n\nprint(cadena3.istitle())  # Output: False\nprint(cadena3.islower())  # Output: False\nprint(cadena3.isupper())  # Output: True\n\ncadena4 = \"          \"\ncadena5 = \"\"\n\nprint(cadena4.isspace())  # Output: True\nprint(cadena5.isspace())  # Output: False\n\ncadena6 = \"Hola Mundo\"\ncadena7 = \"Hola Mundo\\t\\n\"\ncadena8 = \"\\t\\n\"\n\nprint(cadena6.isprintable())  # Output: True\nprint(cadena7.isprintable())  # Output: False\nprint(cadena8.isprintable())  # Output: False\n</code></pre> <p>Existen otros m\u00e9todos para validar el contenido de una cadena de caracteres:</p> <ul> <li> <p>isascii(): Comprueba si todos los caracteres en la cadena son ASCII.</p> </li> <li> <p>isidentifier(): Comprueba si la cadena es un identificador v\u00e1lido de Python.</p> </li> </ul> </li> <li> <p>join(iterable): Si el argumento es un iterable, une los elementos de este (como una lista) en una sola cadena.</p> <p>Aqu\u00ed tienes un ejemplo de c\u00f3mo se usa join() con una lista:</p> Python<pre><code># Lista de cadenas\npalabras = [\"Hola\", \"mundo\"]\n\n# Usa join para unir las palabras con un espacio\nfrase = \" \".join(palabras)\n\nprint(frase)  # Output: Hola mundo\n</code></pre> <p>En este c\u00f3digo, <code>\" \".join(palabras)</code> une las cadenas en la lista <code>palabras</code> con un espacio entre ellas, resultando en la cadena <code>\"Hola mundo\"</code>.</p> <p>Tambi\u00e9n puedes usar otros caracteres o cadenas como separador. Por ejemplo, puedes usar <code>join()</code> para unir las cadenas con un gui\u00f3n:</p> Python<pre><code># Lista de cadenas\npalabras = [\"Hola\", \"mundo\"]\n\n# Usa join para unir las palabras con un gui\u00f3n\nfrase = \"-\".join(palabras)\n\nprint(frase)  # Output: Hola-mundo\n</code></pre> </li> <li> <p>join(cadena): Si el argumento es una cadena, devuelve una cadena que es la uni\u00f3n de cada caracter que conforma la cadena del argumento a trav\u00e9s de la cadena especificada como separador.</p> <p>Aqu\u00ed tienes un ejemplo de c\u00f3mo se usa join() con una cadena:</p> Python<pre><code># Cadena de caracteres\ncadena = \"12345\"\n\n# Usa join para unir los caracteres que conforman *cadena*\n# '-' es la cadena que utilizar\u00e1 el m\u00e9todo como separador de cada caracter durante la uni\u00f3n\ncadena_resultante = '-'.join(cadena) \n\nprint(cadena_resultante)  # Output: 1-2-3-4-5\n</code></pre> <p>En este c\u00f3digo, <code>'-'</code> es el separador que se inserta entre cada car\u00e1cter de la cadena original. El resultado es la cadena <code>\"1-2-3-4-5\"</code>.</p> </li> <li> <p>count(subcadena[, inicio[, fin]]): Se utiliza para contar el n\u00famero de veces que una subcadena aparece en la cadena. </p> Python<pre><code>cadena = \"Hola mundo, mundo. Mundo, mundo.\"\nconteo = cadena.count(\"mundo\")\nprint(conteo)  # Output: 3\n</code></pre> <p>En este c\u00f3digo, <code>cadena.count(\"mundo\")</code> cuenta el n\u00famero de veces que la subcadena \"mundo\" aparece en la variable <code>cadena</code>. En este caso, la subcadena \"mundo\" aparece tres veces (el tercer \"Mundo\" empieza con may\u00fasculas), por lo que el m\u00e9todo count() devuelve 3.</p> <p>\u00a1Para recordar!</p> <p><code>count()</code> es sensible a may\u00fasculas y min\u00fasculas, por lo que \"Mundo\" y \"mundo\" se consideran diferentes.</p> <p>Tambi\u00e9n puedes especificar un rango para la b\u00fasqueda con los par\u00e1metros opcionales start y end:</p> Python<pre><code>cadena = \"Hola mundo, mundo. Mundo, mundo.\"\nprint(cadena.count(\"mundo\", 0, 14))  # Output: 1\n</code></pre> <p>En este c\u00f3digo, <code>cadena.count(\"mundo\", 0, 14)</code> cuenta cu\u00e1ntas veces la subcadena \"mundo\" aparece en la variable <code>cadena</code> entre los \u00edndices 0 y 14. En este caso, la subcadena \"mundo\" aparece una vez en ese rango, por lo que el m\u00e9todo count() devuelve 1.</p> </li> <li> <p>startswith(prefijo[, inicio[, fin]]): Comprueba si la cadena comienza con el prefijo especificado.</p> </li> <li> <p>endswith(sufijo[, inicio[, fin]]): Comprueba si la cadena termina con el sufijo especificado.</p> Python<pre><code>cadena = \"Hola mundo\"\n\n# Comprobar si la cadena comienza con \"Hola\"\nif cadena.startswith(\"Hola\"):\n    print(\"La cadena comienza con 'Hola'.\")\nelse:\n    print(\"La cadena no comienza con 'Hola'.\")\n\n# Comprobar si la cadena termina con \"mundo\"\nif cadena.endswith(\"mundo\"):\n    print(\"La cadena termina con 'mundo'.\")\nelse:\n    print(\"La cadena no termina con 'mundo'.\")\n\n# Comprobar si la subcadena \"ola\" comienza en la posici\u00f3n 1\nif cadena.startswith(\"ola\", 1):\n    print(\"La subcadena 'ola' comienza en la posici\u00f3n 1.\")\nelse:\n    print(\"La subcadena 'ola' no comienza en la posici\u00f3n 1.\")\n\n# Comprobar si la subcadena \"mun\" termina en la posici\u00f3n 7\nif cadena.endswith(\"mun\", 0, 7):\n    print(\"La subcadena 'mun' termina en la posici\u00f3n 7.\")\nelse:\n    print(\"La subcadena 'mun' no termina en la posici\u00f3n 7.\")\n</code></pre> <p>En este c\u00f3digo, <code>cadena.startswith(\"Hola\")</code> devuelve <code>True</code> si cadena comienza con \"Hola\", y <code>False</code> en caso contrario. De manera similar, <code>cadena.endswith(\"mundo\")</code> devuelve <code>True</code> si cadena termina con \"mundo\", y False en caso contrario.</p> <p>Adem\u00e1s, <code>cadena.startswith(\"ola\", 1)</code> devuelve <code>True</code> si la subcadena de cadena que comienza en la posici\u00f3n 1 comienza con \"ola\", y False en caso contrario. De manera similar, <code>cadena.endswith(\"mun\", 0, 7)</code> devuelve <code>True</code> si la subcadena de cadena que termina en la posici\u00f3n 7 termina con \"mun\", y False en caso contrario.</p> </li> <li> <p>replace(cadena_buscada, cadena_nueva[, contador]): Devuelve una copia de la cadena con las ocurrencias de la subcadena especificada en cadena_buscada reemplazadas por otra cadena especificada en cadena_nueva. Si no se especifica contador devuelve todas las ocurrencias reemplazas. Si se especifica contador, su valor representa el n\u00famero (m\u00e1ximo) de ocurrencias que ser\u00e1n reemplazadas.</p> Python<pre><code># Ejemplo de uso de replace(old, new)\ncadena = \"Hola mundo, mundo\"\nnueva_cadena = cadena.replace(\"mundo\", \"Python\")\n\nprint(nueva_cadena)  # Output: \"Hola Python, Python\"\n</code></pre> <p>En el primer ejemplo, <code>replace(\"mundo\", \"Python\")</code>reemplaza todas las apariciones de \"mundo\" por \"Python\".</p> Python<pre><code># Ejemplo de uso de replace(old, new, count)\ncadena = \"Hola mundo, mundo\"\nnueva_cadena = cadena.replace(\"mundo\", \"Python\", 1)\n\nprint(nueva_cadena)  # Output: \"Hola Python, mundo\"\n</code></pre> <p>En el segundo ejemplo, <code>replace(\"mundo\", \"Python\", 1)</code> reemplaza solo la primera aparici\u00f3n de \"mundo\" por \"Python\", porque se especific\u00f3 un conteo de 1.</p> </li> <li> <p>split(separador=None[, maxsplit=-1]): Divide la cadena en subcadenas usando  separador como la cadena delimitadora; y las devuelve como una lista de elementos. Si maxsplit no se especifica, se realizan todas las divisiones posibles. Si se especifica maxsplit, su valor representa el n\u00famero (m\u00e1ximo) de divisiones que ser\u00e1n efectuadas.</p> Python<pre><code># Ejemplo de uso de split(separador=None, maxsplit=-1)\ncadena = \"Hola mundo Python\"\nlista_palabras = cadena.split()\n\nprint(lista_palabras)  # Output: ['Hola', 'mundo', 'Python']\n</code></pre> <p>En el primer ejemplo, <code>split()</code> divide la cadena en palabras, utilizando espacios como delimitadores.</p> Python<pre><code># Ejemplo de uso de split(separador=None, maxsplit=1)\ncadena = \"Hola mundo Python\"\nlista_palabras = cadena.split(maxsplit=1)\n\nprint(lista_palabras)  # Output: ['Hola', 'mundo Python']\n</code></pre> <p>En el segundo ejemplo, <code>split(maxsplit=1)</code> divide la cadena en palabras, pero solo realiza una divisi\u00f3n porque se especific\u00f3 un <code>maxsplit</code> de 1.</p> Python<pre><code># Ejemplo de uso de split(separador)\ncadena = \"manzana,banana,fruta\"\nlista_frutas = cadena.split(\",\")\n\nprint(lista_frutas)  # Output: ['manzana', 'banana', 'fruta']\n</code></pre> <p>En el tercer ejemplo, <code>split(\",\")</code> divide la cadena en subcadenas, utilizando la coma como delimitador.</p> </li> <li> <p>rsplit(separador=None[, maxsplit=-1]): Divide una cadena en subcadenas a partir del final, usando  separador como la cadena delimitadora; y las devuelve como una lista de elementos. Si no se especifica un separador, se utilizan espacios en blanco. Si maxsplit no se especifica, se realizan todas las divisiones posibles. Si se especifica maxsplit, su valor representa el n\u00famero (m\u00e1ximo) de divisiones que ser\u00e1n efectuadas.</p> Python<pre><code># Ejemplo de uso de rsplit() sin especificar un separador\ncadena = \"Hola mundo Python\"\nlista_palabras = cadena.rsplit()\nprint(lista_palabras)  # Output: ['Hola', 'mundo', 'Python']\n</code></pre> <p>En el primer ejemplo, <code>cadena.rsplit()</code> divide la cadena en palabras, utilizando espacios en blanco como delimitadores.</p> Python<pre><code># Ejemplo de uso de rsplit() especificando un separador\ncadena = \"manzana,banana,frutilla\"\nlista_frutas = cadena.rsplit(',')\nprint(lista_frutas)  # Output: ['manzana', 'banana', 'frutilla']\n</code></pre> <p>En el segundo ejemplo, <code>cadena.rsplit(',')</code> divide la cadena en palabras, utilizando comas como delimitadores.</p> Python<pre><code># Ejemplo de uso de rsplit() especificando un separador y un maxsplit\ncadena = \"manzana,banana,frutilla\"\nlista_frutas = cadena.rsplit(',', 1)\nprint(lista_frutas)  # Output: ['manzana,banana', 'frutilla']\n</code></pre> <p>En el tercer ejemplo, <code>cadena.rsplit(',', 1)</code> divide la cadena en palabras, utilizando comas como delimitadores, pero solo realiza una divisi\u00f3n desde el final porque se especific\u00f3 un maxsplit de 1.</p> </li> <li> <p>partition(separador): Divide una cadena en una tupla de 3 elementos bas\u00e1ndose en la primera aparici\u00f3n de un separador especificado. La tupla resultante contiene la parte de la cadena antes del separador, el separador mismo, y la parte de la cadena despu\u00e9s del separador.</p> </li> <li> <p>rpartition(separador): Hace lo mismo que partition(separador), pero comienza a buscar el separador desde el final de la cadena.</p> Python<pre><code>cadena = \"hola mundo mundo\"\nresultado = cadena.partition(\" \")\n\nprint(resultado)  # Output: ('hola', ' ', 'mundo mundo')\n</code></pre> <p>En el primer ejemplo, <code>cadena.partition(\" \")</code> divide <code>cadena</code> en la primera aparici\u00f3n del espacio en blanco, que es el separador especificado. Como resultado, obtenemos la tupla <code>('hola', ' ', 'mundo mundo')</code>.</p> Python<pre><code>cadena = \"hola mundo mundo\"\nresultado = cadena.rpartition(\" \")\n\nprint(resultado)  # Output: ('hola mundo', ' ', 'mundo')\n</code></pre> <p>En el segundo ejemplo, <code>cadena.rpartition(\" \")</code> divide cadena en la \u00faltima aparici\u00f3n del espacio en blanco. Como resultado, obtenemos la tupla <code>('hola mundo', ' ', 'mundo')</code>.</p> </li> </ul> <p>Si el separador no se encuentra en la cadena, la tupla contendr\u00e1 la cadena original, seguida de dos cadenas vac\u00edas.</p> Python<pre><code>cadena = \"hola mundo\"\nresultado = cadena.partition(\" \")\n\nprint(resultado)  # Output: ('hola', ' ', 'mundo')\n</code></pre> <p>En este c\u00f3digo, <code>cadena.partition(\" \")</code> divide cadena en la primera aparici\u00f3n del espacio en blanco, que es el separador especificado. Como resultado, obtenemos la tupla <code>('hola', ' ', 'mundo')</code>.</p> <p>Y aqu\u00ed tienes un ejemplo donde el separador no se encuentra en la cadena:</p> Python<pre><code>cadena = \"hola\"\nresultado = cadena.partition(\" \")\n\nprint(resultado)  # Output: ('hola', '', '')\n</code></pre> <p>En este c\u00f3digo, como el espacio en blanco no se encuentra en cadena, <code>cadena.partition(\" \")</code> devuelve la tupla <code>('hola', '', '')</code>.</p> <ul> <li>isalnum(),</li> <li>isalpha(), </li> <li> <p>isdigit(): En Python, las cadenas tienen varios m\u00e9todos \u00fatiles para detectar tipos de dato.</p> <ul> <li> <p>isalnum(): Comprueba si todos los caracteres en la cadena son alfanum\u00e9ricos. Devuelve True si todos los caracteres en la cadena son alfanum\u00e9ricos (letras o d\u00edgitos) y hay al menos un car\u00e1cter, False en caso contrario.</p> Python<pre><code>print('abc123'.isalnum())  # Output: True\nprint('abc 123'.isalnum())  # Output: False\n</code></pre> </li> <li> <p>isalpha(): Comprueba si todos los caracteres en la cadena son alfab\u00e9ticos. Devuelve True si todos los caracteres en la cadena son letras del alfabeto y hay al menos un car\u00e1cter, False en caso contrario.</p> Python<pre><code>print('abc'.isalpha())  # Output: True\nprint('abc123'.isalpha())  # Output: False\n</code></pre> </li> <li> <p>isdigit(): Comprueba si todos los caracteres en la cadena son d\u00edgitos. Devuelve True si todos los caracteres en la cadena son d\u00edgitos y hay al menos un car\u00e1cter, False en caso contrario.</p> Python<pre><code>print('123'.isdigit())  # Output: True\nprint('abc123'.isdigit())  # Output: False\n</code></pre> <p>En el \u00faltimo ejemplo, <code>isalnum()</code> devuelve <code>False</code> porque la cadena contiene un espacio, que no es ni una letra ni un d\u00edgito.</p> </li> </ul> <p>Existen otros m\u00e9todos para validar el contenido de una cadena de caracteres:</p> <ul> <li> <p>isdecimal(): Comprueba si todos los caracteres en la cadena son decimales.</p> </li> <li> <p>isnumeric(): Comprueba si todos los caracteres en la cadena son num\u00e9ricos.</p> </li> </ul> </li> <li> <p>center(ancho[, caracter_de_relleno]),</p> </li> <li>ljust(ancho[, caracter_de_relleno]), </li> <li> <p>rjust(ancho[, caracter_de_relleno]): Alinean la cadena en un campo de un ancho especificado. Si no se especifica caracter_de_relleno, se rellenan con espacios los caracteres faltantes hasta completar el ancho de la cadena centrada.   Si se especifica caracter_de_relleno, es el caracter que rellena los espacios adicionales hasta completar el ancho hacia ambos lados de la cadena centrada.</p> <ul> <li> <p>center(ancho[, caracter_de_relleno]): Centra la cadena en un campo de un ancho especificado.  </p> Python<pre><code>cadena = \"hola mundo\"\n\ncadena_centralizada = cadena.center(20)\nprint(cadena_centralizada)  # Output: \"    hola mundo     \"\n\ncadena_centralizada_con_relleno = cadena.center(20, '*')\nprint(cadena_centralizada_con_relleno)  # Output: \"****hola mundo*****\"\n</code></pre> <p>En el primer ejemplo, <code>cadena.center(20)</code> centra la cadena \"hola mundo\" en un campo de 20 caracteres de ancho, llenando los espacios hacia ambos lados de la cadena con espacios. </p> <p>En el segundo ejemplo, <code>cadena.center(20, '*')</code> hace lo mismo, pero rellena los espacios con asteriscos en lugar de espacios.</p> </li> <li> <p>ljust(ancho[, caracter_de_relleno]): Devuelve la cadena justificada a la izquierda en un campo de un ancho especificado.</p> Python<pre><code>cadena = \"hola mundo\"\n\ncadena_justificada_izquierda = cadena.ljust(20)\nprint(cadena_justificada_izquierda)  # Output: \"hola mundo         \"\n\ncadena_justificada_izquierda_con_relleno = cadena.ljust(20, '*')\nprint(cadena_justificada_izquierda_con_relleno)  # Output: \"hola mundo*********\"\n</code></pre> </li> <li> <p>rjust(ancho[, caracter_de_relleno]): Devuelve la cadena justificada a la derecha en un campo de un ancho especificado.</p> Python<pre><code>cadena = \"hola mundo\"\n\ncadena_justificada_derecha = cadena.rjust(20)\nprint(cadena_justificada_derecha)  # Output: \"         hola mundo\"\n\ncadena_justificada_derecha_con_relleno = cadena.rjust(20, '*')\nprint(cadena_justificada_derecha_con_relleno)  # Output: \"*********hola mundo\"\n</code></pre> </li> </ul> </li> <li> <p>zfill(ancho): Devuelve una copia de la cadena rellena con ceros a la izquierda hasta alcanzar el ancho especificado. Si la cadena ya comienza con un signo ( + / - ), el relleno de ceros se realiza despu\u00e9s del signo.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"123\"\n\ncadena_con_ceros = cadena.zfill(5)\nprint(cadena_con_ceros)  # Output: \"00123\"\n</code></pre> <p>En este c\u00f3digo, <code>cadena.zfill(5)</code> agrega ceros al principio de la cadena \"123\" hasta que su longitud sea 5, resultando en \"00123\".</p> <p>Aqu\u00ed tienes otro ejemplo con un n\u00famero negativo:</p> Python<pre><code>cadena = \"-123\"\ncadena_con_ceros = cadena.zfill(5)\nprint(cadena_con_ceros)  # Output: \"-0123\"\n</code></pre> <p>En este c\u00f3digo, <code>cadena.zfill(5)</code> agrega ceros despu\u00e9s del signo '-', resultando en \"-0123\".</p> </li> <li> <p>lstrip([cadena]),</p> </li> <li>rstrip([cadena]),</li> <li> <p>strip([cadena]): Se utilizan para eliminar caracteres no deseados (espacios en blanco por defecto) de las cadenas. Tambi\u00e9n se puede especificar un conjunto de caracteres para eliminar en lugar de espacios en blanco si se indica la cadena correspondiente.</p> <ul> <li> <p>lstrip([cadena]): Devuelve una copia de la cadena luego de efectuar la eliminaci\u00f3n correspondiente de caracteres al inicio de la cadena original.</p> Python<pre><code># lstrip() elimina los espacios al principio de la cadena\ncadena = \"   hola mundo\"\ncadena_sin_espacios_izq = cadena.lstrip()\nprint(cadena_sin_espacios_izq)  # Output: \"hola mundo\"\n\n# Eliminar caracteres espec\u00edficos al principio de la cadena\ncadena = \"+++hola mundo+++\"\ncadena_sin_mas_izq = cadena.lstrip('+')\nprint(cadena_sin_mas_izq)  # Output: \"hola mundo+++\"\n</code></pre> </li> <li> <p>rstrip([cadena]): Devuelve una copia de la cadena luego de efectuar la eliminaci\u00f3n correspondiente de caracteres al final de la cadena original.</p> Python<pre><code># rstrip() elimina los espacios al final de la cadena\ncadena = \"hola mundo   \"\ncadena_sin_espacios_der = cadena.rstrip()\nprint(cadena_sin_espacios_der)  # Output: \"hola mundo\"\n\n# Eliminar caracteres espec\u00edficos al final de la cadena\ncadena_sin_mas_der = cadena.rstrip('+')\nprint(cadena_sin_mas_der)  # Output: \"+++hola mundo\"\n</code></pre> </li> <li> <p>strip([cadena]): Devuelve una copia de la cadena luego de efectuar la eliminaci\u00f3n correspondiente de caracteres al inicio y al final de la cadena original.</p> Python<pre><code># strip() elimina los espacios al principio y al final de la cadena\ncadena = \"   hola mundo   \"\ncadena_sin_espacios = cadena.strip()\nprint(cadena_sin_espacios)  # Output: \"hola mundo\"\n\n# Eliminar caracteres espec\u00edficos al principio y al final de la cadena\ncadena_sin_mas = cadena.strip('+')\nprint(cadena_sin_mas)  # Output: \"hola mundo\"\n</code></pre> </li> </ul> </li> <li> <p>find(subcadena[, inicio[, fin]]),</p> </li> <li>rfind(subcadena[, inicio[, fin]]),</li> <li>index(subcadena[, inicio[, fin]]),</li> <li> <p>rindex(subcadena[, inicio[, fin]]): Los m\u00e9todos index() / rindex() y find() / rfind() son similares ya que ambos buscan una subcadena en una cadena y devuelven el \u00edndice (la posici\u00f3n en la cadena) de la primera aparici\u00f3n de la subcadena. Sin embargo, difieren en su comportamiento cuando la subcadena no se encuentra en la cadena:</p> <ul> <li> <p>los m\u00e9todos index() y rindex() lanzan una excepci\u00f3n ValueError. Esto significa que el programa se detendr\u00e1 inesperadamente, a menos que la excepci\u00f3n se encuentre manejada por el programa para evitar la detenci\u00f3n.</p> </li> <li> <p>los m\u00e9todos find() y rfind() devuelven -1</p> </li> </ul> </li> </ul> <p>Opcionalmente, es posible indicar los \u00edndices de inicio y/o de fin de b\u00fasqueda.  </p> <pre><code>* **find(subcadena[, inicio[, fin]])**,\n* **index(subcadena[, inicio[, fin]])**: Devuelve el \u00edndice m\u00e1s bajo en la cadena donde se encuentra la subcadena. Es decir, la primera ocurrencia posible.\n\n* **rfind(subcadena[, inicio[, fin]])**,\n* **rindex(subcadena[, inicio[, fin]])**: Devuelve el \u00edndice m\u00e1s alto en la cadena donde se encuentra la subcadena. Es decir, la \u00faltima ocurrencia posible.\n\n    ``` py title=\"Python\"\n    cadena = \"Hola Mundo, Hola Python\"\n\n    # Uso de find()\n    indice = cadena.find(\"Hola\")\n    print(indice)  # Output: 0\n\n    # Uso de rfind()\n    indice = cadena.rfind(\"Hola\")\n    print(indice)  # Output: 12\n\n    # Uso de index() con \u00edndice de inicio\n    indice = cadena.index(\"Hola\", 3)\n    print(indice)  # Output: 12\n\n    # Uso de rindex() con \u00edndice de inicio y de fin\n    indice = cadena.rindex(\"Hola\", 0, 10)\n    print(indice)  # Output: 0\n\n    # Buscar una subcadena que no existe\n    indice = cadena.find(\"Java\")\n    print(indice)  # Output: -1\n\n    indice = cadena.index(\"Java\")  # Output: ValueError: substring not found  \n    print(indice) \n    ```\n\n    &gt; En el primer ejemplo, `cadena.find(\"Hola\")` devuelve 0 porque la primera ocurrencia de \"Hola\" se encuentra en el caracter 1.\n\n    &gt; En el segundo ejemplo, `cadena.rfind(\"Hola\")` devuelve 12 porque la \u00faltima aparici\u00f3n de \"Hola\" se encuentra en el caracter 13.\n\n    &gt; En el tercer ejemplo, `cadena.index(\"Hola\")` devuelve 12 porque, a partir del caracter 4, la primera ocurrencia de \"Hola\" se encuentra en el caracter 13.\n\n    &gt; En el cuarto ejemplo, `cadena.rindex(\"Hola\")` devuelve 0 porque la \u00faltima ocurrencia de \"Hola\" entre el caracter 1 y el caracter 11 se encuentra en el caracter 0.\n\n    &gt; En el quinto ejemplo, `cadena.find(\"Java\")` devuelve -1 porque \"Java\" no se encuentra en la cadena.\n\n    &gt; En el sexto ejemplo, `cadena.index(\"Java\")` devuelve la excepci\u00f3n `ValueError: substring not found` porque no se encuentra en la cadena.\n\n    !!! important \"\u00a1Para recordar!\"\n        Si esperas que la subcadena pueda no estar en la cadena y no quieres manejar una excepci\u00f3n, `find()` puede ser una mejor opci\u00f3n.\n\n        Si esperas que la subcadena siempre est\u00e9 en la cadena y quieres un error si no lo est\u00e1, `index()` puede ser una mejor opci\u00f3n.\n</code></pre> <p>Estos son solo algunos ejemplos. Python tiene muchos m\u00e1s m\u00e9todos de cadena incorporados:</p> <ul> <li> <p>casefold(): Convierte la cadena a min\u00fasculas, es similar a lower(), pero m\u00e1s agresivo porque est\u00e1 dise\u00f1ado para eliminar todas las diferencias de caso que puedan afectar la comparaci\u00f3n de cadenas.</p> </li> <li> <p>encode([encoding[, errors]]): Devuelve una versi\u00f3n codificada de la cadena como un objeto bytes.</p> </li> <li> <p>expandtabs([tabsize]): Devuelve una copia de la cadena donde todos los caracteres de tabulaci\u00f3n se reemplazan por uno o m\u00e1s espacios.</p> </li> <li> <p>format_map(mapping): Realiza una operaci\u00f3n de formato de cadena.</p> </li> <li> <p>maketrans(x[, y[, z]]): Devuelve una tabla de traducci\u00f3n utilizable para str.translate().</p> </li> <li> <p>splitlines([keepends]): Devuelve una lista de las l\u00edneas en la cadena.</p> </li> <li> <p>translate(table): Devuelve una copia de la cadena en la que cada car\u00e1cter ha sido mapeado a trav\u00e9s de la tabla de traducci\u00f3n proporcionada. La tabla de traducci\u00f3n debe ser creada con el m\u00e9todo maketrans().</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#formateo-de-cadenas-de-caracteres","title":"Formateo de cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-metodo-format","title":"Uso del m\u00e9todo format()","text":"<p>El m\u00e9todo format(*args, **kwargs) realiza una operaci\u00f3n de formato de cadena, es decir que se utiliza para formatear una cadena insertando valores en ella. </p> <p>Aqu\u00ed tienes algunos ejemplos:</p> <ol> <li>Formateo b\u00e1sico:</li> </ol> Python<pre><code>print(\"Hola, {}!\".format(\"Mundo\"))\nprint(\"Hola, {} y {}!\".format(\"Mundo\", \"Python\"))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Mundo!\nHola, Mundo y Python!\n</code></pre> <ol> <li>Formateo con \u00edndices posicionales:</li> </ol> Python<pre><code>print(\"Hola, {0} y {1}!\".format(\"Mundo\", \"Python\"))\nprint(\"Hola, {1} y {0}!\".format(\"Mundo\", \"Python\"))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Mundo y Python!\nHola, Python y Mundo!\n</code></pre> <ol> <li>Formateo con argumentos clave:</li> </ol> Python<pre><code>print(\"Hola, {nombre}!\".format(nombre=\"Mundo\"))\nprint(\"Hola, {adjetivo} {nombre}!\".format(adjetivo=\"gran\", nombre=\"Mundo\"))\nprint(\"Hola, {adjetivo} {nombre}!\".format(nombre=\"Mundo\", adjetivo=\"gran\"))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Mundo!\nHola, gran Mundo!\nHola, gran Mundo!\n</code></pre> <ol> <li>Formateo con precisi\u00f3n para n\u00fameros de punto flotante:</li> </ol> Python<pre><code>print(\"El valor de PI aproximado es 3.14159265358979323846\u2026\")\nprint(\"El valor de PI menos aproximado es {0:.7f}\".format(3.14159265358979323846))\nprint(\"El valor de PI menos aproximado a\u00fan es {0:.4f}\".format(3.14159265358979323846))\nprint(\"El valor de PI que normalmente utilizamos en matem\u00e1ticas es {0:.2f}\".format(3.14159265358979323846))\n</code></pre> Terminal (Entrada/Salida)<pre><code>El valor de PI aproximado es 3.14159265358979323846\u2026\nEl valor de PI menos aproximado es 3.1415927\nEl valor de PI menos aproximado a\u00fan es 3.1416\nEl valor de PI que normalmente utilizamos en matem\u00e1ticas es 3.14\n</code></pre> <ol> <li>Formateo con alineaci\u00f3n: Python<pre><code>print(\"|{:&lt;10}|{:^10}|{:&gt;10}|\".format('izq', 'centro', 'der'))\n</code></pre></li> </ol> Terminal (Entrada/Salida)<pre><code>|izq       |  centro  |       der|\n</code></pre> <p>En estos ejemplos, las llaves ( {} ) se utilizan como marcadores de posici\u00f3n donde se insertar\u00e1n los valores proporcionados a format(). Los n\u00fameros, las palabras clave y las especificaciones de formato dentro de las llaves controlan qu\u00e9 valores se insertan y c\u00f3mo se formatean.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-f-strings","title":"Uso de f-Strings","text":"<p>Las f-strings son una caracter\u00edstica de Python que permite la interpolaci\u00f3n de cadenas de una manera m\u00e1s concisa y legible. </p> <p>Las f-strings se crean poniendo una <code>f</code> o <code>F</code> antes de la cadena y poniendo las variables que quieres interpolar entre llaves {} dentro de la cadena.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>nombre = \"Pablo\"\nedad = 45\nprint(f\"Hola, mi nombre es {nombre} y tengo {edad} a\u00f1os.\")\n</code></pre> <p>En este c\u00f3digo, <code>{nombre}</code> y <code>{edad}</code> dentro de la f-string se reemplazan por los valores de las variables <code>nombre</code> y <code>edad</code>, respectivamente. Por lo tanto, la salida de este c\u00f3digo ser\u00eda: \"Hola, mi nombre es Juan y tengo 30 a\u00f1os.\"</p> <p>Tambi\u00e9n es posible utilizar las f-strings como expresi\u00f3n para crear una cadena de caracteres y almacenarla en una variable, por ejemplo:</p> Python<pre><code>nombre = \"Pablo\"\nedad = 45\n\ncadena = f\"Hola, mi nombre es {nombre} y tengo {edad} a\u00f1os.\"\n\nprint(cadena) # Output: Hola, mi nombre es Pablo y tengo 45 a\u00f1os.\n</code></pre> <p>Las f-strings tambi\u00e9n pueden contener expresiones arbitrarias dentro de las llaves, que se evaluar\u00e1n y luego se convertir\u00e1n en una cadena. </p> <p>Por ejemplo:</p> Python<pre><code>a = 5\nb = 10\nprint(f\"La suma de {a} y {b} es {a + b}.\")\n</code></pre> <p>La salida de este c\u00f3digo ser\u00eda: \"La suma de 5 y 10 es 15.\"</p> <p>\u00a1Bienvenidas las f-strings!</p> <p>Esta sintaxis para escribir cadenas de caracteres interpoladas es una gran caracter\u00edstica de Python y debes aprovecharla.</p> <p>Te vas a ahorrar muchos dolores de cabeza a la hora de concatenar diferentes tipos de dato a la hora de mostrar informaci\u00f3n en pantalla o crear una cadena de texto para utilizarla en expresiones o almacenarla en una variable, por ejemplo.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-de-formateo","title":"Uso del operador de formateo ( % )","text":"<p>El operador de formateo de cadenas ( % ) en las cadenas de Python se utiliza para el formateo de cadenas. Es similar a la funci\u00f3n <code>printf</code> en C. </p> <p>Aqu\u00ed tienes algunos ejemplos:</p> Python<pre><code>nombre = \"Pablo\"\nprint(\"Hola, %s\" % nombre)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Pablo\n</code></pre> Python<pre><code>apellido = \"Roca\"\nprint(\"Hola, %s %s\" % (nombre, apellido))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Pablo Roca\n</code></pre> Python<pre><code>edad = 45\nprint(\"Hola, %s %s, tienes %d a\u00f1os\" % (nombre, apellido, edad))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Pablo Roca, tienes 30 a\u00f1os\n</code></pre> Python<pre><code>pi = 3.14159\nprint(\"El valor de pi es aproximadamente %f\" % pi)\nprint(\"El valor de pi es aproximadamente %.2f\" % pi)\n</code></pre> Terminal (Entrada/Salida)<pre><code>El valor de pi es aproximadamente 3.141590\nEl valor de pi es aproximadamente 3.14\n</code></pre> <p>En estos ejemplos, <code>%s</code> es un marcador de posici\u00f3n para una cadena, <code>%d</code> es un marcador de posici\u00f3n para un n\u00famero entero y <code>%f</code> es un marcador de posici\u00f3n para un n\u00famero de punto flotante. Los valores despu\u00e9s del <code>%</code> se insertan en la cadena en los lugares donde est\u00e1n los marcadores de posici\u00f3n.</p> <p>\u00a1Atenci\u00f3n!</p> <p>Aunque este m\u00e9todo de formateo de cadenas todav\u00eda es v\u00e1lido en Python, se considera antiguo y se recomienda usar el m\u00e9todo <code>format()</code> o las f-strings (en Python 3.6 y versiones posteriores) para el formateo de cadenas.</p> <p>Para terminar de entender la sintaxis, analicemos una de las instrucciones de impresi\u00f3n que utiliza el antiguo estilo de formateo de cadenas.</p> Python<pre><code>print (\"Hola, %s %s, tienes %d a\u00f1os\" % (nombre, apellido, edad))\n</code></pre> <p>Aqu\u00ed est\u00e1 lo que hace cada parte:</p> <pre><code>* **print**: Esta es la funci\u00f3n de Python para imprimir texto en la consola.\n\n* **\"Hola, %s %s, tienes %d a\u00f1os\"**: Esta es la cadena que se va a imprimir. Los %s y %d son marcadores de posici\u00f3n que se reemplazar\u00e1n con los valores proporcionados despu\u00e9s del %.\n\n* **%s**: Este es un marcador de posici\u00f3n para una cadena. Se reemplazar\u00e1 con una cadena.\n\n* **%d**: Este es un marcador de posici\u00f3n para un n\u00famero entero. Se reemplazar\u00e1 con un n\u00famero entero.\n\n* **nombre**, **apellido**, **edad**: Estos son los valores que se insertar\u00e1n en la cadena en los lugares donde est\u00e1n los marcadores de posici\u00f3n.\n\nEl primer %s se reemplazar\u00e1 con el valor de nombre, el segundo %s se reemplazar\u00e1 con el valor de apellido, y el %d se reemplazar\u00e1 con el valor de edad.\n</code></pre> <p>Por lo tanto, si nombre es \"Pablo\", apellido es \"Roca\" y edad es 45, la salida de esta l\u00ednea de c\u00f3digo ser\u00eda:</p> Terminal (Entrada/Salida)<pre><code>Hola, Pablo Roca, tienes 45 a\u00f1os\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-en-cadenas-para-partirlas-en-mas-de-una-linea_1","title":"Uso del operador  en cadenas para partirlas en m\u00e1s de una l\u00ednea","text":"<p>Puedes usar el operador de continuaci\u00f3n de l\u00ednea ( \\ ) para dividir una cadena de texto en varias l\u00edneas sin interrumpir la cadena. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Esta es una cadena de texto muy larga que queremos dividir \\\nen varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\"\n\nprint(cadena)\n</code></pre> <p>Cuando ejecutes este c\u00f3digo, ver\u00e1s que la cadena se imprime como una sola l\u00ednea, a pesar de que en el c\u00f3digo fuente est\u00e1 dividida en dos l\u00edneas. Esto es porque el operador de continuaci\u00f3n de l\u00ednea ( \\ ) al final de la l\u00ednea le dice a Python que la l\u00ednea actual contin\u00faa en la siguiente l\u00ednea.</p> Terminal (Entrada/Salida)<pre><code>Esta es una cadena de texto muy larga que queremos dividir en varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\n</code></pre> <p>\u00a1Atenci\u00f3n!</p> <p>Aseg\u00farate de que no haya ning\u00fan espacio o cualquier otro car\u00e1cter despu\u00e9s del operador de continuaci\u00f3n de l\u00ednea ( \\ ), de lo contrario, Python interpretar\u00e1 el \\ como operador de \"escape\" (lo veremos en un momento) en lugar de un indicador de continuaci\u00f3n de l\u00ednea.</p> <p>No solo con cadenas</p> <p>El operador de continuaci\u00f3n de l\u00ednea ( \\ ) tambi\u00e9n se utiliza en Python para indicar que una l\u00ednea de c\u00f3digo contin\u00faa en la siguiente l\u00ednea. Esto es \u00fatil cuando tienes una l\u00ednea de c\u00f3digo muy larga y quieres dividirla en varias l\u00edneas para mejorar la legibilidad de este.</p> Python<pre><code># Sin el operador de continuaci\u00f3n de l\u00ednea\nsuma = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n# Con el operador de continuaci\u00f3n de l\u00ednea \n# (\u00a1Para recordar! que no debe posee m\u00e1s caracteres a continuaci\u00f3n)\nsuma = 1 + 2 + 3 + 4 + \\\n    5 + 6 + 7 + 8 + \\\n    9 + 10\n\nprint(suma)  # Output: 55\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-de-escape-en-cadenas","title":"Uso del operador de escape ( \\ ) en cadenas","text":"<p>El operador de \"escape\" ( \\ ) en las cadenas de Python se utiliza para introducir secuencias de escape, que son representaciones de caracteres especiales que no se pueden escribir de manera literal.</p> <p>Por ejemplo, <code>\\\\t</code> es una secuencia de escape que representa un car\u00e1cter de tabulaci\u00f3n.   Otras secuencias de escape comunes incluyen <code>\\\\n</code> para una nueva l\u00ednea, <code>\\\\'</code> para una comilla simple y <code>\\\\\"</code> para una comilla doble.</p> Python<pre><code>print(\"Hola\\nMundo\")  # \\n es una secuencia de escape para una nueva l\u00ednea\nprint(\"Hola\\tMundo\")  # \\t es una secuencia de escape para una tabulaci\u00f3n\nprint(\"Ella dijo: \\\"Hola Mundo\\\"\")  # \\\" es una secuencia de escape para una comilla doble\nprint('It\\'s a beautiful day')  # \\' es una secuencia de escape para una comilla simple\n</code></pre> <p>Estos c\u00f3digos imprimir\u00e1n en pantalla:</p> Terminal (Entrada/Salida)<pre><code>Hola\nMundo\nHola    Mundo\nElla dijo: \"Hola Mundo\"\nIt's a beautiful day\n</code></pre> <p>Para recordar</p> <p>Como puedes ver, el operador de escape ( \\ ) permite insertar caracteres especiales en las cadenas que de otra manera ser\u00edan dif\u00edciles o imposibles de incluir.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#comandos-de-escape-disponibles","title":"Comandos de \"escape\" disponibles","text":"<pre><code>Secuencia Escape    Significado\n------------------------------------------------------------------------------------\n\\newline            Ignorado\n\\\\                  Backslash (\\)\n\\'                  Comillas simple (')\n\\\"                  Comillas doble (\")\n\\a                  Bell ASCII (BEL)\n\\b                  Backspace ASCII (BS)\n\\f                  Formfeed ASCII (FF)\n\\n                  Linefeed ASCII (LF)\n\\N{name}            Car\u00e1cter llamado name en base de datos Unicode (solo Unicode)\n\\r                  Carriage Return ASCII (CR)\n\\t                  Tabulaci\u00f3n Horizontal ASCII (TAB)\n\\uxxxx              Car\u00e1cter con valor hex 16-bit xxxx (solo Unicode). Ver hex.\n\\Uxxxxxxxx          Car\u00e1cter con valor hex 32-bit xxxxxxxx (solo Unicode). Ver hex.\n\\v                  Tabulaci\u00f3n Vertical ASCII (VT)\n\\ooo                Car\u00e1cter con valor octal ooo. Ver octal.\n\\xhh                Car\u00e1cter con valor hex hh. Ver hex.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/","title":"Creaci\u00f3n de un conjunto:","text":"<p>nombres = {\"Juan\", \"Pedro\", \"Maria\", \"Luis\"} print (nombres)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#podemos-agregar-elementos-al-conjunto","title":"Podemos agregar elementos al conjunto:","text":"<p>nombres.add(\"Ana\") print (nombres)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#desempaquetado","title":"Desempaquetado:","text":"<p>alumno1, alumno2, alumno3, alumno4, alumno5 = nombres print (alumno1) print (alumno2) print (alumno3) print (alumno4) print (alumno5)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#no-podemos-agregar-elementos-duplicados-al-conjunto","title":"NO PODEMOS agregar elementos duplicados al conjunto:","text":"<p>nombres.add(\"Ana\") # No da error, pero no se agrega. print (nombres) </p> <p>Cuidado</p> <p>En el siguiente ejemplo, al crear un set num\u00e9rico, este se crea ordenadamente. Pero al crear un set alfanum\u00e9rico, este se crea de manera desordenada.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#definicion-de-funciones","title":"Definici\u00f3n de funciones","text":"<p>def intersectar_listas(lista1, lista2):</p> <pre><code># Se inicializa la lista que contendr\u00e1 los elementos que se encuentren en ambas listas pasadas a la funci\u00f3n\nlista_interseccion = []\n\n# Se crea un conjunto de cada lista para eliminar los elementos duplicados\nlista1 = set(lista1)\nlista2 = set(lista2)\n\nprint(lista1)\nprint(lista2)\n\n# elemento por elemento del conjunto de la lista1\nfor elemento in lista1:\n\n    # Se valida si el elemento se encuentra dentro del conjunto de la lista2\n    if elemento in set(lista2):\n\n        # Se agrega el elemento a la lista de elementos en com\u00fan\n        lista_interseccion.append(elemento)\n\n# Se retorna la lista resultante   \nreturn lista_interseccion\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#bloque-principal-del-programa","title":"Bloque principal del programa","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#se-inicializan-las-listas-con-sus-elementos","title":"Se inicializan las listas con sus elementos","text":"<p>lista1 = [5, 7, 3, 4, 1] lista2 = [8, 4, 6, 7, 5]</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#se-invoca-a-la-funcion-pasandole-las-dos-listas-y-se-almacena-la-lista-retornada-por-la-funcion-en-la-lista-de-interseccion","title":"Se invoca a la funci\u00f3n pas\u00e1ndole las dos listas y se almacena la lista retornada por la funci\u00f3n en la lista de intersecci\u00f3n","text":"<p>lista_interseccion = intersectar_listas(lista1, lista2)</p> <p>print(lista_interseccion)</p> <p>lista1 = ['a', 'b', 'c', 'd', 'e'] lista2 = ['c', 'd', 'e', 'a', 'g']</p> <p>lista_interseccion = intersectar_listas(lista1, lista2)</p> <p>print(lista_interseccion)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#-","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#tip-claramente-esta-funcion-tambien-puede-trabajar-con","title":"TIP: Claramente, esta funci\u00f3n tambien puede trabajar con","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#listas-cuyos-elementos-no-sean-numericos","title":"listas cuyos elementos no sean num\u00e9ricos:","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#_1","title":"Creaci\u00f3n de un conjunto:","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#lista1-a-b-c-d-e","title":"lista1 = ['a', 'b', 'c', 'd', 'e']","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#lista2-c-d-e-f-g","title":"lista2 = ['c', 'd', 'e', 'f', 'g']","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#printfuncion_interseccionlista1-lista2","title":"print(funcion_interseccion(lista1, lista2))","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#_2","title":"Creaci\u00f3n de un conjunto:","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#-_1","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/","title":"Uso de diccionarios en python","text":"<ul> <li>min(iterable, *[, clave, valor_defecto]),</li> <li> <p>max(iterable, *[, clave, valor_defecto]): Se utilizan para obtener el valor m\u00ednimo y m\u00e1ximo de un iterable, una lista en este caso.</p> </li> <li> <p>clave (opcional): Una funci\u00f3n para servir como clave o criterio de ordenaci\u00f3n. La funci\u00f3n <code>min()</code> o <code>max()</code> aplicar\u00e1 esta funci\u00f3n a cada elemento del iterable y devolver\u00e1 el elemento para el cual la funci\u00f3n key devuelve el valor m\u00ednimo o m\u00e1ximo.</p> </li> <li> <p>valor_defecto (opcional): Un valor por defecto que se devuelve si el iterable est\u00e1 vac\u00edo.</p> </li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5]\n\n# Obtener el valor m\u00ednimo de una lista\nminimo = min(lista)\nprint(minimo)  # Output: 1\n\n# Obtener el valor m\u00e1ximo de una lista\nmaximo = max(lista)\nprint(maximo)  # Output: 5\n\n# \n</code></pre> <p>En este c\u00f3digo, <code>min(lista)</code> y <code>max(lista)</code> devuelven el valor m\u00ednimo y m\u00e1ximo de <code>lista</code>, respectivamente. </p> Python<pre><code># Lista de diccionarios\nlista = [{'nombre': 'Ana', 'edad': 27}, {'nombre': 'Luis', 'edad': 30}, {'nombre': 'Carlos', 'edad': 22}]\n\n\n# Obtener la persona m\u00e1s joven\npersona_mas_joven = min(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})\nprint(persona_mas_joven)  # Output: {'nombre': 'Carlos', 'edad': 22}\n\n# Obtener la persona m\u00e1s vieja\npersona_mas_vieja = max(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})\nprint(persona_mas_vieja)  # Output: {'nombre': 'Luis', 'edad': 30}\n\n\n# Intentar obtener la persona m\u00e1s joven de una lista vac\u00eda\nlista_vacia = []\npersona_mas_joven = min(lista_vacia, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})\nprint(persona_mas_joven)  # Output: {'nombre': 'N/A', 'edad': 0}\n</code></pre> <p>En este c\u00f3digo, <code>min(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})</code> devuelve la persona m\u00e1s joven de lista. Si lista estuviera vac\u00eda, devolver\u00eda el valor por defecto <code>{'nombre': 'N/A', 'edad': 0}</code>. De manera similar, <code>max(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})</code> devuelve la persona m\u00e1s vieja de lista, o el valor por defecto si lista est\u00e1 vac\u00eda.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#creacion-de-un-diccionario","title":"Creaci\u00f3n de un diccionario","text":"<p>alumnos = {'Juan': 8, 'Pedro': 9, 'Maria': 10, 'Luis': 7} print(alumnos)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#se-pueden-crear-por-compresion","title":"Se pueden crear por compresi\u00f3n:","text":"<p>cuadrados = {x: x**2 for x in range(11)} print(cuadrados)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-","title":"-------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#acceso-a-los-elementos-hay-varias-maneras","title":"Acceso a los elementos. Hay varias maneras.","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-_1","title":"-------------------------------------------------------","text":"<p>print(alumnos.get(\"Juan\")) # Devuelve el valor de la clave Juan print(alumnos.get(\"Ana\"))  # Devuelve \"None\", no existe \"Ana\"</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#acceso-por-clave-usando-keys","title":"Acceso por clave, usando keys():","text":"<p>print(alumnos.keys())  # Muestra todas las claves</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#podemos-recorrer-el-diccionario-con-un-for-y-keys","title":"Podemos recorrer el diccionario con un for y keys():","text":"<p>for i in alumnos.keys():     print(i)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#items-devuelve-una-tupla-con-las-claves-y-los-valores","title":"items() devuelve una tupla con las claves y los valores:","text":"<p>for clave, valor in alumnos.items():     print(\"Alumno:\", clave, \"Nota:\", valor)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-_2","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#python-3-diccionarios","title":"PYTHON 3 - Diccionarios","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#ejemplo-mas-elaborado","title":"Ejemplo m\u00e1s elaborado","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-_3","title":"-----------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#defino-la-varible-futbolistas-como-un-diccionario-no-es-necesario-declarar-que-tipo-de-dato-es","title":"Defino la varible 'futbolistas' como un diccionario. No es necesario declarar que tipo de dato es","text":"<p>futbolistas = dict()</p> <p>futbolistas = {     1 : \"Casillas\", 15 : \"Ramos\",     3 : \"Pique\", 5 : \"Puyol\",     11 : \"Capdevila\", 14 : \"Xabi Alonso\",     16 : \"Busquets\", 8 : \"Xavi Hernandez\",     18 : \"Pedrito\", 6 : \"Iniesta\",     7 : \"Villa\" }</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#recorrer-un-diccionario-imprimiendo-su-clave-valor","title":"Recorrer un diccionario, imprimiendo su clave-valor","text":"<p>for k,v in futbolistas.items():     print (\"%s -&gt; %s\" %(k,v)) </p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#vemos-cuantos-elementos-tiene-nuestro-diccionario","title":"Vemos cuantos elementos tiene nuestro diccionario","text":"<p>numElem = len(futbolistas) print (\"\\nNumero de elementos del diccionario: \", numElem)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#imprimimos-una-lista-con-las-claves-del-diccionario","title":"Imprimimos una lista con las claves del diccionario","text":"<p>keys = futbolistas.keys() print (\"\\nClaves del diccionario:\", keys)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#imprimimos-en-una-lista-los-valores-del-diccionario","title":"Imprimimos en una lista los valores del diccionario","text":"<p>values = futbolistas.values() print (\"\\nValores del diccionario:\", values)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#obtenemos-el-valor-de-un-elemento-dada-su-clave","title":"Obtenemos el valor de un elemento dada su clave","text":"<p>elem = futbolistas.get(6) print (\"\\nObtenemos el valor cuya clave es '6':\", elem)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#anadimos-un-nuevo-elemento-a-la-lista","title":"A\u00f1adimos un nuevo elemento a la lista","text":"<p>futbolistas[22] = 'Navas' print (\"\\nDiccionario tras a\u00f1adir un elemento:\", futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#insertamos-un-elemento-en-el-array-si-la-clave-ya-existe-no-inserta-el-elemento","title":"Insertamos un elemento en el array. Si la clave ya existe no inserta el elemento","text":"<p>elem2 = futbolistas.setdefault(10,'Cesc') print (\"\\nInsertamos un elemento en el diccionario. Si la clave existe no lo inserta\\nfutbolistas.setdefault(10,'Cesc'):\", elem2)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#eliminamos-un-elemento-del-diccionario-dada-su-clave","title":"Eliminamos un elemento del diccionario dada su clave","text":"<p>futbolistas.pop(22) print (\"\\nDiccionario tras eliminar el elemento '22':\",futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#hacemos-una-copia-del-diccionario","title":"Hacemos una copia del diccionario","text":"<p>futbolistasCopy = futbolistas.copy() print (\"\\nRealizamos una copia del diccionario: \\n\", futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#mergeamos-dos-diccionarios","title":"Mergeamos dos diccionarios","text":"<p>suplentes = {     4:'Marchena', 9:'Torres', 12:'Valdes',     13:'Mata' , 17:'Arbeloa', 19:'Llorente',     20:'Javi Martinez', 21:'Silva', 23:'Reina' }</p> <p>futbolistas.update(suplentes) print (\"\\nA\u00f1adimos los elementos de un diccionario a otro: \\n\", futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/","title":"Listas en Python","text":"<p>Una lista en Python es una estructura de datos que puede contener m\u00faltiples elementos, que pueden ser de diferentes tipos (por ejemplo, n\u00fameros enteros, flotantes, cadenas, etc.), aunque esto \u00faltimo es poco frecuente.  Por lo general, todos los elementos de una lista son del mismo tipo o estructura de datos.</p> Python<pre><code>mi_lista = [1, 2, \"tres\", 4.0]\n</code></pre> <p>En este ejemplo, <code>mi_lista</code> es una lista que contiene cuatro elementos: dos n\u00fameros enteros, una cadena y un n\u00famero flotante.</p> <p>Los elementos en una lista est\u00e1n ordenados en secuencia y tienen un \u00edndice definido, que comienza desde 0 para el primer elemento.</p> <p>Las listas son mutables, lo que significa que puedes cambiar sus elementos despu\u00e9s de que la lista ha sido creada. Puedes agregar, eliminar y modificar elementos en una lista en cualquier momento de la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#declaracion-de-una-lista","title":"Declaraci\u00f3n de una lista","text":"<p>Las listas se crean asignando a una variable una secuencia de elementos encerrados entre corchetes ( [] )y separados por comas. </p> <p>Se puede crear una lista vac\u00eda, y las listas pueden ser elementos de otras listas. Para incluir una lista como parte de otra, basta con incluirla separada por comas de los elementos restantes.</p> <p>Aqu\u00ed tienes varios ejemplos de c\u00f3mo se ve una lista en Python:</p> Python<pre><code>numeros = [1,2,3,4,5] # Lista de n\u00fameros\ndias = [\"Lunes\", \"Martes\", \"Mi\u00e9rcoles\", \"Jueves\", \"Viernes\", \"S\u00e1bado\", \"Domingo\"] # Lista de cadenas de caracteres\nelementos = [] # Lista vac\u00eda\nmatriz = [ [1,2,3], [4,5,6] ] # lista de listas (tambi\u00e9n llamada matriz)\n</code></pre> <p>\u00a1Para recordar!</p> <p>Las listas se suelen nombrar en plural. </p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#acceso-a-los-elementos-de-una-lista","title":"Acceso a los elementos de una lista","text":"<p>En Python, puedes acceder a los elementos de una lista utilizando su \u00edndice, que es la posici\u00f3n del elemento en la lista. Los \u00edndices en Python comienzan en 0, por lo que el primer elemento de la lista est\u00e1 en el \u00edndice 0, el segundo elemento est\u00e1 en el \u00edndice 1, y as\u00ed sucesivamente.</p> <p>Aqu\u00ed tienes varios ejemplos:</p> Python<pre><code># Definir la lista\nmi_lista = [1, 2, \"tres\", 4.0]\n\n# Acceder al primer elemento\nprint(mi_lista[0])  # Output: 1\n\n# Acceder al segundo elemento\nprint(mi_lista[1])  # Output: 2\n\n# Acceder al \u00faltimo elemento\nprint(mi_lista[-1])  # Output: 4.0\n</code></pre> <p>En este c\u00f3digo, <code>mi_lista[0]</code> accede al primer elemento de mi_lista, <code>mi_lista[1]</code> accede al segundo elemento, y <code>mi_lista[-1]</code> accede al \u00faltimo elemento. Los \u00edndices negativos cuentan desde el final de la lista, por lo que -1 es el \u00faltimo elemento, -2 es el pen\u00faltimo elemento, y as\u00ed sucesivamente.</p> <p>\u00a1Muy importante!</p> <p>Intentar acceder a un elemento con un \u00edndice fuera de rango generar\u00e1 un error: </p> Python<pre><code># Definir la lista\nmi_lista = [1, 2, \"tres\", 4.0]\n\n# La lista solo tiene \u00edndices 0 al 3 (4 elementos)\n# Acceder a un elemento con \u00edndice fuera de rango\nprint(mi_lista[4])\n</code></pre> Terminal (Entrada/Salida)<pre><code>Traceback (most recent call last):\nFile \"\u2026\", line 6, in &lt;module&gt;\n    print(mi_lista[4])\n        ~~~~~~~~^^^\nIndexError: list index out of range\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#impresion-de-listas","title":"Impresi\u00f3n de listas","text":"<p>La impresi\u00f3n de listas en Python se refiere a mostrar en la consola o terminal los elementos de la lista.  Para imprimir una lista, puedes usar la funci\u00f3n <code>print()</code>.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>mi_lista = [1, 2, \"tres\", 4.0]\nprint(mi_lista)\n</code></pre> Terminal (Entrada/Salida)<pre><code>[1, 2, 'tres', 4.0]\n</code></pre> <p>En este c\u00f3digo, <code>print(mi_lista)</code> imprime la representaci\u00f3n de la lista <code>mi_lista</code>, que incluye los corchetes que delimitan la lista y las comas que separan los elementos.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#longitud-de-una-lista","title":"Longitud de una lista","text":"<p>La funci\u00f3n <code>len()</code> devuelve la cantidad de elementos en un objeto iterable, en este caso, una lista. </p> <p>Por lo tanto, <code>len(lista)</code> devolver\u00e1 el n\u00famero de elementos en la lista <code>lista</code>.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>mi_lista = [1, 2, 3, 4, 5]\nprint(len(mi_lista))  # Output: 5\n</code></pre> <p>En este c\u00f3digo, <code>len(mi_lista)</code> devuelve 5, porque hay cinco elementos en la lista <code>mi_lista</code>.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#iterar-sobre-una-lista","title":"Iterar sobre una lista","text":"<p>Una de las tareas m\u00e1s comunes que se realizan con listas es recorrer su contenido con el objetivo de conocer como est\u00e1 compuesta:</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#impresion-de-los-elementos-de-una-lista","title":"Impresi\u00f3n de los elementos de una lista","text":"<p>Si quieres imprimir los elementos de una lista, uno por uno, puedes hacerlo de diferentes maneras:</p> <ol> <li> <p>Emplear un bucle for \u2026 in para acceder a cada elemento:</p> <p>La estructura for \u2026 in permite acceder a cada uno de los elementos de una lista y almacenar una copia en la variable de control:</p> Python<pre><code>mi_lista = [1, 2, \"tres\", 4.0]\n\nfor elemento in mi_lista:\n    print(elemento)\n</code></pre> <p>Este c\u00f3digo imprimir\u00e1 cada elemento de la lista en una l\u00ednea separada:</p> Terminal (Entrada/Salida)<pre><code>1\n2\ntres\n4.0\n</code></pre> </li> <li> <p>Emplear un bucle for \u2026 in range o un bucle while para generar la secuencia de \u00edndices para acceder a cada elemento:</p> <p>Emplear un bucle tradicional no permite acceder directamente al elemento de la lista pero si permite generar una secuencia de \u00edndices par luego referencia cada posici\u00f3n de la lista para acceder al elemento almacenado en ella:</p> Python<pre><code>lista = [1, 2, \"tres\", 4.0]\n\nfor i in range(len(lista)):\n    print(lista[i])\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\ntres\n4.0\n</code></pre> Python<pre><code>lista = [1, 2, \"tres\", 4.0]\n\ni = 0\nwhile i &lt; len(lista):\n    print(lista[i])\n    i = i + 1\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\ntres\n4.0\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#desempaquetado-de-listas","title":"Desempaquetado de listas","text":"<p>El desempaquetado de listas, tambi\u00e9n conocido como unpacking, es un proceso que permite asignar los valores de una lista a variables individuales. </p> <p>Esto se hace utilizando la asignaci\u00f3n m\u00faltiple.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>numeros = [1, 2, 3]\na, b, c = numeros\n\nprint(a)  # Output: 1\nprint(b)  # Output: 2\nprint(c)  # Output: 3\n</code></pre> <p>En este c\u00f3digo, <code>a, b, c = numeros</code> desempaqueta la lista <code>numeros</code> en las variables <code>a</code>, <code>b</code> y <code>c</code>. La variable <code>a</code> recibe el primer valor de la lista, <code>b</code> el segundo y <code>c</code> el tercero.</p> <p>\u00a1Muy importante!</p> <p>Hay que tener en cuenta que el n\u00famero de variables debe coincidir con el n\u00famero de elementos en la lista. Si no coinciden, Python lanzar\u00e1 un error.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#uso-de-operadores-con-cadenas-de-caracteres","title":"Uso de operadores con cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#concatenacion-de-listas","title":"Concatenaci\u00f3n de listas","text":"<p>La concatenaci\u00f3n de listas en Python es el proceso de unir o combinar dos o m\u00e1s listas. Esto se puede hacer utilizando el operador de concatenaci\u00f3n ( + ).</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>lista1 = [1, 2, 3]\nlista2 = [4, 5, 6]\nlista_concatenada = lista1 + lista2\n\nprint(lista_concatenada)  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre> <p>En este c\u00f3digo, <code>lista1 + lista2</code> concatena <code>lista1</code> y <code>lista2</code> para formar una nueva lista que contiene todos los elementos de <code>lista1</code> seguidos de todos los elementos de <code>lista2</code>.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#comprobar-si-un-elemento-se-encuentra-o-no-dentro-de-una-lista","title":"Comprobar si un elemento se encuentra, o no, dentro de una lista","text":"<p>Los operadores in y not in tambi\u00e9n se pueden usar con listas en Python para verificar si un elemento est\u00e1 o no en la lista. Aqu\u00ed hay un ejemplo:</p> <ul> <li> <p>in: devuelve True si un elemento se encuentra en la lista y False de lo contrario.</p> </li> <li> <p>not in: devuelve True si un elemento no se encuentra en la lista y False de lo contrario.</p> </li> </ul> Python<pre><code>lista = [\"manzana\", \"banana\", \"cereza\"]\n\nprint(\"manzana\" in lista)  # Output: True\nprint(\"naranja\" in lista)  # Output: False\n\nprint(\"manzana\" not in lista)  # Output: False\nprint(\"naranja\" not in lista)  # Output: True\n</code></pre> <p>En este c\u00f3digo, <code>\"manzana\" in lista</code> devuelve <code>True</code> porque \"manzana\" es un elemento de la lista. Por otro lado, <code>\"naranja\" in lista</code> devuelve <code>False</code> porque \"naranja\" no es un elemento de la lista.</p> <p>De manera similar, <code>\"manzana\" not in lista</code> devuelve <code>False</code> porque \"manzana\" es un elemento de la lista, y <code>\"naranja\" not in lista</code> devuelve <code>True</code> porque \"naranja\" no es un elemento de la lista.</p> <p>M\u00e1s adelante veremos que podremos realizar estas comparaciones directamente mediante el uso de m\u00e9todos.</p> <p>''' info \"\u00a1\u00a1Para recordar! que estos operadores tambi\u00e9n funcionan con otras estructuras de datos!\"</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#uso-de-funciones-con-listas","title":"Uso de funciones con listas","text":"<ul> <li>list([iterable]): Es un constructor de listas. Se utiliza para crear una lista a partir de un iterable (como una cadena, tupla, conjunto, etc.) o para crear una lista vac\u00eda si no se proporciona el par\u00e1metro iterable.</li> </ul> <p>Aqu\u00ed est\u00e1 la sintaxis b\u00e1sica:</p> Python<pre><code>list([iterable])\n</code></pre> <p>Donde iterable es opcional. Si se proporciona, list() crea una lista donde cada elemento es un elemento del iterable. Si no se proporciona iterable, list() crea una lista vac\u00eda.</p> <p>Aqu\u00ed tienes algunos ejemplos de c\u00f3mo usar list():</p> Python<pre><code># Crear una lista vac\u00eda\nlista_vacia = list()\nprint(lista_vacia)  # Output: []\n\n# Crear una lista a partir de una cadena\nlista_cadena = list(\"Hola\")\nprint(lista_cadena)  # Output: ['H', 'o', 'l', 'a']\n\n# Crear una lista a partir de una tupla\nlista_tupla = list((1, 2, 3))\nprint(lista_tupla)  # Output: [1, 2, 3]\n\n# Crear una lista a partir de un conjunto\nlista_conjunto = list({1, 2, 3})\nprint(lista_conjunto)  # Output: [1, 2, 3]\n</code></pre> <p>recuerda que una cadena de caracteres es una estructura de datos que alberga uno o mas elementos, en este caso, caracteres.</p> <p>A\u00fan no hemos visto en profundidad que son tuplas y conjuntos pero, por el momento y para clarificar los ejemplos, una tupla es una colecci\u00f3n de objetos que son ordenados e inmutables. Esto significa que una vez que una tupla es creada, no puedes cambiar sus elementos o su tama\u00f1o. Por lo tanto, si precisaras modificarla por alg\u00fan motivo, es necesario convertirla en una lista, aplicar las modificaciones, y luego volver a convertirla en una tupla. Un conjunto es una colecci\u00f3n de elementos que no est\u00e1n ordenados y no tienen \u00edndices y tampoco permiten elementos duplicados. Esto significa que si es preciso trabajar con \u00edndices, ordenamiento o duplicar elementos es necesario convertirlo en una lista, realizar las tareas correspondientes, y luego volver a convertirlo en un conjunto.</p> <p>\u00a1Para recordar!</p> <p><code>list()</code> crea una nueva lista. Si el iterable es mutable (como una lista o un conjunto), los cambios en el iterable utilizado para crear la lista no afectar\u00e1n a la lista creada, y viceversa.</p> <ul> <li>range([inicio,] fin[, paso]): Se utiliza para generar una secuencia de n\u00fameros. Aunque no se utiliza directamente con listas, se puede utilizar para generar listas de n\u00fameros si se combina con la funci\u00f3n list().  </li> </ul> <p>Donde:</p> <pre><code>* **inicio**: Opcional. Un n\u00famero entero que especifica en qu\u00e9 posici\u00f3n empezar. El valor predeterminado es 0.\n\n* **fin**: Requerido. Un n\u00famero entero que especifica en qu\u00e9 posici\u00f3n parar.\n\n* **paso**: Opcional. Un n\u00famero entero que especifica el incremento. El valor predeterminado es 1. Dependiendo del valor de inicio y de fin, _paso_ debe ser positivo o negativo.\n\nAqu\u00ed hay algunos ejemplos de c\u00f3mo usar range() para generar listas:\n\n``` py title=\"Python\"\n# Generar una lista de n\u00fameros del 0 al 9\nlista1 = list(range(10))\nprint(lista1)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Generar una lista de n\u00fameros del 5 al 9\nlista2 = list(range(5, 10))\nprint(lista2)  # Output: [5, 6, 7, 8, 9]\n\n# Generar una lista de n\u00fameros del 0 al 9, pero con pasos de 2\nlista3 = list(range(0, 10, 2))\nprint(lista3)  # Output: [0, 2, 4, 6, 8]\n```\n\nTambi\u00e9n puedes usar _range()_ con listas existentes para iterar sobre ellas, como hemos visto previamente:\n\n``` py title=\"Python\"\nlista = ['a', 'b', 'c', 'd', 'e']\n\n# Imprimir cada elemento de la lista usando range()\nfor i in range(len(lista)):\n    print(lista[i])\n```\n\n&gt; En este c\u00f3digo, `range(len(lista))` genera una lista de n\u00fameros del 0 al 4, que son los \u00edndices de los elementos en `lista`. Luego, en cada iteraci\u00f3n del bucle `for`, se utiliza el n\u00famero generado por `range()` como \u00edndice para acceder a cada elemento de lista.\n</code></pre> <ul> <li>sum(iterable[, inicio]): Se utiliza para sumar todos los elementos de una lista. </li> </ul> <p>Donde:</p> <ul> <li> <p>iterable: es una secuencia (como una lista, tupla, etc.) o una colecci\u00f3n (como un conjunto, diccionario, etc.) de n\u00fameros (enteros y flotantes).  </p> </li> <li> <p>inicio: es un n\u00famero opcional que se suma al resultado de sumar los elementos del iterable. Si se omite start, la suma comienza desde cero.</p> </li> </ul> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>lista = [1, 2, 3, 4, 5]\nsuma = sum(lista)\nprint(suma)  # Output: 15\n\nsuma_con_inicio = sum(lista, 10)\nprint(suma_con_inicio)  # Output: 25\n</code></pre> <p>En este c\u00f3digo, <code>sum(lista)</code> suma todos los elementos de lista, y sum<code>(lista, 10)</code> suma todos los elementos de lista y luego a\u00f1ade 10 al resultado.</p> <p>\u00a1Importante!</p> <p>Es importante mencionar que <code>sum()</code> s\u00f3lo puede sumar elementos que sean n\u00fameros. Si intentas usar <code>sum()</code> en una lista que contiene elementos que no son n\u00fameros, Python lanzar\u00e1 un error.</p> <ul> <li>min(iterable, *[, clave, valor_defecto]),</li> <li> <p>max(iterable, *[, clave, valor_defecto]): Se utilizan para obtener el valor m\u00ednimo y m\u00e1ximo de un iterable, una lista en este caso.</p> <ul> <li> <p>clave (opcional): Una funci\u00f3n para servir como clave o criterio de ordenaci\u00f3n. La funci\u00f3n <code>min()</code> o <code>max()</code> aplicar\u00e1 esta funci\u00f3n a cada elemento del iterable y devolver\u00e1 el elemento para el cual la funci\u00f3n key devuelve el valor m\u00ednimo o m\u00e1ximo.</p> </li> <li> <p>valor_defecto (opcional): Un valor por defecto que se devuelve si el iterable est\u00e1 vac\u00edo.</p> </li> </ul> </li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5]\n\n# Obtener el valor m\u00ednimo de una lista\nminimo = min(lista)\nprint(minimo)  # Output: 1\n\n# Obtener el valor m\u00e1ximo de una lista\nmaximo = max(lista)\nprint(maximo)  # Output: 5 \n</code></pre> <p>En este c\u00f3digo, <code>min(lista)</code> y <code>max(lista)</code> devuelven el valor m\u00ednimo y m\u00e1ximo de <code>lista</code>, respectivamente. </p> <p>Por el momento utilizaremos ambas funciones sin aplicar los par\u00e1metros opcionales.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#uso-de-metodos-de-listas","title":"Uso de m\u00e9todos de listas","text":"<p>Los m\u00e9todos de las listas en Python son funciones incorporadas que se pueden usar para realizar diferentes operaciones en las listas. </p> <p>Algunos de los m\u00e9todos m\u00e1s comunes que poseen las listas en Python incluyen los que veremos a continuaci\u00f3n. Para ello, primero crearemos una lista:</p> Python<pre><code>lista = [1, 2, 3, 4, 5]\n</code></pre> <p>Y ahora efectuaremos una serie de procesos para ir describiendo los diferentes funcionamientos. recuerda ir siguiendo lo que ocurre con la lista, ejecuci\u00f3n tras ejecuci\u00f3n.</p> <ul> <li> <p>append(elemento): Agrega un elemento al final de la lista.</p> Python<pre><code>lista.append(6)\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre> <p>\u00a1Para recordar!</p> <p>El m\u00e9todo append(elemento) equivale a sumar una lista con el elemento para agregar a continuaci\u00f3n de la lista que recibir\u00e1 el elemento:</p> Python<pre><code>lista = [1, 2, 3, 4, 5]\nlista = lista + [6]\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre> </li> <li> <p>extend(): Agrega todos los elementos de una lista a otra lista.</p> Python<pre><code>lista.extend([7, 8, 9])\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>La ejecuci\u00f3n de este m\u00e9todo equivale a concatenar dos listas.</p> </li> <li> <p>insert(posicion, elemento): Inserta un elemento en una posici\u00f3n espec\u00edfica de la lista.</p> <p>Los par\u00e1metros son:</p> <ul> <li> <p>posicion: Es el \u00edndice donde se insertar\u00e1 el nuevo elemento. Los \u00edndices en Python comienzan en 0, por lo que si quieres insertar un elemento al inicio de la lista, la posici\u00f3n ser\u00eda 0.</p> </li> <li> <p>elemento: Es el valor que se insertar\u00e1 en la lista.</p> </li> </ul> Python<pre><code>lista.insert(0, 0)\nprint(lista)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> </li> <li> <p>remove(valor): Elimina la primera aparici\u00f3n de un elemento en la lista.</p> Python<pre><code>lista.remove(0)\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> </li> <li> <p>pop(): Elimina y devuelve el elemento en una posici\u00f3n dada. Si no se proporciona ninguna posici\u00f3n, elimina y devuelve el \u00faltimo elemento de la lista.</p> </li> </ul> Python<pre><code>elemento = lista.pop(0)\nprint(elemento)  # Output: 1\nprint(lista)  # Output: [2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <ul> <li> <p>index(valor[, inicio[, fin]]): Devuelve el \u00edndice del primer elemento que coincide con el valor especificado.</p> <p>Donde:</p> <ul> <li>inicio (opcional): Es el \u00edndice inicial desde donde se debe comenzar la b\u00fasqueda.</li> <li>fin (opcional): Es el \u00edndice final donde se debe detener la b\u00fasqueda.</li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5, 4, 4]\n\nindice = lista.index(5)\nprint(indice)  # Output: 4\n\nindice = lista.index(4)\nprint(indice)  # Output: 3\n\nindice = lista.index(4, 4, 7)\nprint(indice)  # Output: 5\n</code></pre> <p>\u00a1Para recordar!</p> <p>Si el valor no se encuentra en la lista, se lanza una excepci\u00f3n <code>ValueError</code>.</p> Python<pre><code>lista = [1, 2, 3, 4, 5, 4, 4]\n\nindice = lista.index(4, 2, 3)\nprint(indice)  # Output: ValueError: 4 is not in list\n</code></pre> </li> <li> <p>count(valor): Devuelve el n\u00famero de veces que un valor espec\u00edfico aparece en la lista.</p> Python<pre><code>conteo = lista.count(5)\nprint(conteo)  # Output: 1\n</code></pre> </li> <li> <p>sort([reverse=False]): Ordena los elementos de la lista en un orden espec\u00edfico: ascendente o descendente. Tiene un par\u00e1metro opcional reverse, que por defecto es False. Si no se especifica, la lista se ordenar\u00e1 en orden ascendente. Si el par\u00e1metro reverse se establece en True, entonces la lista se ordenar\u00e1 en orden descendente.</p> Python<pre><code>lista.sort()\nprint(lista)  # Output: [2, 3, 4, 5, 6, 7, 8, 9]\n\nlista.sort(reverse=True)\nprint(lista)  # Output: [9, 8, 7, 6, 5, 4, 3, 2]\n</code></pre> </li> <li> <p>reverse(): Invierte el orden de los elementos de la lista.</p> Python<pre><code>lista.reverse()\nprint(lista)  # Output: [2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>La ejecuci\u00f3n de este m\u00e9todo equivale a ejecutar el m\u00e9todo sort(reverse=True)</p> </li> <li> <p>clear(): Se utiliza para eliminar todos los elementos de la lista. Despu\u00e9s de usar este m\u00e9todo, la lista se convierte en una lista vac\u00eda.</p> Python<pre><code>lista.clear()\nprint(lista)  # Output: []\n</code></pre> </li> </ul> <p>Estos m\u00e9todos proporcionan una forma conveniente de manipular y trabajar con listas en Python.</p> <p>\u00a1Para recordar!</p> <p>Cada uno de estos m\u00e9todos modifica la lista original y no devuelve una nueva lista, excepto el m\u00e9todo pop(), que devuelve el elemento eliminado.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/tuplas/uso-de-tuplas-en-python/","title":"Creaci\u00f3n de una tupla","text":"<p>nombres = (\"Juan\", \"Pedro\", \"Maria\", \"Luis\") print (nombres) print(nombres[0])</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/tuplas/uso-de-tuplas-en-python/#nombres1-ana-error-no-se-puede-modificar-una-tupla","title":"nombres[1] = \"Ana\" # Error, no se puede modificar una tupla","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/tuplas/uso-de-tuplas-en-python/#desempaquetado","title":"Desempaquetado:","text":"<p>alumno1, alumno2, alumno3, alumno4 = nombres print (alumno1) print (alumno2) print (alumno3) print (alumno4)</p>"},{"location":"unidades/programacion-estructurada/introduccion-a-la-programacion-estructurada/","title":"Introducci\u00f3n a la programaci\u00f3n estructurada","text":""},{"location":"unidades/programacion-estructurada/introduccion-a-la-programacion-estructurada/#tecnicas-para-el-desarrollo-de-programacion-estructurada","title":"T\u00e9cnicas para el desarrollo de programaci\u00f3n estructurada","text":"<p>Conjunto de t\u00e9cnicas para desarrollar algoritmos f\u00e1ciles de escribir, leer, verificar y modificar.</p> <ul> <li> <p>Dise\u00f1o Modular ( Top-down ): En problemas grandes y complejos: dividir el problema en subproblemas y dise\u00f1ar un subprograma para resolver cada uno de ellos.</p> </li> <li> <p>Descomposici\u00f3n del programa en recursos abstractos: Descompone una acci\u00f3n compleja en acciones simples capaces de ser ejecutadas por un computador ( instrucciones )</p> </li> <li> <p>Estructuras de control b\u00e1sicas: Un programa se escribe utilizando 3 estructuras de control:</p> <ul> <li>EC Secuenciales</li> <li>EC Selectivas</li> <li>EC Repetitivas</li> </ul> </li> </ul>"},{"location":"unidades/programacion-estructurada/ejercitacion/ejercitacion-programacion-estructurada/","title":"Ejercitaci\u00f3n sobre programaci\u00f3n estructurada","text":"<ol> <li> <p>Declara una variable llamada saludo y as\u00edgnale un valor de cadena que represente un saludo. Luego, concatena la variable con su variable nombre para crear un saludo personalizado e impr\u00edmelo en la consola. Por ejemplo:</p> Terminal (Entrada/Salida) Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> <li> <p>Declara una variable llamada frutas y as\u00edgnale una matriz de tres frutas. Luego, imprime el valor de la segunda fruta en la matriz en la consola. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> <li> <p>Declara una variable llamada persona y as\u00edgnale un objeto con propiedades para nombre, edad y esEstudiante. Luego, imprime el valor de la propiedad nombre en la consola. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> <li> <p>Declara una variable llamada hora y as\u00edgnale el valor de la hora actual utilizando la funci\u00f3n Date(). Luego, usa declaraciones condicionales para imprimir un mensaje en la consola que diga \"Buenos d\u00edas\", \"Buenas tardes\" o \"Buenas noches\", dependiendo del valor de la variable hora. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> <li> <p>Declara una variable llamada total y as\u00edgnale un valor de 0. Luego, usa un bucle para agregar los n\u00fameros del 1 al 10 a la variable y, finalmente, imprime el valor final en la consola. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> <li> <p>Declara una variable llamada num y as\u00edgnale un n\u00famero aleatorio entre 1 y 10 utilizando la funci\u00f3n Math.random(). Luego, usa declaraciones condicionales para imprimir un mensaje en la consola que diga \"Demasiado alto\", \"Demasiado bajo\" o \"Correcto\", dependiendo de si el valor de num es mayor que, menor que o igual a 5. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> </ol>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/","title":"Funci\u00f3n asignada a una variable","text":""},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#introduccion","title":"Introducci\u00f3n","text":"<p>Chequear esta info</p> <p>Las funciones son consideradas como un tipo de dato y pueden ser asignadas a variables de la misma manera que asignamos otros tipos de dato, como una cadena o un n\u00famero entero. Para hacerlo, simplemente escribimos el nombre de la variable, seguido del signo igual (=) y el nombre de la funci\u00f3n sin par\u00e9ntesis.</p> <p>Definici\u00f3n</p> <p>Una funci\u00f3n es un tipo de dato que representa un bloque de sentencias (o sentencia compuesta) reutilizable y aut\u00f3nomo que realiza una tarea espec\u00edfica. En t\u00e9rminos m\u00e1s generales, una funci\u00f3n es una secuencia de instrucciones que toma uno o m\u00e1s argumentos, realiza un conjunto de operaciones y devuelve un resultado.</p> <p>Toda funci\u00f3n debe contener al menos una sentencia compuesta.</p> <p>La funci\u00f3n puede tener instrucciones que realicen c\u00e1lculos, operaciones, manipulaci\u00f3n de datos, llamadas a otras funciones, entre otras acciones.</p> <p>Una funci\u00f3n se define utilizando la palabra clave def, seguida del nombre de la funci\u00f3n, par\u00e9ntesis que pueden contener los argumentos de la funci\u00f3n y dos puntos \":\". A continuaci\u00f3n, se escribe el bloque de c\u00f3digo que conforma la funci\u00f3n, indentado con espacios o tabulaciones.</p> <p>``` py title=\"Python</p>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#definicion-de-funciones","title":"Definici\u00f3n de funciones","text":"<p>def sumar(a, b):     resultado = a + b     return resultado <pre><code>Veamos ejemplo de definici\u00f3n de una funci\u00f3n en Python llamada sumar que toma dos n\u00fameros como argumentos y devuelve la suma de esos n\u00fameros:\n\n``` py title=\"Python\"\n# Definici\u00f3n de funciones\ndef sumar(a, b):\n    resultado = a + b\n    return resultado\n</code></pre></p> <p>Aqu\u00ed se define una funci\u00f3n llamada sumar que toma dos argumentos, a y b. La funci\u00f3n realiza la suma de los dos argumentos y los almacena una la variable resultado. Luego, devuelve el valor almacenado en la variable resultado. Podemos asignar esta funci\u00f3n a una variable y luego llamarla utilizando esa variable:</p> Python<pre><code># Definici\u00f3n de funciones\ndef sumar(a, b):\n    resultado = a + b\n    return resultado\n\n# Bloque principal del programa\nmi_funcion = sumar\nresultado = mi_funcion(2, 3)\nprint(resultado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>5\n</code></pre> <p>En el ejemplo anterior, asignamos la funci\u00f3n sumar a una variable llamada mi_funcion. Luego, llamamos a la funci\u00f3n utilizando la variable y pasando los argumentos 2 y 3. La funci\u00f3n devuelve la suma de los dos n\u00fameros, que se almacena en la variable resultado. Luego, se imprime el valor almacenado en la consola.</p> <p>\u00a1Importante!</p> <p>Cuando asignamos una funci\u00f3n a una variable, estamos asignando la funci\u00f3n en s\u00ed misma, no el resultado de la funci\u00f3n. Esto significa que podemos llamar a la funci\u00f3n en cualquier momento simplemente utilizando la variable a la que se ha asignado.</p> <p>Las funciones tambi\u00e9n se pueden pasar como argumentos a otras funciones. Por ejemplo, podemos definir una funci\u00f3n llamada aplicar_funcion que toma una funci\u00f3n y dos argumentos y devuelve el resultado de aplicar la funci\u00f3n a los dos argumentos:</p> <p>``` py title=\"Python</p>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#definicion-de-funciones_1","title":"Definici\u00f3n de funciones","text":"<p>def aplicar_funcion(funcion, a, b):     return funcion(a, b)</p>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#bloque-principal-del-programa","title":"Bloque principal del programa","text":"<p>resultado = aplicar_funcion(sumar, 2, 3) print(resultado) <pre><code>``` title=\"Terminal (Entrada/Salida)\"\n5\n</code></pre></p> <p>En el ejemplo anterior, pasamos la funci\u00f3n sumar como argumento a la funci\u00f3n aplicar_funcion. La funci\u00f3n aplicar_funcion llama a la funci\u00f3n pasada como argumento (sumar) con los dos argumentos (2 y 3) y devuelve el resultado de la funci\u00f3n (5).</p> <p>\u00a1Para recordar!</p> <p>En resumen, en lenguajes como Python, las funciones son objetos de primera clase, lo que significa que se pueden tratar como cualquier otro tipo de dato, como n\u00fameros, cadenas o listas. Esto permite que las funciones se asignen a variables, se pasen como argumentos a otras funciones, se devuelvan como resultados de funciones y se almacenen en estructuras de datos como listas o diccionarios.</p>"},{"location":"unidades/programacion-procedimental/funciones/ejercitacion/ejercitacion-funciones/","title":"Ejercitaci\u00f3n de funciones generales","text":"<ol> <li> <p>Escribir un programa que contenga una funci\u00f3n que reciba una lista con valores num\u00e9ricos enteros como argumento para calcular y devolver el valor m\u00e1ximo de dichos n\u00fameros.</p> JavaScript<pre><code>function encontrarMaximo(numeros) {\n    let maximo = numeros[0]\n\n    for (let i = 1; i &lt; numeros.length; i++) {\n        if (numeros[i] &gt; maximo) {\n            maximo = numeros[i]\n        }\n    }\n\n    return maximo\n}\n\nlet listaNumeros = [5, 15, 20, 10]\nlet resultado = encontrarMaximo(listaNumeros)\nconsole.log(\"M\u00e1ximo: \", resultado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Promedio: 20\n</code></pre> <p>En este ejercicio, la funci\u00f3n encontrarMaximo() encuentra el valor m\u00e1ximo en una lista de n\u00fameros.  La variable local maximo se utiliza para realizar el seguimiento del valor m\u00e1ximo encontrado hasta el momento.</p> </li> <li> <p>Calcular el factorial de un n\u00famero utilizando una variable local en una funci\u00f3n. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>El factorial de 5 es: 120\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\ndef factorial(n):\n    resultado = 1\n\n    for i in range(1, n + 1):\n        resultado *= i\n\n    return resultado\n\n# Bloque principal del programa\nnumero = 5\n\nresultado = factorial(numero)\n\nprint(\"El factorial de\", numero, \"es:\", resultado)\n</code></pre> <p>En esta soluci\u00f3n propuesta la funci\u00f3n factorial() calcula el factorial del n\u00famero 5 utilizando una variable local resultado para almacenar el resultado intermedio.</p> </li> <li> <p>Determinar si una palabra es un pal\u00edndromo (es igual si se lee de izquierda a derecha que de derecha a izquierda) utilizando variables locales. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>anilina es un pal\u00edndromo (se escribe igual al derecho y al rev\u00e9s).\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\ndef es_palindromo(palabra):\n    palabra = palabra.lower()\n    palabra_invertida = palabra[::-1]\n\n    if palabra == palabra_invertida:\n        return True\n    else:\n        return False\n\n# Bloque principal del programa\npalabra = \u201danilina\u201d\n\nif es_palindromo(palabra):\n    print(palabra, \"es un pal\u00edndromo (se escribe igual al derecho y al rev\u00e9s).\")\nelse:\n    print(palabra, \"no es un pal\u00edndromo.\")\n</code></pre> <p>En esta soluci\u00f3n propuesta la funci\u00f3n es_palindromo() verifica si una palabra es un pal\u00edndromo utilizando una variable local palabra_invertida para almacenar la versi\u00f3n invertida de la palabra almacenada en la variable palabra.</p> <p>\u00bfPara qu\u00e9 se utiliza el m\u00e9todo <code>lower()</code>?</p> <p>\u00bfQu\u00e9 hace la instrucci\u00f3n <code>palabra[::-1]</code>?</p> </li> <li> <p>Calcular la suma de los d\u00edgitos de un n\u00famero utilizando variables locales. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>La suma de los d\u00edgitos de 12345 es: 15\n</code></pre> Ver soluci\u00f3n propuesta Python<pre><code># Definici\u00f3n de funciones\ndef suma_de_los_digitos(numero):\n    total = 0\n\n    while numero &gt; 0:\n        digito = numero % 10\n        total += digito\n        numero //= 10\n\n    return total\n\n# Bloque principal del programa\nnumero = 12345\nresultado = suma_de_los_digitos(numero)\nprint(\u201dLa suma de los d\u00edgitos de\", numero, \u201des:\", resultado)\n</code></pre> <p>En esta soluci\u00f3n propuesta la funci\u00f3n suma_de_los_digitos() calcula la suma de los d\u00edgitos de un n\u00famero utilizando una variable local total para almacenar la suma acumulada.</p> <p>\u00bfPara qu\u00e9 se utiliza el signo % ?</p> <p>\u00bfQu\u00e9 hace el operador // ?</p> </li> <li> <p>Escribe una funci\u00f3n que tome dos listas como argumentos y devuelva True si tienen alg\u00fan elemento en com\u00fan, utilizando operadores booleanos.</p> </li> <li> <p>Escribe una funci\u00f3n que tome tres n\u00fameros como argumentos y devuelva True si el tercero est\u00e1 dentro del rango definido por los primeros dos n\u00fameros.</p> </li> <li> <p>Escribe una funci\u00f3n que tome una cadena de caracterescomo argumento y devuelva True si contiene al menos una letra may\u00fascula y al menos un n\u00famero. </p> </li> <li> <p>Escribe una funci\u00f3n que tome un a\u00f1o como argumento y determine si es bisiesto o no. Un a\u00f1o bisiesto es divisible entre 4, pero no entre 100, a menos que tambi\u00e9n sea divisible entre 400.</p> </li> </ol>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/","title":"Conceptos b\u00e1sicos de pseudoc\u00f3digo","text":""},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#introduccion","title":"Introducci\u00f3n","text":"<p>El pseudoc\u00f3digo es una herramienta valiosa en el desarrollo de software, ya que facilita la planificaci\u00f3n, el dise\u00f1o y la comunicaci\u00f3n de algoritmos en idioma natural antes de su implementaci\u00f3n en un lenguaje de programaci\u00f3n real.</p> <p>Definici\u00f3n</p> <p>El pseudoc\u00f3digo es una versi\u00f3n legible, en lenguaje humano natural, de un algoritmo. Es decir, que es una representaci\u00f3n de dicho algoritmo en castellano preciso (o alg\u00fan otro idioma humano). Es para ser le\u00eddo por personas, por lo tanto no se enfoca en detalles sint\u00e1cticos.</p> <p>Recordemos el problema de tratar de localizar un solo nombre en una gu\u00eda telef\u00f3nica impresa. </p> <p>El mejor algoritmo para resolverlo podr\u00eda ser abrir la gu\u00eda telef\u00f3nica por la mitad, y preguntar:</p> <p>\u201c\u00bfEl nombre que estoy buscando est\u00e1 a la izquierda o a la derecha?\u201d </p> <p>Decidir si el nombre estar\u00e1 en la mitad izquierda o derecha del libro (porque el libro est\u00e1 alfabetizado) y reducir el tama\u00f1o de nuestro problema a la mitad. </p> <p>Luego, repetir este proceso hasta encontrar nuestro nombre, dividiendo el problema por la mitad cada vez.</p> <p>La capacidad de crear pseudoc\u00f3digo es fundamental para el \u00e9xito en el proceso de creaci\u00f3n de un algoritmo.</p>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#elementos-de-un-algoritmo-empleados-en-pseudocodigo","title":"Elementos de un algoritmo empleados en pseudoc\u00f3digo","text":"<p>Como dijimos, el pseudoc\u00f3digo es una manera de escribir algoritmos de forma poco estricta (con una sintaxis relajada) o estructuras de datos poco detalladas, pero intentando acercar las ideas del algoritmo a estructuras y sintaxis parecidas a las de los lenguajes de programaci\u00f3n en los que vamos a programar el algoritmo.</p> <p>Al ser un lenguaje de especificaci\u00f3n de algoritmos, pero muy parecido a cualquier lenguaje de programaci\u00f3n por lo que luego su traducci\u00f3n a cualquiera de estos ser\u00e1 muy sencilla, y con la ventaja de no regirse por las normas de un lenguaje en particular, se centra m\u00e1s en la l\u00f3gica del problema que en su implementaci\u00f3n.</p> <p>Para dise\u00f1ar algoritmos en pseudoc\u00f3digo, se pueden utilizar los siguientes elementos, utilizando una serie de palabras claves o palabras especiales que van a ir indicando el significado y funcionamiento del algoritmo:</p> <ul> <li>tipos de dato</li> <li>Variables</li> <li>Constantes</li> <li>Operadores</li> <li>Expresiones</li> <li>Instrucciones</li> </ul>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#cual-es-la-sintaxis-de-un-algoritmo-en-pseudocodigo","title":"\u00bfCu\u00e1l es la sintaxis de un algoritmo en pseudoc\u00f3digo?","text":"<p>En programaci\u00f3n, la sintaxis completa para escribir un algoritmo en pseudoc\u00f3digo es:</p> pseudoc\u00f3digo algoritmo: &lt; nombre_del_algoritmo &gt;<pre><code>[ constantes\n     &lt;declaraciones_de_constantes&gt; ]\n[ variables\n     &lt;declaraciones_de_variables&gt; ]\n[ tipos_de_datos\n     &lt;declaraciones_de_tipos_de_datos&gt; ]\n[ funciones\n     &lt;declaraciones_de_funciones&gt; ]\n\ninicio\n   &lt;bloque_de_sentencias&gt;\nfin\n</code></pre>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#ejemplo-de-sintaxis-de-un-algoritmo-en-pseudocodigo","title":"Ejemplo de sintaxis de un algoritmo en pseudoc\u00f3digo","text":"<p>El algoritmo de un programa que pida por teclado el radio de una circunferencia y muestre por pantalla el \u00e1rea de la misma, se puede escribir como se muestra a continuaci\u00f3n:</p> pseudoc\u00f3digo algoritmo: Area de una circunferencia<pre><code>constantes\n   PI = 3.141592\n\nvariables\n   flotante area, radio\n\ninicio\n   escribir(\"Introduzca el radio: \")\n   radio \u2190 ingresar valor del radio por teclado\n   area \u2190 PI * radio ** 2\n   escribir(\"El \u00e1rea de la circunferencia es: \" + area)\nfin\n</code></pre>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#estructura-general-de-un-algoritmo-representado-en-pseudocodigo","title":"Estructura general de un algoritmo representado en pseudoc\u00f3digo","text":"<p>Mejorar</p> <p></p> <p>\u00a1Recueda!</p> <p>recuerda que Inicio y Fin no tienen un equivalente en c\u00f3digo. </p> <p>La primera l\u00ednea de c\u00f3digo indica el Inicio y la \u00faltima l\u00ednea de c\u00f3digo indica el Fin del programa, aunque no tienen por qu\u00e9 ser la primera y la \u00faltima l\u00ednea en ejecutarse obligatoriamente. Esto lo vas a ir entendiendo m\u00e1s adelante cuando avancemos en las diferentes metodolog\u00edas de programaci\u00f3n.</p> <p></p>"},{"location":"unidades/pseudocodigo/resumen-de-pseudocodigo/","title":"Pseudoc\u00f3digo: resumen","text":""},{"location":"unidades/pseudocodigo/resumen-de-pseudocodigo/#resumen","title":"Resumen","text":"<p>\u00a1Para recordar!</p> <p>El pseudoc\u00f3digo es una versi\u00f3n legible, en lenguaje humano natural, de un algoritmo. Es decir, que es una representaci\u00f3n de dicho algoritmo en castellano (o alg\u00fan otro idioma humano) y resulta fundamental para el \u00e9xito en el proceso de creaci\u00f3n de un algoritmo. Por lo tanto, es una herramienta valiosa en el desarrollo de software, ya que facilita la planificaci\u00f3n, el dise\u00f1o y la comunicaci\u00f3n de algoritmos antes de su implementaci\u00f3n en un lenguaje de programaci\u00f3n real.</p> <p>Aunque no es un lenguaje de programaci\u00f3n formal, sirve como una herramienta \u00fatil para describir el flujo de un algoritmo de manera clara y comprensible antes de ser implementado en un lenguaje de programaci\u00f3n espec\u00edfico.</p> <p>La pseudo codificaci\u00f3n es una habilidad muy importante porque te permite pensar en la l\u00f3gica del problema por adelantado y puede proporcionar informaci\u00f3n a otras personas que buscan comprender tus decisiones de codificaci\u00f3n y c\u00f3mo funciona tu c\u00f3digo.</p> <ul> <li>Existen varias razones por las que se utiliza el pseudoc\u00f3digo:</li> <li>Mejora el dise\u00f1o de algoritmos permitiendo dise\u00f1ar una soluci\u00f3n paso a paso de manera estructurada y comprensible para resolver un problema.</li> <li>Mejora la comunicaci\u00f3n y colaboraci\u00f3n entre los miembros de un equipo de desarrollo o entre un programador y un cliente.</li> <li>Sirve como documentaci\u00f3n de referencia para otros desarrolladores que trabajen en el mismo proyecto en el futuro, ayud\u00e1ndoles a comprender la l\u00f3gica y la estructura del algoritmo.</li> <li>Proporciona flexibilidad para ser utilizado como base para implementar un algoritmo en diferentes lenguajes de programaci\u00f3n, seg\u00fan las necesidades o preferencias del desarrollador.</li> <li>Es fundamental en la ense\u00f1anza y aprendizaje permitiendo centrarse en los conceptos y la l\u00f3gica detr\u00e1s de un algoritmo antes de preocuparse por la sintaxis y los detalles de un lenguaje de programaci\u00f3n en particular.</li> </ul>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/","title":"Sintaxis empleada en pseudoc\u00f3digo","text":""},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#inicio-y-fin-lineas-de-flujo-instrucciones-comentarios-entradas-y-salidas","title":"Inicio y Fin, l\u00edneas de flujo, instrucciones, comentarios, entradas y salidas","text":"Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar n1 como entero\n\n# Solicita un n\u00famero ingresado por teclado\nAsignar a n1 un n\u00famero ingresado por teclado\n\n*/\nMuestra en pantalla la frase compuesta por\nun texto literal concatenado con el valor de la variable\n/*\nImprimir en pantalla \"El n\u00famero ingresado es\" + n1\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>Al igual que los diagramas de flujo, todo pseudoc\u00f3digo tiene un Inicio y un Fin.</p> <p>Las l\u00edneas de flujo y los conectores no tienen un pseudoc\u00f3digo asociado. Las primeras se representan como la continuaci\u00f3n del salto de l\u00ednea que identifica el final de una instrucci\u00f3n y el comienzo de otra; y los segundos se identifican t\u00e1citamente siguiendo la lectura del pseudoc\u00f3digo.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructuras-de-control","title":"Estructuras de control","text":"<p>Al igual en los diagramas de flujos, podemos encontrar en un pseudoc\u00f3digo las siguientes estructuras de control que definen el flujo de ejecuci\u00f3n de las instrucciones a lo largo del programa:</p> <ul> <li> <p>Estructura de control secuencial</p> </li> <li> <p>Estructura de control selectiva</p> <ul> <li>Selectiva (o alternativa) simple </li> <li>Selectiva (o alternativa) doble</li> <li>Selectiva (o alternativa) doble anidada</li> <li>Selectiva (o alternativa) m\u00faltiple</li> </ul> </li> <li> <p>Estructura de control iterativa (repetitiva)</p> <ul> <li>Repetir Mientras (While) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Hasta (Until) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Para\u2026Siguiente (For\u2026Next)</li> </ul> </li> </ul>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-simple","title":"Estructura selectiva (o alternativa) simple","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSi (EXPRESI\u00d3N_CONDICIONAL == VERDADERO) Entonces\n    BLOQUE DE SENTENCIAS QUE SE EJECUTAN SI VERDADERO\nFin Si\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>El bloque de sentencias se ejecuta solo si la expresi\u00f3n condicional es verdadera.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-doble","title":"Estructura selectiva (o alternativa) doble","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSi (EXPRESI\u00d3N_CONDICIONAL == VERDADERO) Entonces\n    BLOQUE DE SENTENCIAS QUE \n    SE EJECUTAN SI VERDADERO\nSino\n    BLOQUE DE SENTENCIAS QUE \n    SE EJECUTAN SI FALSO\nFin Si\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>Si la expresi\u00f3n condicional es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional es falsa, se ejecuta el bloque de sentencias falso.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-doble-anidada","title":"Estructura selectiva (o alternativa) doble anidada","text":"<p>Corregir que el else puede ser vacio</p> <p></p> Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSi (EXPRESI\u00d3N_CONDICIONAL_1 == VERDADERO) Entonces\n    BLOQUE DE SENTENCIAS QUE \n    SE EJECUTAN SI_1 VERDADERO\nSino\n    Si (EXPRESI\u00d3N_CONDICIONAL_2 == VERDADERO) Entonces\n        BLOQUE DE SENTENCIAS QUE \n        SE EJECUTAN SI_2 VERDADERO\n    Sino\n        BLOQUE DE SENTENCIAS QUE \n        SE EJECUTAN SI_2 FALSO\n    Fin Si\nFin Si\n\u22ee\nFin\n</code></pre> <p>El bloque de sentencias resaltadas corresponde al bloque de sentencias falso de la primera estructura selectiva y contiene otra estructura selectiva.</p> <p>\u00a1Para recordar!</p> <p>Esta estructura puede contener tantas estructuras selectivas como sea necesario. </p> <p>La regla de c\u00e1lculo para saber la cantidad de estructuras selectivas doble necesarias es:</p> <p>CANTIDAD DE ESTRUCTURAS = CANTIDAD DE BLOQUES DE SENTENCIAS DISTINTOS \u2013 1</p> <p>Y recuerda que el \u00faltimo bloque de sentencias siempre se ejecuta por el camino falso de la \u00faltima estructura selectiva doble.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-multiple","title":"Estructura selectiva (o alternativa) m\u00faltiple","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSeg\u00fan (EXPRESI\u00d3N_CONDICIONAL)\n   Caso 1:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL == Caso 1\n   Fin Caso 1\n   Caso 2:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL == Caso 2\n   Fin Caso 2\n   \u22ee\n   Caso n:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL == Caso n\n   Fin Caso n\n\n   Caso por Defecto:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL != Todos los Casos\n   Fin Caso por Defecto\nFin Seg\u00fan\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>Esta estructura puede contener tantos casos como sean necesarios. </p> <p>Puede caber la posibilidad que exista un bloque de sentencias por defecto (default) que se ejecute en el caso que la expresi\u00f3n condicional no valide ninguno de los casos existentes. </p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la entrada","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nRepetir Mientras (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA (UNA Y OTRA VEZ)\n    MIENTRAS LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nFin Repetir\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta no es v\u00e1lida (falso), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la salida","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nHacer\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA AL MENOS UNA VEZ\n    (Y LUEGO, TAL VEZ UNA Y OTRA VEZ)\n    MIENTRAS LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nRepetir Mientras (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional no sea v\u00e1lido (falso).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la entrada","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nRepetir Hasta (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA (UNA Y OTRA VEZ)\n    HASTA QUE LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nFin Repetir\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta ES v\u00e1lida (verdadero), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de NO ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la salida","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nHacer\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA AL MENOS UNA VEZ\n    (Y LUEGO, TAL VEZ UNA Y OTRA VEZ)\n    HASTA QUE LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nRepetir Hasta (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional SI sea v\u00e1lido (verdadero).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-parasiguiente-fornext","title":"Estructura iterativa (o repetitiva) Para\u2026Siguiente (For\u2026Next)","text":"Pseudoc\u00f3digo<pre><code># Vi = Valor_inicial\n# Vc = Valor_de_control\n# EXPRESI\u00d3N_CONDICIONAL: Es una expresi\u00f3n evaluada respecto de Vc\n\nInicio\n\u22ee\nPara Vc = Vi ; EXPRESI\u00d3N_CONDICIONAL == VERDADERO ; Vc = Siguiente_Vc\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA (UNA Y OTRA VEZ)\n    HASTA QUE LA EXPRESI\u00d3N CONDICIONAL ES FALSA\nSiguiente_Vc\n\u22ee\nFin\n</code></pre> <p>\u00a1Para recordar!</p> <p>A diferencia de las estructuras anteriores donde, seg\u00fan el caso, no se ejecutaban nunca o lo hac\u00edan, si o si, al menos una vez, el esp\u00edritu de esta estructura es el de SI ejecutarse siempre, y el de hacerlo un n\u00famero conocido de veces.</p> <p>Se asigna un valor inicial a la variable de control, que debe cumplir con la expresi\u00f3n condicional que controla la cantidad de repeticiones del bloque de sentencias.</p> <p>Tras cada ejecuci\u00f3n de dicho bloque, a la variable de control se le asignar\u00e1 el siguiente valor de control y se volver\u00e1 a efectuar la validaci\u00f3n de la expresi\u00f3n condicional.</p> <p>Este procedimiento se continuar\u00e1 repitiendo hasta que el valor de la variable de control no valide la expresi\u00f3n condicional (verdadero). </p> <p>Cuando SI se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#ejemplo-de-conversion-de-diagrama-de-flujo-a-pseudocodigo","title":"Ejemplo de conversi\u00f3n de diagrama de flujo a pseudoc\u00f3digo","text":"<p>mejorar</p> <p>Mostrar el producto de n\u00fameros enteros positivos entrados por teclado hasta el ingreso de un n\u00famero negativo.</p> <p></p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#ejemplo-de-resolucion-de-un-problema-con-pseudocodigo","title":"Ejemplo de resoluci\u00f3n de un problema con pseudoc\u00f3digo","text":"<p>Completar y embellecer</p> <p>!!! question \"\u00bfC\u00f3mo podemos encontrar a una persona en la gu\u00eda telef\u00f3nica?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    Recoger gu\u00eda telef\u00f3nica\n    Abrir la gu\u00eda telef\u00f3nica en el medio\n    Mira la p\u00e1gina\n    Si la persona est\u00e1 en la p\u00e1gina entonces\n       Llamar a la persona\n    Si no, si la persona est\u00e1 antes de la p\u00e1gina abierta en la gu\u00eda entonces\n       Abrir en el medio de la mitad izquierda previamente abierta\n       Ir a la l\u00ednea 3\n    Si no, si la persona est\u00e1 despu\u00e9s de la p\u00e1gina abierta en la gu\u00eda entonces\n       Abrir en el medio de la mitad derecha previamente abierta\n       Ir a la l\u00ednea 3\n    Si no\n       Indicar que la persona no se encuentra en la gu\u00eda\n    Fin Si\nFin\n</code></pre> <p>Hay que tener en cuenta que el lenguaje dentro de nuestro pseudoc\u00f3digo tiene algunas caracter\u00edsticas \u00fanicas:</p> <p>Primero, algunas de estas l\u00edneas comienzan con acciones o verbos como recoger, abrir, llamar, mirar, indicar. M\u00e1s adelante, llamaremos a estos verbos  funciones.</p> <p>Segundo, observa que algunas l\u00edneas incluyen declaraciones como Si o Si no. Estas, se denominan condicionales y representan ramas que conducen a diferentes caminos, como bifurcaciones en el flujo de ejecuci\u00f3n del programa.</p> <p>Tercero, lugar, observa c\u00f3mo hay expresiones que pueden declararse como verdaderas o falsas, como \u201csi la persona est\u00e1 antes de la p\u00e1gina abierta en la gu\u00eda\u201d. Llamamos a estas expresiones booleanas.</p> <p>Finalmente, observa la declaraci\u00f3n \u201dIr a la l\u00ednea 3\u201d. Llamamos a esta declaraci\u00f3n bucle, que permite crear ciclos, donde podemos repetir partes de nuestro programa.</p> <p>No te olvides que todo programa tiene un INICIO y un FIN.</p> <p>Con estos pasos, revisamos la p\u00e1gina del medio, decidimos qu\u00e9 hacer y repetimos el proceso. Si la persona no est\u00e1 en la p\u00e1gina y no quedan m\u00e1s p\u00e1ginas en el libro, entonces nos detenemos. Y ese \u00faltimo caso es particularmente importante de recordar: cuando los programas o el c\u00f3digo no incluyen ese caso final, puede parecer que se congelan o dejan de responder, o contin\u00faan repitiendo el mismo trabajo una y otra vez sin lograr ning\u00fan progreso.</p> <p></p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#ventajas-de-escribir-primero-en-pseudocodigo","title":"Ventajas de escribir primero en pseudoc\u00f3digo","text":"<p>El pseudoc\u00f3digo es un lenguaje intermedio entre el lenguaje natural humano y el lenguaje de programaci\u00f3n real, principalmente utilizado en la etapa de dise\u00f1o y planificaci\u00f3n de algoritmos. </p> <p>Aunque no es un lenguaje de programaci\u00f3n formal, sirve como una herramienta \u00fatil para describir el flujo de un algoritmo de manera clara y comprensible antes de ser implementado en un lenguaje de programaci\u00f3n espec\u00edfico.</p> <p>Aqu\u00ed hay algunas razones por las que se utiliza el pseudoc\u00f3digo:</p> <ul> <li> <p>Dise\u00f1o de algoritmos: el pseudoc\u00f3digo permite a los desarrolladores dise\u00f1ar algoritmos paso a paso de manera estructurada y comprensible. Ayuda a visualizar el flujo de control, la secuencia de acciones y las estructuras de datos necesarias para resolver un problema.</p> </li> <li> <p>Comunicaci\u00f3n y colaboraci\u00f3n: el pseudoc\u00f3digo proporciona un medio de comunicaci\u00f3n entre los miembros de un equipo de desarrollo o entre un programador y un cliente. Al describir el algoritmo en un lenguaje m\u00e1s cercano al ingl\u00e9s u otro idioma natural, se facilita la comprensi\u00f3n y la revisi\u00f3n conjunta.</p> </li> <li> <p>Documentaci\u00f3n: el pseudoc\u00f3digo tambi\u00e9n se utiliza para documentar algoritmos. Puede servir como una referencia para otros desarrolladores que trabajen en el mismo proyecto en el futuro, ayud\u00e1ndoles a comprender la l\u00f3gica y la estructura del algoritmo.</p> </li> <li> <p>Flexibilidad: el pseudoc\u00f3digo no est\u00e1 vinculado a un lenguaje de programaci\u00f3n espec\u00edfico, lo que proporciona flexibilidad al programador. Puede ser utilizado como base para implementar un algoritmo en diferentes lenguajes de programaci\u00f3n, seg\u00fan las necesidades o preferencias del desarrollador.</p> </li> <li> <p>Ense\u00f1anza y aprendizaje: el pseudoc\u00f3digo se utiliza ampliamente en la ense\u00f1anza de programaci\u00f3n, especialmente para principiantes. Permite a los estudiantes centrarse en los conceptos y la l\u00f3gica detr\u00e1s de un algoritmo antes de preocuparse por la sintaxis y los detalles de un lenguaje de programaci\u00f3n en particular.</p> </li> </ul>"},{"location":"unidades/svcode/configuracion-de-vscode/","title":"Explicar como se configura el tabulador (Spaces: 4 - en la barra de estados abajo)","text":""},{"location":"unidades/svcode/shortcuts-en-vscode/","title":"Importante!! Si se mantiene \"alt\" se puede generar m\u00e1s de una selecci\u00f3n","text":""},{"location":"unidades/svcode/shortcuts-en-vscode/#si-se-mantiene-con-una-linea-seleccionada-y-se-aprietan-las-flechas-se-puede-mover-la-anteriormente-mencionada","title":"Si se mantiene con una l\u00ednea seleccionada y se aprietan las flechas, se puede mover la anteriormente mencionada","text":""},{"location":"unidades/svcode/shortcuts-en-vscode/#altz-permite-word-wrap-ajuste-de-linea-cuando-el-largo-del-codigo-es-mayor-que-el-ancho-de-la-pantalla-baja-el-codigo-al-siguiente-renglon","title":"ALT+Z permite Word Wrap (ajuste de linea cuando el largo del codigo es mayor que el ancho de la pantalla, baja el codigo al siguiente renglon)","text":""}]}