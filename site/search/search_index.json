{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"La biblia del programador","text":""},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/","title":"Introducci\u00f3n a la abstracci\u00f3n","text":""},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#introduccion","title":"Introducci\u00f3n","text":"<p>El objetivo de la abstracci\u00f3n es simplificar la programaci\u00f3n y promover la reutilizaci\u00f3n de c\u00f3digo.</p> <p>Al dividir un programa en tareas m\u00e1s simples, se maneja la complejidad de manera m\u00e1s eficiente, se organiza el c\u00f3digo de forma modular y escalable y permite cambios sin afectar otras partes del programa.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#definicion","title":"Definici\u00f3n","text":"abstracci\u00f3n<pre><code>Acci\u00f3n y efecto de abstraer o abstraerse.\n</code></pre> abstraer<pre><code>Apartar, separar por medio de una operaci\u00f3n intelectual un rasgo o una cualidad de algo para analizarlos aisladamente o considerarlos en su pura esencia o noci\u00f3n.\nHacer caso omiso de algo, o dejarlo a un lado.\n</code></pre> <p>El objetivo de la abstracci\u00f3n es simplificar la programaci\u00f3n y promover la reutilizaci\u00f3n de c\u00f3digo, ya que, en t\u00e9rminos generales, se refiere al proceso de separar o distanciar los aspectos esenciales de un problema de sus detalles concretos y particulares. </p> <p>En esencia, la abstracci\u00f3n implica centrarse en los elementos fundamentales y generales, ignorando o dejando de lado los detalles espec\u00edficos y menos relevantes.</p> <p>Es un proceso de simplificaci\u00f3n y generalizaci\u00f3n que permite comprender, comunicar y trabajar con ideas y elementos complejos de manera m\u00e1s eficiente.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#abstraccion-en-el-contexto-de-la-programacion-y-la-informatica","title":"Abstracci\u00f3n en el contexto de la programaci\u00f3n y la inform\u00e1tica","text":"<p>La abstracci\u00f3n es un concepto fundamental en la programaci\u00f3n y se encuentra en varios t\u00f3picos, pero es m\u00e1s prominente en los siguientes:</p> <ol> <li> <p>Programaci\u00f3n Orientada a Objetos (POO): La abstracci\u00f3n es un pilar de la POO. Se utiliza para ocultar la complejidad de los detalles y mostrar solo la funcionalidad al usuario. Por ejemplo, cuando se crea una clase (que es una abstracci\u00f3n de un objeto del mundo real), no necesitamos entender c\u00f3mo funciona internamente para poder usarla.</p> </li> <li> <p>Dise\u00f1o de Software y Arquitectura: La abstracci\u00f3n ayuda a separar las preocupaciones y a crear componentes de software m\u00e1s manejables. Por ejemplo, en el dise\u00f1o de sistemas, se pueden crear capas de abstracci\u00f3n para separar la l\u00f3gica de negocio de la l\u00f3gica de acceso a datos.</p> </li> <li> <p>Algoritmos y Estructuras de Datos: Al dise\u00f1ar algoritmos y estructuras de datos, a menudo se utiliza la abstracci\u00f3n para simplificar el problema y concentrarse en lo que realmente importa.</p> </li> </ol> <p>Por lo tanto, la abstracci\u00f3n puede entrar en varios t\u00f3picos de programaci\u00f3n dependiendo del contexto.</p> <p>\u00a1Â¡Para recordar!!</p> <p>En el contexto de la programaci\u00f3n y la inform\u00e1tica, la abstracci\u00f3n se refiere proceso que tiene la capacidad de representar un conjunto de datos, conceptos y elementos complejos del mundo real de manera simplificada, concisa y generalizada, a trav\u00e9s de modelos o estructuras que permiten trabajar con ellos de manera m\u00e1s eficiente y comprensible en un programa.</p> <p>La abstracci\u00f3n busca capturar los aspectos esenciales y relevantes de una entidad o problema, omitiendo los detalles innecesarios.</p> <p>En la programaci\u00f3n, se utilizan t\u00e9cnicas de abstracci\u00f3n, como la encapsulaci\u00f3n y la creaci\u00f3n de interfaces, para ocultar los detalles internos y complejos de un componente o sistema, y proporcionar una forma m\u00e1s f\u00e1cil de interactuar con \u00e9l. Puede manifestarse en diferentes niveles y paradigmas:</p> <ul> <li>En un nivel m\u00e1s alto, puede implicar la creaci\u00f3n de interfaces, clases o m\u00f3dulos que encapsulan la funcionalidad y ocultan los detalles de implementaci\u00f3n subyacentes. Esto permite que los usuarios o programadores interact\u00faen con estas abstracciones sin tener que preocuparse por los detalles internos.</li> <li>En un nivel m\u00e1s bajo, la abstracci\u00f3n puede involucrar la creaci\u00f3n de funciones, procedimientos o bloques de c\u00f3digo que agrupan instrucciones relacionadas y se utilizan para resolver tareas espec\u00edficas. Estas abstracciones ayudan a modularizar y organizar el c\u00f3digo, facilitando su mantenimiento y reutilizaci\u00f3n.</li> </ul>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#abstraccion-en-programacion-imperativa-funciones-y-procedimientos","title":"Abstracci\u00f3n en programaci\u00f3n imperativa: funciones y procedimientos","text":"<p>En programaci\u00f3n imperativa, la abstracci\u00f3n se refiere a la capacidad de agrupar un conjunto de instrucciones en una sola unidad l\u00f3gica y tratarla como una entidad \u00fanica. La idea es simplificar y organizar el c\u00f3digo para facilitar su comprensi\u00f3n y mantenimiento.</p> <p>En este paradigma, la abstracci\u00f3n se logra mediante el uso de funciones o procedimientos (tambi\u00e9n conocidos como subrutinas):</p> <ul> <li>Una funci\u00f3n es un bloque de c\u00f3digo que toma ciertos valores de entrada, realiza una serie de operaciones y devuelve un resultado. </li> <li>Un procedimiento es similar a una funci\u00f3n, pero no devuelve un valor espec\u00edfico, sino que realiza una serie de acciones.</li> </ul> <p>Al utilizar funciones y procedimientos, se pueden agrupar instrucciones relacionadas en una \u00fanica entidad abstracta. Esto permite separar la l\u00f3gica del programa en m\u00f3dulos m\u00e1s peque\u00f1os y manejables, lo que facilita la comprensi\u00f3n del c\u00f3digo y su reutilizaci\u00f3n en diferentes partes del programa.</p> <p>La abstracci\u00f3n en programaci\u00f3n imperativa tambi\u00e9n puede lograrse mediante el uso de estructuras abstractas de datos. Estas son estructuras que definen un conjunto de operaciones y reglas de acceso, pero ocultan los detalles internos de implementaci\u00f3n. </p> <p>Al utilizar estructuras de datos abstractas, se puede trabajar con datos de manera m\u00e1s abstracta y enfocarse en la forma en que se manipulan y acceden, en lugar de preocuparse por los detalles espec\u00edficos de almacenamiento y organizaci\u00f3n.</p> <p>Por ahora no te preocupes. Suena complejo, pero lo entender\u00e1s muy bien cuando veamos el tema en profundidad, m\u00e1s adelante.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#introduccion-a-la-abstraccion-en-el-contexto-de-la-programacion-visual","title":"Introducci\u00f3n a la abstracci\u00f3n en el contexto de la programaci\u00f3n visual","text":"<p>Al igual que con la plataforma de Pilas Bloques, Scatch es una excelente manera de ingresar a la programaci\u00f3n de computadoras porque te permite jugar con bloques de construcci\u00f3n de una manera visual, sin tener que preocuparte por la sintaxis de llaves, puntos y comas, par\u00e9ntesis y similares.</p> <p>Scratch es un lenguaje de programaci\u00f3n visual desarrollado por el MIT. Y utiliza bloques de construcci\u00f3n de codificaci\u00f3n esenciales similares a los vistos en Pilas Bloques. Posee un IDE (entorno de desarrollo integrado) muy amigable que te permitir\u00e1 resolver una gran variedad de problemas computacionales, aunque no es tema para esta bibliograf\u00eda. Solo te contaremos que Scratch posee un gato estrella que nos ayudar\u00e1 a comprender el concepto de abstracci\u00f3n.</p> <p></p> <p>Te interesar\u00eda saber:</p> <p>Al gato, por cierto, podemos llamarlo sprite: un t\u00e9rmino general utilizado en la programaci\u00f3n de juegos para un objeto o personaje en la pantalla con el que el jugador interactuar\u00e1.</p> <p>Si quieres echarle un vistazo, puedes ingresar en https://scratch.mit.edu/</p> <p>Junto con la pseudocodificaci\u00f3n, la abstracci\u00f3n es una habilidad y un concepto esencial dentro de la programaci\u00f3n inform\u00e1tica.</p> <p>Definici\u00f3n</p> <p>Dijimos que la abstracci\u00f3n es el acto de simplificar un problema en problemas cada vez m\u00e1s peque\u00f1os.</p> <p>Por ejemplo, si estuviera organizando una gran cena para sus amigos, \u00a1el problema de tener que cocinar toda la comida podr\u00eda ser bastante abrumador! Sin embargo, si divide la tarea de cocinar la comida en tareas (o problemas) cada vez m\u00e1s peque\u00f1os, la gran tarea de crear esta deliciosa comida puede parecer menos desafiante.</p> <p>En programaci\u00f3n, e incluso dentro de Scratch, podemos ver la abstracci\u00f3n en acci\u00f3n. Realicemos un programa que haga que el gato haga 3 maullidos:</p> <p></p> <p>Date cuenta de que estamos haciendo lo mismo, repitiendo bloques una y otra vez. De hecho, si te ves codificando repetidamente las mismas declaraciones, es probable que puedas programar de manera m\u00e1s ingeniosa, abstrayendo el c\u00f3digo repetitivo.</p> <p>Puedes modificar tu c\u00f3digo de la siguiente manera, usando un bucle, ciclo o bloque de repetici\u00f3n:</p> <p></p> <p>Ahora nuestro programa logra los mismos resultados, pero con menos bloques. </p> <p>Podemos considerar que tiene un mejor dise\u00f1o: si hay algo que quisi\u00e9ramos cambiar, solo tendr\u00edamos que cambiarlo en un solo lugar en lugar de tres.</p> <p>Observe que el ciclo hace exactamente lo que hizo el programa anterior. Sin embargo, el problema se simplifica abstrayendo la repetici\u00f3n a un bloque que repite el c\u00f3digo para nosotros.</p> <p>Podemos usar la idea de abstracci\u00f3n para combinar varias acciones como si fuera una sola, para que podamos usarlas y pensar en ellas m\u00e1s f\u00e1cilmente. Para ello, debemos implementar un procedimiento. Este concepto lo veremos m\u00e1s adelante, pero por el momento hay que entenderlo como un bloque de c\u00f3digo independiente que realizar una tarea espec\u00edfica, y tienen un identificador \u00fanico para ser llamado:</p> <p></p> <p>Nota que estamos definiendo nuestro propio procedimiento (bloque de c\u00f3digo aislado) llamado meow. La funci\u00f3n reproduce el sonido meow, y luego espera un segundo. As\u00ed, la l\u00f3gica del procedimiento queda aislada de su implementaci\u00f3n.</p> <p>Ahora, nuestro bloque principal del programa solo puede usar el procedimiento meow, y podremos leer este c\u00f3digo m\u00e1s tarde y entender lo que hace m\u00e1s f\u00e1cilmente.</p> <p>Aqu\u00ed puedes ver que cuando se hace clic en la bandera verde, la llamada al procedimiento meow se repite tres veces.</p> <p>Incluso, el procedimiento puede tener un par\u00e1metro n, y recibir un valor como argumento que le indique que debe repetir el bloque de c\u00f3digo varias veces:</p> <p></p> <p>Nota como n toma el valor pasado desde la llamada meow 3 times.</p> <p>Ahora, el procedimiento meow consigue el mismo efecto, pero podemos reutilizarlo f\u00e1cilmente o cambiar el n\u00famero de veces que nuestro gato dice miau.</p> <p>\u00a1Â¡Para recordar!!</p> <p>Una buena estrategia cuando se programa es dividir un problema m\u00e1s grande en problemas m\u00e1s peque\u00f1os y resolverlos primero.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#ejemplo-de-abstraccion-en-programacion-imperativa","title":"Ejemplo de abstracci\u00f3n en programaci\u00f3n imperativa","text":"<p>Un ejemplo de abstracci\u00f3n en programaci\u00f3n imperativa se puede ver en el uso de funciones o procedimientos para encapsular un conjunto de instrucciones relacionadas y reutilizables. Estas abstracciones permiten simplificar y modularizar el c\u00f3digo, evitando la repetici\u00f3n y mejorando la legibilidad.</p> <p>Supongamos que tenemos un programa que necesita calcular el \u00e1rea de diferentes figuras geom\u00e9tricas, como cuadrados, c\u00edrculos y tri\u00e1ngulos. </p> <p>Podemos utilizar funciones para abstraer la l\u00f3gica de c\u00e1lculo del \u00e1rea para cada una de estas figuras. </p> <p>Aqu\u00ed hay un ejemplo en Python:</p> Python<pre><code>def calcular_area_cuadrado(lado):\n  return lado * lado\n\ndef calcular_area_circulo(radio):\n  PI = 3.14159265359 \n  return PI * radio * radio\n\ndef calcular_area_triangulo(base, altura):\n  return base * altura / 2\n\nlado = 5\narea_cuadrado = calcular_area_cuadrado(lado)\nprint(\"El \u00e1rea del cuadrado de lado\", lado, \"es:\", area_cuadrado)\n\nradio = 3\narea_circulo = calcular_area_circulo(radio)\nprint(\"El \u00e1rea del c\u00edrculo de radio\", radio, \"es:\", area_circulo)\n\nbase = 4\naltura = 6\narea_triangulo = calcular_area_triangulo(base, altura)\nprint(\"El \u00e1rea del tri\u00e1ngulo de base\", base, \"y altura\", altura, \"es:\", area_triangulo)\n</code></pre> <p>En este ejemplo, hemos creado tres funciones: * calcular_area_cuadrado * calcular_area_circulo * calcular_area_triangulo</p> <p>Cada una de estas funciones recibe los par\u00e1metros necesarios para realizar el c\u00e1lculo del \u00e1rea y devuelve el resultado correspondiente.</p> Python<pre><code>def calcular_area_cuadrado(lado):\n  return lado * lado\n\ndef calcular_area_circulo(radio):\n  PI = 3.14159265359 \n  return PI * radio * radio\n\ndef calcular_area_triangulo(base, altura):\n  return base * altura / 2\n</code></pre> <p>Gracias a estas abstracciones, podemos utilizar estas funciones en diferentes partes de nuestro programa para calcular el \u00e1rea de las diferentes figuras geom\u00e9tricas sin tener que repetir el c\u00f3digo de c\u00e1lculo en cada instancia. </p> <p>En este caso, las funciones abstractas nos permiten calcular el \u00e1rea de diferentes figuras geom\u00e9tricas sin preocuparnos por los detalles espec\u00edficos de cada c\u00e1lculo. Esto simplifica y organiza el c\u00f3digo, y facilita su reutilizaci\u00f3n en diferentes partes del programa donde sea necesario calcular \u00e1reas.</p> Python<pre><code>lado = 5\narea_cuadrado = calcular_area_cuadrado(lado)\nprint(\"El \u00e1rea del cuadrado de lado\", lado, \"es:\", area_cuadrado)\n\nradio = 3\narea_circulo = calcular_area_circulo(radio)\nprint(\"El \u00e1rea del c\u00edrculo de radio\", radio, \"es:\", area_circulo)\n\nbase = 4\naltura = 6\narea_triangulo = calcular_area_triangulo(base, altura)\nprint(\"El \u00e1rea del tri\u00e1ngulo de base\", base, \"y altura\", altura, \"es:\", area_triangulo)\n</code></pre>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#abstraccion-en-programacion-orientada-a-objetos-clases-interfaces-y-objetos","title":"Abstracci\u00f3n en programaci\u00f3n orientada a objetos: clases, interfaces y objetos","text":"<p>Como dijimos, la abstracci\u00f3n se refiere proceso que tiene la capacidad de representar un conjunto de datos, conceptos y elementos complejos del mundo real de manera simplificada, concisa y generalizada, a trav\u00e9s de modelos o estructuras que permiten trabajar con ellos de manera m\u00e1s eficiente y comprensible en un programa.</p> <p>Es una t\u00e9cnica que permite aislar ciertos aspectos relevantes de un problema y enfocarse \u00fanicamente en ellos, ignorando los detalles innecesarios.</p> <p>\u00a1Â¡Para recordar!!</p> <p>En la programaci\u00f3n orientada a objetos, la abstracci\u00f3n se logra mediante la creaci\u00f3n de clases, que son plantillas o moldes para crear objetos. Una clase define las propiedades y comportamientos que los objetos de ese tipo pueden tener. Los objetos, a su vez, son instancias concretas de esas clases. </p> <p>Por el momento, es todo lo que debes saber. Este paradigma de programaci\u00f3n se estudiar\u00e1 en profundidad mucho m\u00e1s adelante. Un paradigma es una manera o estilo de programaci\u00f3n de software</p> <p>La abstracci\u00f3n permite ocultar los detalles internos de una clase u objeto y proporcionar una interfaz clara y bien definida para interactuar con ellos. Esto significa que un usuario o programador puede utilizar un objeto sin necesidad de conocer c\u00f3mo est\u00e1 implementado internamente. Solo necesita saber qu\u00e9 m\u00e9todos o funciones est\u00e1n disponibles y c\u00f3mo usarlos.</p>"},{"location":"unidades/abstraccion/introduccion-a-la-abstraccion/#ejemplo-de-abstraccion-en-programacion-orientada-a-objetos","title":"Ejemplo de abstracci\u00f3n en programaci\u00f3n orientada a objetos","text":"<p>Un ejemplo de abstracci\u00f3n en programaci\u00f3n orientada a objetos se puede ver en el uso de una clase en lenguajes de programaci\u00f3n como Java o Python. Una clase es una abstracci\u00f3n que encapsula datos y comportamientos relacionados en un solo objeto. No te preocupes, lo veremos mucho m\u00e1s adelante.</p> <p>Supongamos que estamos desarrollando un sistema para una biblioteca y necesitamos representar los libros. Podemos crear una clase llamada Libro que abstraiga las propiedades y acciones asociadas a un libro. </p> <p>Aqu\u00ed hay un ejemplo en Python:</p> Python<pre><code>class Libro:\n\n   def __init__(self, titulo, autor):\n     self.titulo = titulo\n     self.autor = autor\n\n   def mostrar_informacion(self):\n     print(\"T\u00edtulo:\", self.titulo, \" | \", \"Autor:\", self.autor)\n\n   def prestar(self):\n     print(\"El libro\", self.titulo, \"ha sido prestado.\")\n\n   def devolver(self):\n     print(\"El libro\", self.titulo, \"ha sido devuelto.\")\n\nmi_libro = Libro(\"El Gran Gatsby\", \"F. Scott Fitzgerald\") # Crear un objeto Libro\nmi_libro.mostrar_informacion() # Mostrar informaci\u00f3n del libro\nmi_libro.prestar() # Prestar el libro\nmi_libro.devolver() # Devolver el libro\n</code></pre> <p>En este ejemplo, la clase Libro abstrae las propiedades o atributos de un libro, como el t\u00edtulo y el autor; y las acciones o m\u00e9todos asociados, como mostrar la informaci\u00f3n del libro, prestarlo y devolverlo.</p> <p>Gracias a esta abstracci\u00f3n, podemos crear objetos individuales basados en esta clase y utilizar sus m\u00e9todos para interactuar con los libros de manera m\u00e1s sencilla.</p> Python<pre><code>class Libro:\n\n   def __init__(self, titulo, autor):\n     self.titulo = titulo\n     self.autor = autor\n\n   def mostrar_informacion(self):\n     print(\"T\u00edtulo:\", self.titulo, \" | \", \"Autor:\", self.autor)\n\n   def prestar(self):\n     print(\"El libro\", self.titulo, \"ha sido prestado.\")\n\n   def devolver(self):\n     print(\"El libro\", self.titulo, \"ha sido devuelto.\")\n</code></pre> <p>En este caso, la clase Libro nos permite abstraer los detalles espec\u00edficos de cada libro y proporcionar una interfaz clara y coherente para interactuar con ellos. </p> <p>Esta abstracci\u00f3n simplifica el manejo y la manipulaci\u00f3n de los libros en nuestro sistema de biblioteca.</p> Python<pre><code>mi_libro = Libro(\"El Gran Gatsby\", \"F. Scott Fitzgerald\") # Crear un objeto Libro\nmi_libro.mostrar_informacion() # Mostrar informaci\u00f3n del libro\nmi_libro.prestar() # Prestar el libro\nmi_libro.devolver() # Devolver el libro\n</code></pre>"},{"location":"unidades/abstraccion/resumen-sobre-abstraccion/","title":"Abstracci\u00f3n: resumen","text":""},{"location":"unidades/abstraccion/resumen-sobre-abstraccion/#resumen","title":"Resumen","text":"<p>En el contexto de la programaci\u00f3n y la inform\u00e1tica, la abstracci\u00f3n se refiere proceso que tiene la capacidad de representar un conjunto de datos, conceptos y elementos complejos del mundo real de manera simplificada, concisa y generalizada, a trav\u00e9s de modelos o estructuras que permiten trabajar con ellos de manera m\u00e1s eficiente y comprensible en un programa.</p> <p>Se aplica a diferentes niveles y paradigmas, como la encapsulaci\u00f3n de funcionalidades, la modularizaci\u00f3n del c\u00f3digo y la representaci\u00f3n abstracta de datos. </p> <p>En la programaci\u00f3n imperativa, la abstracci\u00f3n se logra mediante el uso de funciones, procedimientos y estructuras de datos abstractas. Estas t\u00e9cnicas permiten agrupar instrucciones relacionadas en unidades l\u00f3gicas, simplificar el c\u00f3digo y promover la reutilizaci\u00f3n y modularidad.</p> <p>En la programaci\u00f3n orientada a objetos, la abstracci\u00f3n se logra mediante la creaci\u00f3n de clases, que son plantillas o moldes para crear objetos. Una clase define las propiedades y comportamientos que los objetos de ese tipo pueden tener. Los objetos, a su vez, son instancias concretas de esas clases. </p> <p>Por lo tanto, el objetivo de la abstracci\u00f3n es simplificar la programaci\u00f3n y promover la reutilizaci\u00f3n de c\u00f3digo. Al dividir un problema complejo en elementos abstra\u00eddos m\u00e1s simples, se puede manejar la complejidad de manera m\u00e1s eficiente, organizar el c\u00f3digo de forma modular y permitir cambios sin afectar otras partes de la resoluci\u00f3n de dicho problema.</p> <p>Es un proceso de simplificaci\u00f3n y generalizaci\u00f3n que permite comprender, comunicar y trabajar con ideas y elementos complejos de manera m\u00e1s eficiente</p> <p>La abstracci\u00f3n tiene como objetivo facilitar la comprensi\u00f3n, el mantenimiento y la reutilizaci\u00f3n del c\u00f3digo.</p>"},{"location":"unidades/algoritmos/algoritmos-y-estructura-de-datos/","title":"Algoritmos y estructuras de datos","text":""},{"location":"unidades/algoritmos/algoritmos-y-estructura-de-datos/#como-se-complementan-los-algoritmos-y-las-estructuras-de-datos","title":"\u00bfC\u00f3mo se complementan los algoritmos y las estructuras de datos?","text":"<p>Aprender sobre algoritmos va de la mano con las estructuras de datos. Ambos temas son complementarios y es importante entender c\u00f3mo se relacionan.</p> <p>Info</p> <p>Los algoritmos y las estructuras de datos son conceptos fundamentales en la inform\u00e1tica y la programaci\u00f3n:</p> <pre><code>* Los algoritmos son un conjunto de pasos utilizados para resolver un problema o realizar una tarea espec\u00edfica.\n* Las estructuras de datos se refieren a la forma en que los datos se organizan y almacenan en la memoria.\n</code></pre> <p>Los algoritmos son un conjunto de instrucciones o pasos que un programa sigue para realizar una tarea. </p> <p>Los algoritmos se pueden utilizar para realizar una amplia gama de tareas, desde ordenar datos hasta buscar informaci\u00f3n y realizar c\u00e1lculos complejos. </p> <p>Algunos algoritmos comunes incluyen algoritmos de ordenamiento como bubble sort, quicksort y merge sort, y algoritmos de b\u00fasqueda como la b\u00fasqueda binaria y la b\u00fasqueda lineal.</p> <p>Por otro lado, las estructuras de datos son importantes porque permiten a los programadores almacenar y manipular datos de manera eficiente. </p> <p>Algunas estructuras de datos comunes incluyen matrices, listas enlazadas, pilas, colas, \u00e1rboles y grafos. </p> <p>Cada estructura de datos tiene sus propias ventajas y desventajas, y elegir la adecuada para una tarea en particular puede tener un impacto significativo en la eficiencia y efectividad de un programa.</p> <p>Los algoritmos y las estructuras de datos se utilizan a menudo juntos en la programaci\u00f3n para crear programas eficientes y efectivos. Por ejemplo, un programador </p> <ul> <li>podr\u00eda utilizar un algoritmo de b\u00fasqueda binaria para buscar a trav\u00e9s de una matriz de datos ordenada, o</li> <li>podr\u00eda utilizar una estructura de datos de lista enlazada para almacenar y manipular datos.</li> </ul> <p>Comprender las estructuras de datos y los algoritmos es esencial para cualquier persona interesada en la programaci\u00f3n, ya que se utilizan en una amplia gama de aplicaciones e industrias, desde el desarrollo de software hasta la inteligencia artificial y las finanzas. </p> <p>Info</p> <p>Hay muchos recursos disponibles para aprender sobre las estructuras de datos y los algoritmos, incluyendo libros, cursos en l\u00ednea y comunidades de programaci\u00f3n.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/","title":"Introducci\u00f3n a los algoritmos","text":""},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#introduccion","title":"Introducci\u00f3n","text":"<p>Un algoritmo es una serie de instrucciones o secuencia de pasos bien definidos y ordenados que resuelve un problema o realiza una tarea espec\u00edfica.</p> <p>La aplicaci\u00f3n de algoritmos se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#resolucion-de-un-problema","title":"Resoluci\u00f3n de un problema","text":"<p>Recordemos que la programaci\u00f3n de computadoras equivale a pensar en\u00a0la resoluci\u00f3n de un problema\u00a0como el proceso de tomar alguna entrada (un problema que queremos resolver) y generar alguna salida (la soluci\u00f3n a nuestro problema), resolviendo as\u00ed dicho problema.</p> <p>Ahora que podemos representar entradas y salidas, podemos trabajar en la resoluci\u00f3n de problemas. La caja negra que transforma las entradas en salidas contiene algoritmos, instrucciones paso a paso para resolver problemas:</p> <p></p> <p>\u00a1Â¡Para recordar!!</p> <p>La resoluci\u00f3n de problemas es fundamental para las ciencias de la computaci\u00f3n y la programaci\u00f3n de computadoras.</p> <p>Imagina el problema b\u00e1sico de tratar de localizar un solo nombre en una gu\u00eda telef\u00f3nica impresa. El viejo equivalente a una aplicaci\u00f3n en nuestros tel\u00e9fonos que almacene nuestros contactos, con sus nombres y n\u00fameros de tel\u00e9fono ordenados alfab\u00e9ticamente. \u00bfC\u00f3mo podr\u00edas hacer esto?</p> <p>Un enfoque podr\u00eda ser abrir la gu\u00eda y comenzar desde la primera p\u00e1gina, buscando el nombre una p\u00e1gina a la vez hasta otra p\u00e1gina, hasta llegar a la \u00faltima p\u00e1gina. Este enfoque ser\u00eda correcto, ya que eventualmente encontrar\u00edamos el nombre si est\u00e1 en el libro.</p> <p>Otro enfoque podr\u00eda ser buscar el nombre hojeando la gu\u00eda de a dos p\u00e1ginas a la vez, aunque este enfoque no ser\u00e1 correcto ya que podr\u00edamos saltarnos la p\u00e1gina que tiene el nombre buscado.</p> <p>El enfoque final, y quiz\u00e1s mejor, podr\u00eda ser abrir la gu\u00eda telef\u00f3nica por la mitad y preguntar:</p> <ol> <li> <p>\u201c\u00bfEl nombre que estoy buscando est\u00e1 a la izquierda o a la derecha?\u201d </p> </li> <li> <p>Decidir si el nombre estar\u00e1 en la mitad izquierda o derecha del libro (porque el libro est\u00e1 alfabetizado) y reducir el tama\u00f1o de nuestro problema a la mitad. </p> </li> <li> <p>Luego, repetir este proceso hasta encontrar nuestro nombre, dividiendo el problema por la mitad cada vez.</p> </li> </ol> <p>Info</p> <p>Cada uno de estos enfoques podr\u00eda definirse como algoritmo.\u00a0</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#que-es-un-algoritmo","title":"\u00bfQu\u00e9 es un algoritmo?","text":"<p>D\u00eda a d\u00eda empleamos, de manera frecuente, distintos algoritmos que nos permiten resolver un sinf\u00edn de problemas en todos y cada uno de los aspectos de nuestras vidas. </p> <p>Por ejemplo, un manual de usuario es, en cierta manera, un algoritmo que nos ense\u00f1a c\u00f3mo usar un aparato. Las instrucciones que recibimos para realizar una tarea espec\u00edfica constituyen un algoritmo tambi\u00e9n.</p> <p>Definici\u00f3n</p> <p>Un algoritmo es una secuencia finita de instrucciones l\u00f3gicas, precisas y sin posibilidad de ambig\u00fcedad, ordenadas paso a paso, que permite resolver un problema o realizar una tarea espec\u00edfica de manera eficiente y sistem\u00e1tica. </p> <p>En t\u00e9rminos simples, es una serie de instrucciones que se utilizan en programaci\u00f3n, matem\u00e1ticas, ciencias de la computaci\u00f3n y muchas otras \u00e1reas para resolver un problema de manera eficiente.</p> <p>Est\u00e1n compuestos por una serie finita de instrucciones que procesan los datos de entrada de un problema convirti\u00e9ndolos en informaci\u00f3n de salida como soluci\u00f3n a este. </p> <p>\u00a1Â¡Para recordar!!</p> <p>A trav\u00e9s de un lenguaje de programaci\u00f3n, podemos escribir un programa que represente a un algoritmo determinado, de manera tal que pueda ser ejecutado por una computadora. Pero esto lo veremos m\u00e1s adelante.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#para-que-sirve-un-algoritmo","title":"\u00bfPara qu\u00e9 sirve un algoritmo?","text":"<p>Los algoritmos sirven para resolver problemas o realizar tareas espec\u00edficas de manera eficiente y sistem\u00e1tica. Aqu\u00ed hay algunas \u00e1reas en las que los algoritmos desempe\u00f1an un papel fundamental:</p> <ul> <li> <p>Programaci\u00f3n: en el desarrollo de software, son la base para escribir c\u00f3digo eficiente y solucionar problemas.  Permiten realizar tareas de b\u00fasqueda, ordenaci\u00f3n, filtrado y procesamiento de datos entre otras operaciones computacionales.</p> </li> <li> <p>Ciencias de la computaci\u00f3n: son fundamentales para dise\u00f1ar y analizar estructuras de datos eficientes y algoritmos  avanzados. Ayudan a resolver problemas complejos como la optimizaci\u00f3n, la inteligencia artificial, la criptograf\u00eda, la visi\u00f3n por computadora y el procesamiento de lenguaje natural.</p> </li> <li> <p>Matem\u00e1ticas: juegan un papel importante en la resoluci\u00f3n de problemas matem\u00e1ticos, como encontrar la ra\u00edz de una  ecuaci\u00f3n, calcular el factorial de un n\u00famero, resolver sistemas de ecuaciones lineales, entre otros.</p> </li> <li> <p>Optimizaci\u00f3n: los algoritmos de optimizaci\u00f3n se utilizan para encontrar la mejor soluci\u00f3n posible dentro de un  conjunto de posibles soluciones. Estos algoritmos se aplican en la planificaci\u00f3n de rutas, la asignaci\u00f3n de recursos, la programaci\u00f3n de tareas y otras situaciones en las que se busca maximizar o minimizar un objetivo determinado.</p> </li> <li> <p>B\u00fasqueda de informaci\u00f3n: los algoritmos de b\u00fasqueda se utilizan para encontrar informaci\u00f3n relevante en grandes  conjuntos de datos, como motores de b\u00fasqueda en internet o sistemas de recomendaci\u00f3n en aplicaciones y plataformas.</p> </li> <li> <p>Automatizaci\u00f3n: permiten automatizar tareas repetitivas y realizar c\u00e1lculos complejos de manera r\u00e1pida y precisa.  Se usan en sistemas de control, rob\u00f3tica, procesamiento de se\u00f1ales, an\u00e1lisis de datos, entre otras \u00e1reas de automatizaci\u00f3n.</p> </li> </ul>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#refinamiento-de-un-algoritmo","title":"Refinamiento de un algoritmo","text":"<p>\u00bfC\u00f3mo ser\u00eda el algoritmo para determinar el mayor de tres n\u00fameros enteros?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    Comparar el primer n\u00famero con el segundo, deduciendo cu\u00e1l es el mayor n\u00famero.\n    Comparar el mayor n\u00famero anterior con el tercer n\u00famero y deducir cu\u00e1l es el mayor n\u00famero. \n    Este \u00faltimo mayor n\u00famero ser\u00e1 el mayor n\u00famero de los tres.\nFin\n</code></pre> <p>As\u00ed como est\u00e1 planteado, este algoritmo es muy dif\u00edcil de implementar como programa, puesto que las instrucciones son muy generales y seguramente no existan comandos en ning\u00fan lenguaje que las representen.</p> <p>Por lo tanto, ser\u00e1 necesario descomponer el algoritmo en instrucciones m\u00e1s simples. Este procedimiento se denomina refinamiento del algoritmo.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#atomicidad-de-las-instrucciones-indivisibles-o-de-un-conjunto-de-instrucciones-como-un-todo","title":"Atomicidad de las instrucciones indivisibles o de un conjunto de instrucciones como un todo","text":"<p>En inform\u00e1tica, se denomina instrucci\u00f3n at\u00f3mica o instrucci\u00f3n particular \u00fanica a un conjunto de instrucciones que al ser ejecutadas son vistas por el resto del sistema como una sola instrucci\u00f3n indivisible.</p> <p>Para cumplir esto, se requieren dos condiciones:</p> <ol> <li> <p>Ning\u00fan otro proceso puede tomar conocimiento de los cambios realizados hasta que se completen todas las instrucciones del conjunto</p> </li> <li> <p>Si no puede realizarse al menos una de las instrucciones del conjunto, el estado del sistema debe retrotraerse al inicio de las operaciones, tal como si ninguna hubiese sido ejecutada</p> </li> </ol> <p>Para el resto del sistema no es accesible ning\u00fan estado intermedio durante la ejecuci\u00f3n del conjunto de operaciones.</p> <p>Teniendo esto en mente, deberemos seguir refinando nuestro algoritmo hasta cumplir con estas dos condiciones.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#que-es-la-eficiencia-de-un-algoritmo","title":"\u00bfQu\u00e9 es la eficiencia de un algoritmo?","text":"<p>La eficiencia de un algoritmo se refiere a la cantidad de recursos (tiempo y espacio) que requiere para ejecutarse. Se utilizan medidas como la complejidad temporal (cu\u00e1nto tiempo tarda en ejecutarse) y la complejidad espacial (cu\u00e1nta memoria utiliza) para analizar la eficiencia de un algoritmo. La teor\u00eda de la complejidad computacional clasifica los algoritmos en funci\u00f3n de su eficiencia relativa.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#eficiencia-de-resolucion-y-velocidad-notacion-de-o-grande-big-o","title":"Eficiencia de resoluci\u00f3n y velocidad: notaci\u00f3n de O grande (Big-O)","text":"<p>Podemos representar la eficiencia y velocidad de resoluci\u00f3n de cada uno de estos algoritmos de la siguiente manera en lo que se denomina\u00a0notaci\u00f3n de O grande (Big-O):</p> <p></p> <p>El primer algoritmo, que busca una p\u00e1gina a la vez, y representado con la l\u00ednea roja, tiene una Big-O de n: el tiempo para resolver aumenta linealmente a medida que aumenta el tama\u00f1o del problema. n es un n\u00famero que representa el tama\u00f1o del problema, por lo que con n p\u00e1ginas en nuestra gu\u00eda telef\u00f3nica, tenemos que dar hasta n pasos para encontrar un nombre. Por ejemplo, si hay 100 nombres en la gu\u00eda telef\u00f3nica, podr\u00eda tomar hasta 100 intentos para encontrar el nombre correcto. </p> <p>El segundo algoritmo, que busca dos p\u00e1ginas a la vez, y representado con la l\u00ednea amarilla, tiene una Big-O de n/2: la pendiente es menos pronunciada, pero sigue siendo lineal. Ahora, solo necesitamos (aproximadamente) n / 2 pasos, ya que pasamos dos p\u00e1ginas a la vez (el doble de r\u00e1pido).</p> <p>El algoritmo final, que divide la gu\u00eda telef\u00f3nica por la mitad cada vez, y representado con la l\u00ednea verde, tiene una Big-O de log<sub>2</sub> n: con una relaci\u00f3n fundamentalmente diferente entre el tama\u00f1o del problema y el tiempo para resolverlo, si la gu\u00eda telef\u00f3nica duplicara su tama\u00f1o de (por ejemplo, de 1000 a 2000 p\u00e1ginas), solo necesitar\u00edamos un paso m\u00e1s para encontrar el nombre y resolver el problema.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#complejidad-algoritmica-analisis-de-la-eficiencia-de-los-algoritmos","title":"Complejidad algor\u00edtmica: An\u00e1lisis de la eficiencia de los algoritmos","text":"<p>La complejidad algor\u00edtmica se refiere al estudio de cu\u00e1ntos recursos computacionales, como tiempo y espacio, requiere un algoritmo para resolver un problema. Es decir que se refiere al crecimiento de sus requisitos de tiempo y espacio a medida que el tama\u00f1o del problema aumenta. Los an\u00e1lisis de complejidad permiten comparar y clasificar algoritmos seg\u00fan su eficiencia.</p> <p>Por lo tanto, es importante evaluar la eficiencia de un algoritmo para determinar cu\u00e1nto tiempo y recursos requerir\u00e1 su ejecuci\u00f3n. Dos aspectos clave son:</p> <ol> <li> <p>Complejidad temporal: determina c\u00f3mo aumenta el tiempo de ejecuci\u00f3n a medida que crece el tama\u00f1o de la entrada.</p> </li> <li> <p>Complejidad espacial: estima la cantidad de memoria requerida por el algoritmo en funci\u00f3n del tama\u00f1o de la entrada.</p> </li> </ol> <p>Otras clases de complejidad son la complejidad constante, la complejidad logar\u00edtmica, la complejidad lineal, la complejidad polin\u00f3mica y la complejidad exponencial, entre otras. El an\u00e1lisis de complejidad permite evaluar el rendimiento de un algoritmo en diferentes escenarios.</p>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#caracteristicas-de-un-buen-algoritmo","title":"Caracter\u00edsticas de un buen algoritmo","text":"<ul> <li> <p>Precisi\u00f3n: Debe ser claro y no ambiguo, indicando el orden de realizaci\u00f3n de cada instrucci\u00f3n. Si se ejecuta m\u00e1s de una vez de exacta manera, el resultado obtenido debe ser siempre el mismo.</p> </li> <li> <p>Eficiencia: Debe resolver el problema de manera efectiva, utilizando el menor n\u00famero de pasos y la menor cantidad de recursos posibles, como tiempo y memoria.</p> </li> <li> <p>Finitud: Debe tener un n\u00famero finito de pasos, lo que significa que debe iniciar y terminar en un momento determinado.</p> </li> <li> <p>Generalidad: Debe ser aplicable a diferentes situaciones o problemas similares.</p> </li> </ul>"},{"location":"unidades/algoritmos/introduccion-a-los-algoritmos/#que-es-la-correccion-de-un-algoritmo","title":"\u00bfQu\u00e9 es la correcci\u00f3n de un algoritmo?","text":"<p>Un algoritmo se considera correcto si produce el resultado esperado para todos los casos de entrada v\u00e1lidos.  La teor\u00eda de la verificaci\u00f3n y validaci\u00f3n de algoritmos se ocupa de demostrar la correcci\u00f3n de los algoritmos mediante t\u00e9cnicas formales, como demostraciones matem\u00e1ticas y pruebas exhaustivas.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/","title":"Resoluci\u00f3n de algoritmos cotidianos","text":""},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-ordenar-una-lista-de-numeros","title":"C\u00f3mo ordenar una lista de n\u00fameros","text":"<p>Supongamos que tenemos una lista de n\u00fameros y queremos ordenarla de forma ascendente utilizando el algoritmo de burbuja. Aqu\u00ed est\u00e1 el pseudoc\u00f3digo del algoritmo:</p> Pseudoc\u00f3digo<pre><code>Inicio\n    1. Leer la lista de n\u00fameros.\n    2. Establecer una variable \"cambio\" en verdadero.\n    3. Mientras cambio sea verdadero, hacer:\n    4. Establecer cambio en falso.\n    5. Para cada par de elementos adyacentes en la lista, hacer:\n        6. Si los elementos est\u00e1n en el orden incorrecto, intercambiarlos.\n        7. Establecer cambio en verdadero.\n    8. Imprimir la lista ordenada.\nFin\n</code></pre> <p>Este algoritmo recorre repetidamente la lista de n\u00fameros, comparando los elementos adyacentes y realizando intercambios si es necesario. Contin\u00faa haciendo esto hasta que no se realicen m\u00e1s intercambios, lo que indica que la lista est\u00e1 ordenada.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-cambiar-la-rueda-de-un-auto","title":"C\u00f3mo cambiar la rueda de un auto","text":"<p>Existen algoritmos, que los ejecutamos casi sin darnos cuenta, que nos ayudan a resolver problemas diarios.  Por ejemplo, el algoritmo para cambiar la rueda de un choche:</p> Pseudoc\u00f3digo<pre><code>Inicio\n    1. Agarrar el gato del auto\n    2. Levantar el coche con el gato\n    3. Aflojar tornillos de la rueda\n    4. Sacar los tornillos de la rueda\n    5. Quitar la rueda\n    6. Agarrar la rueda de auxilio\n    7. Poner la rueda de auxilio\n    8. Poner los tornillos en la rueda de auxilio\n    9. Ajustar los tornillos en la rueda de auxilio \n    10. Bajar el coche con el gato\n    11. Sacar el gato\n    12. Guardar el gato \n    13. Guardar la rueda sacada\nFin\n</code></pre> <p>Para resolver</p> <p>\u00bfDe qu\u00e9 manera podemos mejorar este algoritmo en t\u00e9rminos de precisi\u00f3n, eficiencia y generalidad?</p> <p>Asumimos que, as\u00ed como est\u00e1 planteado, ya cumple con la caracter\u00edstica de ser finito.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-aceptar-o-rechazar-el-pedido-de-compra-de-un-cliente","title":"C\u00f3mo aceptar o rechazar el pedido de compra de un cliente","text":"<p>Veamos otro ejemplo: \u00bfqu\u00e9 pasa cuando un cliente realiza un pedido de compra a una f\u00e1brica? </p> <p>La f\u00e1brica examina en su banco de datos la cuenta del cliente. Si el cliente tiene cr\u00e9dito entonces la f\u00e1brica acepta el pedido, en caso contrario rechaza el pedido.</p> Pseudoc\u00f3digo<pre><code>Inicio\n    1. Recibir el pedido\n    2. Examinar la cuenta del cliente\n    3. Si el cliente tiene cr\u00e9dito entonces\n        4. Aceptar el pedido\n    5. Si no\n        6. Rechazar el pedido\n    7. Fin Si\nFin\n</code></pre> <p>Para resolver</p> <p>\u00bfDe qu\u00e9 manera podemos mejorar este algoritmo en t\u00e9rminos de precisi\u00f3n, eficiencia y generalidad?</p> <p>Asumimos que, as\u00ed como est\u00e1 planteado, ya cumple con la caracter\u00edstica de ser finito.</p>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-lavarse-los-dientes","title":"C\u00f3mo lavarse los dientes","text":"<p>Para resolver</p> <p>\u00bfC\u00f3mo ser\u00eda el algoritmo que ejecutamos cada vez que nos lavamos los dientes?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    ...\n    lavar los dientes\n    ...\nFin\n</code></pre>"},{"location":"unidades/algoritmos/resolucion-de-algoritmos-cotidianos/#como-tomar-un-cafe","title":"C\u00f3mo tomar un caf\u00e9","text":"<p>Para resolver</p> <p>\u00bfC\u00f3mo ser\u00eda el algoritmo que ejecutamos cada vez que queremos tomar un caf\u00e9?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    ...\n    tomar el caf\u00e9\n    ...\nFin\n</code></pre>"},{"location":"unidades/algoritmos/resumen-y-recursos-sobre-algoritmos/","title":"Resumen y recursos","text":""},{"location":"unidades/algoritmos/resumen-y-recursos-sobre-algoritmos/#resumen","title":"Resumen","text":"<p>En resumen, los algoritmos son herramientas esenciales para resolver problemas, optimizar procesos y realizar tareas computacionales de manera eficiente. Su aplicaci\u00f3n se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p> <p>\u00a1Â¡Para recordar!!</p> <p>Un algoritmo es una secuencia o conjunto finito, preciso y ordenado paso a paso de instrucciones definidas que se utiliza para resolver un problema o realizar una tarea espec\u00edfica de manera eficiente y sistem\u00e1tica. </p> <p>Existen muchos algoritmos, desde los m\u00e1s simples hasta los m\u00e1s avanzados, que pueden emplearse para resolver diferentes problemas o realizar tareas espec\u00edficas.</p> <p>La mejor manera de aprender algoritmos es practicar. El aprendizaje de los algoritmos es un proceso continuo y gradual, por lo cual requiere tiempo y pr\u00e1ctica. Intenta resolver problemas algor\u00edtmicos por tu cuenta y trabaja en proyectos que requieran implementar algoritmos espec\u00edficos.</p> <p>No te desanimes si al principio encuentras los conceptos dif\u00edciles. Con el tiempo y la pr\u00e1ctica, podr\u00e1s mejorar tus habilidades algor\u00edtmicas A medida que adquieras m\u00e1s experiencia, podr\u00e1s resolver problemas m\u00e1s complejos y optimizar tus soluciones.</p> <p>\u00a1Buena suerte en tu camino de aprendizaje!</p>"},{"location":"unidades/algoritmos/resumen-y-recursos-sobre-algoritmos/#recursos-para-aprender-algoritmos","title":"Recursos para aprender algoritmos","text":"<ul> <li> <p>Libros de algoritmos: existe bibliograf\u00eda excelente sobre algoritmos que puedes utilizar para aprender m\u00e1s. Algunos libros populares incluyen \"Introduction to Algorithms\" de Cormen, Leiserson, Rivest y Stein, y \"Algorithms, Part I\" y \"Algorithms, Part II\" de Sedgewick y Wayne.</p> </li> <li> <p>Cursos en l\u00ednea: plataformas educativas como Coursera, edX y Udemy ofrecen cursos en l\u00ednea gratuitos y de pago sobre algoritmos y estructuras de datos. Algunos ejemplos son \"Algorithms, Part I\" de Princeton University en Coursera o \"Algorithms and Data Structures\" en edX.</p> </li> <li> <p>Sitios web y tutoriales en l\u00ednea: hay muchos recursos disponibles en l\u00ednea, como tutoriales, ejercicios y videos, que pueden ayudarte a aprender algoritmos paso a paso.</p> </li> <li> <p>Participaci\u00f3n en desaf\u00edos de programaci\u00f3n: Plataformas como HackerRank y LeetCode ofrecen desaf\u00edos de programaci\u00f3n en l\u00ednea donde puedes poner a prueba tus habilidades algor\u00edtmicas y resolver problemas de programaci\u00f3n.</p> </li> </ul>"},{"location":"unidades/algoritmos/tipos-de-algoritmos/","title":"Tipos de algoritmos","text":""},{"location":"unidades/algoritmos/tipos-de-algoritmos/#tipos-de-algoritmos","title":"Tipos de algoritmos","text":"<ol> <li>Algoritmos de ordenaci\u00f3n: ordenan elementos en una lista en funci\u00f3n de ciertos criterios, como el orden ascendente o descendente.<ul> <li>Ordenamiento por selecci\u00f3n: encuentra el elemento m\u00e1s peque\u00f1o en cada iteraci\u00f3n y lo coloca en la posici\u00f3n correcta.</li> <li>Ordenamiento por inserci\u00f3n: construye una sub lista ordenada, insertando elementos de la lista original en la posici\u00f3n adecuada.</li> <li>Ordenamiento por burbuja: compara elementos adyacentes y los intercambia si est\u00e1n en el orden incorrecto.</li> <li>Ordenamiento r\u00e1pido (Quicksort): divide la lista en subgrupos alrededor de un pivote y luego los ordena de forma recursiva.</li> <li>Ordenamiento por mezcla (Mergesort): divide la lista por la mitad, ordena cada mitad por separado y luego fusiona las mitades ordenadas.</li> </ul> </li> <li>Algoritmos de b\u00fasqueda: encuentran la posici\u00f3n de un elemento en una lista o determinan si est\u00e1 presente.<ul> <li>B\u00fasqueda secuencial: recorre secuencialmente una lista de elementos para encontrar uno en particular.</li> <li>B\u00fasqueda binaria: divide repetidamente una lista ordenada a la mitad hasta encontrar el elemento deseado.</li> </ul> </li> <li>Algoritmos recursivos: se llaman a s\u00ed mismos repetidamente para resolver un problema reduciendo su tama\u00f1o en cada llamada.<ul> <li>Factorial: calcula el factorial de un n\u00famero utilizando una funci\u00f3n que se llama a s\u00ed misma.</li> <li>Torres de Hanoi: resuelve el problema de mover una torre de discos de un poste a otro, utilizando la recursividad para encontrar el camino m\u00e1s corto.</li> </ul> </li> <li>Algoritmos de gr\u00e1ficos: resuelven problemas relacionados con estructuras de datos de gr\u00e1ficos, como encontrar el camino m\u00e1s corto entre dos nodos.<ul> <li>B\u00fasqueda en amplitud (BFS): explora los nodos en niveles, comenzando desde un nodo inicial.</li> <li>B\u00fasqueda en profundidad (DFS): explora los nodos tan lejos como sea posible antes de retroceder.</li> </ul> </li> <li>Algoritmos de backtracking: exploran todas las soluciones posibles mediante una b\u00fasqueda sistem\u00e1tica y retroceden cuando encuentran una soluci\u00f3n no v\u00e1lida.<ul> <li>Problema de las N reinas (N-Queens problem): encuentra todas las formas posibles de colocar N reinas en un tablero de ajedrez sin que se ataquen mutuamente.</li> </ul> </li> <li>Algoritmos de hashing: es una funci\u00f3n matem\u00e1tica que toma un \"clave\" y la transforma en un valor hash, que es una cadena de caracteres de longitud fija. Su prop\u00f3sito principal es generar un resumen \u00fanico y representativo de la entrada, de manera que cualquier cambio en la entrada resulte en un valor de hash completamente diferente.<ul> <li>Tablas hash: Utilizan una funci\u00f3n hash para asignar claves a posiciones de almacenamiento y permiten una b\u00fasqueda y recuperaci\u00f3n eficientes.</li> </ul> </li> <li>Algoritmos de programaci\u00f3n din\u00e1mica: dividen un problema en subproblemas m\u00e1s peque\u00f1os, resolviendo cada subproblema solo una vez y almacenando su resultado para su uso posterior.<ul> <li>Fibonacci: calcula los n\u00fameros de Fibonacci utilizando una tabla de memorizaci\u00f3n para evitar c\u00e1lculos repetitivos.</li> <li>Problema de la mochila (Knapsack problem): resuelve el problema de c\u00f3mo llenar una mochila con objetos de diferentes pesos y valores para maximizar el valor total.</li> </ul> </li> </ol>"},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/","title":"Caso practico resolucion de problema mediante diagrama de flujo","text":""},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/#problema-propuesto","title":"Problema propuesto","text":"<p>Se cuenta con las notas del trimestre 1 (t1), trimestre 2 (t2) y trimestre 3 (t3) de un alumno.</p> <p>Se sabe que el promedio final ( pf ) se calcula con la f\u00f3rmula: pf = (t1 + t2 + 2 * t3) / 4</p> <p>Si el alumno cumple con la siguiente condici\u00f3n: t3 &gt;= 6 y pf &gt;= 6 tiene opci\u00f3n a rendir un examen sustitutorio ( ES )</p> <p>Escriba un algoritmo que reciba las notas y luego muestre un mensaje indicando si el alumno puede rendir o no el examen sustitutorio.</p> <p>En el caso que ya no pueda rendir el examen sustitutorio, debe mostrar solamente el promedio final.</p>"},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/#resolucion","title":"Resoluci\u00f3n","text":"An\u00e1lisis<pre><code>Datos de entrada: \n    t1, t2, t3\nSalida: \n    si (t3 &gt;= 6 y pf &gt;= 6) mostrar que puede rendir ES;\n    si no, mostrar que no puede rendir ES y mostrar la nota final pf\n</code></pre> Algoritmo<pre><code>Inicio\n   Ingresar las notas del alumno en t1, t2, t3\n   Calcular pf con la siguiente f\u00f3rmula: (t1 + t2 + 2 * t3) / 4\n   Si cumple la condici\u00f3n t3 &gt;= 6 y pf &gt;= 6 entonces\n      Mostrar el mensaje \"Puede rendir el ES\"\n   Si no cumple la condici\u00f3n entonces \n      Mostrar el mensaje \"No puede rendir es\" y mostrar pf\nFin\n</code></pre> <p>Si la l\u00f3gica del algoritmo es correcta y el diagrama de flujo es v\u00e1lido, el siguiente paso ser\u00e1 transcribir ambos dise\u00f1os en pseudoc\u00f3digo.</p> <p>El pseudoc\u00f3digo es una versi\u00f3n legible, en lenguaje humano natural, de un algoritmo. Es decir, que es una representaci\u00f3n de dicho algoritmo en idioma, ya con especificaciones de implementaci\u00f3n como programa pero sin ser un lenguaje de programaci\u00f3n espec\u00edfico a\u00fan.</p> <p>Estudiaremos como se utiliza el pseudoc\u00f3digo dentro del proceso de creaci\u00f3n de software, m\u00e1s adelante.</p>"},{"location":"unidades/diagramas-de-flujo/caso-practico-resolucion-de-problema-mediante-diagrama-de-flujo/#para-tener-en-cuenta-siempre","title":"Â¡Para recordar! siempre","text":""},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/","title":"Diagramas de flujo","text":""},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#introduccion","title":"Introducci\u00f3n","text":"<p>Son una notaci\u00f3n para implementar algoritmos, basada en la utilizaci\u00f3n de s\u00edmbolos gr\u00e1ficos denominados bloques, donde se escriben las instrucciones que tiene que realizar el algoritmo.</p> <p>Estos bloques est\u00e1n conectados entre s\u00ed por l\u00edneas indicando el orden de ejecuci\u00f3n de las instrucciones.</p>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#que-es-un-diagrama-de-flujo","title":"\u00bfQu\u00e9 es un diagrama de flujo?","text":"<p>Un diagrama de flujo es una notaci\u00f3n gr\u00e1fica para implementar algoritmos.</p> <p>Se basa en el uso de s\u00edmbolos gr\u00e1ficos denominados bloques, donde se escriben las instrucciones que tiene que realizar el programa. Es decir, que cada instrucci\u00f3n es representada por un s\u00edmbolo diferente que contiene una breve descripci\u00f3n de lo que hace. </p> <p>Estos bloques est\u00e1n conectados entre s\u00ed por l\u00edneas, indicando el orden de ejecuci\u00f3n las instrucciones.</p> <p>En todo diagrama de flujo siempre habr\u00e1 un solo bloque de inicio y otro de fin.</p> <p></p>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#caracteristicas-de-los-diagramas-de-flujo","title":"Caracter\u00edsticas de los diagramas de flujo","text":"<ul> <li>Cumple un rol vital en la concepci\u00f3n de la soluci\u00f3n a un problema.</li> <li>Es extremadamente \u00fatil en la comprensi\u00f3n de la l\u00f3gica de problemas dif\u00edciles y extensos.</li> <li>Debe ser una representaci\u00f3n diagram\u00e1tica que ilustre el flujo de instrucciones necesarias para solucionar el problema.</li> <li>Debe ser dibujado en la etapa anterior al desarrollo del pseudoc\u00f3digo.</li> <li>Debe facilitar la comunicaci\u00f3n entre el dise\u00f1ador de la soluci\u00f3n y los programadores del c\u00f3digo.</li> <li>Es obligatorio realizarlo para incluirlo en cualquier documentaci\u00f3n de desarrollo.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#limitaciones-de-los-diagramas-de-flujo","title":"Limitaciones de los diagramas de flujo","text":"<ul> <li>L\u00f3gica compleja: en algunos casos, la l\u00f3gica de se vuelve complicada y los diagramas se tornan complejos y confusos.</li> <li>Alteraciones y modificaciones: si fuera necesario alterar alguna parte del diagrama, en casi todos los casos ser\u00eda necesario redibujarlos completamente (aunque si el trabajo se realizara con un software, ser\u00eda menos tedioso, pero a\u00fan as\u00ed, requerir\u00eda de tiempo y mucha atenci\u00f3n para no romper la l\u00f3gica del algoritmo).</li> <li>La esencia de \u201clo que est\u00e1 hecho\u201d puede perderse f\u00e1cilmente en los detalles t\u00e9cnicos de \u201c\u00bfc\u00f3mo est\u00e1 hecho?\u201d: se debe evitar caer en la trampa de preocuparse demasiado por los detalles t\u00e9cnicos en la etapa de dise\u00f1o del algoritmo, ya que esto podr\u00eda conducir a una p\u00e9rdida de perspectiva del panorama general y hacer que el proceso de dise\u00f1o sea m\u00e1s complicado de lo necesario.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#ventajas-del-uso-de-diagramas-de-flujo","title":"Ventajas del uso de diagramas de flujo","text":"<ul> <li>Comunicaci\u00f3n: los diagramas son la mejor forma de comunicar la l\u00f3gica de un sistema a todo el equipo de desarrollo.</li> <li>An\u00e1lisis efectivo: con la ayuda de los diagramas, el problema puede ser analizado de manera m\u00e1s efectiva.</li> <li>Documentaci\u00f3n adecuada: sirven como herramienta de comunicaci\u00f3n en la documentaci\u00f3n de un programa.</li> <li>Codificaci\u00f3n eficiente: los diagramas act\u00faan como gu\u00edas durante el proceso de an\u00e1lisis y dise\u00f1o de c\u00f3digo.</li> <li>Correcciones precisas: ayudan a realizar correcciones m\u00e1s precisas de los programas cuando fallan o son testeados.</li> <li>Mantenimiento eficiente del programa: el mantenimiento de un programa que se encuentra operando resulta m\u00e1s f\u00e1cil con la ayuda de los diagramas, ayudando al programador a poner sus esfuerzos de manera m\u00e1s eficiente sobre cada parte del programa.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#reglas-para-la-realizacion-de-diagramas-de-flujo","title":"Reglas para la realizaci\u00f3n de diagramas de flujo","text":"<p>Terminar de armar esta secci\u00f3n</p> <ul> <li>El diagrama de flujo debe ser claro, simple y f\u00e1cil de leer. No debe existir lugar para las ambig\u00fcedades.</li> <li>La direcci\u00f3n usual del flujo de procedimientos debe ser de izquierda a derecha y de arriba hacia abajo.</li> <li>Cada instrucci\u00f3n necesaria en un diagrama de flujo debe ser listada en un orden l\u00f3gico. Lo mismo para bloques de sentencias, estructuras de control y dem\u00e1s partes que compongan al algoritmo.</li> <li>S\u00f3lo puede haber una l\u00ednea de entrada de flujo y una l\u00ednea de salida de flujo de cada bloque. En caso de ser necesario, es posible unificar las l\u00edneas de entrada en una sola antes de ingresar al bloque.</li> <li>S\u00f3lo una l\u00ednea de flujo puede ingresar a un s\u00edmbolo de decisi\u00f3n, pero puede salir una l\u00ednea por cada respuesta posible.</li> <li>S\u00f3lo puede utilizarse una l\u00ednea de flujo en conjunto con un s\u00edmbolo Terminal.</li> <li>Las l\u00edneas de flujo deben ser verticales u horizontales. Salvo que un s\u00edmbolo determine lo contrario (por ejemplo, los condicionales), cada l\u00ednea de flujo debe ingresar a un s\u00edmbolo por su parte superior.</li> <li>Escriba sint\u00e1cticamente dentro de cada s\u00edmbolo. Si fuera necesaria mayor descripci\u00f3n, emplee referencias.</li> <li>Si el diagrama se torna complejo, es mejor utilizar conector para eliminar l\u00edneas de flujo. Evite las intersecciones de l\u00edneas de flujo lo m\u00e1s que pueda.</li> <li>Aseg\u00farese que el diagrama de flujo posea un Inicio y un Fin l\u00f3gicos.</li> <li>Es \u00fatil testear la validez del diagrama, recorri\u00e9ndolo con valores simples de prueba.</li> </ul>"},{"location":"unidades/diagramas-de-flujo/conceptos-basicos-de-los-diagramas-de-flujo/#estructuras-de-control","title":"Estructuras de control","text":"<p>Un algoritmo debe ser creado empleando estructuras de control que definen el flujo de ejecuci\u00f3n de las instrucciones a lo largo del programa.</p> <p>Estas instrucciones se dividen en tres categor\u00edas generales:</p> <ul> <li> <p>Estructura de control secuencial</p> </li> <li> <p>Estructura de control selectiva</p> <ul> <li>Selectiva (o alternativa) simple </li> <li>Selectiva (o alternativa) doble</li> <li>Selectiva (o alternativa) doble anidada</li> <li>Selectiva (o alternativa) m\u00faltiple</li> </ul> </li> <li> <p>Estructura de control iterativa (repetitiva)</p> <ul> <li>Repetir Mientras (While) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Hasta (Until) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Para\u2026Siguiente (For\u2026Next)</li> </ul> </li> </ul> <p>Analizaremos estas estructuras m\u00e1s adelante cuando veamos la simbolog\u00eda de cada una.</p>"},{"location":"unidades/diagramas-de-flujo/resumen-de-diagramas-de-flujo/","title":"Resumen de diagramas de flujo","text":""},{"location":"unidades/diagramas-de-flujo/resumen-de-diagramas-de-flujo/#resumen","title":"Resumen","text":"<p>Completar</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/","title":"Simbolog\u00eda de los diagramas de flujo","text":""},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#lineas-de-flujo","title":"L\u00edneas de flujo","text":"<p>Cada l\u00ednea de flujo se representa con una l\u00ednea recta con una sola flecha de sentido que permite conectar los bloques del diagrama. Esta flecha indica la secuencia en la que se van a ejecutar las acciones.</p> <p></p> <p>Consejos \u00fatiles</p> <p>Las l\u00edneas de flujo, siempre que se pueda, deben ir de arriba hacia abajo, de izquierda a derecha.</p> <p>Su trazado debe ser siempre en forma recta.</p> <p>Se debe evitar el cruce de l\u00edneas de flujo para facilitar la legibilidad del diagrama. En caso de no ser posible, se deber\u00e1 optar por alguna soluci\u00f3n que no entorpezca el diagrama.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#inicio-y-fin","title":"Inicio y Fin","text":"<p>Todo algoritmo y por lo tanto, todo diagrama de flujo tiene un inicio y un fin. La silueta del bloque es la misma y se coloca la palabra INICIO o FIN seg\u00fan corresponda. </p> <p></p> <p>Consejos \u00fatiles</p> <p>Del bloque de INICIO solo puede salir una l\u00ednea de flujo.</p> <p>Al bloque de FIN solo puede llegar una l\u00ednea de flujo.</p> <p>Puedes utilizar el bloque completo o su versi\u00f3n abreviada.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#instruccion-o-sentencia-tambien-conocido-como-proceso-tarea-accion-o-paso","title":"Instrucci\u00f3n o Sentencia (tambi\u00e9n conocido como proceso, tarea, acci\u00f3n o paso):","text":"<p>En este bloque se escribe la instrucci\u00f3n que debe realizar el programa. Si son varias, se escriben una debajo de la otra, sin olvidarse que se ejecutan, una a una, en forma secuencial seg\u00fan el orden en que fueron escritas.</p> <p></p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#comentarios","title":"Comentarios","text":"<p>Los comentarios son elementos del algoritmo que sirven como referencia del c\u00f3digo fuente. Generalmente comentan que es lo que hace una parte del c\u00f3digo o sirven de informaci\u00f3n para futuras intervenciones de los programadores. </p> <p></p> <p>Consejos \u00fatiles</p> <p>Un comentario es una aclaraci\u00f3n para comprender mejor el c\u00f3digo del programa.</p> <p>No forma parte del c\u00f3digo y por lo tanto no se ejecuta.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#entrada-y-salida","title":"Entrada y Salida","text":"<p>Estos bloques representan acciones de entrada desde un teclado, por ejemplo, o de salida hacia una pantalla. </p> <p>Es decir, si debemos ejecutar una acci\u00f3n que consiste en leer un dato que se ingresa mediante el teclado de una PC y almacenarlo en la variable de nombre \u201ca\u201d, entonces dicha acci\u00f3n se describe dentro de este bloque como \u201cleer a\u201d.</p> <p></p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#conectores","title":"Conectores","text":"<p>Falta completar</p> <p>Permiten unir diagramas de flujo cuando \u00e9stos no caben en una misma columna de la hoja por completo. Es decir, cuando debemos, por cuestiones de espacio en la hoja, fragmentar el programa entonces utilizamos estos bloques para indicar los puntos de uni\u00f3n. Cada par de puntos que se deben unir llevar\u00e1n dentro de este bloque la misma referencia.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-secuencial","title":"Estructura secuencial","text":"<p>La estructura secuencial es aquella en la que una instrucci\u00f3n sigue a otra en secuencia. </p> <p>Las instrucciones se suceden de tal modo que la salida de una es la entrada de la siguiente y as\u00ed sucesivamente hasta el final de la estructura secuencial o, en su defecto, el final del del programa. </p> <p>Planteado de este modo, la estructura secuencial tiene una sola entrada y una sola salida. </p> <p></p> <p>Consejos \u00fatiles</p> <p>Las instrucciones del programa se ejecutan en el orden que se encuentran escritas.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#bloque-de-sentencias","title":"Bloque de sentencias","text":"<p>Consejos \u00fatiles</p> <p>Para simplificar la lectura de un diagrama, se puede representar un conjunto de sentencias (cualquier sea su estructura) como un \u00fanico bloque identificado que, opcionalmente, puede tener una referencia hacia otro diagrama de flujo que lo detalle.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-simple","title":"Estructura selectiva (o alternativa) simple","text":"<p>En la estructura selectiva simple, la ejecuci\u00f3n de las instrucciones depende de la validaci\u00f3n de una expresi\u00f3n condicional. En caso de no ser validada la expresi\u00f3n, se pasan por alto las instrucciones en cuesti\u00f3n y el control de flujo contin\u00faa con el resto del programa.</p> <p></p> <p>\u00a1Â¡Para recordar!!</p> <p>El bloque de sentencias se ejecuta solo si la expresi\u00f3n condicional es verdadera.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-doble","title":"Estructura selectiva (o alternativa) doble","text":"<p>En la estructura selectiva doble, la ejecuci\u00f3n de determinadas instrucciones depende de la validaci\u00f3n, o no, de una expresi\u00f3n condicional. Si la expresi\u00f3n se valida, se ejecutan unas instrucciones. Caso contrario, se ejecutan otras instrucciones. Al finalizar, en ambos casos, el control de flujo contin\u00faa con el resto del programa.</p> <p></p> <p>\u00a1Â¡Para recordar!!</p> <p>Si la expresi\u00f3n condicional es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional es falsa, se ejecuta el bloque de sentencias falso.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-doble-anidada","title":"Estructura selectiva (o alternativa) doble anidada","text":"<p>Corregir que el else puede ser vacio</p> <p>El funcionamiento de la estructura selectiva doble anidada es igual que el de la estructura selectiva doble.</p> <p></p> <p>Si la expresi\u00f3n condicional 1 es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional 1 es falsa, se eval\u00faa la expresi\u00f3n condicional 2.</p> <p>Si la expresi\u00f3n condicional 2 es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional 2 es falsa, se ejecuta el bloque de sentencias falso.</p> <p>\u00a1Â¡Para recordar!!</p> <p>Esta estructura puede contener tantas estructuras selectivas como sea necesario. </p> <p>La regla de c\u00e1lculo para saber la cantidad de estructuras selectivas doble necesarias es:</p> <p>CANTIDAD DE ESTRUCTURAS = CANTIDAD DE BLOQUES DE SENTENCIAS DISTINTOS \u2013 1</p> <p>Y recuerda que el \u00faltimo bloque de sentencias siempre se ejecuta por el camino falso de la \u00faltima estructura selectiva doble.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-selectiva-o-alternativa-multiple","title":"Estructura selectiva (o alternativa) m\u00faltiple","text":"<p>La estructura selectiva m\u00faltiple eval\u00faa una expresi\u00f3n condicional que puede tomar \"n\" valores. Seg\u00fan este valor, se ejecuta el bloque de sentencias correspondiente.</p> <p></p> <p>\u00a1Â¡Para recordar!!</p> <p>Esta estructura puede contener tantos casos como sean necesarios. </p> <p>Puede caber la posibilidad que exista un bloque de sentencias por defecto (default) que se ejecute en el caso que la expresi\u00f3n condicional no valide ninguno de los casos existentes. </p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la entrada","text":"<p>La estructura iterativa Mientras (While) con la condici\u00f3n a la entrada, primero, eval\u00faa la expresi\u00f3n condicional antes de ejecutar por primera vez el bloque de sentencias incluido en dicha estructura. </p> <p>Si la expresi\u00f3n es v\u00e1lida (verdadero), se ejecuta el bloque de sentencias una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. </p> <p>Si la expresi\u00f3n vuelva a ser v\u00e1lida (verdadero), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n sea v\u00e1lido (verdadero).</p> <p>En el momento que el resultado de la expresi\u00f3n no sea v\u00e1lido (falso), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se emplea esta estructura.</p> <p>La regla dice que la ejecuci\u00f3n del bloque de sentencias depender\u00e1 de una condici\u00f3n que debe validarse a partir de algo que ocurra previamente en el programa, antes de llegar a la ejecuci\u00f3n de esta estructura.</p> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta no es v\u00e1lida (falso), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la salida","text":"<p>La estructura iterativa Mientras (While) con la condici\u00f3n a la salida, primero, ejecuta el bloque de sentencias incluido en dicha estructura, una vez, sin evaluar ninguna expresi\u00f3n condicional y, al finalizar la ejecuci\u00f3n, reci\u00e9n se eval\u00faa la expresi\u00f3n condicional.</p> <p>Si la expresi\u00f3n es v\u00e1lida (verdadero), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n sea v\u00e1lido (verdadero).</p> <p>En el momento que el resultado de la expresi\u00f3n no sea v\u00e1lido (falso), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>La regla dice que las sucesivas ejecuciones del bloque de sentencias depender\u00e1 de una condici\u00f3n que debe validarse a partir de algo que ocurra dentro de dicho bloque al ejecutarse obligatoriamente una vez (y, eventualmente, en conjunto con algo que ocurra previamente en el programa antes de llegar a la ejecuci\u00f3n de esta estructura).</p> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional no sea v\u00e1lido (falso).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#diferencia-entre-ambas-estructuras","title":"Diferencia entre ambas estructuras","text":"<p>Observa las diferencias de la estructura con la condici\u00f3n a la entrada respecto de la estructura con la condici\u00f3n a la salida:</p> <p>\u00a1No te las confundas! \u00a1Su principio de funcionamiento es parecido, pero no son iguales!</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la entrada","text":"<p>La estructura iterativa Hasta (Until) con la condici\u00f3n a la entrada, primero, eval\u00faa la expresi\u00f3n condicional antes de ejecutar por primera vez el bloque de sentencias incluido en dicha estructura. </p> <p>Si la expresi\u00f3n NO es v\u00e1lida (falso), se ejecuta el bloque de sentencias una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. </p> <p>Si la expresi\u00f3n vuelva a NO ser v\u00e1lida (falso), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n NO sea v\u00e1lido (falso).</p> <p>En el momento que el resultado de la expresi\u00f3n SI sea v\u00e1lido (verdadero), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>La regla dice que la ejecuci\u00f3n del bloque de sentencias depender\u00e1 de una condici\u00f3n que NO debe validarse a partir de algo que ocurra previamente en el programa, antes de llegar a la ejecuci\u00f3n de esta estructura.</p> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta ES v\u00e1lida (verdadero), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de NO ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la salida","text":"<p>La estructura iterativa Hasta (Until) con la condici\u00f3n a la salida, primero, ejecuta el bloque de sentencias incluido en dicha estructura, una vez, sin evaluar ninguna expresi\u00f3n condicional y, al finalizar la ejecuci\u00f3n, reci\u00e9n se eval\u00faa la expresi\u00f3n condicional.</p> <p>Si la expresi\u00f3n NO es v\u00e1lida (falso), se ejecuta el bloque de sentencias nuevamente una vez y, al finalizar, se eval\u00faa nuevamente la expresi\u00f3n condicional. Y as\u00ed sucesivamente, mientras el resultado de la expresi\u00f3n NO sea v\u00e1lido (falso).</p> <p>En el momento que el resultado de la expresi\u00f3n SI sea v\u00e1lido (verdadero), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>La regla dice que las sucesivas ejecuciones del bloque de sentencias depender\u00e1n de una condici\u00f3n que debe validarse a partir de algo que ocurra dentro de dicho bloque al ejecutarse obligatoriamente una vez (y, eventualmente, en conjunto con algo que ocurra previamente en el programa antes de llegar a la ejecuci\u00f3n de esta estructura).</p> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional SI sea v\u00e1lido (verdadero).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#diferencia-entre-ambas-estructuras_1","title":"Diferencia entre ambas estructuras","text":"<p>Observa las diferencias de la estructura con la condici\u00f3n a la entrada respecto de la estructura con la condici\u00f3n a la salida:</p> <p>\u00a1No te las confundas! \u00a1Su principio de funcionamiento es parecido, pero no son iguales!</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#estructura-iterativa-o-repetitiva-parasiguiente-fornext","title":"Estructura iterativa (o repetitiva) Para\u2026Siguiente (For\u2026Next)","text":"<p>La estructura iterativa Para\u2026Siguiente (For\u2026Next) es similar a las estructuras iterativas anteriores, solo que contiene una variable de control o \"\u00edndice\", a la que se le asigna un valor inicial para que, luego, repetici\u00f3n tras repetici\u00f3n, se vaya modificando dicho valor por otro \"valor de control\" que permita evaluarlo frente a una expresi\u00f3n condicional que deber\u00e1 ser v\u00e1lida (verdadero) para permitir cada nueva ejecuci\u00f3n del bloque de sentencias.</p> <p>En el momento que el resultado de la evaluaci\u00f3n del valor almacenado en la variable de control frente a la la expresi\u00f3n condicional no sea v\u00e1lido (falso), el control de flujo saldr\u00e1 del bucle sin ejecutar el bloque de sentencias y continuar\u00e1 con la ejecuci\u00f3n del programa.</p> <p></p> <p>\u00bfC\u00f3mo saber cu\u00e1ndo emplear esta estructura?</p> <p>Esta estructura tiene como finalidad repetir un mismo bloque de sentencias un conocido n\u00famero de veces, cuando SI se conoce el n\u00famero de repeticiones del bucle, y no depender\u00e1 de una condici\u00f3n que debe validarse a partir de algo que ocurra previamente en el programa, antes de llegar a la ejecuci\u00f3n de esta estructura, o de algo que ocurra en la propia estructura. </p> <p>\u00a1Â¡Para recordar!!</p> <p>A diferencia de las estructuras anteriores donde, seg\u00fan el caso, no se ejecutaban nunca o lo hac\u00edan, si o si, al menos una vez, el esp\u00edritu de esta estructura es el de SI ejecutarse siempre, y el de hacerlo un n\u00famero conocido de veces.</p> <p>Se asigna un valor inicial a la variable de control, que debe cumplir con la expresi\u00f3n condicional que controla la cantidad de repeticiones del bloque de sentencias.</p> <p>Tras cada ejecuci\u00f3n de dicho bloque, a la variable de control se le asignar\u00e1 el siguiente valor de control y se volver\u00e1 a efectuar la validaci\u00f3n de la expresi\u00f3n condicional.</p> <p>Este procedimiento se continuar\u00e1 repitiendo hasta que el valor de la variable de control no valide la expresi\u00f3n condicional (verdadero). </p> <p>Cuando SI se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/diagramas-de-flujo/simbologia-de-los-diagramas-de-flujo/#ejercitacion","title":"Ejercitaci\u00f3n","text":"<p>\u00bfPuedes identificar cada uno de los bloques empleadas en estos dos diagramas de flujo?</p> <p></p>"},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/","title":"An\u00e1lisis de problema y dise\u00f1o de algoritmo","text":""},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/#analisis-de-problema-y-diseno-de-algoritmo","title":"An\u00e1lisis de problema y dise\u00f1o de algoritmo","text":"<p>Se cuenta con las notas del trimestre 1 (t1), trimestre 2 (t2) y trimestre 3 (t3) de un alumno.</p> <p>Se sabe que el promedio final ( pf ) se calcula con la f\u00f3rmula: pf = (t1 + t2 + 2 * t3) / 4</p> <p>Si el alumno cumple con la siguiente condici\u00f3n: t3 &gt;= 6 y pf &gt;= 6 tiene opci\u00f3n a rendir un examen sustitutorio ( ES )</p> <p>Escriba un algoritmo que reciba las notas y luego muestre un mensaje indicando si el alumno puede rendir o no el examen sustitutorio.</p> <p>En el caso que ya no pueda rendir el examen sustitutorio, debe mostrar solamente el promedio final.</p> An\u00e1lisis<pre><code>Datos de entrada: t1, t2, t3\nSalida: si (t3 &gt;= 6 y pf &gt;= 6) mostrar mensaje; si no, mostrar que no puede rendir ES y mostrar pf\n</code></pre> Algoritmo<pre><code>Inicio del algoritmo\n   1. Ingresar las notas del alumno en t1, t2, t3\n   2. Calcular pf con la siguiente f\u00f3rmula: (t1 + t2 + 2 * t3) / 4\n   3. Si cumple la condici\u00f3n t3 &gt;= 6 y pf &gt;= 6 entonces\n      4. Mostrar el mensaje \"Puede rendir el ES\"\n   5. Si no cumple la condici\u00f3n entonces \n      6. Mostrar el mensaje \"No puede rendir ES\" y mostrar pf\nFin del algoritmo\n</code></pre>"},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/#representacion-del-diseno-en-diagrama-de-flujo","title":"Representaci\u00f3n del dise\u00f1o en diagrama de flujo","text":""},{"location":"unidades/diseno-de-algoritmos/analisis-de-problema-y-diseno-de-algoritmo/#representacion-del-diseno-en-pseudocodigo","title":"Representaci\u00f3n del dise\u00f1o en pseudoc\u00f3digo","text":""},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/","title":"Descripci\u00f3n te\u00f3rica y conceptual de una idea o proceso","text":""},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/#introduccion","title":"Introducci\u00f3n","text":"<p>Una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se refiere a una explicaci\u00f3n basada en los principios te\u00f3ricos o conceptuales en lugar de los detalles pr\u00e1cticos o emp\u00edricos.</p> <p>As\u00ed, se centran en comprender los fundamentos, las relaciones y las implicaciones de una idea o proceso en lugar de proporcionar una descripci\u00f3n detallada de c\u00f3mo se llevar\u00eda a cabo en la pr\u00e1ctica.</p> <p>\u00bfQu\u00e9 es una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso?</p> <p>Una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se refiere a una explicaci\u00f3n basada en los principios te\u00f3ricos o conceptuales en lugar de los detalles pr\u00e1cticos o emp\u00edricos.</p> <p>Definici\u00f3n</p> <p>La descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se centra en comprender sus fundamentos, sus relaciones y sus implicaciones, en lugar de proporcionar una descripci\u00f3n detallada de c\u00f3mo se llevar\u00edan a cabo en la pr\u00e1ctica.</p> <p>Cuando se realiza una descripci\u00f3n te\u00f3rica, se utilizan principios, teor\u00edas o modelos conceptuales para analizar y explicar los aspectos clave de la idea o proceso. Estas descripciones suelen ser abstractas y generalizadas, y se basan en suposiciones y principios fundamentales en lugar de en ejemplos espec\u00edficos o aplicaciones pr\u00e1cticas.</p> <p>La finalidad de una descripci\u00f3n te\u00f3rica o conceptual es proporcionar una comprensi\u00f3n m\u00e1s profunda de la idea o proceso en cuesti\u00f3n, explorar sus implicaciones y relaciones con otros conceptos, y permitir un an\u00e1lisis cr\u00edtico y reflexivo. Estas descripciones pueden ser utilizadas en diversos campos para desarrollar teor\u00edas, explicar sucesos complejos y fundamentar argumentos.</p>"},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/#como-se-aplica-en-el-contexto-de-la-programacion-informatica","title":"\u00bfC\u00f3mo se aplica en el contexto de la programaci\u00f3n inform\u00e1tica?","text":"<p>En el contexto de la programaci\u00f3n inform\u00e1tica, las descripciones te\u00f3ricas y conceptuales son esenciales para comprender los fundamentos y los conceptos clave relacionados con el desarrollo de software y la resoluci\u00f3n de problemas computacionales. Algunas aplicaciones de descripciones te\u00f3ricas en este campo incluyen:</p> <ol> <li> <p>Teor\u00eda de algoritmos: las descripciones te\u00f3ricas permiten analizar y comprender la eficiencia y la complejidad de los algoritmos utilizados en la programaci\u00f3n. Teor\u00edas como la teor\u00eda de la complejidad computacional, la teor\u00eda de grafos y la teor\u00eda de aut\u00f3matas proporcionan un marco conceptual para evaluar y dise\u00f1ar algoritmos eficientes.</p> </li> <li> <p>Estructuras de datos: las descripciones te\u00f3ricas son utilizadas para comprender las diferentes estructuras de datos y sus propiedades. Teor\u00edas como la teor\u00eda de conjuntos, la teor\u00eda de grafos y la teor\u00eda de la recursividad son aplicadas para analizar y dise\u00f1ar estructuras de datos eficientes, como listas enlazadas, \u00e1rboles, colas, pilas, entre otros.</p> </li> <li> <p>Paradigmas de programaci\u00f3n: las descripciones te\u00f3ricas son \u00fatiles para comprender los diferentes paradigmas de programaci\u00f3n, como la programaci\u00f3n orientada a objetos, la programaci\u00f3n funcional y la programaci\u00f3n l\u00f3gica. Estas teor\u00edas proporcionan un enfoque conceptual para abordar problemas de manera estructurada y modular, permitiendo desarrollar aplicaciones m\u00e1s mantenibles y escalables.</p> </li> <li> <p>Teor\u00eda de compiladores: las descripciones te\u00f3ricas son aplicadas en el desarrollo de compiladores, que son programas que traducen el c\u00f3digo fuente en lenguajes de programaci\u00f3n a un formato ejecutable. La teor\u00eda de compiladores involucra conceptos como an\u00e1lisis l\u00e9xico, an\u00e1lisis sint\u00e1ctico, generaci\u00f3n de c\u00f3digo y optimizaci\u00f3n, y proporciona una base te\u00f3rica para el desarrollo de compiladores eficientes y robustos.</p> </li> </ol> <p>Estas son algunas \u00e1reas en las que las descripciones te\u00f3ricas son aplicadas en la programaci\u00f3n inform\u00e1tica. Estas, permiten comprender los fundamentos y los conceptos subyacentes de la programaci\u00f3n, lo que a su vez ayuda a mejorar las habilidades de resoluci\u00f3n de problemas y la capacidad para dise\u00f1ar y desarrollar software de manera eficiente.</p>"},{"location":"unidades/diseno-de-algoritmos/descripcion-conceptual-de-un-proceso/#resumen","title":"Resumen","text":"<p>Una descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso se refiere a una explicaci\u00f3n basada en los principios te\u00f3ricos o conceptuales en lugar de los detalles pr\u00e1cticos o emp\u00edricos.</p> <p>As\u00ed, se centran en comprender los fundamentos, las relaciones y las implicaciones de una idea o proceso en lugar de proporcionar una descripci\u00f3n detallada de c\u00f3mo se llevar\u00eda a cabo en la pr\u00e1ctica.</p> <p>Algunas aplicaciones que requieren de descripci\u00f3n te\u00f3rica o conceptual de una idea o proceso en este campo incluyen: teor\u00eda de algoritmos, estructuras de datos, paradigmas de programaci\u00f3n y teor\u00eda de compiladores, entre otras. </p> <p>As\u00ed, es posible comprender los fundamentos y los conceptos subyacentes de la programaci\u00f3n, lo que a su vez ayuda a mejorar las habilidades de resoluci\u00f3n de problemas y la capacidad para dise\u00f1ar y desarrollar software de manera eficiente.</p>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/","title":"Dise\u00f1o de algoritmos","text":""},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#introduccion","title":"Introducci\u00f3n","text":"<p>Un algoritmo es una serie de instrucciones o secuencia de pasos bien definidos y ordenados que resuelve un problema o realiza una tarea espec\u00edfica.</p> <p>La aplicaci\u00f3n de algoritmos se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#pasos-para-disenar-un-algoritmo","title":"Pasos para dise\u00f1ar un algoritmo","text":"<ol> <li> <p>Definir el problema claramente: comprender claramente cu\u00e1l es el problema que se va a resolver y qu\u00e9 resultado se espera obtener.</p> </li> <li> <p>Analizar el problema: descomponer el problema en partes m\u00e1s peque\u00f1as y comprender las relaciones entre ellas.</p> </li> <li> <p>Identificar los datos de entrada necesarios: comprender cuales son los valores que el programa deber\u00e1 procesar dentro de un contexto determinado para producir la soluci\u00f3n adecuada.</p> </li> <li> <p>Dise\u00f1ar una soluci\u00f3n: determinar los pasos necesarios, organiz\u00e1ndolos en un orden l\u00f3gico, para resolver el problema, utilizando diferentes t\u00e9cnicas algor\u00edtmicas, como algoritmos de b\u00fasqueda, ordenaci\u00f3n, recursividad, etc., para dise\u00f1ar una soluci\u00f3n para cada parte del problema.</p> </li> <li> <p>Escribir el algoritmo: expresar la soluci\u00f3n paso a paso en un lenguaje adecuado, como pseudoc\u00f3digo o un lenguaje de programaci\u00f3n espec\u00edfico.</p> </li> <li> <p>Probar y depurar: ejecutar el algoritmo con diferentes casos de prueba para asegurarse de que funcione correctamente y verificar si produce los resultados esperados. Si hay errores, depurar el algoritmo identificando y corrigiendo los problemas.</p> </li> </ol>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#que-son-las-instrucciones","title":"\u00bfQu\u00e9 son las instrucciones?","text":"<p>Son las acciones o comandos que van a ser ejecutados por la computadora para resolver un problema. Conforman un algoritmo que, a partir de un lenguaje de programaci\u00f3n espec\u00edfico, se convertir\u00e1 en un programa donde cada instrucci\u00f3n ser\u00e1 una sentencia.</p> <ul> <li>Instrucciones de Inicio/Fin: indican el Inicio y el Fin del algoritmo</li> <li>Instrucciones de lectura: solicitan al usuario el ingreso de datos desde un dispositivo de entrada como, por ejemplo, el teclado.</li> <li>Instrucciones de escritura: muestras los resultados a trav\u00e9s de un dispositivo de salida como, por ejemplo, la pantalla.</li> <li>Instrucciones de asignaci\u00f3n: almacenan un valor en una variable, perdi\u00e9ndose cualquier otro valor almacenado en ella.</li> <li>Instrucciones selectivas: permiten ejecutar unas u otras tareas de acuerdo al resultado de una expresi\u00f3n condicional.</li> <li>Instrucciones repetitivas: permiten la repetici\u00f3n de un grupo de instrucciones, generando un bucle (loop).</li> </ul>"},{"location":"unidades/diseno-de-algoritmos/diseno-de-algoritmos/#fases-para-la-construccion-de-un-programa","title":"Fases para la construcci\u00f3n de un programa","text":"<p>Esta secci\u00f3n no va ac\u00e1</p> <p></p>"},{"location":"unidades/diseno-de-algoritmos/herramientas-para-la-representacion-de-algoritmos/","title":"Herramientas para la representaci\u00f3n de algoritmos","text":""},{"location":"unidades/diseno-de-algoritmos/herramientas-para-la-representacion-de-algoritmos/#herramientas-para-la-representacion-de-algoritmos","title":"Herramientas para la representaci\u00f3n de algoritmos","text":"<p>Para representar los algoritmos en forma estandarizada, contamos con las siguientes herramientas:</p> <ul> <li> <p>Diagrama de flujo: es una notaci\u00f3n gr\u00e1fica para implementar algoritmos.</p> </li> <li> <p>Pseudoc\u00f3digo: es un lenguaje de especificaci\u00f3n (palabras reservadas) en lenguaje natural</p> </li> <li> <p>Diagrama de Nassi-Scheneiderman: es una combinaci\u00f3n de las dos anteriores</p> </li> </ul> <p></p> <p>A continuaci\u00f3n, veremos un ejemplo de creaci\u00f3n de un algoritmo utilizando estas herramientas.</p> <p>No te preocupes si te parece dif\u00edcil. Estudiaremos cada herramienta en profundidad m\u00e1s adelante. As\u00ed ver\u00e1s que, en realidad, es mucho m\u00e1s simple y f\u00e1cil de lo que parece.</p>"},{"location":"unidades/diseno-de-algoritmos/resumen-diseno-de-algoritmos/","title":"Resumen Dise\u00f1o de algoritmos","text":"<p>En resumen, los algoritmos son herramientas esenciales para resolver problemas, optimizar procesos y realizar tareas computacionales de manera eficiente. Su aplicaci\u00f3n se extiende a diversas \u00e1reas y disciplinas, y son la base de la ciencia de la computaci\u00f3n y la programaci\u00f3n.</p> <p>Un algoritmo es una secuencia o conjunto finito, preciso y ordenado paso a paso de instrucciones definidas que se utiliza para resolver un problema o realizar una tarea espec\u00edfica de manera eficiente y sistem\u00e1tica. </p> <p>Â¡Para recordar! que existen muchos algoritmos, desde los m\u00e1s simples hasta los m\u00e1s avanzados, que pueden emplearse para resolver diferentes problemas o realizar tareas espec\u00edficas.</p> <p>La mejor manera de aprender algoritmos es practicar. El aprendizaje de los algoritmos es un proceso continuo y gradual, por lo cual requiere tiempo y pr\u00e1ctica. Intenta resolver problemas algor\u00edtmicos por tu cuenta y trabaja en proyectos que requieran implementar algoritmos espec\u00edficos.</p> <p>No te desanimes si al principio encuentras los conceptos dif\u00edciles. Con el tiempo y la pr\u00e1ctica, podr\u00e1s mejorar tus habilidades algor\u00edtmicas A medida que adquieras m\u00e1s experiencia, podr\u00e1s resolver problemas m\u00e1s complejos y optimizar tus soluciones.</p> <p>\u00a1Buena suerte en tu camino de aprendizaje!</p>"},{"location":"unidades/estructuras-de-datos/introduccion-a-las-estructuras-de-datos/","title":"Introducci\u00f3n a las estructuras de datos","text":""},{"location":"unidades/estructuras-de-datos/introduccion-a-las-estructuras-de-datos/#introduccion","title":"Introducci\u00f3n","text":"<p>Una estructura de datos o tipo de dato estructurados es un tipo de dato construido a partir de otros tipos de dato.</p> <p>As\u00ed, a estos tipos de dato se los suelen denominar complejos. </p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/","title":"Tipos de estructuras de datos","text":""},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#que-es-una-estructura-de-datos","title":"\u00bfQu\u00e9 es una estructura de datos?","text":"<p>Las estructuras de datos son formas de organizar y almacenar datos en un programa de computadora para que puedan ser utilizados de manera eficiente. Algunos de los tipos m\u00e1s comunes de estructuras de datos incluyen:</p> <ul> <li> <p>Cadenas de caracteres (Strings): Representan una secuencia de caracteres. En muchos lenguajes de programaci\u00f3n se definen usando comillas simples (') o dobles (\").</p> </li> <li> <p>Arreglos (Arrays): Una colecci\u00f3n de elementos identificados por \u00edndices o claves. Todos los elementos son del mismo tipo.</p> </li> <li> <p>Listas: Similar a un arreglo, pero puede cambiar de tama\u00f1o y puede contener elementos de diferentes tipos.</p> </li> <li> <p>Tuplas: Similar a una lista, pero es inmutable, lo que significa que no puede cambiar una vez que se ha creado.</p> </li> <li> <p>Conjuntos (Sets): Una colecci\u00f3n de elementos \u00fanicos, es decir, no permite duplicados.</p> </li> <li> <p>Diccionarios: Una colecci\u00f3n de pares clave-valor. Las claves son \u00fanicas y los valores pueden ser de cualquier tipo.</p> </li> <li> <p>Pilas (Stacks): Una colecci\u00f3n de elementos con dos operaciones principales: push (agregar un elemento al final) y pop (eliminar el \u00faltimo elemento).</p> </li> <li> <p>Colas (Queues): Similar a una pila, pero los elementos se agregan al final y se eliminan del principio.</p> </li> <li> <p>\u00c1rboles: Una estructura de datos no lineal que tiene un nodo ra\u00edz y un conjunto de nodos secundarios que forman un sub\u00e1rbol.</p> </li> <li> <p>Grafos: Una colecci\u00f3n de nodos y aristas que conectan los nodos. Puede ser dirigido (las aristas tienen una direcci\u00f3n) o no dirigido.</p> </li> </ul> <p>Cada una de estas estructuras de datos tiene sus propias ventajas y desventajas, y se utilizan en diferentes situaciones dependiendo de las necesidades del programa.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#listas","title":"Listas","text":"<p>Una lista (list) es una colecci\u00f3n de datos. Seg\u00fan el lenguaje de programaci\u00f3n, esa lista estar\u00e1 conformada por los mismos o por diferentes tipos de dato.</p> <pre><code>lista_de_datos_de_diferente_tipo = [1, \"Hola\", True, 3.14]\nlista_de_datos_de_igual_tipo = [10, -5, 0]\n</code></pre> <p>''' warning \"\u00a1Â¡Para recordar!!\"     Es importante tener en cuenta que, aunque las listas pueden contener elementos de diferentes tipos de dato, esto puede hacer que sea m\u00e1s dif\u00edcil de manejar y procesar. </p> <pre><code>En general, es mejor mantener los elementos de una lista del mismo tipo de dato siempre que sea posible para evitar confusiones y errores.\n</code></pre>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo","title":"Ejemplo","text":"<p>En este ejemplo, crearemos una lista llamada mi_lista que contiene los n\u00fameros del 1 al 5. Luego, accederemos a algunos elementos de la lista utilizando sus \u00edndices y modificaremos y agregaremos elementos.  Finalmente, eliminaremos un elemento y obtendremos la longitud de la lista (n\u00famero de elementos en ella).</p> Python<pre><code># creaci\u00f3n de una lista\nmi_lista = [1, 2, 3, 4, 5]\n\n# acceso a elementos de la lista\nprimer_elemento = mi_lista[0]  # el primer elemento es 1\ntercer_elemento = mi_lista[2]  # el tercer elemento es 3\n\n# modificaci\u00f3n de elementos de la lista\nmi_lista[4] = 6  # cambiamos el \u00faltimo elemento de 5 a 6\n\n# agregando elementos a la lista\nmi_lista.append(7)  # agrega el n\u00famero 7 al final de la lista\n\n# eliminando elementos de la lista\nmi_lista.remove(2)  # elimina el n\u00famero 2 de la lista\n\n# longitud de la lista\nlongitud = len(mi_lista)  # longitud de la lista es 4\n</code></pre>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#pilas","title":"Pilas","text":"<p>Completar</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#colas","title":"Colas","text":"<p>Completar</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#matrices","title":"Matrices","text":"<p>Una matr\u00edz (matrix) es una lista de listas. Cada lista interna representa una fila de la matriz. Cada elemento de cada lista representa una columna de la matriz.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_1","title":"Ejemplo","text":"<p>En este ejemplo, matriz ser\u00e1 una lista de tres elementos, cada uno de los cuales ser\u00e1 a su vez una lista de tres elementos. Cada lista interna representar\u00e1 una fila de la matriz, y cada elemento de la lista interna representar\u00e1 una columna de la matriz.  </p> Python<pre><code># creaci\u00f3n de una matriz de 3x3\nmatriz = [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n         ]\n\n# devuelve el elemento en la fila 0, columna 1\nprint(matriz[0][1]) // salida: 2\n</code></pre> <p>Este ejemplo debiera ir luego de explicar ciclos</p> <p>Podreemos acceder a los elementos individuales de la matriz utilizando la sintaxis de \u00edndice. As\u00ed, <code>matriz[0][1]</code> devolver\u00e1 el elemento en la fila 0 y la columna 1 de la matriz, que es el valor 2. </p> <p>Ahora, podremos recorrer la matriz utilizando bucles <code>for</code> anidados para acceder a cada elemento de la matriz.  </p> Python<pre><code>matriz = [\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n         ]\n\nfor fila in matriz:\n    for columna as elemento in fila:\n        print(columna, end=\" \") # imprime el valor almacenado en cada columna (elemento)\n    print() # imprime un salto de linea\n</code></pre> Terminal (Entrada/Salida)<pre><code>1 2 3 \n4 5 6 \n7 8 9 \n</code></pre> <p>En este ejemplo, el programa itera sobre cada fila de la matriz, que a su vez itera sobre cada columna de cada fila e imprime el valor almacenado.    Al finalizar la iterac\u00f3n de cada fila, el programa imprime un salto de l\u00ednea y vuelve a repetir la ejecuci\u00f3n de iterarci\u00f3n en la siguiente fila.</p> <p>Â¡Para recordar! si trabajas con matrices en Python</p> <p>En Python, la longitud de cada fila de la matriz no tiene por qu\u00e9 ser la misma. Esto permite representar matrices irregulares, donde cada fila puede tener una longitud diferente.</p> <p>Sin embargo, trabajar con matrices irregulares puede ser m\u00e1s complicado que trabajar con matrices regulares de tama\u00f1o fijo.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#tuplas","title":"Tuplas","text":"<p>Una tupla (tuple) es similar a una lista, aunque sus elementos son inmutables. Es decir, no pueden ser modificados una vez que la tupla sea creada.</p> <pre><code>mi_tupla = (1, 2, 3, 4, 5)\n</code></pre>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplos","title":"Ejemplos","text":"<p>Crearemos una tupla llamada mi_tupla que contendr\u00e1 los n\u00fameros del 1 al 5. Luego, accederemos a algunos elementos de la tupla utilizando sus \u00edndices y obtendremos la longitud de la tupla.  </p> Python<pre><code># creaci\u00f3n de una tupla\nmi_tupla = (1, 2, 3, 4, 5)\n\n# acceso a elementos de la tupla\nprimer_elemento = mi_tupla[0]  # el primer elemento es 1\ntercer_elemento = mi_tupla[2]  # el tercer elemento es 3\n\n# longitud de la tupla\nlongitud = len(mi_tupla)  # longitud de la tupla es 5\n\n# la siguiente generar\u00e1 un error ya que las tuplas son inmutables\nmi_tupla[4] = 6 # no se pueden modificar elementos de la tupla\n</code></pre> <p>Sin embargo, cuando intentamos modificar un elemento de la tupla, se produce un error ya que las tuplas son inmutables y no se pueden modificar sus elementos despu\u00e9s de su creaci\u00f3n.</p> Terminal (Entrada/Salida)<pre><code>Traceback (most recent call last):\n  File \"c:\\ejemplo.py\", line 12, in &lt;module&gt;\n    mi_tupla[4] = 6\n    ~~~~~~~~^^^\nTypeError: 'tuple' object does not support item assignment\n</code></pre> <p>Otro ejemplo de gran aplicaci\u00f3n pr\u00e1ctica es el intercambio de valores almacenados en dos variables sin necesidad de una tercera variable temporal:</p> Python<pre><code>a = 1\nb = 2\n\nprint(\"El valor que tiene almacenado `a` es\", a)\nprint(\"El valor que tiene almacenado `b` es\", b)\n\nprint(\"Ahora se ejecuta la instrucci\u00f3n `a, b = b, a`\")\na, b = b, a\n\nprint(\"El valor que tiene almacenado ahora `a` es\", a)\nprint(\"El valor que tiene almacenado ahora `b` es\", b)\n</code></pre> <p>En Python, <code>a, b = b, a</code> es una forma de intercambiar los valores de las variables <code>a</code> y <code>b</code>.</p> Terminal (Entrada/Salida)<pre><code>El valor que tiene almacenado `a` es 1\nEl valor que tiene almacenado `b` es 2\n\nAhora se ejecuta la instrucci\u00f3n `a, b = b, a`\n\nEl valor que tiene almacenado ahora `a` es 2\nEl valor que tiene almacenado ahora `b` es 1\n</code></pre> <p>Inicialmente, <code>a</code> es 1 y <code>b</code> es 2. Despu\u00e9s de <code>a, b = b, a</code>, <code>a</code> ser\u00e1 2 y <code>b</code> ser\u00e1 1.</p> <p>Esto es posible gracias a la capacidad de Python para empaquetar y desempaquetar tuplas.  </p> <p>Python primero empaqueta los valores de <code>b</code> y <code>a</code> en una tupla (2, 1), para luego desempaquetar esa tupla almacenando los valores en <code>a</code> y <code>b</code> respectivamente.  </p> <p>\u00bfC\u00f3mo funciona la cosa?</p> <p>Respetando el orden de empaquetado y desempaquetado es como se produce el intercambio de valores.</p> <p>En realidad no es un intercambio si no una asignaci\u00f3n de valores a las variables que previamente hab\u00edan provisto dichos valores pero en orden de acceso inverso.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#arreglos","title":"Arreglos","text":"<p>Un arreglo (array) se puede utilizar para almacenar una secuencia de elementos del mismo tipo de dato. A diferencia de las listas, los arrays est\u00e1n dise\u00f1ados para ser m\u00e1s eficientes en t\u00e9rminos de espacio y tiempo de procesamiento para operaciones num\u00e9ricas y matem\u00e1ticas.</p> <p>Â¡Para recordar!</p> <p>En algunos lenguajes, los arreglos pueden contener elementos de diferentes tipos de dato. Esto puede hacer que sea m\u00e1s dif\u00edcil de manejar y procesar. </p> <p>En general, es mejor mantener los elementos de un array del mismo tipo de dato siempre que sea posible para evitar confusiones y errores.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_2","title":"Ejemplo","text":"<p>Crearemos un arreglo llamado mi_array que contendr\u00e1 3 n\u00fameros enteros (1, 2 y 3) como elementos. El primer argumento del m\u00e9todo <code>array()</code> especificar\u00e1 el tipo de dato de los elementos del arreglo.</p> <p>Para utilizar arreglos en Python, primero debemos importar el m\u00f3dulo array. Si bien esta operaci\u00f3n, en general se denomina importaci\u00f3n de librer\u00eda, en Python no existen las librer\u00edas y en su lugar existen los m\u00f3dulos. Luego, podremos crear un nuevo arreglo utilizando la funci\u00f3n <code>array()</code> y pasando como argumentos el tipo de dato de los elementos y una secuencia de valores. </p> Python<pre><code>import array\n\nmi_array = array.array('i', [1, 2, 3])\n\nprint(mi_array)  # Output: array('i', [1, 2, 3])\n</code></pre> <p>'i' significa que los elementos que almacenar\u00e1 el arreglo ser\u00e1n n\u00fameros enteros.</p> <p>Ahora, Podemos acceder a los elementos del arreglo utilizando su \u00edndice, de la misma manera que lo hac\u00edamos con las listas:</p> Python<pre><code>print(mi_array[0])  # Output: 1\nprint(mi_array[1])  # Output: 2\nprint(mi_array[2])  # Output: 3\n</code></pre> <p>Tambi\u00e9n podemos modificar los elementos del arreglo asignando nuevos valores a sus \u00edndices:</p> Python<pre><code>mi_array = array.array('i', [1, 2, 3]) \nmi_array[1] = 4\nprint(mi_array)  # Output: array('i', [1, 4, 3]) \n</code></pre> <p>En este ejemplo, estamos modificando el segundo elemento del arreglo (mi_array[1]) y asign\u00e1ndole un nuevo valor (4).  El array resultante se imprimir\u00e1 en la consola como  array('i', [1, 4, 3]).</p> <p>Es importante tener en cuenta que los arreglos en algunos lenguajes, como Python, est\u00e1n limitados a un solo tipo de dato, lo que significa que no podemos mezclar diferentes tipos de dato en un solo arreglo.</p> <p>Adem\u00e1s, los arreglos en Python son est\u00e1ticos, lo que significa que no pueden cambiar de tama\u00f1o una vez que se han creado. </p> <p>Si necesitamos un tipo de dato que pueda cambiar de tama\u00f1o, podemos utilizar una lista en su lugar.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#diccionarios","title":"Diccionarios","text":"<p>Un diccionario (dict) es una colecci\u00f3n de pares clave-valor, en la que cada valor se almacena junto con una clave que lo identifica. </p> <p>Tambi\u00e9n se los conoce como mapas.</p> <p>Buscar mapas y chequear info</p> <pre><code>mi_diccionario = {\"nombre\": \"Juan\", \"edad\": 30, \"ciudad\": \"Bs As\"}\n</code></pre>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_3","title":"Ejemplo","text":"<p>Crearemos un diccionario llamado mi_diccionario que contiene informaci\u00f3n sobre una persona. Luego, accederemos a algunos elementos del diccionario utilizando sus claves y modificaremos y agregaremos elementos. Finalmente, eliminaremos una clave y su valor del diccionario y obtendremos la longitud del diccionario.</p> Python<pre><code># creaci\u00f3n de un diccionario\nmi_diccionario = {\"nombre\": \"Juan\", \"edad\": 30, \"ciudad\": \"Bs As\"}\n\n# acceso a elementos del diccionario\nnombre = mi_diccionario[\"nombre\"]  # el valor de \"nombre\" es \"Juan\u201d\nedad = mi_diccionario[\"edad\"]  # el valor de \"edad\" es 30\n\n# modificaci\u00f3n de elementos del diccionario\nmi_diccionario[\"edad\"] = 31  # cambiamos el valor de \"edad\" a 31\n\n# agrega un nuevo par clave-valor (elemento) al diccionario\nmi_diccionario[\"trabajo\"] = \"programador\"\n\n# elimina la clave \"ciudad\" y su valor (elemento) del diccionario\ndel mi_diccionario[\"ciudad\"]\n\n# longitud del diccionario\nlongitud = len(mi_diccionario)  # longitud del diccionario es 3\n</code></pre>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#conjuntos","title":"Conjuntos","text":"<p>Un conjunto (set) es una colecci\u00f3n de valores \u00fanicos. Es decir que no hay elementos duplicados en un conjunto.</p> <pre><code>mi_set = {1, 2, 3, 3, 4, 5, 5} # creaci\u00f3n de un set con elementos duplicados\nprint(mi_set) # imprime {1, 2, 3, 4, 5} eliminando los duplicados\n</code></pre>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_4","title":"Ejemplo","text":"<p>Crearemos un conjunto llamado mi_set y le asignaremos los siguientes valores: 1, 2, 3, 3, 4, 5, 5</p> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que los conjuntos son colecciones no ordenadas y no permiten elementos duplicados. En caso de asignarle elementos duplicados, estos ser\u00e1n eliminados autom\u00e1ticamente.</p> <p>Luego, agregaremos un nuevo elemento al conjunto y eliminaremos otro. Tambi\u00e9n comprobaremos si un valor determinado est\u00e1 en el conjunto utilizando el operador <code>in</code>.  Finalmente, obtendremos la longitud del conjunto. </p> Python<pre><code># creaci\u00f3n de un conjunto con elementos duplicados\nmi_set = {1, 2, 3, 3, 4, 5, 5}\n\n# imprimiendo el conjunto\nprint(mi_set)  # Output: {1, 2, 3, 4, 5}\n\n# agregando elementos al conjunto\nmi_set.add(6)  # agrega el n\u00famero 6 al conjunto\n\n# comprobando si un elemento est\u00e1 en el conjunto\nesta_en_conjunto = 4 in mi_set # devuelve True ya que 4 est\u00e1 en el conjunto\n\n# eliminando elementos del conjunto\nmi_set.remove(3)  # elimina el n\u00famero 3 del conjunto\n\n# longitud del conjunto\nlongitud = len(mi_set)  # longitud del conjunto es 5\n</code></pre>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#arboles","title":"\u00c1rboles","text":"<p>Falta</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#funciones","title":"Funciones","text":"<p>Dejamos esto aca?</p> <p>En algunos lenguajes, las funciones son consideradas como un tipo de dato y pueden ser asignadas a variables de la misma manera que asignamos otros tipos de dato, como una cadena o un n\u00famero entero. Para hacerlo, simplemente escribimos el nombre de la variable, seguido del signo igual (=) y el nombre de la funci\u00f3n sin par\u00e9ntesis.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_5","title":"Ejemplo","text":"Python<pre><code>def sumar(a, b):  // la funci\u00f3n sumar toma dos n\u00fameros como argumentos y devuelve la suma de esos n\u00fameros\n    resultado = a + b\n    return resultado\n\nmi_funcion = sumar\nresultado = mi_funcion(2, 3)\n\nprint(resultado)  # Output: 5\n</code></pre> <p>Aqu\u00ed se define una funci\u00f3n llamada sumar que luego es asignada a la variable mi_funcion. M\u00e1s tarde, se llama a la funci\u00f3n a trav\u00e9s de la variable, pasando los dos argumentos necesarios para realizar la operaci\u00f3n de suma dentro de la funci\u00f3n; y esta devuelve el resultado que es finalmente almacenado en la variable resultado que luego es impresa por pantalla.</p> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que, cuando asignamos una funci\u00f3n a una variable, estamos asignando la funci\u00f3n en s\u00ed misma, no el resultado de la funci\u00f3n. Esto significa que podemos llamar a la funci\u00f3n en cualquier momento simplemente utilizando la variable a la que se ha asignado, con argumentos diferentes, si es preciso, para obtener diferentes resultados.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#objeto-como-instancia-de-una-clase","title":"Objeto como instancia de una clase","text":"<p>Dejamos esto aca?</p> <p>Una clase es un tipo de dato personalizado que define un conjunto de atributos y m\u00e9todos que se pueden utilizar para crear objetos.</p> <p>Por ejemplo, podemos definir una clase Persona que tenga atributos como nombre, edad y ocupaci\u00f3n, y m\u00e9todos como caminar(), correr() y hablar().</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#ejemplo_6","title":"Ejemplo","text":"<p>Definiremos la clase Persona con un constructor que toma tres par\u00e1metros (nombre, edad y ocupacion) y dos m\u00e9todos (__init__() y hablar()).  Luego, crearemos el objeto persona1 de la clase Persona y le pasaremos algunos valores para los atributos nombre, edad y ocupacion.  Finalmente, llamaremos al m\u00e9todo hablar() en el objeto persona1.</p> <p>\u00a1 Muy importante!</p> <p>Hay que tener en cuenta que en Python, todo es un objeto, incluso los tipos de dato b\u00e1sicos como enteros, flotantes y cadenas. Por lo tanto, podemos tratarlos como objetos y llamar a sus m\u00e9todos y atributos.</p>"},{"location":"unidades/estructuras-de-datos/tipos-de-estructuras-de-datos/#objeto-como-variable","title":"Objeto como variable","text":"<p>Como bien dijimos, en algunos lenguajes como Python todo es un objeto, incluso las variables.</p> <p>Ya que una variable es simplemente una referencia a un objeto, cuando creamos una variable y le asignamos un valor, lo que realmente estamos haciendo es crear un objeto y asignar una referencia a ese objeto a la variable. </p> Python<pre><code># creaci\u00f3n de un objeto entero y asignaci\u00f3n a una variable\nmi_variable = 42\n\n# creaci\u00f3n de una lista y asignaci\u00f3n a una variable\nmi_otra_variable = [1, 2, 3]\n</code></pre> <p>En el ejemplo anterior, creamos dos objetos:      * un objeto entero con un valor de 42; y      * una lista con tres elementos. </p> <p>Luego, asignamos referencias a esos objetos a dos variables diferentes: mi_variable y mi_otra_variable, respectivamente.</p> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que, en Python, las variables no tienen un tipo de dato asociado, sino que los objetos a los que hacen referencia s\u00ed lo tienen. Por lo tanto, una variable puede referenciar a un objeto de cualquier tipo de dato en cualquier momento, incluso si anteriormente se referenciaba a un objeto de otro tipo de dato.</p>"},{"location":"unidades/estructuras-de-datos/ejercitacion/ejercitacion-listas/","title":"Ejercitacion listas","text":"<ol> <li> <p>Ejercicios de listas:</p> <ol> <li> <p>Escribir un programa que contenga una funci\u00f3n que reciba una lista con valores num\u00e9ricos enteros como argumento para calcular y devolver el promedio de dichos n\u00fameros.</p> Python<pre><code>def calcular_promedio(numeros):\n    total = 0\n    contador = 0\n\n    for num in numeros:\n        total += num\n        contador += 1\n\n    promedio = total / contador\n    return promedio\n\nlista_numeros = [5, 10, 15, 20]\nresultado = calcular_promedio(lista_numeros)\nprint(\u201dPromedio: \", resultado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Promedio: 12.5\n</code></pre> <p>En este ejercicio, la funci\u00f3n calcular_promedio() calcula el promedio de una lista de n\u00fameros pasada como argumento.  Se utilizan las variables locales total, contador y promedio para realizar los c\u00e1lculos dentro de la funci\u00f3n.</p> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/fundamentos-de-la-programacion/","title":"Fundamentos de la programaci\u00f3n","text":"<p>Los fundamentos de la programaci\u00f3n son los conceptos b\u00e1sicos que forman la base del desarrollo de software. Estos principios son esenciales para comprender c\u00f3mo funciona la programaci\u00f3n y c\u00f3mo crear programas eficientes y efectivos. </p> <p>Algunos de los fundamentos m\u00e1s importantes que estudiaremos a continuaci\u00f3n incluyen (no te preocupes si no entiendas algo de lo que estar\u00e1s por leer):</p> <p>*** Comentarios y Documentaci\u00f3n</p> <p>La importancia de documentar el c\u00f3digo para que otros programadores (o incluso el propio programador en el futuro) puedan entenderlo f\u00e1cilmente.</p> Python<pre><code># Esto es un comentario de una linea. Su shortcut es CTRL + K + C\n</code></pre> Python<pre><code>'''\nEsto es un comentario\nde m\u00faltiples lineas.\nSe crea escribiendo el contenido entre 3 comillas simples.\n'''\n</code></pre> Python<pre><code>\"\"\"\nEsto es un comentario\nde m\u00faltiples lineas.\nPero se crea escribiendo el contenido entre 3 comillas dobles.\n\nAs\u00ed, este comentario se denomina doc strings.\nPara mayor informaci\u00f3n, visitar https://pandas.pydata.org/docs/index.html\n\nSu shortcut es SHIFT + ALT + A\n\"\"\"\n</code></pre> <p>Algoritmos: Son pasos o reglas definidas para realizar una tarea o resolver un problema espec\u00edfico. Los algoritmos son la base de cualquier programa.</p> <p>Variables y tipos de dato: Las variables son contenedores para almacenar datos, y los tipos de dato especifican qu\u00e9 tipo de dato puede contener una variable (por ejemplo, enteros, cadenas de caracteres, booleanos, etc.).</p> <p>Estructuras de Control: Incluyen estructuras de decisi\u00f3n (como if, else) y estructuras de repetici\u00f3n (como for, while), que permiten controlar el flujo de ejecuci\u00f3n de un programa.</p> <p>Estructuras de Datos: Son formas de organizar y almacenar datos para que puedan ser utilizados eficientemente. Ejemplos incluyen arreglos, listas, pilas y colas.</p> <p>Funciones y Procedimientos: Permiten dividir un programa en bloques m\u00e1s peque\u00f1os y reutilizables. Las funciones realizan tareas espec\u00edficas y pueden devolver resultados.</p> <p>Sintaxis y Sem\u00e1ntica: La sintaxis se refiere a las reglas de gram\u00e1tica de un lenguaje de programaci\u00f3n, mientras que la sem\u00e1ntica se refiere al significado de las instrucciones.</p> <p>Orientaci\u00f3n a Objetos: Un paradigma de programaci\u00f3n que utiliza objetos (instancias de clases) que contienen datos y m\u00e9todos. La encapsulaci\u00f3n, la herencia y el polimorfismo son conceptos clave en la programaci\u00f3n orientada a objetos.</p> <p>Manejo de Errores y Excepciones: C\u00f3mo gestionar situaciones inesperadas o errores que pueden ocurrir durante la ejecuci\u00f3n de un programa.</p> <p>*** Entrada/Salida (I/O)</p> <p>C\u00f3mo interactuar con el usuario y con otros sistemas mediante la entrada y salida de datos.</p> Python<pre><code># Se imprime \"Hola Mundo\" en pantalla\nprint (\"Hola Mundo\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola Mundo\n</code></pre> <p>Pruebas y Depuraci\u00f3n: M\u00e9todos para verificar la correcci\u00f3n del c\u00f3digo y encontrar y corregir errores.</p> <p>L\u00f3gica de Programaci\u00f3n: La habilidad para pensar l\u00f3gicamente y resolver problemas de manera eficiente es esencial para la programaci\u00f3n.</p> <p>Estos fundamentos son aplicables a la mayor\u00eda de los lenguajes de programaci\u00f3n, aunque la sintaxis puede variar. Familiarizarse con estos conceptos proporciona una base s\u00f3lida para el desarrollo de software efectivo y la adaptaci\u00f3n a nuevos lenguajes de programaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/alcance-de-una-constante/","title":"Alcance de una constante","text":"<p>El alcance de una constante en programaci\u00f3n se refiere a la regi\u00f3n del programa donde la constante es v\u00e1lida y puede ser utilizada. El alcance de una constante depende del lenguaje de programaci\u00f3n y de c\u00f3mo se define y se declara.</p> <p>En muchos lenguajes de programaci\u00f3n, el alcance de una constante es global, lo que significa que la constante es accesible desde cualquier parte del programa. Por ejemplo, si se declara una constante al inicio del programa, esa constante puede ser utilizada en cualquier funci\u00f3n, clase o m\u00f3dulo dentro del programa.</p> <p>Sin embargo, algunos lenguajes de programaci\u00f3n permiten declarar constantes con alcance local, limitando su visibilidad a una funci\u00f3n, bloque o \u00e1mbito espec\u00edfico. En este caso, la constante solo es v\u00e1lida y accesible dentro de ese \u00e1mbito y no puede ser utilizada fuera de \u00e9l.</p> <p>Es importante tener en cuenta que el alcance de una constante tambi\u00e9n puede estar determinado por el \u00e1mbito en el que se declara. Por ejemplo, si se declara una constante dentro de una funci\u00f3n, esa constante solo ser\u00e1 visible dentro de esa funci\u00f3n y no estar\u00e1 disponible en otras partes del programa.</p> <p>\u00a1Importante!</p> <p>el alcance de una constante puede variar seg\u00fan el lenguaje de programaci\u00f3n y c\u00f3mo se declare. </p> <p>Puede ser global, donde es accesible en todo el programa, o local, donde solo es v\u00e1lido dentro de un \u00e1mbito espec\u00edfico.</p> <p>check el link</p> <p>Si deseas profundizar sobre el tema, puedes releer la bibliograf\u00eda \u201dVariables - Alcance de una variable\u201d</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/caracteristicas-de-las-constantes/","title":"Caracter\u00edsticas de las constantes","text":""},{"location":"unidades/fundamentos-de-la-programacion/constantes/caracteristicas-de-las-constantes/#identificador-o-nombre-de-la-constante","title":"Identificador o nombre de la constante","text":"<p>Controlar las referencias de este tema</p> <p>El identificador o nombre de la constante servir\u00e1 para referenciarla a lo largo de la ejecuci\u00f3n del programa. </p> <p>Para definir un identificador v\u00e1lido, deberemos seguir la misma serie de reglas estudiadas en la bibliograf\u00eda \u201cVariables - Identificadores, reglas y convenci\u00f3n de nombres\u201d, pero teniendo en cuenta que se suele seguir una convenci\u00f3n de nombres en may\u00fasculas para diferenciarlas de las variables, que por lo general se escriben en min\u00fasculas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/caracteristicas-de-las-constantes/#alcance","title":"Alcance","text":"<p>El alcance de una constante determina en qu\u00e9 partes del programa (regi\u00f3n del programa) la constante existe y puede ser accedida o utilizada.</p> <p>As\u00ed, el alcance puede ser local, limitado a una funci\u00f3n o bloque de c\u00f3digo espec\u00edfico; o global, accesible desde cualquier parte del programa. Es importante tener en cuenta cual es el alcance de una constante para asegurarse de que se utilice correctamente en el contexto adecuado. </p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/caracteristicas-de-las-constantes/#tipo-de-datos-almacenados-en-la-constante","title":"tipo de dato almacenados en la constante","text":"<p>Es importante crear la constante de acuerdo con el tipo de dato del valor que va a almacenar para evitar errores. Los diferentes tipos de dato pueden afectar las operaciones que puedes realizar con la constante y c\u00f3mo se almacena (la computadora, dependiendo del tipo de dato que ser\u00e1 almacenado, reservar\u00e1 mayor o menor espacio de memoria) y maneja los datos e informaci\u00f3n de manera correcta. </p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/caracteristicas-de-las-constantes/#valor-asignado-a-la-constante","title":"Valor asignado a la constante","text":"<p>Contrario a una variable, una constante no puede tener referencia a un valor. Una constante es un valor fijo e inmutable, y su valor se establece en el momento de la declaraci\u00f3n y no puede ser cambiado durante la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/constantes/","title":"\u00bfQu\u00e9 son las constantes?","text":""},{"location":"unidades/fundamentos-de-la-programacion/constantes/constantes/#introduccion","title":"Introducci\u00f3n","text":"<p>Una constante es un valor fijo que no puede cambiar durante la ejecuci\u00f3n de un programa.</p> <p>Se utilizan para representar valores que se conocen de antemano y que no se espera que cambien, como n\u00fameros espec\u00edficos, cadenas de caracteres o valores booleanos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/constantes/#definicion","title":"Definici\u00f3n","text":"<p>Definici\u00f3n</p> <p>Una constante es un valor valor fijo, inmutable (que no puede cambiar) o un nombre simb\u00f3lico con un valor que se establece en el momento de la declaraci\u00f3n y no puede ser cambiado durante la ejecuci\u00f3n del programa. </p> <p>En programaci\u00f3n, las constantes se utilizan para representar valores que se conocen de antemano y que no se espera que cambien, como n\u00fameros espec\u00edficos, cadenas de caracteres o valores booleanos.</p> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que una constante de nombre simb\u00f3lico se trata como un valor literal en el c\u00f3digo y no como una referencia a un valor almacenado en alg\u00fan lugar de la memoria. Si necesitas un valor que pueda cambiar o hacer referencia a otro valor, deber\u00edas utilizar una variable en lugar de una constante.</p> <p>Al igual que las variables, una constante tiene un nombre \u00fanico o identificador asociado dentro de su \u00e1mbito o alcance.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/creacion-y-uso-de-constantes/","title":"Creaci\u00f3n y uso de constantes","text":"<p>reformular</p> <p>\u00a1Â¡Para recordar!!</p> <p>Como hemos dicho, las constantes se declaran utilizando una sintaxis espec\u00edfica, y suelen seguir una convenci\u00f3n de nombres en may\u00fasculas para diferenciarlas de las variables, que suelen tener nombres en min\u00fasculas.</p> <p>Por ejemplo, en el lenguaje de programaci\u00f3n C++, se puede declarar una constante entera de la siguiente manera:</p> C++<pre><code>// Inicializaci\u00f3n de la constante MI_CONSTANTE del tipo entero, con valor 10\nconst int MI_CONSTANTE = 10;\n</code></pre> <p>En este caso, MI_CONSTANTE es el nombre de la constante y se le asigna el valor entero de 10. </p> <p>``` warning \"\u00a1Muy importante!\" Una vez inicializada la constante, el valor almacenado en ella no podr\u00e1 ser modificado durante el resto del la ejecuci\u00f3n del programa. <pre><code>``` c++ title=\"C++\"\n// Inicializaci\u00f3n de la constante PI del tipo de punto flotante, con valor 3.14\nconst float PI = 3.14; \n\n// Inicializaci\u00f3n de la variable r del tipo de punto flotante, con valor 4\nfloat r = 4;\nstd::cout &lt;&lt; \"Un c\u00edrculo de radio \" &lt;&lt; r &lt;&lt; \" cm tiene \" &lt;&lt; (2 * PI * r) &lt;&lt; \" cm de per\u00edmetro.\";\n</code></pre></p> <p>En el ejemplo anterior, el programa imprimir\u00e1 en pantalla \"Un c\u00edrculo de radio 2 cm tiene 25.12 cm de per\u00edmetro.\"</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/resumen-sobre-constantes/","title":"Constantes: resumen","text":"<p>Las constantes tienen varias ventajas en la programaci\u00f3n:     * En primer lugar, ayudan a mejorar la legibilidad del c\u00f3digo, ya que proporcionan informaci\u00f3n clara sobre el prop\u00f3sito o el significado de un valor en particular.      * Adem\u00e1s, el uso de constantes en lugar de valores literales directamente en el c\u00f3digo hace que sea m\u00e1s f\u00e1cil realizar cambios y actualizaciones en el programa, ya que solo es necesario modificar el valor de la constante en un lugar para que tenga efecto en todo el programa.</p> <p>Es importante tener en cuenta que una constante se trata como un valor literal en el c\u00f3digo y no como una referencia a un valor almacenado en alg\u00fan lugar de la memoria. Si necesitas un valor que pueda cambiar o hacer referencia a otro valor, deber\u00edas utilizar una variable en lugar de una constante.</p> <p>El alcance de una constante puede variar seg\u00fan el lenguaje de programaci\u00f3n y c\u00f3mo se declare. Puede ser global, donde es accesible en todo el programa, o local, donde solo es v\u00e1lido dentro de un \u00e1mbito espec\u00edfico o bloque de c\u00f3digo particular.</p> <p>Es importante definir el tipo de dato correcto para una constante, ya que esto determina c\u00f3mo se almacenar\u00e1 y se manipular\u00e1 su valor.</p> <p><code>warning \"\u00a1Muy importante!\" Una vez inicializada la constante, el valor almacenado en ella no podr\u00e1 ser modificado durante el resto del la ejecuci\u00f3n del programa.</code></p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/sintaxis-de-una-constante/","title":"Sintaxis","text":"<p>Controlar este contenido</p> <p>En muchos lenguajes de programaci\u00f3n, las constantes se declaran utilizando una sintaxis espec\u00edfica, y suelen seguir una convenci\u00f3n de nombres en may\u00fasculas para diferenciarlas de las variables, que suelen tener nombres en min\u00fasculas. </p> Inicializaci\u00f3n<pre><code>const nombre_del_tipo_de_dato NOMBRE_DE_CONSTANTE = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> <p>Es importante tener en cuenta que algunos lenguajes de programaci\u00f3n tambi\u00e9n permiten especificar el tipo de dato de manera m\u00e1s precisa, como tipos de dato de punto flotante (float), cadenas de caracteres (string), booleanos (bool), etc. </p> <p>La sintaxis puede variar ligeramente entre los diferentes lenguajes de programaci\u00f3n, por lo que es recomendable consultar la documentaci\u00f3n oficial del lenguaje que est\u00e9s utilizando para obtener detalles espec\u00edficos sobre c\u00f3mo definir constantes con tipos de dato espec\u00edficos. </p> <pre><code>const float PI = 3.14159265359\nconst int HORAS_DEL_DIA = 24\nconst string NOMBRE_PLANETA = \u201dTierra\u201d\nconst int NUM1 = 4, NUM2 = 67\nconst char AFIRMACION = \"s\", NEGACION = \"n\"\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/tipos-de-constantes/","title":"Tipos de contantes","text":"<ul> <li> <p>Constante expresada por su valor literal: Es un valor expresado en forma expl\u00edcita. Se escribe como tal en el c\u00f3digo y no puede ser referenciado ya que no tiene un identificador asociado.</p> <pre><code>print(3.1416) \n</code></pre> </li> <li> <p>Constante expresada con un nombre simb\u00f3lico: El valor se encuentra almacenado, al igual que las variables, en un espacio de memoria asociado a un nombre simb\u00f3lico. Este nombre asociado siempre se escribe en MAY\u00daSCULAS.   As\u00ed, este valor se referencia en el c\u00f3digo a partir de su identificador asociado.     <pre><code>float PI = 3.1416\nprint (PI)\n</code></pre></p> </li> </ul> <p>Las constantes de nombre simb\u00f3lico tienen varias ventajas en la programaci\u00f3n:     * En primer lugar, ayudan a mejorar la legibilidad del c\u00f3digo, ya que proporcionan informaci\u00f3n clara sobre el prop\u00f3sito o el significado de un valor en particular.      * Adem\u00e1s, el uso de nombres simb\u00f3licas en lugar de valores literales directamente en el c\u00f3digo hace que sea m\u00e1s f\u00e1cil realizar cambios y actualizaciones en el programa, ya que solo es necesario modificar el valor de la constante en un lugar para que tenga efecto en todo el programa donde es utilizada.</p>"},{"location":"unidades/fundamentos-de-la-programacion/constantes/tipos-de-datos-de-las-constantes/","title":"tipos de dato de las constantes","text":"<p>El tipo de dato de una constante en programaci\u00f3n se refiere al tipo de valor que la constante representa. El tipo de dato determina c\u00f3mo se almacena y se manipula el valor de la constante en la memoria.</p> <p>El tipo de dato de una constante depende del lenguaje de programaci\u00f3n utilizado. Algunos de los tipos de dato comunes que se pueden utilizar para definir constantes incluyen:</p> <pre><code>* Enteros: representan n\u00fameros enteros, como 1, 5, -10, etc. Pueden tener diferentes tama\u00f1os y rangos, como int, short, long, etc.\n* Reales o de punto flotante: Representan n\u00fameros con parte decimal, como 3.14, -0.5, etc. Pueden ser de precisi\u00f3n simple (float) o doble precisi\u00f3n (double), y tambi\u00e9n pueden tener diferentes rangos y precisi\u00f3n seg\u00fan el lenguaje.\n* cadenas de caracteres: representan secuencias de caracteres, como \"Hola\", \"Mundo\", etc. En muchos lenguajes, las cadenas de caracteres se pueden definir utilizando comillas simples o dobles, como 'texto' o \"texto\".\n* Valores booleanos: representan el estado l\u00f3gico verdadero o falso. En general, se pueden representar utilizando los literales true o false.\n* Otros tipos de dato: dependiendo del lenguaje de programaci\u00f3n, tambi\u00e9n se pueden utilizar otros tipos de dato para definir constantes, como caracteres individuales, fechas, objetos, etc.\n</code></pre> <p>\u00a1Importante!</p> <p>Es importante definir el tipo de dato correcto para una constante, ya que esto determina c\u00f3mo se almacenar\u00e1 y se manipular\u00e1 su valor. </p> <p>Algunos lenguajes de programaci\u00f3n tambi\u00e9n realizan verificaciones de tipo en tiempo de compilaci\u00f3n para garantizar que las constantes se utilicen correctamente en el c\u00f3digo.</p> <p>check el link</p> <p>Si deseas profundizar sobre el tema, puedes releer la bibliograf\u00eda \u201d Variables - tipo de dato almacenados en una variable. Conversi\u00f3n de tipo de dato\u201d</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/","title":"Introducci\u00f3n a las sentencias de control de flujo","text":""},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#introduccion","title":"Introducci\u00f3n","text":"<p>Los programas usan sentencias de control de flujo para ejecutar sentencias condicionalmente, repetir sentencias o saltar a otra parte del programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#que-es-una-sentencia-de-control-de-flujo","title":"\u00bfQu\u00e9 es una sentencia de control de flujo?","text":"<p>Cuando se escribe un programa, se est\u00e1n escribiendo sentencias (Â¡Para recordar! que son instrucciones o declaraciones) en un archivo. Sin sentencias de control de flujo, el programa se ejecuta en el orden en que aparecen escritas las sentencias en el archivo, de izquierda a derecha y de arriba a abajo. </p> <p>Para alterar este comportamiento de manera condicional (esto es a partir de validar o no una condici\u00f3n espec\u00edfica) se deben incluir sentencias de control de flujo de control.</p> <p>Estas sentencias permiten que el flujo del programa ejecute o no ejecute determinadas sentencias, o que ejecute repetidamente una o m\u00e1s sentencias agrupadas en un bloque, o que pueda cambiar su secuencia normal saltando a otra secuencia del programa de manera no secuencial, es decir, saltando a otra sentencia en otra ubicaci\u00f3n no consecutiva a la sentencia que se encuentra en ejecuci\u00f3n.</p> <p>Por ejemplo, en el siguiente fragmento de c\u00f3digo, la instrucci\u00f3n si ejecuta condicionalmente la salida por pantalla de un mensaje seg\u00fan el resultado que devuelva la expresi\u00f3n que eval\u00faa si el valor almacenado en una variable se encuentra en may\u00fasculas o no:</p> C\u00f3digo generalizado<pre><code>char letra\n\n\u22ee\n\nletra = input(\"Ingrese una letra por teclado: \")\n\nsi letra est\u00e1 en mayusculas entonces\n    print(\"la letra \" + letra + \" est\u00e1 en may\u00fasculas.\")\nfin si\n\n\u22ee\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#estructuras-de-control-de-flujo","title":"Estructuras de control de flujo","text":"<p>\u00a1Hablemos con propiedad!</p> <p>Si bien en unidades pasadas hablamos de sentencias de control de flujo, lo correcto es llamarlas estructuras de control de flujo puesto que si bien son sentencias, en realidad, estas sentencias se encuentran estructuradas, agrupadas, con cierta coherencia para que se comporten de determinada manera a lo largo de la ejecuci\u00f3n del programa.</p> <p>Las estructuras de control de flujo modifican la ejecuci\u00f3n secuencial de las sentencias que forman un programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#estructura-de-seleccion","title":"Estructura de selecci\u00f3n","text":"<p>La estructura de selecci\u00f3n (control de flujo condicional), tambi\u00e9n conocida como estructura de toma de decisiones o decision making, se usa para decidir el control de flujo, basadas en una condici\u00f3n, usando la cl\u00e1usula if.</p> <p>Se utilizan para ejecutar selectivamente un conjunto de sentencias, seg\u00fan se satisfaga o no una condici\u00f3n.</p> <ul> <li>control de flujo condicional if </li> </ul> <p>Se utiliza para ejecutar un bloque de c\u00f3digo, solo si la condici\u00f3n es verdadera. Si la condici\u00f3n es falsa, no ejecuta ning\u00fan otro bloque relacionado al if y el programa contin\u00faa con la siguiente instrucci\u00f3n.</p> <pre><code>``` js title=\"C\u00f3digo generalizado\" \nif (x &gt; 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es mayor a 10\n    print (\"El n\u00famero es mayor a 10.\")\n\n}\n```\n</code></pre> <p>Ejercicio de aplicaci\u00f3n:</p> <pre><code>Ingresar un n\u00famero entero por teclado.  \nLuego imprimir en pantalla si el n\u00famero ingresado es positivo.\n\nVer resultado (1)\n    { .annotate }\n\n    1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    n = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\n    if n &gt; 0:\n        print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n    ```\n\n    &gt; En este ejercicio, al imprimir utilizando la coma en lugar del operador de concatenaci\u00f3n, lo que se est\u00e1 haciendo es imprimir un conjunto de argumentos en lugar de armar una cadena de texto.  \n    &gt; Esto permite \"mezclar\" distintos tipos de dato entre si, porque en realidad no se est\u00e1 mezclando nada.  \n    &gt; Si en lugar de utilizar la coma se hubiera utilizado el operador de concatenaci\u00f3n, se tendr\u00eda que haber compatibilizado todos los tipos de dato como cadenas:\n\n    ``` py title=\"Python\"\n    print(str(n) + \" es positivo.\")\n    ```\n</code></pre> <ul> <li>control de flujo condicional if \u2026 else </li> </ul> <p>Se utiliza para ejecutar un bloque de c\u00f3digo si la condici\u00f3n es verdadera y otro bloque si la condici\u00f3n es falsa.</p> <pre><code>``` js title=\"C\u00f3digo generalizado\" \nif (x &gt; 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es mayor a 10\n    print (\"El n\u00famero es mayor a 10.\")\n\n} else {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x NO es mayor a 10\n    print (\"El n\u00famero no es mayor a 10.\")\n\n}\n```\n</code></pre> <p>Ejercicio de aplicaci\u00f3n:</p> <pre><code>Ingresar un n\u00famero entero por teclado.  \nLuego imprimir en pantalla si el n\u00famero ingresado es positivo o negativo.\n\n!!! warning \"\u00a1Atenci\u00f3n! Limitaci\u00f3n\"\n    En este ejercicio vamos a descartar el cero. No lo tenemos en cuenta.\n\nVer resultado (1)\n    { .annotate }\n\n    1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    n = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\n    if n &gt; 0:\n        print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\n    else\n        print(n, \"es negativo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n    ```\n</code></pre> <ul> <li>control de flujo condicional if \u2026 else anidada</li> </ul> <p>Aqu\u00ed, se utilizan m\u00faltiples if \u2026 else para decidir el flujo de control, respetando la l\u00f3gica arriba explicada.</p> <pre><code>``` js title=\"C\u00f3digo generalizado\" \nif (x &gt; 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es mayor a 10\n    print (\"El n\u00famero es mayor a 10.\")\n\n} else if (x == 10) {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x es igual a 10\n    print (\"El n\u00famero es igual a 10.\")\n\n} else {\n\n    // el bloque de c\u00f3digo que contiene esta rama de la estructura alternativa se ejecuta solo si x NO es mayor y NO es igual a 10\n    print (\"El n\u00famero no es mayor y no es igual a 10. Es menor.\")\n\n}\n```\n</code></pre> <p>Â¡Para recordar!</p> <p>Dependiendo del lenguaje de programaci\u00f3n, la estructura else if podr\u00eda escribirse diferente, como elseif o elif por ejemplo.</p> <p>Ejercicio de aplicaci\u00f3n:</p> <pre><code>Ingresar un n\u00famero entero por teclado.  \nLuego imprimir en pantalla si el n\u00famero ingresado es positivo, negativo o neutro.\n\nVer resultado (1)\n    { .annotate }\n\n    1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    n = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\n    if n &gt; 0:\n        print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\n    elif n &lt; 0:\n        print(n, \"es negativo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\n    else:\n        print(n, \"es neutro.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n    ```\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#diferencia-entre-if-como-expresion-vs-if-como-sentencia","title":"Diferencia entre if como expresi\u00f3n vs. if como sentencia","text":"<p>\u00a1Importante!</p> <p>La diferencia entre expresiones y sentencias es que las expresiones devuelven un valor y, por lo tanto, se pueden usar en lugares donde se requieren valores, mientras que las sentencias son instrucciones o bloque de instrucciones que se ejecutan en un programa, pero en si, no devuelven ning\u00fan valor si no a trav\u00e9s de una expresi\u00f3n contenida en la sentencia. </p> <p>As\u00ed, el resultado de una expresi\u00f3n se puede usar como valor para almacenar en una variable, como argumento para pasar a una funci\u00f3n, o como operando para realizar alguna operaci\u00f3n con operadores; mientras que las sentencias no devuelven ning\u00fan resultado .</p> <p>Si la estructura if se utiliza como expresi\u00f3n, podr\u00edas hacer esto: </p> C\u00f3digo generalizado<pre><code>const miValor = if condici\u00f3n { valor1 } else { valor2 }\n</code></pre> <p>Si la estructura if se utiliza como sentencia, podr\u00edas hacer esto: </p> C\u00f3digo generalizado<pre><code>int miValor\nif condici\u00f3n {\n    miValor = valor1\n} else {\n    miValor = valor2\n}\n</code></pre> <ul> <li>control de flujo condicional switch</li> </ul> <p>Se usa para decidir el control de flujo, basadas en casos, usando la cl\u00e1usula switch. </p> <p>la sentencia switch tambi\u00e9n entra en esta categor\u00eda, donde la selecci\u00f3n se realiza utilizando las declaraciones de case y default. Es una manera alternativa a la sentencia if-else anidada para evaluar decisiones m\u00faltiples. Esta sentencia se combina con sentencias de interrupci\u00f3n o salto y sentencias etiquetadas, como veremos m\u00e1s adelante.</p> <p>Cuando el valor de opcion no se corresponde con ning\u00fan case y existe el caso default, se ejecuta el bloque correspondiente al caso default.</p> <p>Las declaraciones case y default no interrumpen por s\u00ed mismas el flujo de control del programa. Por ello, es necesario una sentencia de salto (normalmente la instrucci\u00f3n break).</p> <p>Si se omite el break al final de un caso, el programa pasa a ejecutar las sentencias de los casos siguientes hasta encontrar un break o hasta el final del switch.</p> <p>Se recomienda situar el caso default en \u00faltimo lugar e incluir siempre un break al final de su secuencia de sentencias asociada.</p> <pre><code>``` js title=\"C\u00f3digo generalizado\"\nint opcion = 2;\n\nswitch (opcion) {\n    case 1:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 1.\");\n        break;\n\n    case 2:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 2.\");\n\n    default:\n        print(\"Esta rama de flujo del programa se recorre por defecto si no hay una opci\u00f3n case que concuerde.\");\n        break;   \n}   \n```\n\n&gt; No pueden existir dos casos iguales en un mismo switch (un mismo caso, s\u00ed puede ocurrir en distintos switch anidados).\n</code></pre> <p>Â¡Para recordar!</p> <p>Una sentencia switch es m\u00e1s eficiente que una escalera de if-else anidada.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#sentencias-de-iteracion","title":"Sentencias de iteraci\u00f3n","text":"<p>Se utilizan para seguir ejecutando una sentencia o un bloque de sentencias mientras se cumpla o hasta que se cumpla una cierta condici\u00f3n. </p> <p>tambi\u00e9n conocidas como sentencias de bucle o looping, se utiliza para repetir el mismo bloque de c\u00f3digo una y otra vez hasta un n\u00famero determinado de veces o basado en la veracidad o falsedad de una condici\u00f3n. Existen tres tipos de sentencias de iteraci\u00f3n:</p> <ul> <li>bucle o ciclo cerrado for \u2026 next </li> </ul> <p>Se utiliza para repetir un bloque de c\u00f3digo un n\u00famero espec\u00edfico de veces, en funci\u00f3n de la veracidad de una condici\u00f3n, simple o compuesta.</p> <pre><code>``` js title=\"C\u00f3digo generalizado\"\nfor (i = 1; i &lt;= 5; i++) {\n    print (i);\n} // la llave cerrada representa next i\n```\n</code></pre> <ul> <li>bucle o ciclo abierto con la condici\u00f3n a la entrada while \u2026 loop | until \u2026 loop </li> </ul> <p>Se utiliza para repetir un bloque de c\u00f3digo mientras o hasta que se cumpla una condici\u00f3n.</p> <p>La comprobaci\u00f3n de la condici\u00f3n se realiza antes de la ejecuci\u00f3n del bloque de sentencias, y por tanto puede que \u00e9ste no se ejecute ni una vez.</p> <pre><code>``` js title=\"C\u00f3digo generalizado\"\nj = 0;\nwhile (j &lt; 5) {\n\n    // este bloque de c\u00f3digo se va a repetir mientras j sea menor a 5\n    print (j);\n    j++;\n\n} // la llave cerrada representa loop\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\nj = 0;\nuntil (j &gt;= 5) {\n    print (j);\n    j++;\n} // la llave cerrada representa loop    \n```\n</code></pre> <ul> <li>bucle o ciclo abierto con la condici\u00f3n a la salida do \u2026 loop while | do \u2026 loop until</li> </ul> <p>Se utiliza para repetir un bloque de c\u00f3digo mientras o hasta que se cumpla una condici\u00f3n, simple o compuesta.</p> <p>La comprobaci\u00f3n de la condici\u00f3n se realiza despu\u00e9s de la ejecuci\u00f3n del bloque de sentencias, y por tanto \u00e9ste siempre se ejecuta al menos una vez.</p> <pre><code>``` js title=\"C\u00f3digo generalizado\"\ndo {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop while (n != 0)\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\ndo {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop until (n == 0)\n```\n\n&gt; Como se puede observar en ambos ciclos abiertos, la palabra reservada `while` est\u00e1 de un color mientras que `until` no lo est\u00e1.\n&gt; Esto se debe a que no es com\u00fan encontrar disponible la segunda opci\u00f3n en la mayor\u00eda de los lenguajes.  \n&gt; Sin embargo, corresponde informar acerca de su existencia ya que en caso de existir, es v\u00e1lido utilizarla si con ella se mejora la formulaci\u00f3n de la condici\u00f3n de repitancia del ciclo.\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#estrutura-de-manejo-de-excepciones","title":"Estrutura de manejo de excepciones","text":""},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#sentencias-de-control-de-flujo","title":"Sentencias de control de flujo","text":"<p>Ahora si podemos hablar de un \u00faltimo grupo de instrucciones que si pueden llamarse sentencias de control de flujo:</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#sentencias-de-salto","title":"Sentencias de salto","text":"<p>Se utilizan para alterar de manera incondicional el orden de ejecuci\u00f3n de las sentencias de un programa. S\u00f3lo deber\u00edan utilizarse con el fin de simplificar o mejorar los algoritmos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#expresiones-condicionales-if-else-y-el-operador-ternario","title":"Expresiones condicionales if \u2026 else y el operador ternario","text":"<p>Una expresi\u00f3n condicional que no sea una declaraci\u00f3n podr\u00eda referirse al uso de operadores condicionales que eval\u00faan una condici\u00f3n y retornan un valor en lugar de controlar el flujo de ejecuci\u00f3n.</p> <p>Entonces, se utiliza la estructura if \u2026 else como expresi\u00f3n para producir un valor basado en una condici\u00f3n. Esto puede ser \u00fatil para asignaciones concisas u operaciones condicionales en una l\u00ednea de c\u00f3digo, ya que permite devolver un valor espec\u00edfico basado en una condici\u00f3n, dependiendo de si esta condici\u00f3n es verdadera o falsa. </p> <p>El operador ternario, tambi\u00e9n conocido como operador condicional, es un operador utilizado en muchos lenguajes de programaci\u00f3n, como Javascript, para evaluar una condici\u00f3n y seleccionar uno de dos valores posibles, dependiendo del resultado de esa condici\u00f3n. </p> <p>El operador ternario se llama \"ternario\" porque toma tres operandos:      * la condici\u00f3n a evaluar,      * el valor que se devuelve si la condici\u00f3n es verdadera, y      * el valor que se devuelve si la condici\u00f3n es falsa.</p> <p>En otras palabras, el operador ternario permite asignar un valor o ejecutar una expresi\u00f3n bas\u00e1ndose en una condici\u00f3n de una manera m\u00e1s concisa.</p> <p>Sin embargo, es importante no abusar de su uso excesivo para mantener la claridad y la legibilidad del c\u00f3digo.</p> <p>\u00a1Importante!</p> <p>Es importante mencionar que la sintaxis y la manera de utilizar las expresiones condicionales pueden variar seg\u00fan el lenguaje de programaci\u00f3n.</p> <p>Cada lenguaje tiene su propia sintaxis y convenciones para expresiones condicionales. Por lo tanto, siempre es recomendable consultar la documentaci\u00f3n espec\u00edfica del lenguaje para obtener informaci\u00f3n detallada sobre las expresiones condicionales disponibles en ese contexto.</p> <p>A continuaci\u00f3n, veamos algunos ejemplos en varios lenguajes:</p> Javascript: sintaxis<pre><code>condici\u00f3n ? valor_si_verdadero : valor_si_falso\n</code></pre> <p>Aqu\u00ed, condici\u00f3n es una expresi\u00f3n booleana que se eval\u00faa. Si la condici\u00f3n es verdadera, se devuelve  valor_si_verdadero. Si la condici\u00f3n es falsa, se devuelve valor_si_falso.</p> Javascript<pre><code>const edad = 25\nconst es_adulto = edad &gt;= 18 ? \"Es adulto\" : \"No es adulto\"\nconsole.log(es_adulto)  // Salida: Es adulto\n</code></pre> <p>En este ejemplo, se eval\u00faa la condici\u00f3n edad &gt;= 18. Si esta es verdadera (lo cual es cierto en este caso), se devuelve la cadena \"Es adulto\". De lo contrario, se hubiera devuelto la cadena \"No es adulto\". El valor devuelto es asignado a la variable es_adulto. Luego, el valor almacenado en esta se imprime en la consola.</p> <p>Recreemos el mismo programa pero en otro lenguaje de programaci\u00f3n cuya sintaxis se escribe diferente:</p> Python: sintaxis<pre><code>valor_si_verdadero if condici\u00f3n else valor_si_falso\n</code></pre> <p>Aqu\u00ed, la expresi\u00f3n que contiene a la instrucci\u00f3n if eval\u00faa la condici\u00f3n. Si la condici\u00f3n es verdadera, se devuelve el valor especificado antes de la instrucci\u00f3n if. Si la condici\u00f3n es falsa, se devuelve el valor especificado despu\u00e9s de la instrucci\u00f3n else.</p> Python<pre><code>edad = 25\nes_adulto = \"Es adulto\" if edad &gt;= 18  else \"No es adulto\"\nprint(es_adulto)  // Salida: Es adulto\n</code></pre> <p>Volvamos al ejercicio de aplicaci\u00f3n que hicimos hace un tiempo atr\u00e1s:</p> <pre><code>Ingresar un n\u00famero entero por teclado.  \nLuego imprimir en pantalla si el n\u00famero ingresado es positivo, negativo o neutro.\n\n``` py title=\"Python\"\nn = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\nif n &gt; 0:\n    print(n, \"es positivo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\nelif n &lt; 0:\n    print(n, \"es negativo.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n\nelse:\n    print(n, \"es neutro.\") # usamos la coma ( , ) en lugar del operador de concatenaci\u00f3n ( + ) \n```\n</code></pre> <p>Si resolvi\u00e9semos este ejercicio implementando el operador ternario, ser\u00eda mucho mas corto.</p> <p>\u00a1Int\u00e9ntalo!</p> <pre><code>Ver resultado (1)\n    { .annotate }\n\n    1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    n = int(input(\"ingrese un numero: \")) # el comando *input* siempre devuelve una cadena. Es preciso convertirla a entero.\n\n    print(n, \"es\", \"positivo\" if n &gt; 0 else (\"negativo\" if n &lt; 0 else \"neutro\"))\n    ```\n\n    !!! question \"\u00a1Para analizar!\"\n        \u00bfCu\u00e1ntos operadores ternarios se utilizaron en el ejercicio?\n\n        \u00bfPuedes identificarlo o identificarlos si fueron m\u00e1s de uno?\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#expresiones-condicionales-if-else-y-el-operador-logico-or","title":"Expresiones condicionales if \u2026 else y el operador l\u00f3gico OR","text":"<p>En algunos lenguajes, como Javascript, adem\u00e1s del operador ternario existe otra forma de realizar una estructura condicional como expresi\u00f3n, conocida como estructura alternativa u operador l\u00f3gico OR. En Javascript se emplea con doble barra vertical ( || ). </p> <p>Esta estructura se puede utilizar para asignar un valor basado en una condici\u00f3n sin necesidad de usar un bloque if o el operador ternario.</p> <p>Esta estructura alternativa se basa en la evaluaci\u00f3n de cortocircuito del operador l\u00f3gico OR.  El operador OR devuelve el primer valor verdadero que encuentre en una serie de condiciones representadas como expresiones evaluadas en orden. Si todas las expresiones son falsas, devuelve el \u00faltimo valor.</p> Javascript: sintaxis<pre><code>condici\u00f3n_1 (|| \u2026 condici\u00f3n_2 || \u2026 condici\u00f3n_n) || valor_si_falso\n</code></pre> <p>Aqu\u00ed, condici\u00f3n_1 es una expresi\u00f3n que se eval\u00faa. Si la expresi\u00f3n es verdadera, se devuelve el valor de la condici\u00f3n_1. Pero si la expresi\u00f3n es falsa, se devuelve el valor_si_falso.</p> <p>Atenci\u00f3n</p> <p>Esta estructura alternativa puede ser \u00fatil cuando se desea asignar un valor predeterminado o un valor alternativo en caso de que una variable sea falsa o no est\u00e9 definida. </p> <p>Sin embargo, es importante tener en cuenta que este enfoque solo es adecuado para casos en los que se desea asignar un valor espec\u00edfico o predeterminado y no para realizar acciones m\u00e1s complejas como ejecutar bloques de c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/control-de-flujo/introduccion-control-de-flujo/#ejemplos","title":"Ejemplos","text":"<p>Las siguientes expresiones condicionales permiten asignar un valor o realizar operaciones basadas en una condici\u00f3n en una \u00fanica l\u00ednea de c\u00f3digo sin afectar directamente el flujo de ejecuci\u00f3n.</p> Javascript: asignaci\u00f3n de un valor predeterminado<pre><code>const nombre = ''\nconst nombre_valido = nombre || 'Nombre desconocido'\nconsole.log(nombre_valido); // Salida: 'Nombre desconocido'\n</code></pre> <p>En este ejemplo, la variable nombre se eval\u00faa en un contexto booleano. Si el valor de nombre es una cadena vac\u00eda (falso), null o indefinido, se devuelve el valor Nombre desconocido. Si nombre tuviera un valor distinto de una cadena vac\u00eda (verdadero), se devolver\u00eda el valor almacenado en nombre.</p> Javascript: validaci\u00f3n de argumentos de una funci\u00f3n<pre><code>function saludar(nombre) {\n    nombre = nombre || 'Invitado'\n    console.log(`\u00a1Hola, ${nombre}!`)\n}\n\nsaludar(); // Salida: \u00a1Hola, Invitado!\nsaludar('Pedro'); // Salida: \u00a1Hola, Pedro!\n</code></pre> <p>En este ejemplo, si no se proporciona un argumento al par\u00e1metro nombre al llamar a la funci\u00f3n saludar(), se asignar\u00e1 autom\u00e1ticamente el valor 'Invitado'.</p> <p>Para saber un poco mas</p> <p>`<code>${nombre}</code>` : El uso de las comillas invertidas ( ` ) con el signo pesos seguido de una variable encerrada entre llaves permite reemplazar dicha variable por su valor almacenado dentro de una cadena de texto.</p> Javascript: uso en una expresi\u00f3n booleana<pre><code>const es_valido = respuesta === \u2018si' || respuesta === 'yes'\n</code></pre> <p>En este ejemplo, es_valido se eval\u00faa como true si la variable respuesta tiene el valor si o yes.</p> Javascript : selecci\u00f3n de valor basado en condiciones<pre><code>const mensaje = (estado === 'error' || estado === 'fallido') ? 'Ha ocurrido un error.' : 'Operaci\u00f3n exitosa.'\n</code></pre> <p>Aqu\u00ed, el valor de mensaje se selecciona dependiendo del valor de estado. Si estado es igual a error o fallido, se asigna el mensaje de error. De lo contrario, se asigna el mensaje de operaci\u00f3n exitosa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/ejercitacion/ejercitacion-final/","title":"Fundamentos de la programaci\u00f3n: Ejercitaci\u00f3n final","text":"<ol> <li> <p>Crea una variable que contenga tu nombre y apellido a continuaci\u00f3n del c\u00f3digo abajo escrito. Luego, Imprime un saludo utilizando los datos almacenados en la variable.</p> Python<pre><code>print(\"\\033[2J\\033[1H\") # Limpia la pantalla\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\nprint(\"Hola\", nombre)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola Pablo Martinez Roca\n</code></pre> </li> </ol> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Ingresa tu edad por teclado (escribe una oraci\u00f3n amigable que le solicite al usuario que ingrese su edad).  </p> <p>Luego, imprime tu edad en pantalla (escribe una oraci\u00f3n amigable que le indique al usuario su edad).</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\nprint(\"Hola\", nombre)\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Tienes\", edad, \"a\u00f1os.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola Pablo Martinez Roca\nIngresa tu edad: 45\nTienes 45 a\u00f1os.\n</code></pre> </li> </ol> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que responda a lo siguiente:  </p> <p>Imprime en pantalla: \"Hola (tu nombre). Tu edad es (tu edad) a\u00f1os.\" en un mismo rengl\u00f3n, sin utilizar la coma (,).</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n</code></pre> </li> </ol> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Utiliza el siguiente c\u00f3digo para simular una pausa: </p> <pre><code>input(\"Presiona enter para continuar...\")\n</code></pre> <p>Luego agrega el c\u00f3digo del ejercicio 1 que sirve para limpiar la pantalla.  </p> <p>A continuaci\u00f3n, imprime en pantalla si tu edad es par o impar (utiliza el operador m\u00f3dulo ( % ) para calcular el resto de una divisi\u00f3n).  </p> <p>La salida en pantalla debe ser exactamente de la siguiente forma: </p> Terminal (Entrada/Salida)<pre><code>Tu edad es par ( *edad* )\n</code></pre> <p>o </p> Terminal (Entrada/Salida)<pre><code>Tu edad es impar ( *edad* )\n</code></pre> <p>Donde *edad* es el n\u00famero almacenado en la variable edad, ingresado por teclado.  </p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n</code></pre> </li> </ol> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Agrega el c\u00f3digo que sirve para simular una pausa.  </p> <p>Luego agrega el c\u00f3digo que sirve para limpiar la pantalla.  </p> <p>Ingresa otro n\u00famero por teclado.  </p> <p>Imprime en pantalla si el n\u00famero es mayor, igual o menor que tu edad, en ese orden de comparaci\u00f3n. Arma una oraci\u00f3n con el n\u00famero, tu edad y el resultado de la comparaci\u00f3n.  </p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnumero = int(input(\"Ingresa un n\u00famero cualquiera: \"))\n\nif numero &gt; edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es mayor a tu edad (\" + str(edad) + \").\")\nelif numero == edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es igual a tu edad (\" + str(edad) + \").\")\nelse:\n    print(\"El n\u00famero (\" + str(numero) + \") es menor a tu edad (\" + str(edad) + \").\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nIngresa un n\u00famero cualquiera : 7\nEl n\u00famero (7) es menor a tu edad (45).\n</code></pre> </li> </ol> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Modifica el c\u00f3digo para que cuando el n\u00famero sea igual que tu edad, solicite n\u00fameros hasta que se rompa la igualdad.  </p> <p>Luego, que imprima si el n\u00famero es menor o mayor que tu edad armando una oraci\u00f3n con el n\u00famero, tu edad y el resultado de la comparaci\u00f3n, tal como has hecho en el ejercicio anterior.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnumero = int(input(\"Ingresa un n\u00famero cualquiera: \"))\n\nwhile numero == edad:\n    print(\"El n\u00famero ingresado (\" + str(numero) + \") es igual a tu edad (\" + str(edad) + \"), pero no pueden ser iguales.\")\n    numero = int(input(\"Ingresa un n\u00famero distinto: \"))\n\nif numero &gt; edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es mayor a tu edad (\" + str(edad) + \").\")\nelse:\n    print(\"El n\u00famero (\" + str(numero) + \") es menor a tu edad (\" + str(edad) + \").\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nIngresa un n\u00famero cualquiera: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 52\n\nEl n\u00famero (52) es mayor a tu edad (45).\n</code></pre> </li> </ol> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:  </p> <p>Agrega el c\u00f3digo que sirve para simular una pausa.  </p> <p>Luego agrega el c\u00f3digo que sirve para limpiar la pantalla.  </p> <p>Agrega el c\u00f3digo con las estructuras y variables necesarias para imprimir la secuencia de n\u00fameros desde tu edad hasta el segundo n\u00famero ingresado. Ten en cuenta que puede ser una secuencia ascendente o descendente. </p> <p>Por ejemplo si tu edad es 5 y el segundo n\u00famero ingresado es 10, la secuencia a imprimir ser\u00e1:</p> Terminal (Entrada/Salida)<pre><code>5 6 7 8 9 10\n</code></pre> <p>Pero si tu edad es 10 y el segundo n\u00famero ingresado es 5, la secuencia a imprimir ser\u00e1:</p> Terminal (Entrada/Salida)<pre><code>10, 9, 8, 7, 6, 5  \n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnombre = \"Pablo Martinez Roca\"\n\nedad = int(input(\"Ingresa tu edad: \"))\n\nprint(\"Hola \" + nombre + \". Tu edad es \" + str(edad) + \" a\u00f1os.\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nif edad % 2 == 0:\n    print(\"Tu edad es par (\" +  str(edad) + \")\")\nelse:\n    print(\"Tu edad es impar (\" +  str(edad) + \")\")\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nnumero = int(input(\"Ingresa un n\u00famero cualquiera: \"))\n\nwhile numero == edad:\n    print(\"El n\u00famero ingresado (\" + str(numero) + \") es igual a tu edad (\" + str(edad) + \"), pero no pueden ser iguales.\")\n    numero = int(input(\"Ingresa un n\u00famero distinto: \"))\n\nif numero &gt; edad:\n    print(\"El n\u00famero (\" + str(numero) + \") es mayor a tu edad (\" + str(edad) + \").\")\n\n    paso = 1 # Esta ser\u00e1 la variable que controle el incremento o decremento de valores que imprimir\u00e1 el ciclo\n\nelse:\n    print(\"El n\u00famero (\" + str(numero) + \") es menor a tu edad (\" + str(edad) + \").\")\n\n    paso = -1 # Esta ser\u00e1 la variable que controle el incremento o decremento de valores que imprimir\u00e1 el ciclo\n\ninput(\"Presiona enter para continuar...\") # Simula una pausa\n\nprint(\"\\033[2J\\033[1H\") # Limpia la pantalla\n\nfor n in range(edad, numero + paso, paso):\n    print(n, end= \" \")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingresa tu edad: 45\nHola Pablo Martinez Roca. Tu edad es 45 a\u00f1os.\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nTu edad es impar (45)\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\nIngresa un n\u00famero cualquiera: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 45\n\nEl n\u00famero ingresado (45) es igual a tu edad (45), pero no pueden ser iguales.\nIngresa un n\u00famero distinto: 52\n\nEl n\u00famero (52) es mayor a tu edad (45).\n\nPresiona enter para continuar...\n\n(... limpia la pantalla...)\n\n45 46 47 48 49 50 51 52\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/bloques-de-sentencias-de-un-programa/","title":"Bloques de sentencias de un programa","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/bloques-de-sentencias-de-un-programa/#que-es-un-bloque-de-sentencias-block-statements","title":"\u00bfQu\u00e9 es un bloque de sentencias (block statements)?","text":"<p>Definici\u00f3n</p> <p>Un bloque de sentencias es una secci\u00f3n de un programa que est\u00e1 agrupada por cero o m\u00e1s sentencias, delimitada por un conjunto de llaves equilibradas ( { } ), o \u201cindentados\u201d, es decir, visualmente alineadas y desplazadas hacia la derecha mediante espacios o tabulaciones (creando una estructura jer\u00e1rquica y facilitando la legibilidad del c\u00f3digo), o mediante palabras clave espec\u00edficas del lenguaje de programaci\u00f3n utilizado. </p> <p>Estos bloques pueden contener una o m\u00e1s sentencias o instrucciones que se ejecutan secuencialmente cuando el programa ingresa en ellos.</p> <p>Un bloque de sentencias tambi\u00e9n puede identificarse como sentencia compuesta.</p> Bloques de sentencias utilizando llaves<pre><code>if (x &gt; 5) {\n    print(\"x es mayor que 5\");\n    print(\"Sigo dentro del bloque if\");\n}\nprint(\"Fuera del bloque if\");\n</code></pre> <p><code>py title:\"Bloques de sentencias utilizando indentaci\u00f3n\" if x &gt; 5:     print(\"x es mayor que 5\")     print(\"Sigo dentro del bloque if\") print(\"Fuera del bloque if\")</code></p> <p>Los bloques de c\u00f3digo se utilizan para agrupar l\u00f3gicamente un conjunto de instrucciones que deben ejecutarse juntas como una unidad. Pueden ser utilizados en diversas estructuras de control, como bucles o condicionales, y tambi\u00e9n pueden ser definidos en funciones o m\u00e9todos.</p> <p>Â¡Para recordar!</p> <p>Los bloques de sentencias ayudan a organizar y estructurar el c\u00f3digo fuente, permitiendo una mejor legibilidad y comprensi\u00f3n del programa, as\u00ed como tambi\u00e9n facilitan la reutilizaci\u00f3n de fragmentos de c\u00f3digo y el control del flujo de ejecuci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/","title":"Expresiones","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#introduccion","title":"Introducci\u00f3n","text":"<p>Las expresiones son segmentos de c\u00f3digo formados por una combinaci\u00f3n de operandos y operadores que se eval\u00faan, realizan c\u00e1lculos y devuelven valores como resultado. </p> <p>Una expresi\u00f3n es siempre parte de una declaraci\u00f3n, tambi\u00e9n conocida como instrucci\u00f3n o sentencia. Incluso si la sentencia consiste \u00fanicamente en una expresi\u00f3n.</p> <p>Y un programa consiste en una o m\u00e1s sentencias que al ejecutarse resuelven un problema procesando datos para convertirlos en informaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#que-es-una-expresion","title":"\u00bfQu\u00e9 es una expresi\u00f3n?","text":"<p>Definici\u00f3n</p> <p>Una expresi\u00f3n est\u00e1 conformada por un operando (variable, constante literal o resultado de una llamada a funci\u00f3n o m\u00e9todo) o la combinaci\u00f3n de uno o m\u00e1s operandos y operadores (aritm\u00e9ticos, l\u00f3gicos o relacionales), construida de acuerdo con la sintaxis del lenguaje, que, al ser procesada (evaluada o sometida a un c\u00e1lculo u operaci\u00f3n), devuelve como resultado un valor.</p> <p>M\u00e1s simplificadamente, una expresi\u00f3n es cualquier palabra o grupo de palabras o s\u00edmbolos que representan un valor; o una instrucci\u00f3n que se ejecuta y termina siendo un valor.</p> <p>Es necesario entender que un valor es \u00fanico. Por ejemplo, const, let, 2, 4, s, a, true, false y \"mundo\" son valores porque cada uno de ellos es \u00fanico en significado o car\u00e1cter.</p> <p>Cualquier expresi\u00f3n v\u00e1lida puede ser tan simple como una variable, constante literal o resultado de una llamada a funci\u00f3n o m\u00e9todo; o tan compleja como una combinaci\u00f3n de m\u00faltiples operadores y operandos de todo tipo:</p> Expresi\u00f3n de c\u00e1lculo simple<pre><code>(x + 3) * 2\n</code></pre> Expresi\u00f3n de c\u00e1lculo complejo<pre><code>(calcular_factorial(y) * COEF_CORRECCION) &gt; (valor % 4) &amp;&amp; !(vol1 == vol2 || distorsi\u00f3n ** (1/y)) \n</code></pre> <p>El ejemplo anterior es a modo referencial para demostrar como puede ser de compleja una expresi\u00f3n.</p> <p>Como se puede observar en el ejemplo de expresi\u00f3n compleja, tambi\u00e9n puede haber una expresi\u00f3n como parte de otra, o como argumento de una funci\u00f3n. Esto se denomina anidamiento de expresiones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#operandos-y-operadores-aplicados-en-expresiones","title":"Operandos y operadores aplicados en expresiones","text":"<ul> <li>Expresiones con operadores de asignaci\u00f3n:<ul> <li>x = 5 asigna el valor 5 a la variable x</li> <li>x += 3 es equivalente a x = x + 3</li> </ul> </li> <li>Expresiones con operadores aritm\u00e9ticos: <ul> <li>5 + 3 devuelve 8</li> <li>10 / 2 devuelve 5</li> <li>7 % 3 devuelve 1 y equivale al residuo o resto de la divisi\u00f3n de 7 entre 3</li> </ul> </li> <li>Expresiones con operadores de comparaci\u00f3n:<ul> <li>5 == 5 devuelve verdadero (True)</li> <li>10 != 5 devuelve verdadero (True)</li> <li>7 &gt; 3 devuelve verdadero (True)</li> <li>4 &lt; 2 devuelve falso (False)</li> <li>5 &gt;= 5 devuelve verdadero (True)</li> <li>2 &lt;= -1 devuelve falso (False)</li> </ul> </li> <li>Expresiones con operadores de concatenaci\u00f3n:<ul> <li>\"Hola\" + \" \" + \"Mundo!\" \uf0e0 \"Hola Mundo!\"</li> </ul> </li> <li>Expresiones con Operadores de repetici\u00f3n:<ul> <li>\"Hola \" * 3 -&gt; \"Hola Hola Hola\"</li> </ul> </li> <li>Expresiones con operadores l\u00f3gicos:<ul> <li>True &amp;&amp; True devuelve verdadero (True)</li> <li>True &amp;&amp; False devuelve falso (False)</li> <li>False &amp;&amp; True devuelve falso (False)</li> <li>False &amp;&amp; False devuelve falso (False)</li> <li>True || True devuelve verdadero (True)</li> <li>True || False devuelve verdadero (True)</li> <li>False || True devuelve verdadero (True)</li> <li>False || False devuelve falso (False)</li> <li>!True devuelve falso (False)</li> <li>!False devuelve verdadero (True)</li> </ul> </li> <li>Expresiones con operadores de pertenencia:<ul> <li>in devuelve True si un valor se encuentra en la secuencia y False de lo contrario</li> <li>not in devuelve True si un valor no se encuentra en la secuencia y False de lo contrario.</li> </ul> </li> <li>Expresiones con operadores de incremento:<ul> <li>x++ devuelve el siguiente valor de x (le suma 1)</li> </ul> </li> <li>Expresiones con operadores de decremento:<ul> <li>X-- devuelve el anterior valor de x (le resta 1)</li> </ul> </li> </ul> <p>Estos son solo ejemplos simples de expresiones en programaci\u00f3n. Ten en cuenta que las expresiones pueden volverse m\u00e1s complejas y combinar diferentes operadores y elementos para realizar c\u00e1lculos y tomar decisiones en tus programas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-literales","title":"Expresiones literales","text":"<p>De una manera simplificada, una expresi\u00f3n siempre devuelve un valor:</p> C\u00f3digo generalizado<pre><code>2+2 // devuelve 4\ntrue &amp;&amp; false  // devuelve el resultado de la conjunci\u00f3n (AND)\nllamada_a_funcion() // devuelve el valor retornad por la funci\u00f3n llamada_a_funcion()\nvariable_declarada // devuelve el valor actual almacenado en la variable\n</code></pre> <p>Existe otro tipo de expresiones:</p> C\u00f3digo generalizado<pre><code>\"foo\"\n{foo:'bar'}\n[1,2,3,4]\n53\ntrue\n</code></pre> <p>Como se puede observar, estas expresiones no son variables, ni constantes, ni llamadas a funciones. Tampoco poseen operadores.</p> <p>Definici\u00f3n</p> <p>A estas expresiones las llamamos expresiones literales y son el ejemplo m\u00e1s simple de expresi\u00f3n porque representan directamente a su valor. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-compuestas-tipo-de-datos-y-precedencia-de-operadores","title":"Expresiones compuestas, tipo de dato y precedencia de operadores","text":"<p>Cada lenguaje de programaci\u00f3n permite construir expresiones compuestas y sentencias a partir de varias expresiones m\u00e1s peque\u00f1as siempre que el tipo de dato requerido por una parte de la expresi\u00f3n coincida con el tipo de dato de la otra. He aqu\u00ed un ejemplo de una expresi\u00f3n compuesta:</p> C\u00f3digo generalizado<pre><code>x * y * z\n</code></pre> <p>En este ejemplo particular, el orden en que se eval\u00faa la expresi\u00f3n no es importante porque los resultados de la multiplicaci\u00f3n son independientes del orden; el resultado es siempre el mismo, sin importar el orden en que apliques las multiplicaciones. </p> <p>Sin embargo, esto no es cierto para todas las expresiones. Por ejemplo, la siguiente expresi\u00f3n da resultados diferentes, dependiendo de si se realiza primero la operaci\u00f3n de suma o de divisi\u00f3n:</p> C\u00f3digo generalizado<pre><code>x + y / 100 \n</code></pre> <p>Aqu\u00ed, si no conoci\u00e9ramos la precedencia de operadores, no podr\u00edamos indicar si se efect\u00faa primero la suma o la divisi\u00f3n.</p> <p>Por otra parte, podemos especificar exactamente c\u00f3mo deseamos que se eval\u00fae una expresi\u00f3n, utilizando par\u00e9ntesis equilibrados. </p> <p>Por ejemplo, para cambiar el orden de c\u00e1lculo en la expresi\u00f3n anterior, podr\u00edamos escribir:</p> C\u00f3digo generalizado<pre><code>(x + y) / 100 \n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#reglas-de-precedencia","title":"Reglas de precedencia","text":"<p>Los par\u00e9ntesis indican la precedencia de operadores, eliminando un posible resultado ambiguo.</p> <p>Si no indicamos expl\u00edcitamente el orden en el que deseamos que se realicen las operaciones en una expresi\u00f3n compuesta, el orden ser\u00e1 determinado por la precedencia asignada a los operadores en uso dentro de la expresi\u00f3n. Los operadores con una precedencia m\u00e1s alta se eval\u00faan primero. </p> <p>Las reglas de precedencia y asociatividad definen el orden en el cual se eval\u00faan los operadores en una expresi\u00f3n. Estas reglas son importantes para comprender c\u00f3mo se realizar\u00e1n las operaciones y para evitar ambig\u00fcedades en el resultado final.  A continuaci\u00f3n, se presentan las reglas generales de precedencia y asociatividad que se aplican en muchos lenguajes de programaci\u00f3n:</p> <p>Precedencia de operadores: establece el orden en el cual se eval\u00faan los operadores en una expresi\u00f3n. </p> <p>Los operadores con mayor precedencia se eval\u00faan antes que los operadores con menor precedencia. </p> <p>Por ejemplo, en la expresi\u00f3n <code>3 + 4 * 2</code> la multiplicaci\u00f3n tiene mayor precedencia que la suma, por lo tanto, se eval\u00faa primero la multiplicaci\u00f3n y luego la suma.</p> <p></p> <p>Importante</p> <p>Hay que tener en cuenta que estas reglas pueden variar ligeramente dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando. Por lo tanto, es recomendable consultar la documentaci\u00f3n del lenguaje para obtener las reglas de precedencia exactas que se aplican en ese contexto.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#ejemplos","title":"Ejemplos","text":"<p>Por ejemplo, el operador de divisi\u00f3n tiene mayor precedencia que el operador de suma. Por lo tanto, las dos declaraciones siguientes son equivalentes:</p> C\u00f3digo generalizado<pre><code>x + y / 100\nx + (y / 100)\n</code></pre> <p>En este ejemplo particular, si el prop\u00f3sito del c\u00e1lculo es realizar la divisi\u00f3n primero, y luego efectuar la suma, el uso de par\u00e9ntesis es innecesario.</p> <ul> <li>Los operadores con mayor precedencia se eval\u00faan antes que los operadores con una precedencia relativamente menor. </li> <li>Los operadores en la misma l\u00ednea tienen la misma precedencia. Cuando aparecen operadores de igual precedencia en la misma expresi\u00f3n, una regla debe regir cu\u00e1l se eval\u00faa primero. </li> <li>Todos los operadores binarios excepto los operadores de asignaci\u00f3n se eval\u00faan de izquierda a derecha. </li> <li>Los operadores de asignaci\u00f3n se eval\u00faan de derecha a izquierda.</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#reglas-de-asociatividad","title":"Reglas de asociatividad","text":"<p>Es importante recordar que, a diferencia de otras ciencias exactas como la matem\u00e1tica, se reemplaza la precedencia de par\u00e9ntesis, corchetes y llaves solamente por par\u00e9ntesis, resolvi\u00e9ndose desde el par\u00e9ntesis m\u00e1s interno hacia el m\u00e1s externo: </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#asociatividad-de-operadores","title":"Asociatividad de operadores","text":"<p>Define el orden en el cual se eval\u00faan los operadores del mismo nivel de precedencia cuando no hay par\u00e9ntesis para establecer un orden expl\u00edcito. La asociatividad puede ser izquierda o derecha:</p> <ul> <li> <p>Asociatividad izquierda: cuando los operadores tienen asociatividad izquierda, se eval\u00faan de izquierda a derecha. Por ejemplo, en la expresi\u00f3n 4 - 2 - 1, se eval\u00faa primero 4 - 2 y luego se resta 1 al resultado.</p> </li> <li> <p>Asociatividad derecha: cuando los operadores tienen asociatividad derecha, se eval\u00faan de derecha a izquierda.  Por ejemplo, en la expresi\u00f3n 2 ** 3 ** 2, se eval\u00faa primero 3 elevado al cuadrado y, luego, se eleva al cuadrado a ese resultado.</p> </li> </ul> <p>Es importante recordar que, a diferencia de otras ciencias exactas como la matem\u00e1tica, se reemplaza la precedencia de par\u00e9ntesis, corchetes y llaves solamente por par\u00e9ntesis, resolvi\u00e9ndose desde el par\u00e9ntesis m\u00e1s interno hacia el m\u00e1s externo: </p> <pre><code>52 / { 2 * [ 3 + 5 * ( 6 \u2013 4 ) ] }   \u2192   52 / ( 2 * ( 3 + 5 * ( 6 \u2013 4 ) ) )\n                                                              ---------\n                                                                  \u2193   \n                                         52 / ( 2 * ( 3 + 5 *     2     ) )\n                                                            \u2193\n                                         52 / ( 2 * ( 3 +   10          ) ) \n                                                    ---------------------\n                                                              \u2193 \n                                         52 / ( 2 *           13          )\n                                              -----------------------------\n                                                            \u2193 \n                                         52 /               26\n                                            \u2193 \n                                            2\n</code></pre> <p>La asociatividad puede ser relevante cuando hay operadores con la misma precedencia en una expresi\u00f3n. </p> <p>Si los operadores tienen la misma precedencia y asociatividad, la evaluaci\u00f3n se realiza de izquierda a derecha.</p> <p>Es importante tener en cuenta que las reglas de precedencia y asociatividad pueden modificarse utilizando par\u00e9ntesis para establecer un orden expl\u00edcito de evaluaci\u00f3n en una expresi\u00f3n.</p> <p>Veamos un ejemplo mucho m\u00e1s complejo:</p> <p>Consideremos la siguiente expresi\u00f3n, con n = 2:</p> <pre><code>15 + 59 * 75 / 9 &lt; 2 ** 3 ** 2 and (15 + 59) * 75 % n == 1\n                          \u2193  \n15 + 59 * 75 / 9 &lt; 2 **   9    and (15 + 59) * 75 % n == 1\n                     \u2193\n15 + 59 * 75 / 9 &lt;   512       and (15 + 59) * 75 % n == 1\n        \u2193\n15 +    4425 / 9 &lt;   512       and (15 + 59) * 75 % n == 1\n             \u2193\n15 +         491 &lt;   512       and (15 + 59) * 75 % n == 1\n   \u2193\n   506           &lt;   512       and (15 + 59) * 75 % n == 1\n                 \u2193\n                 False         and (15 + 59) * 75 % n == 1\n                                   ---------\n                                       \u2193\n                 False         and     74    * 75 % n == 1\n                                             \u2193\n                 False         and           5550 % n == 1\n                                                    \u2193\n                 False         and           5550 % 2 == 1\n                                                  \u2193\n                 False         and                0   == 1\n                                                      \u2193\n                 False         and                    False\n                               \u2193\n                               False\n</code></pre> <p>La operaci\u00f3n entre par\u00e9ntesis (15 + 59) debe ser evaluada antes de la multiplicaci\u00f3n por 75, ya que es necesario conocer su resultado para poder calcular el producto. El momento preciso en que ello ocurre no es importante.</p> <p>Lo mismo ocurre con la evaluaci\u00f3n de la variable n: s\u00f3lo importa que sea evaluada antes de ser usada por el operador de m\u00f3dulo.</p> <p>En el ejemplo, ambos casos fueron evaluados inmediatamente antes de que su valor sea necesario. El resultado de la expresi\u00f3n es False.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-simples-vs-expresiones-compuestas","title":"Expresiones simples vs. expresiones compuestas","text":"Expresiones simples<pre><code>// Expresi\u00f3n de asignaci\u00f3n:\nx = 10\n\n// Expresi\u00f3n aritm\u00e9tica:\n5 + 3\n\n// Expresi\u00f3n booleana:\ntrue &amp;&amp; false\n\n// Expresi\u00f3n de concatenaci\u00f3n de cadenas:\n\"Hola\" + \" \" + \"mundo\"\n\n// Expresi\u00f3n de comparaci\u00f3n:\n7 &gt; 3\n</code></pre> Expresiones compuestas<pre><code>// Expresi\u00f3n compuesta de asignaci\u00f3n:\nresultado = (x + y) * z\n\n// Expresi\u00f3n compuesta aritm\u00e9tica:\n(5 + 3) * (2 - 1)\n\n// Expresi\u00f3n compuesta booleana:\n(x &gt; 0) &amp;&amp; (y &lt; 10) || (z == 5)\n\n// Expresi\u00f3n compuesta de concatenaci\u00f3n de cadenas:\n\"Hola, \" + nombre + \". Tienes \" + edad + \" a\u00f1os.\"\n\n// Expresi\u00f3n compuesta de comparaci\u00f3n:\n(a &gt; b) &amp;&amp; (c != d) || (e &lt;= f)\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#preguntas-importantes-sobre-el-uso-de-parentesis-en-expresiones-compuestas","title":"Preguntas importantes sobre el uso de par\u00e9ntesis en expresiones compuestas","text":"<p>\u00a1Recordemos, pensemos!</p> <p>\u00bfQu\u00e9 significa linealizar una expresi\u00f3n? \u00bfPorqu\u00e9 se deben linealizar las expresiones? Linealizar una expresi\u00f3n significa expresarla en una sola l\u00ednea para lo cual se hace imprescindible la buena utilizaci\u00f3n de par\u00e9ntesis. Esta es una buena pr\u00e1ctica, debido a que los lenguajes de programaci\u00f3n a\u00fan no tienen integrada la facilidad de entender las expresiones tal como nosotros las entendemos. Por esta raz\u00f3n deben escribirse en una sola l\u00ednea para que puedan ser procesadas apropiadamente.</p> <p>\u00bfQu\u00e9 papel juegan los par\u00e9ntesis en la alteraci\u00f3n de jerarqu\u00eda de operadores en una expresi\u00f3n? Permiten la alteraci\u00f3n de la jerarqu\u00eda de operadores establecida para la resoluci\u00f3n de la expresi\u00f3n original de manera tal que se resuelvan las operaciones en un orden diferente, al dividirla en grupos de expresiones m\u00e1s peque\u00f1as que se resuelven primero, facilitando el entendimiento y la interpretaci\u00f3n global.</p> <p>Entonces, \u00bfCu\u00e1ndo se deben utilizar par\u00e9ntesis en una expresi\u00f3n? Toda vez que necesitemos alterar la jerarqu\u00eda original de operadores para que la computadora resuelva la expresi\u00f3n en un orden distinto al que se dar\u00eda con la aplicaci\u00f3n de la jerarqu\u00eda original.</p> <p>\u00bfCu\u00e1ntos par\u00e9ntesis se pueden involucrar en una expresi\u00f3n? Todos los que se necesiten. </p> <p>\u00bfQu\u00e9 pasa cuando faltan o sobran par\u00e9ntesis en una expresi\u00f3n? Se tiene un alto riesgo de que la computadora interprete la expresi\u00f3n de una manera diferente y resuelva las operaciones en un orden distinto al pensado. Debe tenerse en cuenta que en una expresi\u00f3n si sobran par\u00e9ntesis es muy posible que eso no genere dificultades en la interpretaci\u00f3n de la expresi\u00f3n, el gran problema se presentar\u00e1 si faltan.</p> <p>\u00bfC\u00f3mo se resuelve una expresi\u00f3n que contenga par\u00e9ntesis? Se resuelve comenzando desde los par\u00e9ntesis mas internos y aplicando dentro de ellos toda la jerarqu\u00eda est\u00e1ndar y, a medida que se van obteniendo valores parciales y por tanto se van eliminando los par\u00e9ntesis, se van resolviendo los par\u00e9ntesis externos con la misma filosof\u00eda de la jerarqu\u00eda de operadores est\u00e1ndar.</p> <p>\u00bfC\u00f3mo se resuelve la peque\u00f1a expresi\u00f3n que se encuentra dentro de un par\u00e9ntesis? Aplicando la jerarqu\u00eda est\u00e1ndar de operadores (revisa la tabla de jerarqu\u00edas si no la Â¡Para recordar!s o tienes dudas).</p> <p>Â¡Para recordar!</p> <p>Al escribir expresiones compuestas, debe ser expl\u00edcito e indicar entre par\u00e9ntesis qu\u00e9 operadores deben evaluarse primero. Esta pr\u00e1ctica har\u00e1 que tu c\u00f3digo sea m\u00e1s f\u00e1cil de leer y mantener.</p> <p>Tambi\u00e9n recuerda que las expresiones se eval\u00faan siguiendo ciertas reglas de precedencia y asociatividad. </p> <p>Es importante tener en cuenta estas reglas para obtener los resultados deseados al combinar diferentes operadores y expresiones en tus programas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-y-sentencias","title":"Expresiones y sentencias","text":"<p>Una expresi\u00f3n es siempre parte de una sentencia, tambi\u00e9n conocida como instrucci\u00f3n o declaraci\u00f3n. Incluso si es una sola expresi\u00f3n \u00fanicamente.</p> <p>Por lo tanto, las expresiones realizan el trabajo de un programa.  Entre otras cosas, las expresiones se utilizan para calcular y asignar valores a las variables y para ayudar a controlar el flujo de ejecuci\u00f3n del programa. </p> <p>El trabajo de una expresi\u00f3n es doble:  1. realizar el c\u00e1lculo indicado por los elementos de la expresi\u00f3n; y  1. devolver un valor que es el resultado de dicho c\u00e1lculo.</p> <p>Asi, cada expresi\u00f3n realiza una operaci\u00f3n y devuelve un valor:</p> Expresi\u00f3n Acci\u00f3n Valor devuelto char letra = \"S\u201d Asigna el caracter \"S\" a la variable letra El valor de letra luego de la asignaci\u00f3n esMayusculas(letra) llama a la funci\u00f3n esMayusculas con el argumento letra El valor de retorno: true \"La nota es \" + letra Concatena la cadena \"La nota es \" y el valor de letra La cadena resultante: \"La nota es S\" <p>El tipo de dato del valor devuelto por una expresi\u00f3n depender\u00e1 de los elementos utilizados en la expresi\u00f3n. La primera expresi\u00f3n devolver\u00e1 un caracter porque el operador de asignaci\u00f3n devuelve un valor del mismo tipo de dato que sus operandos. Como se puede ver en las otras expresiones, una expresi\u00f3n podr\u00e1 devolver un valor booleano o una cadena, entre otros resultados.</p> Python<pre><code>x = 5                    # Asignaci\u00f3n de un valor a la variable x\ny = 10                   # Asignaci\u00f3n de un valor a la variable y\nx = 5 + 3                # Suma\ny = 10 - 2               # Resta\nz = 4 * 6                # Multiplicaci\u00f3n\nw = 15 / 3               # Divisi\u00f3n\nz = x &gt; y                # Comprobaci\u00f3n si x es mayor que y\ny += 5                   # Incremento de la variable y en 5\nz = (x &gt; 0) and (y &lt; 20) # Comprobaci\u00f3n si x es mayor que 0 y sy y es menor que 20\n</code></pre> <p>Â¡Para recordar!</p> <p>Cada operaci\u00f3n tiene su propia sintaxis y reglas de uso espec\u00edficas. </p> <p>Algunos lenguajes pueden tener reglas espec\u00edficas sobre el redondeo y el tratamiento de los n\u00fameros negativos.</p> <p>Es importante consultar la documentaci\u00f3n del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando para obtener informaci\u00f3n precisa sobre las operaciones disponibles y c\u00f3mo utilizarlas correctamente en tu programa. </p> <p>A continuaci\u00f3n, estudiaremos cada operador y como se comporta dentro de una determinada expresi\u00f3n. </p> <p>Veamos un ejemplo:</p> <pre><code>const precio = 500;\n</code></pre> <p>A juzgar por el c\u00f3digo anterior, const, precio, el s\u00edmbolo igual (=) y 500 son expresiones porque cada una de ellas tiene un significado o valor definido y \u00fanico. Pero si los tomamos todos juntos const price = 500, entonces tenemos una sentencia.</p> <p>Veamos otro ejemplo:</p> <pre><code>let multiplicar = function (numeroUno, numeroDos) {\n    return numeroUno * numeroDos;\n}\n</code></pre> <p>Mirando el c\u00f3digo anterior, podemos ver que una funci\u00f3n an\u00f3nima est\u00e1 asignada a una variable. A\u00fan no sabemos que es una funci\u00f3n, y adelant\u00e1ndote que cualquier funci\u00f3n es una sentencia, \u00bfpuede ser tambi\u00e9n una expresi\u00f3n?</p> <p>\u00a1Por supuesto! </p> <p>Una funci\u00f3n y una clase (veremos ambos conceptos m\u00e1s adelante) son sentencias y expresiones porque pueden realizar acciones (hacer o no hacer tareas) y aun as\u00ed ejecutarse y retornar un valor.</p> <p>Este concepto nos lleva a las sentencias. </p> <p>Entonces, \u00bfqu\u00e9 son las sentencias? Las veremos pr\u00f3ximamente. Por ahora, nos enfocaremos en las expresiones, aunque precisaremos interactuar con sentencias para poder entender perfectamente el rol que cumplen las expresiones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#expresiones-con-operandos-con-diferentes-tipos-de-datos-casting","title":"Expresiones con operandos con diferentes tipos de dato (casting)","text":"<p>Algunas operaciones se llevan a cabo de manera directa y otras mediante una conversi\u00f3n (casting) impl\u00edcita de los tipos de dato, si es necesario, dependiendo de las reglas del lenguaje espec\u00edfico. </p> <p>As\u00ed, La manera en que se realizan las asignaciones puede variar seg\u00fan las operaciones y el tipo de dato utilizado.</p> Python<pre><code>x = 5\nx *= 3\nprint(x)  # Output: 15\n</code></pre> <p>En este ejemplo, se inicializa la variable x con el valor 5. Luego, se utiliza el operador (*=) para multiplicar x por 3 y almacenar el resultado nuevamente en x. Despu\u00e9s de la operaci\u00f3n, el valor de x se actualiza a 15.</p> Python<pre><code>x = 10\nx /= 2\nprint(x)  # Output: 5.0\n</code></pre> <p>En este ejemplo, se inicializa la variable x con el valor 10. Luego, se utiliza el operador (/=) para dividir x entre 2 y almacenar el resultado nuevamente en x. Despu\u00e9s de la operaci\u00f3n, el valor de x se actualiza a 5.0, ya que la divisi\u00f3n de dos enteros en Python produce un resultado en punto flotante.</p> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que estos operadores se pueden utilizar con diferentes tipos de dato, valores num\u00e9ricos o expresiones v\u00e1lidas que el lenguaje de programaci\u00f3n permita. </p> <p>Por ejemplo, en Python, se puede utilizar con n\u00fameros, cadenas de caracteres y listas, entre otros tipos de dato.</p> <p>Elaborar el siguiente material</p> <ul> <li>Expresiones condicionales</li> <li>Operador ternario (condici\u00f3n ? expresi\u00f3n1 : expresi\u00f3n2)</li> <li>Expresiones y evaluaci\u00f3n de expresiones</li> <li>Composici\u00f3n de expresiones utilizando operadores y variables</li> <li>Orden de evaluaci\u00f3n de operaciones</li> <li>Operadores bit a bit</li> <li>Operador AND bit a bit (&amp;)</li> <li>Operador OR bit a bit (|)</li> <li>Operador XOR bit a bit (^)</li> <li>Operador desplazamiento a la izquierda (&lt;&lt;)</li> <li>Operador desplazamiento a la derecha (&gt;&gt;)</li> </ul> <p>Ejemplos:</p> <p>Expresi\u00f3n de llamada a funci\u00f3n: calcularPromedio(80, 95, 75) Expresi\u00f3n de acceso a elemento: array[2]</p> <p>Â¡Para recordar!</p> <p>Estos son solo ejemplos simples de expresiones en programaci\u00f3n. recuerda que las expresiones pueden volverse m\u00e1s complejas y combinar diferentes operadores y elementos para realizar c\u00e1lculos y tomar decisiones en tus programas.</p> <p>Las expresiones compuestas son combinaciones m\u00e1s complejas de expresiones simples que se utilizan para realizar operaciones m\u00e1s avanzadas:</p> <p>Expresi\u00f3n compuesta de bucle while: while (i &lt; 10 &amp;&amp; !terminado) {   // c\u00f3digo a repetir mientras se cumpla la condici\u00f3n   i++ }</p> <p>Expresi\u00f3n compuesta de llamada a funci\u00f3n: calcularPromedio(nota(\"Matem\u00e1ticas\"), nota(\"F\u00edsica\")) Expresi\u00f3n compuesta de acceso a elemento: valor = array[indice] + matriz[fila][columna]</p> <p>Expresi\u00f3n compuesta condicional (if-else): if (x &gt; 0 &amp;&amp; y &lt; 10) {   // c\u00f3digo a ejecutar si se cumple la condici\u00f3n } else {   // c\u00f3digo a ejecutar si no se cumple la condici\u00f3n }</p> <p>Â¡Para recordar!</p> <p>Estos son solo ejemplos de expresiones compuestas en programaci\u00f3n. Puedes combinar expresiones simples utilizando operadores y agrupando las expresiones con par\u00e9ntesis para obtener resultados m\u00e1s complejos y realizar tareas m\u00e1s avanzadas en tus programas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/expresiones/#ejercicios-de-aplicacion","title":"Ejercicios de aplicaci\u00f3n","text":"<ol> <li> <p>Escribe un programa que escriba en la pantalla el resultado de sumar 3 + 5.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Ejemplo 1\nsuma = 3 + 5\nprint(suma)\n\n# Ejemplo 2\nprint(\"Suma 3 + 5 = \", 3 + 5)\n\n# Ejemplo 3\nprint(\"Resultado de sumar 3 + 5:\", end=\"\")\nprint(3 + 5)\n\n# Ejemplo 4\nprint(\"Resultado de sumar 3 + 5: \" + str(3 + 5))\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/introducciom-expresiones-sentencias-bloques/","title":"Expresiones, sentencias y bloques de sentencias","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/introducciom-expresiones-sentencias-bloques/#introduccion","title":"Introducci\u00f3n","text":"<p>Los operandos (variables, constantes literales o resultados de una llamada a funci\u00f3n o m\u00e9todo) y los operadores son componentes b\u00e1sicos de un programa. </p> <p>Solos, o al combinarlos con operadores se pueden formar expresiones: segmentos de c\u00f3digo que realizan c\u00e1lculos y devuelven valores. </p> <p>Los operadores son s\u00edmbolos especiales que se utilizan para realizar diferentes operaciones con los datos.</p> <p>Entonces, las expresiones est\u00e1n formadas por una combinaci\u00f3n de valores, variables y operadores que se eval\u00faan para producir un resultado.</p> <p>Ciertas expresiones se pueden convertir en sentencias: unidades completas de ejecuci\u00f3n que permiten ejecutar una determinada acci\u00f3n. </p> <p>Seg\u00fan el lenguaje de programaci\u00f3n, al agrupar sentencias entre llaves { } o indentando (tabulando) un grupo de sentencias se crean bloques de c\u00f3digo dentro de un programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/introducciom-expresiones-sentencias-bloques/#expresiones-o-sentencias","title":"\u00bfExpresiones o sentencias?","text":"<p>Aprender la sintaxis de un lenguaje de programaci\u00f3n es clave si desea utilizar ese lenguaje de manera efectiva. </p> <p>Esto es cierto tanto para los desarrolladores nuevos como para los experimentados.</p> <p>Y una de las cosas m\u00e1s importantes a las que debe prestar atenci\u00f3n mientras aprende un lenguaje de programaci\u00f3n es si el c\u00f3digo con el que est\u00e1 tratando es una expresi\u00f3n o una sentencia.</p> <pre><code>const\nlet\nlet multiplicar = function (numeroUno, numeroDos) {\n    return numeroUno * numeroDos;\n}\ntrue, false\n2, 4, s, a\nconst price = 500;\n</code></pre> <p>A veces puede ser confuso diferenciar entre sentencias y expresiones en programaci\u00f3n. Por lo tanto, trataremos de simplificar las diferencias para que puedas mejorar tus habilidades de programaci\u00f3n y convertirte en un mejor desarrollador de software.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/resumen-de-expresiones-sentencias-bloques/","title":"Expresiones, sentencias y bloques de sentencias: resumen","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/resumen-de-expresiones-sentencias-bloques/#expresiones","title":"Expresiones","text":"<p>Una expresi\u00f3n est\u00e1 conformada por un operando (variable, constante literal o resultado de una llamada a funci\u00f3n o m\u00e9todo) o la combinaci\u00f3n de uno o m\u00e1s operandos y operadores (aritm\u00e9ticos, l\u00f3gicos o relacionales), construida de acuerdo con la sintaxis del lenguaje, que, al ser procesada (evaluada o sometida a un c\u00e1lculo u operaci\u00f3n), devuelve como resultado un valor.</p> <p>Por lo tanto, el resultado de una expresi\u00f3n se puede calcular realizando las operaciones en el orden dictado por la precedencia de los operadores.</p> <p>Las expresiones realizan el trabajo de un programa. Entre otras cosas, las expresiones se utilizan para calcular y asignar valores a las variables y para ayudar a controlar el flujo de ejecuci\u00f3n de un programa. </p> <p>El trabajo de una expresi\u00f3n es doble:  * realizar el c\u00e1lculo indicado por los elementos de la expresi\u00f3n; y  * devolver un valor que es el resultado de dicho c\u00e1lculo.</p> <p>Una expresi\u00f3n v\u00e1lida puede ser simple o compleja. Tambi\u00e9n puede haber una expresi\u00f3n como parte de otra, o como argumento de una funci\u00f3n. Esto se denomina anidamiento de una expresi\u00f3n.</p> <ul> <li>Expresiones con operadores de asignaci\u00f3n</li> <li>Expresiones con operadores aritm\u00e9ticos</li> <li>Expresiones con operadores de comparaci\u00f3n</li> <li>Expresiones con operadores de concatenaci\u00f3n</li> <li>Expresiones con operadores de repetici\u00f3n</li> <li>Expresiones con operadores l\u00f3gicos</li> <li>Expresiones con operadores de incremento</li> <li>Expresiones con operadores de decremento</li> </ul> <p>Puede escribir expresiones compuestas combinando expresiones siempre que los tipos de dato requeridos por todos los operadores involucrados en la expresi\u00f3n compuesta sean correctos. </p> <p>Al escribir expresiones compuestas, debe ser expl\u00edcito e indicar entre par\u00e9ntesis qu\u00e9 operadores deben evaluarse primero. Si elige no usar par\u00e9ntesis, se eval\u00faa la expresi\u00f3n compuesta en el orden dictado por la precedencia del operador. </p> <p>Puedes combinar expresiones simples utilizando operadores y agrupando las expresiones con par\u00e9ntesis para obtener resultados m\u00e1s complejos y realizar tareas m\u00e1s avanzadas en tus programas.</p> <p>Llamamos expresiones literales al ejemplo m\u00e1s simple de expresi\u00f3n que representa directamente a su valor. </p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis aunque los conceptos b\u00e1sicos se mantienen consistentes en la mayor\u00eda de los casos.</p> <p>Cuando las expresiones contienen operandos de diferentes tipos de dato, algunas operaciones se llevan a cabo de manera directa y otras mediante una conversi\u00f3n (casting) impl\u00edcita de estos tipos de dato, si es necesario, dependiendo de las reglas del lenguaje espec\u00edfico. As\u00ed, La manera en que se realizan las asignaciones puede variar seg\u00fan las operaciones y el tipo de dato utilizado.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/resumen-de-expresiones-sentencias-bloques/#sentencias","title":"Sentencias","text":"<p>Una expresi\u00f3n es siempre parte de una sentencia, tambi\u00e9n conocida como instrucci\u00f3n o declaraci\u00f3n. Incluso si es solo una expresi\u00f3n \u00fanicamente.</p> <p>Una sentencia es un conjunto de expresiones que permiten ejecutar una determinada acci\u00f3n y, dependiendo del lenguaje de programaci\u00f3n, es necesario que termine con un punto y coma. </p> <p>Las sentencias m\u00e1s comunes son:  * sentencias de declaraci\u00f3n * sentencias de expresi\u00f3n * sentencias de flujo de control</p> <p>En t\u00e9rminos generales, una sentencia es una unidad de instrucciones con significado completo (tambi\u00e9n llamada l\u00ednea de c\u00f3digo), que puede ser comprendida en el contexto del lenguaje natural o interpretada y ejecutada por un programa inform\u00e1tico, cuya acci\u00f3n resuelve una parte o la totalidad de un problema.  Cada sentencia, siempre, contiene una o m\u00e1s expresiones.</p> <ul> <li>Las expresiones que son procesadas siempre retornan un valor. </li> <li>Cada sentencia, siempre, contiene una o m\u00e1s expresiones.</li> <li>Un programa consiste en una serie de sentencias.</li> </ul> <p>Estos son algunos de los tipos de sentencias m\u00e1s utilizados en programaci\u00f3n:</p> <ul> <li>Sentencias de declaraci\u00f3n (declaration statements)  </li> <li>Sentencias de inicializaci\u00f3n (inline initialization statements)  </li> <li>Sentencias de asignaci\u00f3n (assignment statements)  </li> <li>Sentencias de expresi\u00f3n (expression statements) </li> <li>Sentencias de control de flujo (flow control statements)<ul> <li>Sentencias de selecci\u00f3n (selection statements) </li> <li>Sentencias de iteraci\u00f3n (iteration statements) </li> <li>Sentencias de salto (jump statements) </li> <li>Sentencias de manejo de excepciones (exception handling statements)</li> </ul> </li> <li>Sentencias etiquetadas (labeled statements) </li> <li>Sentencias de llamada a funci\u00f3n (function call statements)</li> <li>sentencias compuestas (compound statements) </li> </ul> <p>Â¡Para recordar!</p> <p>Puedes agrupar dos o m\u00e1s sentencias juntas en un bloque con llaves ( { } ) o indentando (tabulando), seg\u00fan el lenguaje de programaci\u00f3n en cuesti\u00f3n, formando el bloque de sentencias correspondiente.</p> <p>Aunque no es obligatorio, se recomienda usar bloques en las sentencias de control de flujo, a\u00fan si solo hay una sentencia en el bloque. Esto permite una lectura m\u00e1s agil y ordenda del programa.</p> <p>Es importante siempre consultar la documentaci\u00f3n del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando para obtener informaci\u00f3n precisa sobre las operaciones disponibles y c\u00f3mo utilizarlas correctamente en tu programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/","title":"Sentencias de un programa","text":""},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#introduccion","title":"Introducci\u00f3n","text":"<p>En programaci\u00f3n, una sentencia significa cualquier l\u00ednea de c\u00f3digo que instruye al compilador para realizar una tarea espec\u00edfica. </p> <p>Un programa de computadora es un conjunto de sentencias. </p> <p>Tambi\u00e9n se las llama instrucciones (y hasta declaraciones).</p> <p>Puede haber varios tipos de sentencias en un c\u00f3digo que controlen la entrada y salida de las acciones y los procesos para los que est\u00e1 dise\u00f1ado un programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#que-es-una-sentencia","title":"\u00bfQu\u00e9 es una sentencia?","text":"<p>Definici\u00f3n</p> <p>Las sentencias (en ingl\u00e9s statements) son aproximadamente equivalentes a oraciones en lenguajes naturales. Tambi\u00e9n se las conoce como instrucciones (y en algunos casos, hasta como declaraciones) y cada una forma una unidad completa de ejecuci\u00f3n. </p> <p>As\u00ed, una sentencia es un conjunto de expresiones que permiten ejecutar una determinada acci\u00f3n.</p> <p>M\u00e1s simplificadamente, una sentencia es un grupo de expresiones y/o sentencias que es dise\u00f1ada para llevar a cabo una tarea o una acci\u00f3n.</p> <p>Una sentencia es una declaraci\u00f3n completa y coherente que expresa una idea o un comando en un lenguaje de programaci\u00f3n o en lenguaje natural.</p> <p>En el contexto de la programaci\u00f3n, una sentencia es una unidad b\u00e1sica de ejecuci\u00f3n que realiza una acci\u00f3n o produce un resultado. Puede ser una instrucci\u00f3n simple, como asignar un valor a una variable o mostrar un mensaje en pantalla, o una instrucci\u00f3n m\u00e1s compleja, como una estructura de control (por ejemplo, un bucle o una declaraci\u00f3n condicional) que controla el flujo de ejecuci\u00f3n del programa.</p> <p>En el contexto del lenguaje natural, una sentencia es una expresi\u00f3n gramaticalmente completa que comunica una idea o informaci\u00f3n espec\u00edfica. Por ejemplo, \"El perro est\u00e1 corriendo\" o \"Me gustar\u00eda una taza de caf\u00e9\". En este caso, una sentencia puede constar de una o varias oraciones.</p> <p>Cuando escribimos un programa, lo que hacemos es dar instrucciones a la computadora para que resuelva un problema de una manera determinada. </p> <p>Cada l\u00ednea de c\u00f3digo que escribimos (salvo unas cuantas excepciones) no es m\u00e1s que la instrucci\u00f3n u orden que damos para que se lleve a cabo una acci\u00f3n determinada. Es por eso que sentencia e instrucci\u00f3n suelen utilizarse para referirse a lo mismo.</p> <p>Es el programa de computadora que le dice a la computadora que realice o tome acci\u00f3n. Una declaraci\u00f3n puede ser un conjunto de s\u00edmbolos, n\u00fameros o mnem\u00f3nico utilizados en un programa. </p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#cual-es-el-rol-de-una-sentencia-en-un-programa","title":"\u00bf Cu\u00e1l es el rol de una sentencia en un programa?","text":"<p>Un lenguaje en mnem\u00f3nico o lista de instrucciones consiste en un conjunto de c\u00f3digos simb\u00f3licos, cada uno de los cuales corresponde a una instrucci\u00f3n en lenguaje de m\u00e1quina. Es de aqu\u00ed de donde se aplica el concepto de lenguaje ensamblador.</p> <p></p> <p>\u00a1Â¡Para recordar!!</p> <p>Cuando escribimos un programa, lo que hacemos es dar instrucciones a la computadora para que resuelva un problema de una manera determinada. </p> <p>Cada l\u00ednea de c\u00f3digo que escribimos (salvo unas cuantas excepciones) no es m\u00e1s que la instrucci\u00f3n u orden que damos para que se lleve a cabo una acci\u00f3n determinada. Es por eso que sentencia e instrucci\u00f3n suelen utilizarse para referirse a lo mismo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-por-todos-lados-donde","title":"Sentencias por todos lados\u2026 \u00bfd\u00f3nde?","text":"<p>Las sentencias se ense\u00f1an en diferentes temas relacionados con la programaci\u00f3n. Algunos de estos temas son:</p> <ul> <li>Introducci\u00f3n a la programaci\u00f3n: se ense\u00f1an como parte fundamental del lenguaje de programaci\u00f3n, aprendiendo c\u00f3mo escribir y utilizar sentencias b\u00e1sicas como la declaraci\u00f3n de variables, la asignaci\u00f3n de valores y la ejecuci\u00f3n de operaciones aritm\u00e9ticas y de comparaci\u00f3n.</li> <li>Estructuras de control: las sentencias de control de flujo condicional (if, else, else if, switch) y de bucles (for, while) se ense\u00f1an para tomar decisiones y repetir bloques de c\u00f3digo seg\u00fan ciertas condiciones, aprendiendo como guiar y controlar el flujo de ejecuci\u00f3n de un programa.</li> <li>Funciones y procedimientos: estas sentencias se ense\u00f1an en el contexto de definir y utilizar funciones y procedimientos, aprendiendo a escribir sentencias dentro de funciones para realizar tareas espec\u00edficas y reutilizables a lo largo de la ejecuci\u00f3n de un programa.</li> <li>Estructuras de datos: en el contexto de las estructuras de datos, las sentencias se ense\u00f1an en relaci\u00f3n con la manipulaci\u00f3n y el acceso a los elementos de una estructura de datos, como listas, arrays o diccionarios, aprendiendo a utilizar sentencias para agregar, eliminar, buscar y modificar elementos en estas estructuras.</li> <li>Programaci\u00f3n orientada a objetos: en la programaci\u00f3n orientada a objetos, estas sentencias se ense\u00f1an en relaci\u00f3n con la definici\u00f3n y el uso de clases y objetos, aprendiendo a escribir sentencias dentro de m\u00e9todos de clase para describir el comportamiento y las acciones de los objetos.</li> <li>Gesti\u00f3n de errores y excepciones: estas sentencias se ense\u00f1an en relaci\u00f3n con la gesti\u00f3n de errores y excepciones en un programa, aprendiendo a utilizar sentencias como try, except y finally para manejar situaciones excepcionales y evitar que un error interrumpa la ejecuci\u00f3n del programa.</li> </ul> <p>Estos son solo algunos de los temas principales en los que se ense\u00f1an las sentencias en programaci\u00f3n, existiendo otros temas adicionales donde se aborden las sentencias de manera m\u00e1s espec\u00edfica y avanzada.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#tipos-de-sentencias","title":"Tipos de sentencias","text":"<p>Las sentencias puede ser de dos clases: * Sentencias que hacen tareas * Sentencias que no hacen tareas</p> <p>Pero a su vez, un programa consta de varios tipos de sentencias.  </p> <p>Mientras que las sentencias de asignaci\u00f3n y declaraci\u00f3n ayudan a una variable a comprender su tipo de dato y asignar su valor, las sentencias de control de flujo dirigen la secuencia de ejecuci\u00f3n del programa.  </p> <p>Cada lenguaje de programaci\u00f3n tiene su propio formato y sintaxis que debe seguir el programador mientras escribe el c\u00f3digo. Hay esencialmente nueve tipos de declaraciones de programaci\u00f3n. Echemos un vistazo:</p> <ul> <li>Sentencias de declaraci\u00f3n (declaration statements)  </li> <li>Sentencias de inicializaci\u00f3n (inline initialization statements)  </li> <li>Sentencias de asignaci\u00f3n (assignment statements)  </li> <li>Sentencias de expresi\u00f3n (expression statements) </li> <li>Sentencias de control de flujo (flow control statements)<ul> <li>Sentencias de selecci\u00f3n (selection statements) </li> <li>Sentencias de iteraci\u00f3n (iteration statements) </li> <li>Sentencias de salto (jump statements) </li> <li>Sentencias de manejo de excepciones (exception handling statements)</li> </ul> </li> <li>Sentencias etiquetadas (labeled statements) </li> <li>Sentencias de llamada a funci\u00f3n (function call statements)</li> <li>sentencias compuestas (compound statements) </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-declaracion","title":"Sentencias de declaraci\u00f3n","text":"<p>Se utilizan para declarar una variable o una constante en el programa.</p> C\u00f3digo generalizado<pre><code>let variable_declarada; // una declaraci\u00f3n de una variable es una sentencia\nint age;\nconst PI = 3.14159;\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-inicializacion","title":"Sentencias de inicializaci\u00f3n","text":"<p>Se utilizan para inicializar una variable en el programa. Este tipo de sentencias se encuentra dentro de las sentencias de declaraci\u00f3n.</p> C\u00f3digo generalizado<pre><code>let otra_variable_declarada = 0; // una inicializaci\u00f3n de variable tambi\u00e9n es una sentencia\nint age = 15;\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-asignacion","title":"Sentencias de asignaci\u00f3n","text":"<p>Se utilizan para asignar un valor a una variable. </p> C\u00f3digo generalizado<pre><code>x = 5;\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-expresion","title":"Sentencias de expresi\u00f3n","text":"<p>Se utilizan para realizar una operaci\u00f3n o proceso o evaluar una expresi\u00f3n. </p> <p>Los comandos de entrada/salida, como las declaraciones print e input, son un ejemplo t\u00edpico de declaraciones de expresi\u00f3n. </p> C\u00f3digo generalizado<pre><code>y = x + 3;\nprint(\"El resultado de x + 3 es \u201d + y);\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-control-de-flujo","title":"Sentencias de control de flujo","text":"<p>Las sentencias de control de flujo modifican la ejecuci\u00f3n secuencial de las sentencias que forman el programa.</p> <p>Las estudiaremos en profundidad m\u00e1s adelente. Por el momento, solo haremos una breve menci\u00f3n.</p> <p>Se clasifican en cuatro grupos:</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-seleccion","title":"Sentencias de selecci\u00f3n","text":"<p>Se utilizan para ejecutar selectivamente un conjunto de sentencias, seg\u00fan se satisfaga o no una condici\u00f3n.</p> <ul> <li> <p>control de flujo condicional if | if \u2026 else | if \u2026 else anidada</p> C\u00f3digo generalizado<pre><code>if (x &gt; 10) {\nprint (\"El n\u00famero es mayor a 10.\")\n}\n\nif (x &gt; 10) {\nprint (\"El n\u00famero es mayor a 10.\")\n} else {\nprint (\"El n\u00famero no es mayor a 10.\")\n}\n\nif (x &gt; 10) {\nprint (\"El n\u00famero es mayor a 10.\")\n} else if (x == 10) {\nprint (\"El n\u00famero es igual a 10.\")\n} else {\nprint (\"El n\u00famero no es mayor y no es igual a 10. Es menor.\")\n}\n</code></pre> </li> <li> <p>control de flujo condicional switch</p> C\u00f3digo generalizado<pre><code>int opcion = 2;\n\nswitch (opcion) {\n    case 1:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 1.\");\n        break;\n\n    case 2:\n        print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 2.\");\n\n    default:\n        print(\"Esta rama de flujo del programa se recorre por defecto si no hay una opci\u00f3n case que concuerde.\");\n        break;   \n}   \n</code></pre> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-iteracion","title":"Sentencias de iteraci\u00f3n","text":"<p>Se utilizan para seguir ejecutando una sentencia o un bloque de sentencias mientras se cumpla o hasta que se cumpla una cierta condici\u00f3n. </p> <ul> <li> <p>bucle o ciclo cerrado for \u2026 next </p> C\u00f3digo generalizado<pre><code>for (i = 1; i &lt;= 5; i++) {\n    print (i);\n} // la llave cerrada representa next i\n</code></pre> </li> <li> <p>bucle o ciclo abierto while \u2026 loop | until \u2026 loop | do \u2026 loop while | do \u2026 loop until</p> C\u00f3digo generalizado<pre><code>j = 0;\nwhile (j &lt; 5) {\n    print (j);\n    j++;\n} // la llave cerrada representa loop\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\nj = 0;\nuntil (j &gt;= 5) {\n    print (j);\n    j++;\n} // la llave cerrada representa loop    \n</code></pre> C\u00f3digo generalizado<pre><code>do {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop while (n != 0)\n\n// El ejemplo de arriba tiene el mismo comportamiento que el de abajo. \n// La diferencia est\u00e1 en como se arma la condici\u00f3n para que el ciclo \n// se repita bajo los mismos par\u00e1metros de evaluaci\u00f3n.\n\ndo {\n    n = input(\"Ingrese un n\u00famero o 0 para terminar\");\n} loop until (n == 0)\n</code></pre> <p>Como se puede observar, la palabra reservada <code>while</code> est\u00e1 de un color mientras que <code>until</code> no lo est\u00e1. Esto se debe a que no es com\u00fan encontrar disponible la segunda opci\u00f3n en la mayor\u00eda de los lenguajes. Sin embargo, corresponde informar acerca de su existencia ya que en caso de existir, es v\u00e1lido utilizarla si con ella se mejora la formulaci\u00f3n de la condici\u00f3n de repitancia del ciclo.</p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-salto","title":"Sentencias de salto","text":"<p>Tambi\u00e9n conocidas como sentencias de decisi\u00f3n o branching, se utilizan para salir de un bucle o de una funci\u00f3n antes de que se complete; o para transferir el control de flujo a otro punto del programa.</p> <p>Es decir, que se utilizan para alterar de manera incondicional el orden de ejecuci\u00f3n de las sentencias de un programa. S\u00f3lo deber\u00edan utilizarse con el fin de simplificar o mejorar los algoritmos.</p> <ul> <li> <p>break | continue</p> C\u00f3digo generalizado<pre><code>for (i = 1; i &lt;= 5; i++) {\nif (i == 3) break\nprint (i)\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\n</code></pre> C\u00f3digo generalizado<pre><code>C\u00f3digo generalizado\nfor (i = 1; i &lt;= 5; i++) {\nif (i == 3) continue\nprint (i)\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\n4\n5\n</code></pre> </li> <li> <p>goto</p> C\u00f3digo generalizado<pre><code>ejecutar_salto = true;\nif (ejecutar_salto) {\ngoto etiqueta_de_salto; \n}\netiqueta_de_salto:\n    print(\"El salto se efectu\u00f3 con \u00e9xito!\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>El salto se efectu\u00f3 con \u00e9xito!\n</code></pre> </li> <li> <p>return</p> C\u00f3digo generalizado<pre><code>a = 3, b = 4;\nresultado = multiplicar(a, b);\nprint(\"El resultado de de 3 x 4 es \u201d + resultado);\nfunction multiplicar(a, b) {\nreturn a * b;\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>El resultado de de 3 x 4 es 12\n</code></pre> <p>!Muy importante Â¡Para recordar!!</p> <p>Al usar sentencias de salto, todo programador debe tener en cuenta que cuando el control salta fuera de un bloque o bucle, puede implicar la destrucci\u00f3n que todo lo que se haya declarado en el \u00e1mbito local. </p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-manejo-de-excepciones","title":"Sentencias de manejo de excepciones","text":"<p>El manejo de excepciones es un tipo de t\u00e9cnica de programaci\u00f3n que se utiliza para tratar los errores de ejecuci\u00f3n. Consiste en detectar cualquier error que se produzca durante la ejecuci\u00f3n del programa y responder adecuadamente en lugar de finalizar abruptamente y de manera inadecuada el programa.</p> <ul> <li> <p>try \u2026 catch \u2026 finally</p> <p><code>js title=\"</code></p> </li> <li> <p>throw</p> <p><code>js title=\"</code></p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-etiquetadas","title":"Sentencias etiquetadas","text":"<p>Suelen contener una etiqueta y se utilizan para dirigir el flujo de ejecuci\u00f3n de un programa. </p> <p>Las etiquetas se utilizan para identificar una ubicaci\u00f3n en el c\u00f3digo, solicitada a partir del redireccionamiento del control de flujo. </p> <p>Puede ser una etiqueta de caso (case) o una etiqueta predeterminada (default) en una declaraci\u00f3n switch. </p> <p>Dependiendo del lenguaje de programaci\u00f3n, generalmente se utilizan los dos puntos ( : ) para definirlas. </p> C\u00f3digo generalizado<pre><code>int opcion = 2;\nswitch (opcion) {\n    case 1:\n      print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 1.\");\n      break;\n\n    case 2:\n      print(\"Esta rama de flujo del programa se recorre cuando se elige la opci\u00f3n 2.\");\n      goto end_switch;\n\n    default:\n      print(\"Esta rama de flujo del programa se recorre por defecto si no hay una opci\u00f3n case que concuerde.\");\n      break;   \n}  \nend_switch:\n    print(\"Declaraci\u00f3n switch completada!\");\n</code></pre> <p>Aqu\u00ed, el control del programa saltar\u00e1 a case 2 y luego saltar\u00e1 a la etiqueta end_switch.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-de-llamada-a-funcion","title":"Sentencias de llamada a funci\u00f3n","text":"<p>Se utilizan para llamar a una funci\u00f3n, con la posibilidad de pasarle argumentos para realizar una acci\u00f3n determinada y luego recibir un valor retornado desde dicha funci\u00f3n para ser utilizado de alguna manera.</p> C\u00f3digo generalizado<pre><code>function una_funcion_cualquiera() { \u2026 } // una declaraci\u00f3n de funci\u00f3n es una sentencia\n\nprint (variable_declarada) // una funci\u00f3n predefinida (palabra reservada) del lenguaje es una sentencia\n\nfunction calcular_promedio(lista_de_valores) {\n   int suma_de_valores = 0\n\n   for (valor in lista_de_valores) {\n      suma_de_valores += valor  \n   }\n\n   // esta l\u00ednea devuelve la suma de valores dividida por la cantidad de valores    \n   return suma_de_valores / lista_de_valores.length()\n}\n\n\u2026\n\npromedio = calcular_promedio([2, 4, 6, 8])\n\nprint(\"El promedio de 2, 4, 6 y 8 es \" + promedio)\n</code></pre> Terminal (Entrada/Salida)<pre><code>El promedio de 2, 4, 6 y 8 es 5\n</code></pre> <p>length() es un m\u00e9todo que devuelve la cantidad de elementos que contiene. Por el momento no te preocupes por la terminolog\u00eda o su funcionamiento.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#sentencias-compuestas","title":"sentencias compuestas","text":"<p>chequear este item</p> <p>Es un grupo de sentencias combinadas, tambi\u00e9n conocido como bloque de sentencias (statement block). Los programas generalmente necesitan llaves para vincular m\u00e1s de una declaraci\u00f3n, formando una sentencia compuesta.  </p> <p>Pueden contener (secuencias de) declaraciones, anidadas a cualquier profundidad razonable, y generalmente involucran pruebas para decidir si obedecer o repetir estas declaraciones contenidas.</p> <p>Adem\u00e1s, las variables que se declaran entre llaves tienen un alcance limitado solo a ese bloque.  </p> C\u00f3digo generalizado<pre><code>y = x + 3;\nprint(\"El resultado de x + 3 es \u201d + y);\n</code></pre> <p>Esto est\u00e1 bien?</p> <p>Cualquier sentencia que pueda devolver un valor se califica autom\u00e1ticamente como una expresi\u00f3n. Es por eso que una funci\u00f3n o  clase puede ser una sentencia y tambi\u00e9n una expresi\u00f3n.</p> <pre><code>let multiplicar = function (numeroUno, numeroDos) {\n    return numeroUno * numeroDos;\n}\n</code></pre> <p>Si se observa el ejemplo anterior, se puede ver que se asigna y ejecuta a un valor pasado a una variable. Por eso es una expresi\u00f3n en ese caso.</p> <p>Â¡Para recordar!</p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis y conjunto de sentencias disponibles, pudiendo existir otros tipos m\u00e1s especializados y propios de cada lenguaje; aunque los conceptos b\u00e1sicos se mantienen consistentes en la mayor\u00eda de los casos.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#que-es-el-terminador-de-sentencias","title":"\u00bfQu\u00e9 es el terminador de sentencias?","text":"<p>El t\u00e9rmino terminador de sentencias generalmente se refiere a un car\u00e1cter especial o secuencia de caracteres utilizados para indicar el final de una sentencia en un lenguaje de programaci\u00f3n o en un lenguaje de consulta. </p> <p>Para recordar</p> <p>El terminador de sentencias se coloca al final de cada sentencia para indicar que se ha completado su ejecuci\u00f3n y que la siguiente sentencia puede comenzar a ejecutarse.</p> <p>Algunos ejemplos comunes de terminadores de sentencias son:</p> <ul> <li> <p>Punto y coma: es utilizado en lenguajes como C, C++, Java y JavaScript para finalizar y separar las sentencias.</p> Javascript<pre><code>var x = 5;\nconsole.log(x);\n</code></pre> </li> <li> <p>Salto de l\u00ednea: en lenguajes como Python y Ruby, no es necesario un terminador de sentencias expl\u00edcito.  En su lugar, se utiliza un salto de l\u00ednea para indicar el final de una sentencia.</p> Python<pre><code>x = 5\nprint(x)\n</code></pre> </li> </ul> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que el uso del terminador de sentencias puede variar seg\u00fan el lenguaje de programaci\u00f3n o consulta que est\u00e9s utilizando. Algunos lenguajes pueden tener reglas espec\u00edficas para el uso del terminador de sentencias, mientras que otros pueden ser m\u00e1s flexibles en cuanto a su presencia o ausencia. </p> <p>Es recomendable consultar la documentaci\u00f3n del lenguaje espec\u00edfico que est\u00e9s utilizando para comprender c\u00f3mo se utiliza el terminador de sentencias en ese contexto.</p> <p>Para recordar</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, dependiendo de su sintaxis, se debe colocar un punto y coma ( ; ) al final de cada sentencia para indicar su finalizaci\u00f3n.  Pero en otros no es obligatorio. Simplemente, con un salto de l\u00ednea alcanza.</p> <p>Para saber si debemos hacerlo, ser\u00e1 necesario consultar el manual del lenguaje en cuesti\u00f3n. </p> <p>Es importante recordar que NO se coloca el punto y coma (;) cuando la l\u00ednea de comandos abre o cierra un bloque de c\u00f3digo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/sentencias-de-un-programa/#que-es-una-sentencias-en-linea-inline-statement","title":"\u00bfQu\u00e9 es una sentencias en l\u00ednea (inline statement)?","text":"<pre><code>let cantidad = 2000;\n</code></pre> <p>Todo el c\u00f3digo anterior es una sentencia porque lleva a cabo la tarea de asignar el valor 2000 a la variable cantidad. Es seguro decir que una l\u00ednea de c\u00f3digo es una sentencia porque la mayor\u00eda de los compiladores o int\u00e9rpretes no ejecutan ninguna expresi\u00f3n de manera independiente.</p> <p>Una sentencia de declaraci\u00f3n declara una variable:</p> <pre><code>int valor; // Declaraci\u00f3n una variable llamada valor de tipo entero\n</code></pre> <p>Los siguientes tipos de expresiones se pueden convertir en una sentencia terminando la expresi\u00f3n con un punto y coma:</p> <pre><code>valor = 45; // Expresiones de asignaci\u00f3n\nvalor++; // Uso de operadores incrementales (++) o decrementales (--)\nimprimir_en_pantalla(valor); // Llamadas a m\u00e9todos\nint objetoEntero = new ObjetoEntero(valor); // Expresiones de creaci\u00f3n de objetos\n</code></pre> <p>Una sentencia de flujo de control regula el orden en que se ejecutan las declaraciones. Los ciclos y las alternativas condicionales son ejemplos de sentencias de flujo de control. Estas, por su sintaxis, requieren ser escritas utilizando bloques de sentencias.</p>"},{"location":"unidades/fundamentos-de-la-programacion/expresiones-sentencias-bloques/ejercitacion/ejercitacion-basica-expresiones/","title":"Expresiones: ejercitaci\u00f3n b\u00e1sica","text":"<p>Estos ejercicios deber\u00edan ayudarte a familiarizarte con los operadores y las expresiones. \u00a1Buena suerte!</p> <ol> <li> <p>Resuelve las siguientes expresiones indicando el valor que ser\u00e1 almacenado en x:</p> <pre><code>x = 5 + 3   Ver resultado#(1)!\n\nx = (5 + 3) * (2 - 1)   Ver resultado#(2)!\n\nx = 2 ** 3   Ver resultado#(3)!\n\nx = 16 ** (1/2)   Ver resultado#(4)!\n\nx = 10 // 3   Ver resultado#(5)!\n\nx = 10 % 3   Ver resultado#(6)!\n\nx = 10\nx = x + 5   Ver resultado#(7)!\n\nx = 10\nx = x / 2   Ver resultado#(8)!\n\nx = 10\nx += 5   Ver resultado#(9)!\n\nx = 10\nx /= 2   Ver resultado#(10)!\n\nx = \"Hola\" + \" \" + \"Mundo!\"   Ver resultado#(11)!\n\nx = \"40\" + \"35\"   Ver resultado#(12)!\n\nx = 10\nx++   Ver resultado#(13)!\n\nx = 10\nx--   Ver resultado#(14)!\n\nx = True &amp;&amp; True   Ver resultado#(15)!\n\nx = True &amp;&amp; False   Ver resultado#(16)!\n\nx = False &amp;&amp; True   Ver resultado#(17)!\n\nx = False &amp;&amp; False   Ver resultado#(18)!\n\nx = True || True   Ver resultado#(19)!\n\nx = True || False   Ver resultado#(20)!\n\nx = False || True   Ver resultado#(21)!\n\nx = False || False   Ver resultado#(22)!\n\nx = !(True)   Ver resultado#(23)!\n\nx = !(False)   Ver resultado#(24)!\n\na = 2, b = 10, c = 5\nx = (a &gt; 0) &amp;&amp; (b &lt; 10) || (c == 5) || !(False)   Ver resultado#(25)!\n</code></pre> <ol> <li> x =     8</li> <li> x = 8</li> <li> x = 8</li> <li> x = 4</li> <li> x = 3     </li> <li> x = 1     </li> <li> x = 15     </li> <li> x = 5    </li> <li> x = 15</li> <li> x = 5    </li> <li> x = \"Hola Mundo!\"    </li> <li> x = \"4035\"    </li> <li> x = 11</li> <li> x = 9</li> <li> x = True</li> <li> x = False</li> <li> x = False</li> <li> x = False</li> <li> x = True</li> <li> x = True</li> <li> x = True</li> <li> x = False</li> <li> x = False</li> <li> x = True</li> <li> x = True</li> </ol> </li> <li> <p>\u00bfCu\u00e1l ser\u00e1 el valor almacenado en la variable correspondiente en cada caso?</p> <pre><code>a = 5\nb = 3\nresultado = a + b \n</code></pre> <p>Ver resultado (1)</p> <ol> <li> El operador de suma (+) se utiliza para sumar los valores de las variables a y b, y el resultado se asigna a la variable resultado. En este caso, ser\u00e1 8.</li> </ol> <pre><code>a = 5\nb = 3\nresultado = a &gt; b\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, el operador de comparaci\u00f3n mayor que (&gt;) compara los valores de a y b y devuelve verdadero si a es mayor que b. El resultado se asigna a la variable resultado, que contendr\u00e1 el valor booleano verdadero.</li> </ol> <pre><code>a = 5\nb = 3\nresultado = (a &gt; b) &amp;&amp; (b != 0)\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, el operador de comparaci\u00f3n mayor que (&gt;) compara los valores de a y b, y el operador de desigualdad (!=) verifica si b no es igual a cero. El operador de conjunci\u00f3n l\u00f3gica (&amp;&amp;) combina estas dos expresiones y devuelve verdadero solo si ambas son verdaderas. El resultado se asigna a la variable resultado.</li> </ol> <pre><code>x = 5\nx += 3 \nx?\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, la variable x se inicializa con el valor 5. Luego, se utiliza el operador (+=) para sumar 3 al valor actual de x. La operaci\u00f3n x += 3 es equivalente a x = x + 3. Como resultado, el valor de x se actualiza a 8.</li> </ol> <pre><code>cadena = \"Hola\"\ncadena += \" mundo\"\ncadena?\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, el operador (+=) tambi\u00e9n se puede utilizar con otros tipos de dato, como cadenas de caracteres, para realizar operaciones de concatenaci\u00f3n. El resultado almacenado en cadena es \"Hola mundo\".</li> </ol> <pre><code>lista = [1, 2, 3]\nlista += [4, 5]\nlista?\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> En este caso, el operador (+=) tambi\u00e9n se puede utilizar con otros tipos de dato, como listas, para realizar operaciones de agregaci\u00f3n de elementos. El resultado almacenado en lista es [1, 2, 3, 4, 5].</li> </ol> </li> <li> <p>Escribe el pseudoc\u00f3digo o el c\u00f3digo en un lenguaje de programaci\u00f3n v\u00e1lido, de los siguientes ejercicios.    En cada caso, si hay entrada de datos debe efectuarse por teclado y la salida de resultados debe efectuarse por pantalla:</p> <ol> <li> <p>Ejercicios con operadores de asignaci\u00f3n:  </p> <ol> <li>Escribe un programa que, dada la variable x = 4, calcule cada expresi\u00f3n utilizando el operador de asignaci\u00f3n simple, una por l\u00ednea de c\u00f3digo:</li> <li>Aumente el n\u00famero en 5.</li> <li>Multiplique el resultado por 2.</li> <li>Divida el resultado entre 3.</li> <li>Reste 4 al resultado.</li> <li> <p>Imprima el resultado final.</p> </li> <li> <p>Escribe un programa que, dada la variable x = 4, calcule cada expresi\u00f3n utilizando el operador de asignaci\u00f3n compuesta, una por l\u00ednea de c\u00f3digo:</p> </li> <li>Multiplique el n\u00famero por 3.</li> <li>Sume 7 al resultado.</li> <li>Divida el resultado entre 2.</li> <li> <p>Imprima el resultado final.</p> </li> <li> <p>Escribe un programa que:</p> </li> <li>Solicite al usuario un n\u00famero entero</li> <li>Le sume 5 utilizando el operador de asignaci\u00f3n compuesta. </li> <li>Luego, muestre el resultado por pantalla.</li> </ol> </li> <li> <p>Ejercicios con operadores aritm\u00e9ticos:  </p> <ol> <li> <p>Escribe un programa que solicite al usuario dos n\u00fameros enteros y muestre por pantalla la suma, la resta, la multiplicaci\u00f3n, la divisi\u00f3n, la divisi\u00f3n entera y el m\u00f3dulo de ambos n\u00fameros.    Cuidado, en el caso de las divisiones y del m\u00f3dulo, el divisor debe ser el menor valor.</p> <p>imprimir(nombre + apellido)         2. Escribe un programa que solicite al usuario un n\u00famero y realice las siguientes operaciones:   * Calcule el cuadrado del n\u00famero.   * Calcule la ra\u00edz cuadrada del n\u00famero.</p> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese la base y la altura para calcular el \u00e1rea de un rect\u00e1ngulo utilizando la f\u00f3rmula:        <pre><code>area = base * altura\n</code></pre></p> </li> <li> <p>Escribe un programa similar al anterior, que calcule el \u00e1rea de un tri\u00e1ngulo. Piensa que f\u00f3rmula utilizar. </p> </li> </ol> </li> <li> <p>Ejercicios con operadores de concatenaci\u00f3n de cadenas de caracteres:</p> <ol> <li> <p>\u00bfQu\u00e9 resultado tendr\u00e1 el siguiente ejercicio? \u00bfPor qu\u00e9?</p> <pre><code>nombre = \"Juan\", apellido = \"P\u00e9rez\"\n</code></pre> </li> <li> <p>\u00bfY si la instrucci\u00f3n de impresi\u00f3n fuera la siguiente? \u00bfPor qu\u00e9?</p> <pre><code>nombre = \"Juan\", apellido = \"P\u00e9rez\"\nimprimir(nombre + \" \" + apellido)\n</code></pre> </li> <li> <p>Escribe un programa que solicite al usuario su nombre y su edad, y luego muestre un mensaje que diga </p> Terminal (Entrada/Salida)<pre><code>Hola, [nombre]. Tienes [edad] a\u00f1os.\n</code></pre> <p>Cuando queremos mencionar variables en una cadena de texto, lo hacemos entre corchetes. Esto significa que durante la ejecuci\u00f3n del programa, estas variables deber\u00e1n ser reemplazadas por el valor almacenado en cada una de ellas.</p> </li> <li> <p>Escribe un programa similar al anterior pero, en lugar de la edad, debe solicitar el a\u00f1o de nacimiento. El mensaje de salida debe ser el mismo. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>\u00bfC\u00f3mo se te ocurre que puedes resolver el problema a partir del a\u00f1o de nacimiento?</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>anio_actual = 2023\n\nnombre_completo = input(\"Ingresa tu nombre completo: \")\nanio_nacimiento = int(input(\"Ingresa tu a\u00f1o de nacimiento: \"))\n\nedad = anio_actual - anio_nacimiento\n\nmensaje = \"Hola, \" + nombre_completo + \". Tienes \" + str(edad) + \" a\u00f1os.\"\n\nprint(mensaje)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite al usuario dos palabras. Luego, que las imprima en orden alfab\u00e9tico y, luego, en orden alfab\u00e9tico inverso. </p> </li> <li> <p>Escribe un programa que solicite al usuario cuatro cadenas de caracteres y las muestre concatenadas.</p> </li> <li> <p>Escribe un programa que solicite al usuario cuatro cadenas de caracteres y con ellas arme y muestre una oraci\u00f3n (piensa en las reglas ortogr\u00e1ficas).</p> </li> <li> <p>Escribe un programa que solicite al usuario dos cadenas de caracteres y que informe que cadena es m\u00e1s larga y por cuantos caracteres de m\u00e1s.</p> </li> <li> <p>Escribe un programa que solicite al usuario su nombre completo. Luego que solo muestre las iniciales de cada palabra en may\u00fasculas separadas por un espacio.</p> </li> </ol> <p>Por ejemplo:</p> <pre><code>``` title=\"Entrada\"\npablo martinez roca\n```\n\n``` title=\"Terminal (Entrada/Salida)\"\nP M R\n```\n\nVer resultado (1)\n{ .annotate }\n\n1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    # Bloque principal del programa\n    nombre_completo = input(\"Ingresa tu nombre completo: \")\n    iniciales = \"\"\n\n    palabras = nombre_completo.split()\n\n    for palabra in palabras:\n        iniciales += palabra[0].upper() + \" \"\n    print(\"Las iniciales son:\", iniciales)\n\n    ```\n</code></pre> <ol> <li>Escribe un programa que solicite una frase y muestre solo las palabras que empiezan con 'a' en una nueva cadena separadas por comas.</li> </ol> <p>Por ejemplo:</p> <pre><code>``` title=\"Terminal (Entrada/Salida)\"\n\n```\n\nVer resultado (1)\n{ .annotate }\n\n1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    # Bloque principal del programa\n    frase = input(\"Ingresa una frase: \")\n\n    palabras = frase.split()\n\n    palabras_con_a = []\n\n    for palabra in palabras:\n        if palabra[0].lower() == 'a':\n            palabras_con_a.append(palabra)\n\n    palabras_con_a_str = \", \".join(palabras_con_a)\n\n    print(\"Palabras que empiezan con 'a':\", palabras_con_a_str)\n    ```\n\n    ``` js title=\"Javascript\"\n    // Bloque principal del programa\n    var frase = prompt(\"Ingresa una frase:\");\n\n    var palabras = frase.split(\" \");\n    var palabrasConA = \"\";\n\n    for (var i = 0; i &lt; palabras.length; i++) {\n        if (palabras[i][0].toLowerCase() === 'a') {\n            palabrasConA += palabras[i] + \",\";\n        }\n    }\n\n    palabrasConA = palabrasConA.slice(0, -1);\n\n    console.log(\"Palabras que empiezan con 'a':\", palabrasConA);               \n    ```\n</code></pre> <ol> <li> <p>Escribe un programa que solicite al usuario una cadena de caracteresy muestre la primera y \u00faltima palabra separadas por un guion. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Bloque principal del programa\ncadena = input(\"Ingresa una cadena de texto: \")\n\npalabras = cadena.split()\n\nprimera_palabra = palabras[0]\nultima_palabra = palabras[-1]\n\nresultado = primera_palabra + \"-\" + ultima_palabra\n\nprint(\"Primera y \u00faltima palabra:\", resultado)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite al usuario una oraci\u00f3n y luego  indique si las palabras est\u00e1n, o no, ordenadas en orden alfab\u00e9tico. </p> </li> <li> <p>Escribe un programa que tenga una lista de palabras predefinidas. El programa debe seleccionar una palabra al azar y solicitar al usuario que la adivine. El usuario tiene un n\u00famero limitado de intentos. El programa debe indicar si la palabra del usuario es mayor o menor alfab\u00e9ticamente que la palabra seleccionada, y continuar pidiendo al usuario que adivine hasta que acierte o se agoten los intentos.</p> </li> <li> <p>Verificar validez de una expresi\u00f3n matem\u00e1tica:</p> </li> </ol> <p>Escribe un programa que solicite al usuario una expresi\u00f3n matem\u00e1tica que incluya par\u00e9ntesis, corchetes y llaves. El programa debe verificar si los s\u00edmbolos de apertura y cierre est\u00e1n correctamente balanceados. Por ejemplo, \"(2 + [3 * {5 - 1}])\" es una expresi\u00f3n v\u00e1lida, mientras que \"(2 + [3 * {5 - 1])\" no lo es.</p> <ol> <li>Juego de piedra, papel o tijera:</li> </ol> <p>Escribe un programa que permita al usuario jugar piedra, papel o tijera contra la computadora. El programa debe solicitar la opci\u00f3n del usuario, generar una opci\u00f3n aleatoria para la computadora y determinar qui\u00e9n gana seg\u00fan las reglas del juego.</p> <ol> <li>Validaci\u00f3n de tarjeta de cr\u00e9dito:</li> </ol> <p>Escribe un programa que solicite al usuario un n\u00famero de tarjeta de cr\u00e9dito y verifique si es v\u00e1lido utilizando el algoritmo de Luhn. El programa debe imprimir un mensaje indicando si la tarjeta es v\u00e1lida o no.</p> <ol> <li>Juego del ahorcado:  Escribe un programa que seleccione una palabra al azar de una lista predefinida. El programa debe permitir al usuario adivinar letras de la palabra y mostrar su progreso. El usuario tiene un n\u00famero limitado de intentos para adivinar la palabra completa. El programa debe indicar si las letras adivinadas por el usuario est\u00e1n en la palabra y mostrar el progreso actualizado.</li> </ol> </li> <li> <p>Ejercicios con operadores de incremento y decremento:</p> <ol> <li> <p>\u00bfPara qu\u00e9 se utiliza el operador ++?</p> <p>Ver resultado (1)</p> <ol> <li> Este operador incrementa el valor de la variable en 1.   </li> </ol> </li> <li> <p>\u00bfPara qu\u00e9 se utiliza el operador --?</p> <p>Ver resultado (1)</p> <ol> <li> Este operador decrementa el valor de la variable en 1.</li> </ol> </li> <li> <p>\u00bfQu\u00e9 valor se le asigna a la variable y si se utiliza el operador como sufijo? \u00bfC\u00f3mo operar\u00eda el sufijo en la expresi\u00f3n?</p> <pre><code>int x = 5\nint y = x++\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> Este operador incrementa el valor de la variable despu\u00e9s de utilizar su valor actual en la expresi\u00f3n. Es \u00fatil cuando se desea utilizar el valor original de la variable en una operaci\u00f3n y luego incrementarla. El valor de y es 5. </li> </ol> </li> <li> <p>\u00bfQu\u00e9 valor se le asigna a la variable y si se utiliza el operador como prefijo? \u00bfC\u00f3mo operar\u00eda el prefijo en la expresi\u00f3n?</p> <pre><code>int x = 5\nint y = ++x\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> Este operador incrementa el valor de la variable antes de utilizar su valor en la expresi\u00f3n. Es \u00fatil cuando se desea utilizar el valor incrementado de la variable inmediatamente. El valor de y es 6.</li> </ol> </li> </ol> </li> <li> <p>Ejercicios con operadores de comparaci\u00f3n:</p> <pre><code>1. Escribe un programa que tome un n\u00famero del usuario y verifique si es positivo, negativo o igual a cero.\n\n2. Escribe un programa que solicite al usuario dos n\u00fameros enteros y determine si el primero es mayor que el segundo.\n\n3. Escribe un programa que solicite al usuario dos n\u00fameros enteros y determine si ambos son pares.\n\n4. Escribe un programa que solicite al usuario un n\u00famero entero y determine si es par y positivo al mismo tiempo.\n\n5.  Escribe un programa que solicite al usuario un n\u00famero entero y determine si es divisible por 3 y 5 al mismo tiempo.\n\n6.  Escribe un programa que solicite al usuario un n\u00famero entero y determine si dicho n\u00famero es impar y m\u00faltiplo de 3 al mismo tiempo.\n\n7. Escribe un programa que pida al usuario dos n\u00fameros enteros y verifique si al menos uno de ellos es positivo y el otro es negativo.\n\n8. Escribe un programa que solicite al usuario un n\u00famero y verifique si est\u00e1 dentro de un rango dado.\n\n9. Escribe un programa que solicite al usuario su nombre y lo compare con el nombre \"Juan\". Si son iguales, que diga \"Hola Juan\".\n\n10. Escribe un programa que solicite al usuario una contrase\u00f1a y verifique si coincide con una contrase\u00f1a predefinida.\n\n11. Escribe un programa que genere un n\u00famero aleatorio entre 1 y 100.  \nLuego, que solicite al usuario que adivine el n\u00famero generado.  \nEl programa debe indicar si el n\u00famero del usuario es mayor o menor que el n\u00famero generado, y continuar pidiendo al usuario que adivine hasta que acierte. Al acertar, debe indicar en cuantos intentos lo hizo.\n\n12. Modificar el programa anterior para que tenga un n\u00famero m\u00e1ximo de intentos.\n\n13. Modificar el programa anterior para que tenga una tabla de puntuaciones m\u00e1s altas (high scores).\n</code></pre> </li> <li> <p>Ejercicios con operadores l\u00f3gicos (booleanos):</p> <ol> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos (verdadero o falso) y realice las siguientes operaciones:</p> <ul> <li>mostrar la operaci\u00f3n l\u00f3gica AND entre los dos valores.</li> <li>mostrar la operaci\u00f3n l\u00f3gica OR entre los dos valores.</li> <li>mostrar la operaci\u00f3n l\u00f3gica NOT del primer valor y del segundo valor.</li> </ul> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si ambos son iguales. </p> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si ambos son diferentes.   Es decir, uno es True y el otro es False, o viceversa.</p> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si ambos son verdaderos o si son falsos.</p> </li> <li> <p>Escribe un programa que solicite al usuario dos valores booleanos y determine si al menos uno de ellos es verdadero.</p> </li> </ol> </li> <li> <p>Ejercicio de operaciones de conversi\u00f3n de tipos:         1. Escribe un programa que solicite al usuario un n\u00famero entero y un n\u00famero decimal, y realice las siguientes operaciones:            1. Convierte el n\u00famero entero a decimal.            2. Convierte el n\u00famero decimal a entero.</p> </li> <li> <p>Ejercicio de expresiones condicionales (if-else):         1. Escribe un programa que solicite al usuario su edad y determine si es mayor de edad (18 a\u00f1os o m\u00e1s). Muestra el resultado por pantalla.         2. Escribe un programa que solicite al usuario un n\u00famero entero y determine si es positivo, negativo o cero. Muestra el resultado por pantalla.</p> </li> <li> <p>Ejercicio de expresiones de bucles:         1. Escribe un programa que solicite al usuario un n\u00famero entero y muestre por pantalla todos los n\u00fameros desde 1 hasta ese n\u00famero utilizando un bucle while.         2. Escribe un programa que solicite al usuario un n\u00famero entero y muestre por pantalla todos los n\u00fameros pares desde 0 hasta ese n\u00famero utilizando un bucle for.</p> </li> <li> <p>Ejercicio de llamadas a funciones:         1. Escribe una funci\u00f3n llamada \"calcular_promedio\" que reciba tres n\u00fameros como argumentos y devuelva el promedio de esos n\u00fameros. Luego, utiliza la funci\u00f3n para calcular el promedio de tres n\u00fameros ingresados por el usuario.         2. Escribe un programa que solicite al usuario un n\u00famero entero y calcule su factorial utilizando una funci\u00f3n recursiva. Muestra el resultado por pantalla.</p> </li> <li> <p>Ejercicio de acceso a elementos:         1. Escribe un programa que solicite al usuario una lista de palabras separadas por comas. Luego, muestra por pantalla la primera y la \u00faltima palabra de la lista.         2. Escribe un programa que solicite al usuario una lista de n\u00fameros separados por comas. Luego, encuentra el n\u00famero m\u00e1s grande y el n\u00famero m\u00e1s peque\u00f1o de la lista y mu\u00e9stralos por pantalla.         3. Escribe un programa que compare dos listas y determine si son iguales (es decir, si contienen los mismos elementos en el mismo orden).         4. Escribe un programa que encuentre el valor m\u00e1ximo en una lista de n\u00fameros.         5. Escribe un programa que solicite al usuario una lista de n\u00fameros y los ordene de menor a mayor utilizando el algoritmo de ordenamiento de burbuja. Luego, muestra la lista ordenada al usuario.         6. Escribe un programa que solicite al usuario el n\u00famero de estudiantes en una clase, y luego pida al usuario ingresar las notas de cada estudiante. El programa debe calcular el promedio de las notas y determinar cu\u00e1ntos estudiantes obtuvieron una nota por encima del promedio.</p> </li> </ol> </li> <li> <p>Problemas complejos para resolver:</p> <ol> <li> <p>Escribe un programa que genere un n\u00famero aleatorio entre 1 y 1000. El programa debe permitir al usuario adivinar el n\u00famero, pero esta vez proporcionando pistas. Despu\u00e9s de cada intento, el programa debe indicar si el n\u00famero del usuario es mayor o menor que el n\u00famero generado, y tambi\u00e9n indicar qu\u00e9 tan cerca est\u00e1 el n\u00famero del usuario del n\u00famero generado (por ejemplo, \"Est\u00e1s a menos de 50 unidades de distancia\"). El usuario tiene un n\u00famero limitado de intentos para adivinar el n\u00famero correcto.</p> </li> <li> <p>Ordenar una lista de objetos personalizados: Escribe un programa que solicite al usuario ingresar informaci\u00f3n sobre varias personas, como su nombre, edad y altura. Luego, el programa debe ordenar la lista de personas en funci\u00f3n de alg\u00fan criterio, como la edad o la altura, utilizando operadores de comparaci\u00f3n personalizados.</p> </li> <li> <p>Juego del laberinto: Escribe un programa que represente un laberinto como una matriz bidimensional. El programa debe permitir al usuario moverse por el laberinto utilizando comandos de direcci\u00f3n (arriba, abajo, izquierda, derecha) y verificar si el usuario ha llegado a la salida del laberinto.</p> </li> <li> <p>Juego de estrategia basado en turnos: Escribe un programa que simule un juego de estrategia basado en turnos. El programa debe permitir a dos jugadores realizar acciones, como mover unidades o atacar, y verificar el resultado de cada acci\u00f3n utilizando operadores de comparaci\u00f3n para determinar el \u00e9xito del ataque o la efectividad de las defensas.</p> </li> <li> <p>An\u00e1lisis de datos complejos: Escribe un programa que lea un archivo de datos complejos, como datos de sensores o registros m\u00e9dicos, y realice an\u00e1lisis utilizando operadores de comparaci\u00f3n. Por ejemplo, puedes encontrar valores at\u00edpicos, identificar tendencias o realizar c\u00e1lculos basados en ciertos criterios de comparaci\u00f3n.4</p> </li> <li> <p>Crea un programa que solicite al usuario una contrase\u00f1a y verifique si cumple con los siguientes requisitos: debe tener al menos 8 caracteres, contener al menos una letra min\u00fascula, una letra may\u00fascula y un n\u00famero.</p> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/","title":"Operandos y operadores","text":""},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#introduccion","title":"Introducci\u00f3n","text":"<p>Un operando (variable, constante literale o resultado de una llamada a funci\u00f3n o m\u00e9todo) es un valor que representa un dato que ser\u00e1 procesado en una expresi\u00f3n para obtener un valor como resultado.</p> <p>Un operador es un s\u00edmbolo en una expresi\u00f3n que representa una operaci\u00f3n aplicada a los operandos sobre los que act\u00faa.  Por lo tanto, los operandos y los operadores son componentes b\u00e1sicos de un programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#que-es-un-operando","title":"\u00bfQu\u00e9 es un operando?","text":"<p>Definici\u00f3n</p> <p>En una expresi\u00f3n, un operando es un t\u00e9rmino utilizado en programaci\u00f3n para referirse a un dato o conjunto de datos a los que se les aplican operadores para realizar una operaci\u00f3n y devolver un resultado.</p> <p>Estos datos pueden ser variables que contienen valores almacenados en la memoria, valores literales (num\u00e9ricos, cadenas de caracteres, booleanos, etc.), constantes que se especifican en el c\u00f3digo directamente, llamadas a funciones o incluso expresiones m\u00e1s complejas que combinan m\u00faltiples operandos y operadores. </p> Python<pre><code>x = 10  # x es una variable con el valor 10\ny = 5   # y es otra variable con el valor 5\n\n# aqu\u00ed, x e y son operandos de la expresi\u00f3n que los suma y suma es la variable que almacenar\u00e1 el valor resultante\nsuma = x + y\n</code></pre> <p>En este ejemplo, tanto la variable x como la variable y son operandos de las dos expresiones de asignaci\u00f3n; y tambi\u00e9n son operandos de la expresi\u00f3n que realiza una suma de sus valores almacenados, asignando el resultado en la variable suma.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#tipos-de-operandos","title":"Tipos de operandos","text":"<p>Los diferentes tipos de operandos que se encuentran en una expresi\u00f3n de programaci\u00f3n pueden variar seg\u00fan el lenguaje de programaci\u00f3n utilizado, pero aqu\u00ed hay algunos ejemplos comunes:</p> <pre><code>* **N\u00fameros**: los operandos num\u00e9ricos pueden ser:\n    * **N\u00fameros enteros**: representan n\u00fameros enteros sin decimales, como 1, 10, -5, etc.\n    * **N\u00fameros de punto flotante**: representan n\u00fameros con decimales, como 3.14, -2.5, 0.75, etc.\n* **cadenas de caracteres**: las cadenas de caracteres **son secuencias de caracteres** como \"Hola\", \"OpenAI\", o incluso n\u00fameros tratados como texto, por ejemplo, \"20\" se lee dos cero y no veinte, y **se utilizan para representar texto** en un programa. Estos operandos pueden ser concatenados o ser modificados mediante otras operaciones relacionadas con las cadenas de caracteres.\n* **Booleanos** (l\u00f3gicos): los operandos booleanos representan un valor l\u00f3gico que puede ser verdadero o falso (true o false). **Se utilizan** en expresiones relacionales y l\u00f3gicas (de comparaci\u00f3n) para **evaluar condiciones** o **manipular el control de flujo del programa**.\n* **Variables**: las variables son operandos que pueden contener valores num\u00e9ricos, cadenas de caracteres, valores booleanos u otros tipos de dato.\n* **Arreglos** o **listas**: los operandos pueden ser **elementos individuales dentro de un arreglo o lista**, y se pueden realizar operaciones en ellos, como acceso por \u00edndice o recorrido.\n* **Objetos**: En lenguajes de programaci\u00f3n orientados a objetos, los operandos pueden ser **instancias de clases u objetos**, y se pueden realizar operaciones en ellos llamando a m\u00e9todos o accediendo a propiedades.\n* **Expresiones**: Los operandos **pueden ser expresiones completas que deben evaluarse antes de que se realice una operaci\u00f3n**. Por ejemplo, en la expresi\u00f3n (2 + 3) * 4, la subexpresi\u00f3n (2 + 3) se eval\u00faa antes de ser multiplicada por 4. Es decir, los operandos pueden ser subexpresiones que deben calcularse antes de realizar la expresi\u00f3n principal.\n</code></pre> <p>Â¡Para recordar!</p> <p>La disponibilidad y los tipos de operandos pueden variar seg\u00fan el lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operadores","title":"Operadores","text":"<p>Definici\u00f3n</p> <p>En programaci\u00f3n, los operadores son s\u00edmbolos especiales que se utilizan para realizar diferentes operaciones con los datos.</p> <p>Estas operaciones pueden incluir c\u00e1lculos matem\u00e1ticos, comparaciones de valores, asignaciones de un valor a una variable, combinar cadenas de caracteres y operar la manipulaci\u00f3n de bits, entre otras cosas.</p> <p>Adem\u00e1s de realizar la operaci\u00f3n, un operador devuelve un valor. El valor devuelto y su tipo dependen del operador y del tipo de sus operandos. Por ejemplo, los operadores aritm\u00e9ticos, que realizan operaciones aritm\u00e9ticas b\u00e1sicas como la suma y la resta, devuelven n\u00fameros, el resultado de la operaci\u00f3n aritm\u00e9tica. El tipo de dato devuelto por un operador aritm\u00e9tico depende del tipo de sus operandos: si suma dos enteros, obtiene un entero de vuelta. Se dice que una operaci\u00f3n eval\u00faa su resultado.</p> <p>Los operadores se clasifican en diferentes categor\u00edas seg\u00fan el tipo de operaci\u00f3n que realizan.</p> <p>lenguaje de programaci\u00f3n tiene su propio conjunto de operadores con reglas y funcionalidades espec\u00edficas que pueden variar entre los diferentes lenguajes. </p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operaciones-con-los-datos","title":"Operaciones con los datos","text":"<p>Estas operaciones pueden tener reglas de precedencia y asociatividad que determinen el orden en que se eval\u00faan las expresiones. </p> <p>Es importante entender las reglas para obtener los resultados esperados en tus programas. Por ello, las estudiaremos m\u00e1s adelante. </p> <p>Pero antes recuerda que estas son reglas generales y pueden variar dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando. Es recomendable consultar la documentaci\u00f3n del lenguaje para obtener informaci\u00f3n precisa sobre las reglas de precedencia y asociatividad que se aplican en ese contexto particular.</p> <p>Ten en cuenta</p> <p>Siempre consulta la documentaci\u00f3n para obtener informaci\u00f3n detallada sobre cada tema.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operador-unario-binario-y-ternario","title":"Operador unario, binario y ternario","text":"<p>Un operador que requiere un operando (un argumento) se llama operador unario. </p> <p>Por ejemplo, op1++ es un operador unario que incrementa el valor de su operando en 1. Ya lo estudiaremos m\u00e1s adelante.</p> <p>Un operador que requiere dos operandos (dos argumentos) es un operador binario.</p> <p>Aqu\u00ed, op1 = op2 es un operador binario que asigna el valor de su operando de la derecha a su operando de la izquierda. </p> <p>Y finalmente, un operador ternario es aquel que requiere tres operandos (tres argumentos). </p> <p>Por ejemplo, la sentencia abreviada  if-else  op1 ? op2 : op3</p> <p>Es importante entender estas reglas para obtener los resultados esperados en tus programas. Y es por ello que las estudiaremos m\u00e1s adelante. </p> <p>Pero antes recuerda que estas son reglas generales y pueden variar dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que est\u00e9s utilizando. Es recomendable consultar la documentaci\u00f3n del lenguaje para obtener informaci\u00f3n precisa sobre las reglas de precedencia y asociatividad que se aplican en ese contexto particular.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<p>Se utilizan para asignar valores:</p> <ul> <li> <p>Asignaci\u00f3n simple: el s\u00edmbolo ( = ), se utiliza para asignar un valor a una variable. </p> <pre><code>x = 3\n</code></pre> </li> <li> <p>Asignaci\u00f3n compuesta: existen operadores compuestos que combinan una operaci\u00f3n y una asignaci\u00f3n en un solo paso:</p> <ul> <li>suma y asignaci\u00f3n o adici\u00f3n compuesta ( += ) se suma el valor del lado derecho del operador al valor actual de la variable del lado izquierdo del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n.  En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de suma y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x += 3 # equivale a x = x + 3\n</code></pre> <ul> <li>resta y asignaci\u00f3n o sustracci\u00f3n compuesta ( -= ) se resta el valor del lado derecho del operador al valor actual de la variable del lado izquierdo del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n. En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de resta y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x -= 3 # equivale a x = x - 3\n</code></pre> <ul> <li>multiplicaci\u00f3n y asignaci\u00f3n o multiplicaci\u00f3n compuesta ( *= ) se multiplica el valor del lado derecho del operador al valor actual de la variable del lado izquierdo del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n. En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de multiplicaci\u00f3n y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x *= 3 # equivale a x = x * 3\n</code></pre> <ul> <li>divisi\u00f3n y asignaci\u00f3n o divisi\u00f3n compuesta ( /= ) se divide el valor la variable del lado izquierdo del operador por el valor del lado derecho del operador y se asigna el resultado nuevamente a la misma variable en la misma operaci\u00f3n. En otras palabras, es una manera conveniente y abreviada de escribir la operaci\u00f3n de divisi\u00f3n y asignaci\u00f3n en un solo paso.</li> </ul> <pre><code>x /= 3 # equivale a x = x / 3\n</code></pre> </li> </ul> <p>Â¡Para recordar!</p> <p>Para conocer los distintos operadores de asignaci\u00f3n compuesta disponibles para un lenguaje de programaci\u00f3n particular, te recomiendo que revises la documentaci\u00f3n existente del lenguaje en cuesti\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Se utilizan para realizar operaciones matem\u00e1ticas b\u00e1sicas:</p> <ul> <li>suma ( + ) </li> <li>resta ( - )</li> <li>multiplicaci\u00f3n ( * )</li> <li>divisi\u00f3n ( / )</li> <li>divisi\u00f3n entera ( // ) Se utiliza para realizar una divisi\u00f3n entera entre dos n\u00fameros y obtener el cociente redondeado hacia abajo al n\u00famero entero m\u00e1s cercano. Se lo conoce como Floor Division y es especialmente \u00fatil cuando se desea obtener solo la parte entera del cociente de una divisi\u00f3n y descartar la parte decimal.</li> <li>m\u00f3dulo ( % )</li> <li>exponenciaci\u00f3n ( ** ) o ( ^ ) Tambi\u00e9n existen funciones como pow(base, exponente), dependiendo del lenguaje de programaci\u00f3n.</li> <li>radicaci\u00f3n ( ** (1/x) ) o ( ^ (1/x) ) En muchos lenguajes de programaci\u00f3n, no existe un operador espec\u00edfico para la operaci\u00f3n de radicaci\u00f3n (c\u00e1lculo de ra\u00edces). En su lugar, se utiliza el operador de potenciaci\u00f3n junto con expresiones matem\u00e1ticas para calcular ra\u00edces.  Tambi\u00e9n existen funciones como math.sqrt(), dependiendo del lenguaje de programaci\u00f3n.</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operador-de-concatenacion","title":"Operador de concatenaci\u00f3n","text":"<p>Se utiliza para unir dos cadenas de caracteres:</p> <ul> <li> <p>concatenaci\u00f3n ( + ) opera con cadenas de caracteres.</p> <pre><code>print(\"Hola\" + \" \" + \"Mundo!\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola Mundo!\n</code></pre> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operador-de-repeticion-repetition-operator","title":"Operador de repetici\u00f3n (repetition operator)","text":"<p>El operador ( * ) en Python se llama operador de repetici\u00f3n cuando se usa con cadenas de caracteres.</p> Python<pre><code>cadena = \"Ay \"\ncadena_repetida = cadena * 3\nprint(cadena_repetida)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ay Ay Ay\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operador-de-desempaquetado-unpacking-operator","title":"Operador de desempaquetado (unpacking operator)","text":"<p>Ver https://towardsdatascience.com/unpacking-operators-in-python-306ae44cd480</p> <p>El operador ( * ) en Python se llama operador de desempaquetado cuando se usa para desempaquetar colecciones en variables individuales</p> Python<pre><code># Tenemos una lista de tres elementos\nnumeros = [1, 2, 3]\n\n# Usamos el operador * para desempaquetar los elementos de la lista\na, b, c = numeros\n\n# Ahora las variables a, b y c contienen los valores de la lista\nprint(a)  \nprint(b)  \nprint(c)  \n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\n3\n</code></pre> <p>En este c\u00f3digo, <code>a, b, c = numeros</code> desempaqueta los elementos de la lista <code>numeros</code> en las variables <code>a</code>, <code>b</code> y <code>c</code>. Despu\u00e9s de esta l\u00ednea, <code>a</code> contiene el primer elemento de la lista, <code>b</code> contiene el segundo elemento y <code>c</code> contiene el tercer elemento.</p> <p>En el ejemplo anterior, el desempaquetado es impl\u00edcito y no precisa incluir al operador.</p> <p>Pero existen casos donde esta sintaxis no es posible y entonces resulta necesario aplicar el operador:</p> <pre><code>Aqu\u00ed tienes un ejemplo donde se aplica el operador de desempaquetado ( * ) para pasar los elementos de una lista como argumentos a una funci\u00f3n:\n\n```py title=\"Python\"\ndef suma(a, b, c):\n    return a + b + c\n\n# Tenemos una lista de tres elementos\nnumeros = [1, 2, 3]\n\n# Usamos el operador * para desempaquetar los elementos de la lista y pasarlos como argumentos a la funci\u00f3n suma\nresultado = suma(*numeros)\n\nprint(resultado)\n```\n\n``` title=\"Terminal (Entrada/Salida)\"\n6\n```\n\n&gt; En este c\u00f3digo, `suma(*numeros)` desempaqueta los elementos de la lista `numeros` y los pasa como argumentos a la funci\u00f3n `suma()`.  \nLa funci\u00f3n `suma()` luego suma estos argumentos y retorna el resultado.\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operadores-de-incremento-y-de-decremento","title":"Operadores de incremento y de decremento","text":"<p>Son \u00fatiles en situaciones donde se necesita aumentar o disminuir el valor de una variable de manera r\u00e1pida y sencilla:</p> <ul> <li> <p>incremento ( ++ ) aumenta el valor de una variable en 1.</p> <pre><code>x++ # es equivalente a x = x + 1\n</code></pre> </li> <li> <p>decremento ( -- ) disminuye el valor de una variable en 1.</p> <pre><code>y-- # es equivalente a y = y \u2013 1\n</code></pre> </li> </ul> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que los operadores de incremento y decremento tambi\u00e9n se pueden utilizar con otros tipos de dato como enteros, n\u00fameros decimales o incluso caracteres en algunos lenguajes. </p> <p>Sin embargo, su comportamiento podr\u00eda variar dependiendo del lenguaje de programaci\u00f3n que est\u00e9s utilizando, por lo que es recomendable consultar la documentaci\u00f3n espec\u00edfica del lenguaje para obtener m\u00e1s informaci\u00f3n sobre su uso y posibles limitaciones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#sufijo-y-prefijo","title":"Sufijo y prefijo","text":"<p>Pueden ser utilizados en dos maneras diferentes: sufijo y prefijo. Depender\u00e1 de c\u00f3mo desees que se realicen las operaciones en tu c\u00f3digo.</p> <ul> <li> <p>Sufijo (x++, x--): cuando utilizas el operador con sufijo, la notaci\u00f3n de sufijo significa que el operador de incremento o de decremento se coloca despu\u00e9s del operando, es decir, despu\u00e9s del nombre de la variable. </p> <p>As\u00ed, al ejecutarse la sentencia, primero se asigna el valor actual almacenado en la variable de referencia a la variable de almacenamiento y luego se realiza el incremento o decremento de dicho valor. </p> Ejemplo de sufijo incremental<pre><code>x = 5\ny = x++\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>6\n5\n</code></pre> <p>Si tienes una variable x con valor 5 y se ejecuta <code>y = x++</code>, se asignar\u00e1 el valor actual de x a y, y luego se incrementar\u00e1 el valor de x en 1.  Por lo tanto, la variable y tendr\u00e1 almacenado un 5 y la variable x tendr\u00e1 almacenado un 6 despu\u00e9s de la operaci\u00f3n.</p> Ejemplo de sufijo decremental<pre><code>x = 5\ny = x--\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>4\n5\n</code></pre> <p>Si tienes una variable x con valor 5 y ejecuta <code>y = x--</code>, se asignar\u00e1 el valor actual de x a y, y luego se decrementar\u00e1 el valor de x en 1.  Por lo tanto, la variable y tendr\u00e1 almacenado un 5 y la variable x tendr\u00e1 almacenado un 4 despu\u00e9s de la operaci\u00f3n.</p> </li> <li> <p>Prefijo (++x, --x): por otro lado, cuando utilizas el operador con prefijo, la notaci\u00f3n de prefijo significa que el operador de incremento o de decremento se coloca antes de su operando, es decir, antes del nombre de la variable.</p> <p>As\u00ed, al ejecutarse la sentencia, primero se realiza el incremento o decremento del valor almacenado en la variable de referencia y luego se asigna el nuevo valor de dicha variable a la variable de almacenamiento. </p> Ejemplo de prefijo incremental<pre><code>x = 5\ny = ++x\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>6\n6\n</code></pre> <p>Si tienes una variable x con valor 5 y ejecuta <code>y = ++x</code>, primero se incrementar\u00e1 el valor de la variable x en 1 y luego se asignar\u00e1 el nuevo valor de x a la variable y.  En este caso, la variable y tendr\u00e1 almacenado un 6 y la variable x tambi\u00e9n tambi\u00e9n tendr\u00e1 almacenado 6 despu\u00e9s de la operaci\u00f3n.</p> Ejemplo de prefijo incremental<pre><code>x = 5\ny = --x\nprint(x)\nprint(y)\n</code></pre> Terminal (Entrada/Salida)<pre><code>4\n4\n</code></pre> <p>Si tienes una variable x con valor 5 y se ejecuta <code>y = --x</code>, primero se decrementar\u00e1 el valor de la variable x en 1 y luego se asignar\u00e1 el nuevo valor de x a la varianble y.  En este caso, la variable y tendr\u00e1 almacenado un 4 y la variable x tambi\u00e9n tambi\u00e9n tendr\u00e1 almacenado 6 despu\u00e9s de la operaci\u00f3n.</p> </li> </ul> <p>En resumen, la elecci\u00f3n entre el sufijo y el prefijo depender\u00e1 de si deseas utilizar el valor original o el nuevo valor de la variable en una operaci\u00f3n. </p> <p>Ambos tienen sus usos en diferentes situaciones y depender\u00e1 de tus necesidades espec\u00edficas en el c\u00f3digo que est\u00e9s escribiendo.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<p>Se utilizan para comparar dos valores y devolver un resultado de tipo l\u00f3gico o booleano (verdadero / True o falso / False):</p> <ul> <li>igualdad ( == ) compara si dos valores son iguales</li> <li>desigualdad ( != ) compara si dos valores son diferentes</li> <li>mayor que ( &gt; ) compara si el valor a la izquierda es mayor</li> <li>menor que ( &lt; ) compara si el valor a la izquierda es menor</li> <li>mayor o igual que ( &gt;= ) compara si el valor a la izquierda es mayor o igual</li> <li>menor o igual que ( &lt;= ) compara si el valor a la izquierda es menor o igual</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operadores-logicos-booleanos","title":"Operadores l\u00f3gicos (booleanos)","text":"<p>Se utilizan para combinar o negar expresiones l\u00f3gicas o booleanas, es decir, para realizar pruebas condicionales y tomar decisiones en un programa:</p> <ul> <li>negaci\u00f3n l\u00f3gica NOT ( ! ) invierte el valor de verdad de una expresi\u00f3n</li> <li>conjunci\u00f3n l\u00f3gica AND ( &amp;&amp; ) devuelve true si ambos operandos son true </li> <li>disyunci\u00f3n l\u00f3gica OR ( || ) devuelve true si al menos uno de los operandos es true</li> </ul> <p></p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#operadores-de-pertenencia","title":"Operadores de pertenencia","text":"<p>Los operadores de pertenencia se utilizan para verificar si un valor o variable se encuentra en una secuencia, como una lista, una tupla, un diccionario, un conjunto o una cadena.</p> <ul> <li>in devuelve True si un valor se encuentra en la secuencia y False de lo contrario.</li> <li>not in devuelve True si un valor no se encuentra en la secuencia y False de lo contrario.</li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5]\n\nprint(3 in lista)  # Output: True\nprint(6 in lista)  # Output: False\n\nprint(3 not in lista)  # Output: False\nprint(6 not in lista)  # Output: True\n\ncadena = \"Hola, mundo!\"\n\nprint(\"mundo\" in cadena)  # Output: True\nprint(\"adios\" in cadena)  # Output: False\n\nprint(\"mundo\" not in cadena)  # Output: False\nprint(\"adios\" not in cadena)  # Output: True\n</code></pre> <p>Estos operadores son muy \u00fatiles para verificar la presencia de un elemento en una secuencia sin tener que recorrerla expl\u00edcitamente.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/introduccion-a-operandos-y-operadores/#el-operador-coma-y-las-expresiones-compuestas","title":"El operador coma y las expresiones compuestas","text":"<p>El operador coma ( , ) es utilizado en varios lenguajes de programaci\u00f3n para unir, combinar, m\u00faltiples expresiones en una sola expresi\u00f3n m\u00e1s grande. Este eval\u00faa cada una de las expresiones en orden, de izquierda a derecha, y devuelve el resultado de la \u00faltima expresi\u00f3n (pero puede depender de la evaluaci\u00f3n de las otras expresiones).</p> <p>El operador coma es el operador de menor precedencia.</p> <p>Declaraciones de variables:  El operador coma se puede utilizar en la declaraci\u00f3n de variables para inicializar m\u00faltiples variables en una sola sentencia.  </p> <p>En el siguiente ejemplo, se declaran e inicializan las variables a, b y c en una sola l\u00ednea separando cada inicializaci\u00f3n con el operador coma.</p> Javascript<pre><code>int a = 1, b = 2, c = 3;\n</code></pre> <p>Secuencia de expresiones:  El operador coma se puede utilizar para separar varias expresiones en una secuencia. Cada expresi\u00f3n se eval\u00faa, pero solo el resultado de la \u00faltima expresi\u00f3n se toma como resultado final.</p> <p>En el siguiente ejemplo, las expresiones (a++, b++, c++) forman una secuencia donde los valores de a, b y c se incrementan en 1. La variable resultado almacena el valor de c antes del incremento en la \u00faltima expresi\u00f3n de la secuencia, es decir, 3. Luego, vemos como x adopta, en ambos casos, el valor de la \u00faltima expresi\u00f3n, pero la variable y va cambiando de valor en las expresiones previas.</p> Javascript<pre><code>let a = 1, b = 2, c = 3; let resultado = (a++, b++, c++); console.log(resultado); // Imprime 3\nlet m = (n = 3, n + 1); console.log(m); // m vale 4\nlet x = (y = 20, y = y - 5, 30/y) console.log(x) // x vale 2\n</code></pre> <p>Bucles y funciones: el operador coma se puede utilizar en bucles y funciones para combinar m\u00faltiples expresiones en un solo lugar.  </p> <p>En el siguiente ejemplo, se utiliza el operador coma para combinar las expresiones i++ y j-- en el incremento y decremento de las variables i y j, respectivamente, dentro del bucle for. El bucle se va a repetir, imprimiendo los valores almacenados en i y en j mientras que el valor de i sea menor que el valor de j.</p> Javascript<pre><code>for (i = 0, j = 10; i &lt; j; i++, j--) {\n    console.log(i, j);\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>0 10\n1 9\n2 8\n3 7\n4 6\n</code></pre> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que el uso del operador coma debe hacerse con precauci\u00f3n, ya que puede complicar la legibilidad y el mantenimiento del c\u00f3digo si se utiliza en exceso o de manera confusa. </p> <p>Es recomendable utilizarlo de manera clara y comprensible para evitar confusiones.</p>"},{"location":"unidades/fundamentos-de-la-programacion/operandos-y-operadores/resumen-de-operandos-y-operadores/","title":"Operandos y operadores: resumen","text":"<p>Revisar todo el resumen. Hay cosas mezcladas</p> <p>En una expresi\u00f3n, un operando es un t\u00e9rmino utilizado en programaci\u00f3n para referirse a un dato o conjunto de datos a los que se les aplican operadores para realizar una operaci\u00f3n y devolver un resultado.</p> <p>Estos datos pueden ser variables que contienen valores almacenados en la memoria, valores literales (num\u00e9ricos, cadenas de caracteres, booleanos, etc.), constantes que se especifican en el c\u00f3digo directamente, llamadas a funciones o incluso expresiones m\u00e1s complejas que combinan m\u00faltiples operandos y operadores. </p> <p>Existen diferentes tipos de operandos cuya disponibilidad y variedad puede variar seg\u00fan el lenguaje:</p> <ul> <li>N\u00fameros (enteros  y de punto flotante)</li> <li>cadenas de caracteres</li> <li>Booleanos (valor l\u00f3gico true o false)</li> <li>Variables (incluyendo a todos sus tipos de dato)</li> <li>Arrays </li> <li>Listas</li> <li>Objetos</li> <li>Expresiones</li> </ul> <p>En programaci\u00f3n, los operadores son s\u00edmbolos especiales que se utilizan para realizar diferentes operaciones (c\u00e1lculos matem\u00e1ticos, comparaciones de valores, asignaciones de un valor a una variable, combinar cadenas de caracteres, etc.) con los datos.</p> <p>Existen diferentes tipos de operadores cuya disponibilidad y variedad puede variar seg\u00fan el lenguaje:</p> <ul> <li>Operadores de asignaci\u00f3n (simple y compuesta)</li> <li>Operadores aritm\u00e9ticos</li> <li>Operadores de concatenaci\u00f3n</li> <li>Operadores de incremento y de decremento (utiliz\u00e1ndolos con sufijo x++ o prefijo ++x)</li> <li>Operadores de comparaci\u00f3n</li> <li>Operadores l\u00f3gicos</li> </ul> <p>Las operaciones pueden tener reglas de precedencia y asociatividad que determinen el orden en que se eval\u00faan las expresiones. </p> <p>Precedencia de operadores: establece el orden en el cual se eval\u00faan los operadores en una expresi\u00f3n. </p> <p></p> <p>Asociatividad de operadores: define el orden en el cual se eval\u00faan los operadores del mismo nivel de precedencia cuando no hay par\u00e9ntesis para establecer un orden expl\u00edcito. La asociatividad puede ser izquierda o derecha. Si los operadores tienen la misma precedencia y asociatividad, la evaluaci\u00f3n se realiza de izquierda a derecha.</p> <p>Estas reglas pueden variar ligeramente dependiendo del lenguaje de programaci\u00f3n espec\u00edfico que se est\u00e9 utilizando. Por lo tanto, es recomendable consultar la documentaci\u00f3n del lenguaje para obtener las reglas de precedencia exactas que se aplican en ese contexto.</p> <p>En resumen, cada lenguaje de programaci\u00f3n tiene su propio conjunto de operadores con reglas y funcionalidades espec\u00edficas que pueden variar entre los diferentes lenguajes. </p> <p>Por ejemplo, algunos lenguajes pueden tener reglas espec\u00edficas sobre el redondeo y el tratamiento de los n\u00fameros negativos.</p> <p>Por lo tanto, cada operaci\u00f3n tiene su propia sintaxis y reglas de uso espec\u00edficas. </p> <p>Consulta la documentaci\u00f3n para obtener informaci\u00f3n detallada sobre los operadores disponibles y c\u00f3mo se utilizan.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/","title":"Alcance de las variables","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#definicion","title":"Definici\u00f3n","text":"<p>Un concepto muy importante en programaci\u00f3n es lo que llamamos alcance de una variable (variable scope). Por definici\u00f3n, no es posible acceder a todas las variables desde cualquier parte de un programa</p> <p>\u00a1Importante!</p> <p>El alcance de una variable se refiere a la regi\u00f3n del programa donde la variable es visible y accesible para ser utilizada.</p> <p>En otras palabras, dependiendo de su alcance, una variable puede ser accesible desde cualquier parte del programa o no.  </p> <p>As\u00ed, el alcance de una variable est\u00e1 determinado por el \u00e1mbito de aplicaci\u00f3n, la parte del programa, donde esta es declarada. Es el l\u00edmite, dentro de un programa, donde vive una variable.</p> <p>Cuando hablamos de ciclo de vida de una variable nos referimos a las fases desde que es declarada hasta que es destruida una variable durante la ejecuci\u00f3n de un programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#introduccion-a-los-diferentes-ambitos-del-alcance","title":"Introducci\u00f3n a los diferentes \u00e1mbitos del alcance","text":"<p>B\u00e1sicamente podemos dividir a las variables en funci\u00f3n del \u00e1mbito donde son accesibles como locales o globales. </p> <p>Luego, dependiendo del lenguaje podemos identificar otros \u00e1mbitos como Bloque (Block), Funci\u00f3n (Function), Instancia (Instance) o Clase (Class) entre otros.</p> <p>En Python, por ejemplo, hay cuatro tipos principales de alcance que son la base de la regla LEGB.  LEGB significa Local (Local) \u2192 Envolvente, Padre o Superior (Enclosing) \u2192 Global (Global) \u2192 Integrado o Incorporado (Built-in) y es la l\u00f3gica seguida por un int\u00e9rprete de Python cuando ejecuta su programa.</p> <p></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#diferentes-ambitos-de-alcance-de-una-variable","title":"Diferentes \u00e1mbitos de alcance de una variable","text":"<p>Como dijimos, en programaci\u00f3n, el alcance de una variable se refiere a la parte del c\u00f3digo donde esta es declarada y puede ser accedida. Los tipos m\u00e1s comunes de alcances en la programaci\u00f3n son:</p> <ol> <li> <p>\u00c1mbito global (Global): las variables declaradas como globales en el bloque principal del programa, afuera de una funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo, tienen un \u00e1mbito y una duraci\u00f3n global, y son accesibles durante toda la ejecuci\u00f3n del programa desde cualquier lugar del bloque principal del programa, funci\u00f3n, clase, instancia o bloque de c\u00f3digo. </p> </li> <li> <p>\u00c1mbito local (Local): las variables declaradas dentro de una funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo tienen un \u00e1mbito local. Solo son accesibles dentro de esa funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo y tienen una duraci\u00f3n que se extiende desde el punto de declaraci\u00f3n hasta el final de la mencionada funci\u00f3n, m\u00e9todo, clase, instancia o bloque de c\u00f3digo.</p> </li> <li> <p>\u00c1mbito envolvente (Enclosing): todas las variables locales declaradas dentro de un bloque son accesibles dentro de los bloques internos que este bloque contenga, por no viceversa. Es decir que todas las variables locales declaradas dentro del bloque interno no son accesibles en el bloque externo. Al \u00e1mbito envolvente se lo considera un \u00e1mbito anidado (Nested scope).</p> </li> <li> <p>\u00c1mbito de bloque (Block): algunos lenguajes de programaci\u00f3n, como C, C++ y JavaScript, permiten \u00e1mbitos de nivel de bloque. Las variables declaradas dentro de un bloque, como dentro de una estructura alternativa o de un bucle, tienen un alcance limitado a ese bloque. Solo son accesibles dentro del bloque y sus bloques anidados. La vida \u00fatil de las variables de \u00e1mbito de bloque depende del idioma y el contexto espec\u00edfico.</p> </li> <li> <p>\u00c1mbito de funci\u00f3n (Function): las variables declaradas dentro de una funci\u00f3n se comportan como variables locales. Solo son accesibles dentro de esa funci\u00f3n y tienen una duraci\u00f3n que se extiende desde el punto de declaraci\u00f3n hasta el final de la mencionada funci\u00f3n.</p> </li> <li> <p>\u00c1mbito de clase (Class): en la programaci\u00f3n orientada a objetos, las variables declaradas dentro de una clase pero fuera de cualquier m\u00e9todo se conocen como variables de clase o variables est\u00e1ticas. Estas variables pertenecen a la clase misma en lugar de instancias de la clase. Son accesibles para todas las instancias de la clase y tienen una duraci\u00f3n vinculada a la duraci\u00f3n del programa.</p> </li> <li> <p>\u00c1mbito de instancia (Instance): las variables de instancia se declaran dentro de una clase y se asocian con instancias u objetos espec\u00edficos de esa clase. Cada instancia de la clase tiene su propio conjunto de variables de instancia, y solo se puede acceder a ellas a trav\u00e9s de la instancia misma. Las variables de instancia tienen una vida \u00fatil vinculada a la vida \u00fatil del objeto correspondiente.</p> </li> <li> <p>\u00c1mbito integrado (Built-in): El \u00e1mbito integrado est\u00e1 comprendido por la colecci\u00f3n de identificadores y funciones predefinidos que est\u00e1n autom\u00e1ticamente disponibles para cualquier parte del programa sin necesidad de una declaraci\u00f3n o importaci\u00f3n expl\u00edcita. Estos identificadores y funciones son parte de la biblioteca est\u00e1ndar o funcionalidad principal de cada lenguaje de programaci\u00f3n e incluyen operaciones fundamentales, tipos de dato, estructuras de control y funciones de utilidad que se usan com\u00fanmente en la programaci\u00f3n. </p> <p>Esta colecci\u00f3n puede variar seg\u00fan el lenguaje de programaci\u00f3n, pero algunos ejemplos comunes son:</p> <ol> <li>tipos de dato b\u00e1sicos: el \u00e1mbito integrado suele incluir tipos de dato est\u00e1ndar, como n\u00fameros enteros, n\u00fameros de punto flotante, valores booleanos, caracteres, cadenas, matrices y, en ocasiones, estructuras de datos m\u00e1s complejas, como listas o diccionarios.</li> <li>Funciones matem\u00e1ticas: muchos lenguajes de programaci\u00f3n proporcionan funciones matem\u00e1ticas integradas, como funciones trigonom\u00e9tricas (sin, cos, tan), funciones logar\u00edtmicas (log, exp) y operaciones aritm\u00e9ticas (suma, resta, multiplicaci\u00f3n, divisi\u00f3n, etc.).</li> <li>Funciones de entrada/salida: las funciones integradas suelen estar disponibles para realizar operaciones de entrada/salida, como leer o escribir en la consola, leer y escribir archivos y manejar la entrada del usuario.</li> <li>Estructuras de control: las estructuras de control b\u00e1sicas como alternativas (if, switch) y bucles (for, while) suelen formar parte del \u00e1mbito integrado.</li> <li>Manejo de errores: la funcionalidad integrada a menudo incluye mecanismos para manejar las excepciones o los errores que pueden ocurrir durante la ejecuci\u00f3n del programa, como los bloques try-catch o las funciones de informe de errores.</li> <li>Manipulaci\u00f3n de cadenas: las funciones para operaciones de cadenas como la concatenaci\u00f3n, la extracci\u00f3n de sub cadenas, la b\u00fasqueda y el reemplazo a menudo se proporcionan en el \u00e1mbito integrado.</li> <li>Funciones de fecha y hora: muchos lenguajes de programaci\u00f3n incluyen funciones integradas para manejar fechas, horas y zonas horarias, lo que permite operaciones como formateo de fechas, c\u00e1lculo de horas y conversiones de zonas horarias.</li> </ol> </li> </ol> <p>Los elementos y las funcionalidades espec\u00edficas pueden variar significativamente entre los lenguajes de programaci\u00f3n, por lo que es importante consultar la documentaci\u00f3n o los recursos espec\u00edficos del lenguaje para explorar el alcance integrado de un lenguaje de programaci\u00f3n en particular.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#como-identificar-el-ambito-de-una-variable","title":"\u00bfC\u00f3mo identificar el \u00e1mbito de una variable?","text":"<p>Cada variable solo existe y es accesible dentro del \u00e1mbito en el que ha sido declarada. Cuando hablamos de la existencia y accesibilidad dentro de un \u00e1mbito, nos referimos a su alcance. </p> <p>Para determinar su \u00e1mbito, hay que identificar las marcas de apertura y cierre de bloque de c\u00f3digo m\u00e1s cercanas que rodean la declaraci\u00f3n de la variable. </p> <p>Â¡Para recordar!</p> <p>La mayor\u00eda de los lenguajes de programaci\u00f3n utilizan llaves ({ }) para marcar el principio y el final de un bloque de c\u00f3digo.</p> <p>Una variable global estar\u00e1 disponible en todos los bloques de c\u00f3digo dentro del programa.</p> <p>Y una variable local solo estar\u00e1 disponible dentro del bloque de c\u00f3digo en el que se haya declarado. Si este bloque contiene a su vez otros bloques, la variable local tambi\u00e9n ser\u00e1 accesible dentro de ellos. </p> <p></p> <p>Aqu\u00ed vemos que la variable soyGlobal ha sido declarada entre las dos llaves marcadas con un c\u00edrculo azul. El alcance de esa variable es todo lo que se encuentra entre esas dos llaves.  El mismo concepto se aplica para las variables localVarB1 y localVarB2, cuyos alcances est\u00e1n limitados por las llaves de cada funci\u00f3n marcadas con un c\u00edrculo verde.</p> <p>Para pensar:</p> <p>\u00bfQu\u00e9 ocurre, entonces, con las variables localVarB1 y localVarB2 cuando son accedidas dentro de las funciones bloque1() y bloque2()?</p> <p>En caso de que se utilice el mismo nombre de variable declarado en varios niveles de anidamiento (significa que hay al menos un bloque dentro de otro bloque), prevalecer\u00e1 la declaraci\u00f3n del bloque m\u00e1s interno, evitando el acceso, durante la ejecuci\u00f3n del bloque interno, a la variable declarada en el bloque externo.</p> <p></p> <p>Para pensar:</p> <p>\u00bfQu\u00e9 ocurre ahora, en cada caso, con la variable declarada dentro de cada bloque con el mismo nombre localVar cuando se accede a su valor?</p> <p>Importante</p> <p>Dada su escasa legibilidad, las\u00a0declaraciones anidadas\u00a0de un mismo nombre de variable son situaciones que nunca deber\u00edan ocurrir en un programa bien dise\u00f1ado.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#alcance-global","title":"Alcance global","text":"Javascript<pre><code>function mostrarNombre() {\n   // Acceder a la variable global\n   console.log(\"Mi nombre es \" + nombre)\n}\n// Bloque principal (main)\n{\n// Definici\u00f3n de variable global\n   var nombre = \"Juan\"\n\n   mostrarNombre()  // Salida: Mi nombre es Juan\n}\n</code></pre> <p>En este ejemplo, la variable nombre se declara como global fuera de cualquier tipo de bloque de c\u00f3digo. Sin embargo, al ser global, la funci\u00f3n mostrarNombre() puede acceder a ella y mostrar su valor en la consola</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#alcance-local","title":"Alcance local","text":"Javascript<pre><code>function calcularSuma(a, b) {\n   // Definici\u00f3n de variable local\n   let suma = a + b\n   return suma\n}\n// Bloque principal (main)\n{ \n   console.log(calcularSuma(5, 3))  // Salida: 8\n   console.log(suma); // Error: suma no est\u00e1 definida (solo existe dentro de la funci\u00f3n calcularSuma)\n}\n</code></pre> <p>En este ejemplo, la variable suma se declara dentro de la funci\u00f3n calcularSuma() y, por lo tanto, tiene un alcance local. La variable solo puede ser accedida dentro de la funci\u00f3n y no est\u00e1 disponible fuera de ella.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#alcance-de-bloque","title":"Alcance de bloque","text":"Javascript<pre><code>function verificarNumero(numero) {\n   if (numero &gt;= 0) {\n      let info = \"El n\u00famero es positivo\"; // Definici\u00f3n de variable de bloque\n      console.log(info)\n   } else {\n      let info = \"El n\u00famero es negativo\"; // Definici\u00f3n de variable de bloque\n      console.log(info)\n   }\n}\n// Bloque principal (main)\n{\n   verificarNumero(5)  // Salida: El n\u00famero es positivo\n   verificarNumero(-3)  // Salida: El n\u00famero es negativo\n   console.log(info)  // Error: mensaje no est\u00e1 definido (fuera de ambos bloques de la estructura if)\n}\n</code></pre> <p>En este ejemplo, se declaran dos variables, una dentro de un bloque verdadero y el otra dentro del bloque falso de la estructura alternativa, con el mismo nombre info. Al tener, cada una, un alcance de bloque (local), solo existir\u00e1n dentro del bloque de c\u00f3digo donde fueran declaradas.  } Fuera de su bloque, cada variable no est\u00e1 disponible, produciendo un error al intentar acceder a ellas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#caso-practico-1-de-analisis-e-identificacion-de-ambitos-de-variables","title":"Caso pr\u00e1ctico 1 de an\u00e1lisis e identificaci\u00f3n de \u00e1mbitos de variables","text":"<p>\u00bfPara pensar?</p> <p>\u00bfPuedes analizar y entender como funciona este programa?</p> <p>Gu\u00edate por los colores. Si no, contin\u00faa leyendo y \u00a1lograr\u00e1s entenderlo!</p> <p></p> <p>Javascript<pre><code>// Global scope (main)\n{\n   var g = 0  // Declara x como global en el cuerpo principal del programa (main)\n   outer()  // Llama a la funci\u00f3n outer() dentro del cuerpo principal del programa\n   console.log(\"La variable global g vale \", x)  // Imprime 0\n}\n</code></pre> <pre><code>function outer() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) llamada en main\n   // Local scope de outer() y Enclosing scope respecto de inner()\n   let x = 1  // Declara x localmente en outer()\n   let y = 1  // Declara y localmente en outer()\n</code></pre> <pre><code>   function inner() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) dentro de outer()\n      // Local scope de inner()\n      let x = 2  // declara x localmente en inner()\n      console.log(\"La variable local x dentro de inner() vale \", x)  // Imprime 2\n      console.log(\"La variable local y declarada en outer() vale \", y)  // Imprime 1\n   }\n</code></pre> <pre><code>   inner()  // Llama a la funci\u00f3n inner() dentro de outer()\n   console.log(\"La variable local x dentro de outer() vale \", x)  // Imprime 1\n   console.log(\"La variable global g dentro de outer() vale \", x)  // Imprime 0\n}\n</code></pre></p> Terminal (Entrada/Salida)<pre><code>Esto se ejecuta en el \u00e1mbito de inner():\nLa variable local x dentro de inner() vale  2\nLa variable local y declarada en outer() vale  1\n\nEsto se ejecuta en el \u00e1mbito de outer():\nLa variable local x dentro de outer() vale  1\nLa variable global g dentro de outer() vale  0\n\nEsto se ejecuta en el \u00e1mbito principal del programa:\nLa variable global x vale  0\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#caso-practico-2-de-analisis-e-identificacion-de-ambitos-de-variables","title":"Caso pr\u00e1ctico 2 de an\u00e1lisis e identificaci\u00f3n de \u00e1mbitos de variables","text":"<p>\u00bfPara pensar?</p> <p>Aqu\u00ed existe una ligera diferencia en la declaraci\u00f3n de una variable,</p> <p>\u00bfPuedes analizar y entender cu\u00e1l es el error de este programa?</p> <p>Si no, contin\u00faa leyendo y \u00a1lograr\u00e1s entenderlo!</p> <p>Javascript<pre><code>// Global scope (main)\n{\n   let g = 0  // Declara x como local en el cuerpo principal del programa (main)\n   outer()  // Llama a la funci\u00f3n outer() dentro del cuerpo principal del programa\n   console.log(\"La variable local g vale \", x)  // Imprime 0\n}\n</code></pre> <pre><code>function outer() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) llamada en main\n   // Local scope de outer() y Enclosing scope respecto de inner()\n   let x = 1  // Declara x localmente en outer()\n   let y = 1  // Declara y localmente en outer()\n</code></pre> <pre><code>   function inner() {  // Es una funci\u00f3n (equivale a un bloque de c\u00f3digo) dentro de outer()\n      // Local scope de inner()\n      let x = 2  // declara x localmente en inner()\n      console.log(\"La variable local x dentro de inner() vale \", x)  // Imprime 2\n      console.log(\"La variable local y declarada en outer() vale \", y)  // Imprime 1\n   }\n</code></pre> <pre><code>   inner()  // Llama a la funci\u00f3n inner() dentro de outer()\n   console.log(\"La variable local x dentro de outer() vale \", x)  // Imprime 1\n   console.log(\"La variable local g dentro de outer() vale \", x)  // \u00bf Imprime 0 ?\n}\n</code></pre></p> <p>Terminal (Entrada/Salida)<pre><code>Esto se ejecuta en el \u00e1mbito de inner():\nLa variable local x dentro de inner() vale  2\nLa variable local y declarada en outer() vale  1\n\nEsto se ejecuta en el \u00e1mbito de outer():\nLa variable local x dentro de outer() vale  1\n</code></pre> <pre><code>index.js:19\n  console.log(\"La variable local g dentro de outer() vale \", g)\n                                                             ^\nReferenceError: g is not defined\n</code></pre></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#uso-de-variables-globales-en-funciones-locales","title":"Uso de variables globales en funciones locales","text":"Python<pre><code>global_var = 10\n\ndef local_function():\n    global global_var\n    local_var = 20\n\n    print(\"Var local:\", local_var)\n    print(\"Var global:\", global_var)\n\nlocal_function()\n</code></pre> <p>En Python se utiliza la palabra clave global seguida del nombre de la variable dentro de la funci\u00f3n local para poder tener alcance a la variable. Esto permite que la funci\u00f3n tenga acceso tanto a las variables locales definidas dentro de ella como a las variables globales definidas fuera de ella.</p> C++<pre><code>#include &lt;iostream&gt;\n\nint global_Var = 10;\n\nvoid local_function() {\n    int local_Var = 20;\n    std::cout &lt;&lt; \"Var local: \" &lt;&lt; local_Var &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"Var global: \" &lt;&lt; global_Var &lt;&lt; std::endl;\n}\n\nint main() {\n    local_function();\n    return 0;\n}\n</code></pre> Javascript<pre><code>function localFunction() {\n    let localVar = 20\n    console.log(\"Var local:\", localVar)\n    console.log(\"Var global:\", globalVar)\n}\n\n// Bloque principal (main)\n{ \n   var globalVar = 10\n   localFunction();\n}\n</code></pre> <p>En JavaScript y C++ se accede directamente a la variable global dentro de la funci\u00f3n local para poder utilizarla. Esto permite que la funci\u00f3n tenga acceso tanto a las variables locales definidas dentro de ella como a las variables globales definidas fuera de ella.</p> <p>En todos los ejemplos, se obtendr\u00eda el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>Var local: 20\nVar global: 10\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#modificacion-de-variables-globales-en-funciones-locales","title":"Modificaci\u00f3n de variables globales en funciones locales","text":"Python<pre><code>global_var = 10\n\ndef modify_global():\n    global global_var\n    global_var += 5\n\ndef use_global_locally():\n    local_var = global_var * 2\n    print(\"Var local:\", local_var)\n\nmodify_global()\nuse_global_locally()\n\nprint(\"Var global:\", global_var)\n</code></pre> Javascript<pre><code>function modifyGlobal() {\n    globalVar += 5\n}\n\nfunction useGlobalLocally() {\n    let localVar = globalVar * 2\n    console.log(\"Var local:\", localVar)\n}\n\n// Bloque principal (main)\n{ \n   var globalVar = 10\n   modifyGlobal()\n   useGlobalLocally()\n   console.log(\"Var global:\", globalVar)\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\nint global_var = 10;\n\nvoid modifyGlobal() {\n    global_var += 5;\n}\nvoid useGlobalLocally() {\n    int local_var = global_var * 2;\n    std::cout &lt;&lt; \"Var local: \" &lt;&lt; local_Var &lt;&lt; std::endl;\n}\nint main() {\n    modifyGlobal();\n    useGlobalLocally();\n    std::cout &lt;&lt; \"Var global: \" &lt;&lt; global_Var &lt;&lt; std::endl;\n    return 0;\n}\n</code></pre> <p>En estos ejemplos, la funci\u00f3n modify_global() o modifyGlobal() seg\u00fan el lenguaje, incrementa el valor de la variable global, mientras que la funci\u00f3n use_global_locally() o useGlobalLocally() utiliza la variable global en una variable local y la imprime. Al ejecutar el c\u00f3digo, puedes ver c\u00f3mo los cambios en la variable global se reflejan tanto dentro como fuera de la funci\u00f3n.</p> <p>En todos los ejemplos, se obtendr\u00eda el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>Var local: 30\nVar global: 15\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#conversion-de-variables-globales-en-locales","title":"Conversi\u00f3n de variables globales en locales","text":"Python<pre><code>global_var = 10\n\ndef convert_global_to_local():\n    global_var = 20\n    print(\"Var local:\", global_var)\n\nconvert_global_to_local()\n\nprint(\"Var global:\", global_var)\n</code></pre> Javascript<pre><code>function convertGlobalToLocal() {\n    let globalVar = 20;\n    console.log(\"Var local:\", globalVar);\n}\n\n// Bloque principal (main)\n{ \n   var globalVar = 10\n   convertGlobalToLocal();\n   console.log(\"Var global:\", globalVar);\n}\n</code></pre> C++<pre><code>#include &lt;iostream&gt;\nint global_var = 10;\n\nvoid convertGlobalToLocal() {\n    int global_var = 20;\n    std::cout &lt;&lt; \"Var local: \" &lt;&lt; global _Var &lt;&lt; std::endl;\n}\nint main() {\n    convertGlobalToLocal();\n\n    std::cout &lt;&lt; \"Var global: \" &lt;&lt; global_Var &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> <p>En estos ejemplos, la funci\u00f3n convert_global_to_local() declara una nueva variable local llamada global_var con un valor de 20. Dentro del \u00e1mbito de la funci\u00f3n, cuando se hace referencia a global_var, se hace referencia a la variable local en lugar de la variable global. Fuera de la funci\u00f3n, la variable global mantiene su valor original de 10.</p> Terminal (Entrada/Salida)<pre><code>Var local: 20\nVar global: 10\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#puede-una-variable-local-reemplazar-a-una-global","title":"\u00bfPuede una variable local reemplazar a una global?","text":"<p>\u00a1Â¡Para recordar!!</p> <p>Los conceptos vistos solo afectan a la variable dentro del \u00e1mbito de la funci\u00f3n o del bloque en los que se declara la variable local.</p> <p>Fuera de esa funci\u00f3n o bloque, la variable global seguir\u00e1 existiendo y mantendr\u00e1 su valor original.</p> <p>Asimismo, la variable local ser\u00e1 destruida al finalizar la funci\u00f3n o el bloque donde fuera creada. As\u00ed, su acceso o modificaci\u00f3n ser\u00e1 imposible a partir de dicha finalizaci\u00f3n.</p> <p>Veamos el siguiente ejemplo:</p> Python<pre><code>global_var = 10\n\ndef modify_global():\n    global global_var\n    global_var += 5\n\ndef use_global_locally():\n    local_var = global_var * 2\n    print(\"Var local:\", local_var)\n\nprint(\"Var global:\", global_var)\n\nmodify_global()\nuse_global_locally()\n\nprint(\"Var global:\", global_var)\nprint(\"Var local:\", local_var)\n</code></pre> <p>!!! question \u00bf\u00bfQu\u00e9 ocurrir\u00e1 cuando se ejecute la \u00faltima l\u00ednea del programa?</p> <p>Terminal (Entrada/Salida)<pre><code>Var global: 10\nVar local: 20\nVar global: 10\n</code></pre> <pre><code>Error: NameError: name \u2018local_var' is not defined\n</code></pre></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/alcance-de-una-variable/#error-al-acceder-a-una-variable-local-fuera-de-su-alcance-scope","title":"Error al acceder a una variable local fuera de su alcance (scope)","text":"<p>Cuando intentas acceder a una variable local fuera de su alcance, es posible que encuentres un error dependiendo del lenguaje de programaci\u00f3n que est\u00e9s utilizando. Por lo general, las variables locales tienen un alcance limitado dentro del bloque de c\u00f3digo donde se definen. Una vez que el flujo de ejecuci\u00f3n sale de ese bloque, las variables locales ya no son accesibles.</p> <p>En el siguiente ejemplo, local_var se define dentro del \u00e1mbito de la funci\u00f3n local_function(). Cuando intentemos acceder a ella fuera de la funci\u00f3n, recibiremos un error de ReferenceError o de NameError (el nombre del error depender\u00e1 del lenguaje empleado) porque la variable no est\u00e1 definida en el \u00e1mbito (scope) actual.</p> Python<pre><code>def local_function():\n    local_var = 10\n    return local_var\n\nresult = local_function()\n\nprint(result)  \nprint(local_var)  \n</code></pre> Terminal (Entrada/Salida)<pre><code>10 # Imprime la l\u00ednea 7\nError: NameError: name 'local_var' is not defined # Error devuelto por la l\u00ednea 8\n</code></pre> Javascript<pre><code>function local_function() {\n  let local_var = 10\n  return local_var\n}\n// Bloque principal (main)\n{\n   let result = myFunction();\n   console.log(result);  \n   console.log(local_var); \n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>10 # Imprime la l\u00ednea 8\nError: ReferenceError: local_var is not defined # Error devuelto por la l\u00ednea 9\n</code></pre> <p>Para resolver este problema, es necesario que el c\u00f3digo devuelva el valor almacenado en la variable local desde la funci\u00f3n y para ser almacenado en un variable en el \u00e1mbito de llamada. </p> <p>En el ejemplo, devolvemos el valor de local_var desde la funci\u00f3n local_function() y lo asignamos a la variable result en el \u00e1mbito de la llamada. As\u00ed, podremos acceder y utilizar el valor fuera de la funci\u00f3n sin encontrar un error.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/caracteristicas-de-las-variables/","title":"Caracter\u00edsticas de las variables","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/caracteristicas-de-las-variables/#identificador-o-nombre-de-la-variable","title":"Identificador o nombre de la variable","text":"<p>El identificador o nombre de la variable servir\u00e1 para referenciarla a lo largo de la ejecuci\u00f3n del programa. </p> <p>Para definir un identificador v\u00e1lido, deberemos seguir una serie de reglas que estudiaremos en la bibliograf\u00eda \"Variables - Identificadores, reglas y convenci\u00f3n de nombres\"</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/caracteristicas-de-las-variables/#alcance","title":"Alcance","text":"<p>El alcance de una variable determina en qu\u00e9 partes del programa (regi\u00f3n del programa) la variable existe y puede ser accedida o utilizada. </p> <p>As\u00ed, el alcance puede ser local, limitado a una funci\u00f3n o bloque de c\u00f3digo espec\u00edfico; o global, accesible desde cualquier parte del programa. Es importante tener en cuenta cual es el alcance de una variable para asegurarse de que se utilice correctamente en el contexto adecuado. </p> <p>Controlar el enlace</p> <p>Estudiaremos este concepto de alcance en la bibliograf\u00eda \"Variables - Alcance de una variable\"</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/caracteristicas-de-las-variables/#tipo-de-datos-almacenados-en-la-variable","title":"tipo de dato almacenados en la variable","text":"<p>Es importante crear la variable de acuerdo con el tipo de dato que va a almacenar para evitar errores. Los diferentes tipos de dato pueden afectar las operaciones que puedes realizar con la variable y c\u00f3mo se almacena (la computadora, dependiendo del tipo de dato que ser\u00e1 almacenado, reservar\u00e1 mayor o menor espacio de memoria) y maneja los datos e informaci\u00f3n de manera correcta. </p> <p>Estudiaremos este concepto en la bibliograf\u00eda \u201cVariables - tipo de dato almacenados en una variable. Conversi\u00f3n de tipo de dato\u201d</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/caracteristicas-de-las-variables/#valor-asignado-a-la-variable","title":"Valor asignado a la variable","text":"<p>Es el contenido que se almacena en una variable durante la ejecuci\u00f3n del programa. </p> <p>\u00bfC\u00f3mo? Lo estudiaremos en la bibliograf\u00eda \"Variables - Valores asignados. Acceso y manipulaci\u00f3n de datos\"</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/","title":"Ciclo de vida de una variable","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#ciclo-de-vida-de-una-variable-durante-la-ejecucion-de-un-programa","title":"Ciclo de vida de una variable durante la ejecuci\u00f3n de un programa","text":"<p>Durante la ejecuci\u00f3n de un programa, el ciclo de vida de una variable consta de 3 etapas: * Creaci\u00f3n * Utilizaci\u00f3n * Destrucci\u00f3n</p> <p></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#etapa-de-creacion-de-una-variable","title":"Etapa de creaci\u00f3n de una variable","text":"<ol> <li> <p>Creaci\u00f3n: en la etapa de creaci\u00f3n de una variable, que se ejecuta por \u00fanica vez al inicio del ciclo de vida, se realizan una serie de acciones para definir y asignar un nombre y un tipo de dato a esta, y hasta eventualmente asignarle un valor inicial:</p> <ul> <li> <p>Declaraci\u00f3n: la creaci\u00f3n de una variable generalmente comienza con la declaraci\u00f3n, donde se especifica el tipo de dato que contendr\u00e1 esta. Los lenguajes de programaci\u00f3n suelen tener diferentes tipos de dato, como enteros, flotantes, caracteres, booleanos, etc. La declaraci\u00f3n tambi\u00e9n incluye el nombre de la variable. </p> <ul> <li>Asignaci\u00f3n de memoria: despu\u00e9s de declarar una variable, se produce la asignaci\u00f3n (reserva de espacio) de memoria para almacenar el valor de la variable. La cantidad de memoria asignada depender\u00e1 del tipo de dato de la variable. Por ejemplo, una variable entera (int) puede requerir 4 bytes de memoria, mientas que una variable de caracater (char) requiere 1 byte de memora. Es importante definir correctamente el tipo de dato para que la memora reservada sea correcta.</li> </ul> </li> <li> <p>Inicializaci\u00f3n: en muchos lenguajes de programaci\u00f3n, se puede inicializar una variable durante su creaci\u00f3n. La inicializaci\u00f3n implica asignar un valor inicial a la variable. Siempre que se pueda es recomendable que la creaci\u00f3n de una variable se efect\u00fae mediante su inicializaci\u00f3n. </p> </li> </ul> </li> </ol> <p>\u00a1Â¡Para recordar!!</p> <p>Una vez creada una variable, esta existir\u00e1 hasta que termine el alcance o bloque de c\u00f3digo donde haya sido creada; hasta que sea destruida o; hasta que finalice el programa.</p> <p>En algunos lenguajes, es obligatorio declarar una variable antes de utilizarla. </p> <p>\u00a1Desconocer este concepto puede hacer que tu programa se comporte de manera inesperada!</p> <p>Cabe aclarar que, al declarar una variable, la asignaci\u00f3n de memoria no implica la asignaci\u00f3n de un valor inicial. As\u00ed, al acceder a la variable antes de una primera asignaci\u00f3n de valor, esta devolver\u00e1 dependiendo del lenguaje de programaci\u00f3n:</p> <ul> <li>valor indefinido (undefined), </li> <li>un valor predeterminado, que puede ser cero o nulo dependiendo del tipo de dato, o </li> <li>el valor que se encuentre en la posici\u00f3n reservada de memoria, previamente almacenado por otro programa.</li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#etapa-de-utilizacion-de-una-variable","title":"Etapa de utilizaci\u00f3n de una variable","text":"<ol> <li> <p>Utilizaci\u00f3n: en la etapa de utilizaci\u00f3n de una variable, despu\u00e9s de crearla, esta puede ser usada para almacenar, manipular y recuperar datos durante la ejecuci\u00f3n de expresiones y operaciones (declaraci\u00f3n de control de flujo, llamada de funci\u00f3n, etc.) durante la ejecuci\u00f3n del programa:</p> <ul> <li> <p>Asignaci\u00f3n de valor: una vez creada la variable, se puede asignar un valor espec\u00edfico a la variable utilizando el operador de asignaci\u00f3n simple (=) o cualquier operador de asignaci\u00f3n compuesta. Por ejemplo, si tienes una variable llamada edad de tipo entero, puedes asignarle un valor a partir de la expresi\u00f3n edad = 25.</p> </li> <li> <p>Modificaci\u00f3n (actualizaci\u00f3n) de valor: durante la ejecuci\u00f3n del programa, es posible modificar el valor almacenado en una variable. Esta acci\u00f3n se comporta de igual manera que la asignaci\u00f3n de valor, solo que se la denomina as\u00ed porque el concepto es el de reasignaci\u00f3n de un nuevo valor. Puedes utilizar operadores aritm\u00e9ticos o de asignaci\u00f3n compuestos para realizar c\u00e1lculos y actualizar el valor de la variable. Por ejemplo, si tienes una variable contador y deseas incrementar su valor en uno, puedes utilizar contador = contador + 1 o la forma abreviada contador += 1.</p> </li> <li> <p>Acceso (lectura) de valor: despu\u00e9s de asignar un valor a la variable, puedes leer su contenido para utilizarlo en el programa. Puedes utilizar el nombre de la variable para acceder a su valor y utilizarlo en expresiones y operaciones para realizar c\u00e1lculos o mostrar el valor en la salida del programa, por ejemplo.</p> </li> <li> <p>Uso en expresiones y operaciones: una variable se utiliza ampliamente en expresiones y operaciones dentro del programa. Puedes realizar operaciones matem\u00e1ticas, comparaciones, asignaciones y muchas otras manipulaciones utilizando la variable en combinaci\u00f3n con operadores y funciones definidas en el lenguaje de programaci\u00f3n.</p> </li> </ul> </li> </ol> <p>\u00a1Â¡Para recordar!!</p> <p>Mientras la variable exista y sea accesible, todas estas acciones arriba definidas pueden ser ejecutadas tantas veces como sea necesario a lo largo de la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#etapa-de-destruccion-de-una-variable","title":"Etapa de destrucci\u00f3n de una variable","text":"<ol> <li> <p>Destrucci\u00f3n: en la etapa de destrucci\u00f3n de una variable, cuando la variable ya no ser\u00e1 utilizada en el programa, se llevan a cabo las acciones para liberar los recursos asociados a ella (el espacio reservado de la memoria) y finalizar su existencia en el programa:</p> <ul> <li> <p>Liberaci\u00f3n de memoria: una de las acciones m\u00e1s comunes en la destrucci\u00f3n de una variable es la liberaci\u00f3n de la memoria que se asign\u00f3 para almacenar su valor. Esto ocurre especialmente en lenguajes de programaci\u00f3n que gestionan manualmente la asignaci\u00f3n y liberaci\u00f3n de memoria, como C o C++. La liberaci\u00f3n de memoria garantiza que los recursos utilizados por la variable se devuelvan al sistema y est\u00e9n disponibles para otros usos.</p> </li> <li> <p>Finalizaci\u00f3n del \u00e1mbito o alcance: en muchos lenguajes de programaci\u00f3n, las variables tienen un \u00e1mbito definido, que es la regi\u00f3n del programa donde la variable es v\u00e1lida y accesible. Cuando el \u00e1mbito de la variable llega a su fin, ya sea al finalizar una funci\u00f3n o un bloque de c\u00f3digo, la variable se destruye autom\u00e1ticamente. Esto implica que la variable ya no estar\u00e1 disponible para su uso y se liberar\u00e1n los recursos asociados a ella.</p> </li> <li> <p>Ejecuci\u00f3n del recolector de basura (garbage collector): es un componente que se encuentra en muchos lenguajes de programaci\u00f3n con gesti\u00f3n autom\u00e1tica de memoria, como Java o Python. Este componente es responsable de administrar autom\u00e1ticamente la memoria durante la ejecuci\u00f3n de un programa ya que su funci\u00f3n principal es identificar y liberar la memoria de los objetos que ya no se necesitan, es decir, recolectar la \"basura\". Por lo tanto, realiza un seguimiento de los objetos que se han asignado en la memoria y determina cu\u00e1les de ellos a\u00fan est\u00e1n siendo utilizados por el programa. Los objetos que ya no son accesibles o referenciados por el programa se consideran \u201cbasura\u201d y se pueden eliminar de forma segura. As\u00ed, la destrucci\u00f3n de una variable est\u00e1 relacionada con el proceso de recolecci\u00f3n de basura.</p> </li> </ul> </li> </ol> <p>\u00a1Â¡Para recordar!!</p> <p>Esta etapa, que solo se ejecuta una vez al final del ciclo de vida de la variable, generalmente ocurre cuando la variable ya no es necesaria o cuando el \u00e1mbito en el que se ha creado finaliza. Luego de la destrucci\u00f3n, la variable ya no estar\u00e1 disponible para su uso y se liberar\u00e1n los recursos asociados a ella.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#por-que-el-garbage-collector-es-tan-importante","title":"\u00bfPor qu\u00e9 el garbage collector es tan importante?","text":"<p>Es un componente que se encuentra en muchos lenguajes de programaci\u00f3n con gesti\u00f3n autom\u00e1tica de memoria, como Java o Python, y en muchos entornos de ejecuci\u00f3n. </p> <p>Es responsable de administrar autom\u00e1ticamente la memoria en un programa ya que su funci\u00f3n principal es identificar y liberar la memoria que ya no se necesita, es decir, recolectar la \"basura\". </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<p>Cuando se ejecuta un programa, se asigna memoria para almacenar objetos y datos utilizados por ese programa. A medida que el programa se ejecuta, puede crear y eliminar objetos en la memoria. Los objetos m\u00e1s generales son las variables. Sin embargo, a veces, estos objetos ya no son necesarios y pasan a ocupar espacio innecesariamente.</p> <p>Aqu\u00ed es donde entra en juego el garbage collector. Su funci\u00f3n principal es identificar y liberar la memoria de objetos que ya no se necesitan. Estos objetos que ya no son accesibles o referenciados por el programa se consideran \u201cbasura\u201d y se pueden eliminar de forma segura.</p> <p>El garbage collector realiza esta tarea peri\u00f3dicamente o cuando se cumple cierta condici\u00f3n, como cuando la memoria disponible se est\u00e1 agotando. </p> <p>Escanea la memoria en busca de objetos basura y libera la memoria que ocupan. Esto ayuda a evitar la fragmentaci\u00f3n de la memoria y garantiza un uso eficiente de los recursos.</p> <p>La presencia del garbage collector simplifica la administraci\u00f3n de la memoria para los programadores, ya que no necesitan ocuparse expl\u00edcitamente de la asignaci\u00f3n y liberaci\u00f3n de memoria. Esto reduce los errores relacionados con la gesti\u00f3n manual de la memoria, como fugas de memoria, corrupci\u00f3n de memoria y problemas de liberaci\u00f3n prematura o tard\u00eda de objetos. Tambi\u00e9n mejora la productividad del programador, ya que pueden centrarse en la l\u00f3gica de la aplicaci\u00f3n en lugar de preocuparse por la gesti\u00f3n de la memoria.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ciclo-de-vida-de-una-variable/#conclusiones-del-ciclo-de-vida-de-una-variable-durante-la-ejecucion-de-un-programa","title":"Conclusiones del ciclo de vida de una variable durante la ejecuci\u00f3n de un programa","text":"<p>El ciclo de vida de una variable puede variar seg\u00fan el lenguaje de programaci\u00f3n utilizado y el alcance en el que se utiliza la variable. Por ejemplo, en algunos lenguajes, las variables pueden tener un alcance limitado a una funci\u00f3n o bloque de c\u00f3digo, mientras que en otros pueden tener un alcance global en todo el programa. Este tema lo veremos m\u00e1s adelante.</p> <p>Resumiendo, es importante destacar que los detalles espec\u00edficos de la creaci\u00f3n de variables pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Algunos lenguajes tienen reglas y convenciones adicionales para la creaci\u00f3n de variables, como restricciones en los nombres o requisitos de \u00e1mbito.</p> <p>Durante la etapa de utilizaci\u00f3n de una variable, estas se utilizan en expresiones y operaciones como asignaci\u00f3n de valores, lectura de valores, modificaci\u00f3n de valores y se tiene en cuenta el alcance y el tipo de dato de la variable. Esto permite utilizar las variables para almacenar y manipular datos en el programa de acuerdo con su prop\u00f3sito y alcance.</p> <p>Por \u00faltimo, en la etapa de destrucci\u00f3n de una variable se llevan a cabo acciones para liberar los recursos asociados a ella y finalizar su existencia en el programa. Esto puede implicar la liberaci\u00f3n de memoria asignada o la finalizaci\u00f3n del \u00e1mbito en el que se encuentra. Los detalles espec\u00edficos de la destrucci\u00f3n pueden variar seg\u00fan el lenguaje de programaci\u00f3n utilizado. Algunos lenguajes tienen mecanismos adicionales de gesti\u00f3n de memoria, como destructores o m\u00e9todos especiales, que permiten ejecutar acciones personalizadas antes de la destrucci\u00f3n de una variable, como liberar otros recursos o realizar tareas de limpieza.</p> <p>Importante</p> <p>Es fundamental comprender correctamente el ciclo de vida de las variables y cu\u00e1l es su \u00e1mbito (scope) donde es accesible para evitar errores y optimizar el uso de memoria en el programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/conversion-de-tipos-de-datos/","title":"Conversi\u00f3n de tipos de dato","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/conversion-de-tipos-de-datos/#definicion","title":"Definici\u00f3n","text":"<p>En la programaci\u00f3n existen situaciones en las que se necesita cambiar el tipo de dato en otro.</p> <p>Las variables tienen un tipo de dato asociado que define el tipo de valor que pueden almacenar: n\u00fameros enteros, n\u00fameros de punto flotante, cadenas de caracteres y booleanos, entre otros. A veces es necesario interpretar el tipo de dato de dicho valor como si fuera otro, para realizar ciertas operaciones o para satisfacer requisitos espec\u00edficos del programa. Esta conversi\u00f3n es necesaria cuando se desean realizar operaciones o comparaciones espec\u00edficas que requieren tipos de dato compatibles.</p> <p>Definici\u00f3n</p> <p>Para cambiar el tipo de dato de una variable en la mayor\u00eda de los lenguajes de programaci\u00f3n, puedes utilizar un proceso llamado casting o conversi\u00f3n de tipo. Esto implica interpretar el tipo de dato del valor de una variable como si fuera otro tipo de dato.</p> <p>Hay dos tipos principales de conversiones de tipo de dato: impl\u00edcita y expl\u00edcita.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/conversion-de-tipos-de-datos/#conversion-implicita","title":"Conversi\u00f3n impl\u00edcita","text":"<p>Ocurre autom\u00e1ticamente cuando el lenguaje de programaci\u00f3n realiza la conversi\u00f3n de tipo de dato de forma impl\u00edcita para mantener la coherencia entre diferentes tipos de dato. </p> <p>Por ejemplo, en muchos lenguajes, se puede sumar un entero y un n\u00famero de punto flotante, y el resultado ser\u00e1 un n\u00famero de punto flotante debido a la conversi\u00f3n impl\u00edcita:</p> Python<pre><code>entero = 5\nflotante = 2.5\n\n# La conversi\u00f3n impl\u00edcita convierte 'entero' a un n\u00famero de 'punto flotante'\nresultado = entero + flotante  \n\nprint(resultado)  # imprime 7.5\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/conversion-de-tipos-de-datos/#conversion-explicita","title":"Conversi\u00f3n expl\u00edcita","text":"<p>Tambi\u00e9n conocida como \"casting expl\u00edcito\", ocurre cuando el programador especifica manualmente el tipo de conversi\u00f3n deseado. </p> <p>Esto se hace utilizando funciones o sintaxis espec\u00edficas proporcionadas por el lenguaje de programaci\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/conversion-de-tipos-de-datos/#sintaxis","title":"Sintaxis","text":"<p>La sintaxis para realizar un cambio de tipo de dato puede variar dependiendo del lenguaje de programaci\u00f3n utilizado. </p> <p>En Python, por ejemplo, puedes utilizar las funciones str(), int(), float(), bool() para convertir entre tipos de dato:</p> Python<pre><code># Conversi\u00f3n de entero a cadena\nnumero = 42\ncadena = str(numero)\nprint(type(cadena))  # imprime &lt;class 'str'&gt;\n\n# Conversi\u00f3n de cadena a entero\ncadena = \"42\u201d\nnumero = int(cadena)\nprint(type(numero))  # imprime &lt;class 'int'&gt;\n\n# Conversi\u00f3n de cadena a flotante\ncadena = \"3.14\u201d\nflotante = float(cadena)\nprint(type(flotante))  # imprime &lt;class 'float'&gt;\n\n# Conversi\u00f3n de entero a booleano\nnumero = 0\nbooleano = bool(numero)\nprint(type(booleano))  # imprime &lt;class 'bool'&gt;\n</code></pre> <p>En JavaScript, hay funciones como toString(), parseInt(), parseFloat(), Boolean() para realizar conversiones de tipo. La variable resultante adquiere el nuevo tipo de dato asignado:</p> Javascript<pre><code>// Conversi\u00f3n de n\u00famero a cadena\nvar numero = 42\nvar cadena = numero.toString()\nconsole.log(typeof cadena);  // imprime string\n\n// Conversi\u00f3n de cadena a n\u00famero entero\nvar cadena = \"42\"\nvar numero = parseInt(cadena)\nconsole.log(typeof numero);  // imprime number\nconsole.log(Number.isInteger(numero));  // imprime true\n\n\n// Conversi\u00f3n de cadena a n\u00famero de punto flotante\nvar cadena = \"3.14\"\nvar flotante = parseFloat(cadena)\nconsole.log(typeof flotante);  // imprime number\nconsole.log(Number.isInteger(numero));  // imprime false\n\n// Conversi\u00f3n de valor a booleano\nvar valor = 0\nvar booleano = Boolean(valor)\nconsole.log(typeof booleano);  // imprime boolean\n</code></pre> <p>Â¡Para recordar!</p> <p>Es importante destacar que, al igual que con la conversi\u00f3n de tipo de dato, es necesario tener en cuenta las posibles implicaciones y restricciones de la operaci\u00f3n de \"casting\". Algunos lenguajes de programaci\u00f3n pueden permitir \"casting\" impl\u00edcitos entre tipos de dato compatibles, mientras que otros requieren \"casting\" expl\u00edcitos. </p> <p>Estos son solo ejemplos b\u00e1sicos. Los m\u00e9todos y funciones espec\u00edficas para realizar el cambio de tipo de dato pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando.  Aseg\u00farate de consultar la documentaci\u00f3n del lenguaje espec\u00edfico para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo realizar cambios de tipo de dato en ese contexto.</p> <p>Ten en cuenta</p> <p>Existen diversas funciones en cada lenguaje que te ayudar\u00e1n en la conversi\u00f3n de tipo de dato.</p> <p>\u00a1Importante!</p> <p>Es importante tener en cuenta que, al realizar una conversi\u00f3n de tipo expl\u00edcita, debes asegurarte de que la operaci\u00f3n sea v\u00e1lida y que no se produzca una p\u00e9rdida de informaci\u00f3n o resultados inesperados. Por ejemplo, al convertir un n\u00famero de punto flotante a un entero, se perder\u00e1 la parte decimal del n\u00famero.</p> <p>Por lo tanto, es fundamental comprender los tipos de dato y las implicaciones de la conversi\u00f3n antes de aplicarla en el c\u00f3digo.</p> <p>Adem\u00e1s, ten en cuenta que las opciones de conversi\u00f3n de tipo pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Aseg\u00farate de consultar la documentaci\u00f3n espec\u00edfica del lenguaje para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo realizar cambios de tipo de dato en ese contexto. Algunos lenguajes de programaci\u00f3n pueden permitir casts impl\u00edcitos entre tipos de dato compatibles, mientras que otros requieren casts expl\u00edcitos. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/conversion-de-tipos-de-datos/#ejemplos-de-aplicacion","title":"Ejemplos de aplicaci\u00f3n","text":"<p>Evaluemos las siguientes conversiones:</p> Python<pre><code>valor1 = str(12)\nvalor2 = \"Hola\"\nvalor3 = float(\"14.34\")\n\nprint (\"Valor 1: \", type(valor1), \"   valor:\", valor1)\nprint (\"Valor 2: \", type(valor2), \"   valor:\", valor2)\nprint (\"Valor 3: \", type(valor3), \"   valor:\", valor3)\n\nvalor4 = int(\"14.34\") \nvalor5 = int(valor2)\n</code></pre> <p>\u00bfQu\u00e9 crees que ocurrir\u00e1 en cada caso?</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Terminal (Entrada/Salida)<pre><code>Valor 1:  &lt;class 'str'&gt;    valor: 12\nValor 2:  &lt;class 'str'&gt;    valor: Hola\nValor 3:  &lt;class 'float'&gt;    valor: 14.34\n\nTraceback (most recent call last):\n  File \" \u2026 \", line 9, in &lt;module&gt;\n    valor4 = int(\"14.34\")\n             ^^^^^^^^^^^^\nValueError: invalid literal for int() with base 10: '14.34'\n\nTraceback (most recent call last):\n  File \" \u2026 \", line 10, in &lt;module&gt;\n    valor5 = int(valor2)\n             ^^^^^^^^^^^\nValueError: invalid literal for int() with base 10: 'Hola'\n</code></pre> <p>La l\u00ednea 9 devolver\u00e1 un error de conversi\u00f3n ya que no es posible convertir un valor de punto flotante en entero, forzando la finalizaci\u00f3n del programa.</p> <p>Si la l\u00ednea 9 no devolviera un error, La l\u00ednea 10 devolver\u00e1 un error de conversi\u00f3n ya que no es posible convertir una cadena en entero, forzando la finalizaci\u00f3n del programa.</p> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/","title":"Creaci\u00f3n y uso de variables","text":"<p>reformular</p> <p>\u00a1Â¡Para recordar!!</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, antes de que una variable pueda ser usada en un programa, esta debe ser declarada, incluyendo el tipo de dato que ser\u00e1n almacenados en ella. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#cual-es-la-diferencia-entre-declarar-y-luego-asignar-un-valor-o-inicializar-una-variable","title":"\u00bfCu\u00e1l es la diferencia entre declarar y luego asignar un valor; o inicializar una variable?","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#declaracion","title":"Declaraci\u00f3n","text":"<p>Declarar una variable significa crear una nueva variable en el programa, definiendo su identificador y reservando el espacio necesario en la memoria seg\u00fan el tipo de dato que almacenar\u00e1 durante la ejecuci\u00f3n del programa, pero sin asignarle valor.</p> <pre><code>int a // la variable a es declarada como tipo de dato entero\n</code></pre> <p>La declaraci\u00f3n de una variable es una instrucci\u00f3n que le indica a la computadora que debe reservar un espacio de memoria para almacenar el valor durante la ejecuci\u00f3n del programa.</p> <p>Para declarar una variable, se debe especificar su nombre y su tipo. </p> <pre><code>* El nombre de una variable identifica al valor que ser\u00e1 almacenado. \n* El tipo de una variable determina el tipo de dato que se pueden almacenar en ella.\n</code></pre> <p>Para crear una variable en programaci\u00f3n se utiliza una palabra clave que define su alcance.  La palabra clave - en general y dependiendo del lenguaje, por ejemplo var o let - debe ir seguida del nombre de variable y el signo igual (=) para asignarle un valor inicial. Veremos este tema m\u00e1s adelante.</p> Javascript<pre><code>var nombre;  // variable de alcance global\nlet nombre;  // variable de alcance local\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#inicializacion","title":"Inicializaci\u00f3n","text":"<p>Inicializar una variable significa declararla y, adem\u00e1s, asignarle un valor inicial. <pre><code>int a // la variable a ES DECLARADA SOLAMENTE como entero\nint a = 0 // la variable a ES INICIALIZADA como entero y el valor 0 es asignado a ella en la misma instrucci\u00f3n\n</code></pre></p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#asignacion","title":"Asignaci\u00f3n","text":"<p>Asignar un valor a una variable significa almacenar un valor en el espacio de memoria reservado para ella. <pre><code>a = 1 // se almacena el valor 1 en la variable a, olvidando todo valor anterior almacenado en ella\n</code></pre> </p> <p>\u00a1Â¡Para recordar! esto porque es muy importante!</p> <p>Al almacenar un valor en una variable, si esta conten\u00eda un valor previo almacenado, este ser\u00e1 reemplazado y ya no habr\u00e1 manera de recuperarlo, perdi\u00e9ndolo para siempre.</p> <p>NO HAY MANERA QUE AMBOS VALORES COEXISTAN PORQUE NO PUEDEN SUPERPONERSE.</p> <p>Una vez que la variable ha sido declarada o inicializada, podemos asignarle nuevos valores utilizando el operador de asignaci\u00f3n igual (=)</p> Javascript<pre><code>let numero;  // Declaraci\u00f3n de la variable numero sin asignarle un valor inicial\nnumero = 10;  // Asignaci\u00f3n del valor 10 a la variable numero utilizando el operador de asignaci\u00f3n igual (=)\n</code></pre> <p>Para cada variable, por \u00fanica vez en el programa, se puede decir que:</p> <p>D (eclaraci\u00f3n) + A (signaci\u00f3n) = I (nicializaci\u00f3n)</p> Declaraci\u00f3n + Asignaci\u00f3n Inicializaci\u00f3n int edad int edad = 18 edad = 18"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#como-se-reserva-el-espacio-en-memoria-para-una-variable","title":"\u00bfC\u00f3mo se reserva el espacio en memoria para una variable?","text":"<p>Veamos el siguiente ejemplo: como se declaran dos variables, y por consiguiente se reserva el espacio en la memoria, para almacenar la edad de una persona y su n\u00famero de hijos. </p> <pre><code>int edad\nint numero_de_hijos\n</code></pre> <p>Puesto que las dos variables son del mismo tipo de dato, se podr\u00edan declarar en la misma l\u00ednea separ\u00e1ndolas por medio de la coma (,). La coma es un operador que permite crear expresiones compuestas. Veremos este tema m\u00e1s adelante.</p> <pre><code>int edad, numero_de_hijos\n</code></pre> <p>As\u00ed, en la memoria RAM podr\u00eda ocurrir uno de estos dos casos de asignaci\u00f3n de espacio reservado para ambas variables: </p> <p>Como se ve en la imagen, los espacios de memoria reservados para las variables no tienen por qu\u00e9 estar de manera contigua.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#sintaxis","title":"Sintaxis","text":"Declaraci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable\n</code></pre> Asignaci\u00f3n<pre><code>nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> Inicializaci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> <p>La estructura de la sintaxis depender\u00e1 de si la acci\u00f3n es una declaraci\u00f3n, una inicializaci\u00f3n o una asignaci\u00f3n.</p> <p>Tambi\u00e9n depender\u00e1 de como se escriba en cada lenguaje particular.</p> <p>En todos los casos, dependiendo del lenguaje, pueden ser uno o m\u00e1s identificadores separados por coma:</p> <pre><code>int a // Declaraci\u00f3n\na = 40 // Asignaci\u00f3n\nint a = 40 // Inicializaci\u00f3n\nbool acceso = True, escape = False\nstring nombre, apellido\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#como-se-lee-la-sintaxis","title":"\u00bfC\u00f3mo se lee la sintaxis?","text":"<pre><code>int a // Declaraci\u00f3n\n</code></pre> <p>Se lee: Declaro la variable a de tipo entero (en ingl\u00e9s integer)</p> <pre><code>a = 40 // Asignaci\u00f3n\n</code></pre> <p>Se lee: Asigno a la variable a el valor 40</p> <pre><code>int a = 40 // Inicializaci\u00f3n\n</code></pre> <p>Se lee: Inicializo la variable a de tipo entero con el valor 40</p> <p>Tambi\u00e9n podr\u00eda decir: Inicializo la variable a, almacenando el valor 40, de tipo entero</p> <pre><code>int b = a\n</code></pre> <p>Se lee: Inicializo la variable b de tipo entero con el valor almacenado en la variable a</p> <p>Est\u00e1 mal decir: Inicializo la variable b de tipo entero con a; o b es igual a a (en ambos casos puedo entender: b = \"a\")</p> <p>Importante</p> <p>En realidad, cualquier lectura que lleve a la correcta interpretaci\u00f3n de la instrucci\u00f3n, es v\u00e1lida. Para que ello ocurra, no puede existir ambig\u00fcedad posible. Si la lectura puede interpretarse de dos o maneras diferentes, entonces ser\u00e1 inv\u00e1lida.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#declaracion-de-variables-en-diferentes-lenguajes","title":"Declaraci\u00f3n de variables en diferentes lenguajes","text":"<p>A continuaci\u00f3n, se presentan ejemplos de c\u00f3mo declarar variables con tipos de dato en algunos lenguajes de programaci\u00f3n comunes:</p> C<pre><code>int edad;\nfloat precio;\nchar inicial;\n</code></pre> JAVA<pre><code>int edad;\ndouble precio;\nchar inicial;\n</code></pre> Javascript<pre><code>let edad\nlet precio\nlet inicial\n</code></pre> PHP<pre><code>$edad;\n$precio;\n$inicial;\n</code></pre> <p>En todos estos casos, se est\u00e1 declarando una variable con un nombre y un tipo de dato espec\u00edfico si lo requiere el lenguaje. El nombre se utiliza para hacer referencia a la variable en el c\u00f3digo, y el tipo de dato se utiliza para definir el tipo de valor que se puede almacenar en la variable. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#inicializacion-de-variables-en-diferentes-lenguajes","title":"Inicializaci\u00f3n de variables en diferentes lenguajes","text":"<p>A continuaci\u00f3n, se presentan ejemplos de c\u00f3mo inicializar variables con tipos de dato en algunos lenguajes de programaci\u00f3n comunes:</p> C<pre><code>int edad = 25;\nfloat precio = 9.99;\nchar inicial = \u2018a\u2019;\n</code></pre> JAVA<pre><code>int edad = 25;\ndouble precio = 9.99;\nchar inicial = \u2018A\u2019;\n</code></pre> Python<pre><code>edad = 25\nprecio = 9.99\ninicial = 'A'\n</code></pre> Javascript<pre><code>let edad = 25\nlet precio = 9.99\nlet inicial = \u2018A\u2019\n</code></pre> PHP<pre><code>$edad = 25;\n$precio = 9.99;\n$inicial = \u2018A\u2019;\n</code></pre> <p>En todos estos casos, se est\u00e1 inicializando una variable, declar\u00e1ndola con un nombre y un tipo de dato espec\u00edfico, y se le est\u00e1 asignando un valor inicial mediante el operador de asignaci\u00f3n igual (=) seguido del valor que se desear.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#intercambio-de-valores-almacenados-entre-dos-variables","title":"Intercambio de valores almacenados entre dos variables","text":"<p>Como dijimos, una variable es un espacio reservado de la memoria RAM que pueda almacenar un dato.</p> <p>Reforcemos:</p> <p>Una variable es un espacio reservado de la memoria RAM que pueda almacenar un dato \u00a1A LA VEZ!</p> <p>Por lo tanto, no es posible hacer un intercambio de valores entre dos variables de esta manera:</p> C\u00f3digo generalizado<pre><code>a = 5\nb = 10\n\na = b\n\nb = a\n\nprint(\"a vale\", a)\nprint(\"b vale\", b)\n</code></pre> <p>Porque si luego accedemos a los valores almacenado en <code>a</code> y en <code>b</code> ocurrir\u00e1 lo siguiente:</p> Terminal (Entrada/Salida)<pre><code>a vale 10\nb vale 10\n</code></pre> <p>\u00bfQu\u00e9 ha ocurrido aqu\u00ed?</p> <p>Resulta que si se ejecuta <code>a = b</code> esto significa que se almacena el valor de <code>b</code> en <code>a</code>. As\u00ed, el valor que se encontraba almacenado en <code>a</code> es reemplazado por el nuevo valor que viene de <code>b</code>. Y por supuesto, el valor antiguo que ten\u00eda <code>a</code> se pierde \u00a1para siempre!</p> <p>A continuaci\u00f3n, cuando se ejecuta <code>b = a</code>  esto significa que se almacena el valor de <code>a</code> en <code>b</code>. Pero <code>a</code> en este momento tiene almacenado el valor que hab\u00eda recibido de <code>b</code> en la l\u00ednea de ejecuci\u00f3n anterior. As\u00ed, en realidad <code>b</code> estar\u00eda recibiendo y almacenando su propio valor.</p> <p>\u00bfC\u00f3mo se resuelve este problema?</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/creacion-y-uso-de-variables/#uso-de-variables-temporales","title":"Uso de variables temporales","text":"<p>Ahora, si empleamos una variable temporal para almacenar uno de los valores almacenados, podremos reemplazarlo luego por otro valor sin perderlo. Veamos el c\u00f3digo para entenderlo mejor.</p> C\u00f3digo generalizado<pre><code>a = 5\nb = 10\n\ntemp = a # Se almacena 5 en temp\n\na = b # Se almacena 10 en a\n\nb = temp # Se almacena 5 en b\n\nprint(\"a vale\", a)\nprint(\"b vale\", b)\n</code></pre> <p>Si ahora accedemos a los valores almacenado en <code>a</code> y en <code>b</code> ocurrir\u00e1 lo siguiente:</p> Terminal (Entrada/Salida)<pre><code>a vale 10\nb vale 5\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificacion-de-las-variables/","title":"Identificador de una variable","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/identificacion-de-las-variables/#definicion","title":"Definici\u00f3n","text":"<p>El nombre de una variable en programaci\u00f3n debe ser descriptivo y significativo, de manera que refleje el prop\u00f3sito o contenido del valor que almacenar\u00e1 la variable. </p> <p>Utiliza nombres que sean claros y comprensibles: elige nombres que sean f\u00e1cilmente entendibles para cualquier persona que lea tu c\u00f3digo. Evita utilizar nombres cr\u00edpticos o abreviaturas confusas.</p> <p>Utiliza nombres en espa\u00f1ol: a menos que est\u00e9s trabajando en un proyecto espec\u00edfico en otro idioma, se recomienda utilizar nombres de variables en espa\u00f1ol para mantener la consistencia y facilitar la colaboraci\u00f3n con otros desarrolladores. Eso si, procura no utilizar caracteres especiales como los acentuados o la \u00f1. Esto podr\u00eda acarrear problemas a la hora de la compilaci\u00f3n o interpretaci\u00f3n del programa.</p> <p>Utiliza sustantivos para nombrar objetos y variables: las variables suelen representar objetos o valores en tu c\u00f3digo, por lo que es recomendable utilizar sustantivos para nombrarlas. Por ejemplo, en lugar de usar dato o valor, utiliza nombres m\u00e1s espec\u00edficos como nombre, edad, resultado, etc.</p> <p>Elige un estilo de casing (como camel case o snake case): apl\u00edca el estilo de manera consistente en tus nombres de variables. Esto mejorar\u00e1 la legibilidad del c\u00f3digo y facilitar\u00e1 la diferenciaci\u00f3n de palabras dentro del nombre de la variable.</p> <p>Evita nombres demasiado largos: aunque es importante que el nombre de la variable sea descriptivo, trata de no excederte en longitud. Nombres demasiado largos pueden hacer que el c\u00f3digo sea dif\u00edcil de leer y escribir. Encuentra un equilibrio entre la claridad y la concisi\u00f3n.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificacion-de-las-variables/#pautas-generales-para-nombrar-variables","title":"Pautas generales para nombrar variables","text":"<p>Cuando se nombran variables, es importante seguir algunas convenciones de nombramiento (naming convention) para hacer el c\u00f3digo legible y permitir un mantenimiento \u00e1gil y simple:</p> <ul> <li> <p>El nombre debe ser sem\u00e1ntico y descriptivo del valor asignado a la variable. <pre><code>int edad # edad almacenar\u00e1 un dato entero referido a la edad de algo o alguien\n</code></pre></p> </li> <li> <p>Es conveniente que la longitud no pase de 20 caracteres. Y nunca m\u00e1s de 32 caracteres.</p> </li> <li> <p>Debe iniciar con una letra o s\u00edmbolo _, NUNCA CON UN N\u00daMERO, pudiendo contener a continuaci\u00f3n tanto letras como n\u00fameros <pre><code>int numero1, _numero1, 1numero # el identificador de la \u00faltima variable es inv\u00e1lido\n</code></pre></p> </li> <li> <p>Se pueden utilizar combinaciones de letras may\u00fasculas y min\u00fasculas, d\u00edgitos y el s\u00edmbolo _</p> </li> <li> <p>En algunos lenguajes, las may\u00fasculas y min\u00fasculas de una misma letra son tratadas diferente <pre><code>int nombre, Nombre, nombrE, NombrE # todas son diferentes variables\n</code></pre></p> </li> <li> <p>Debe responder a un estilo de nombre v\u00e1lido (ver convenci\u00f3n utilizada para nombrar variables aqu\u00ed) <pre><code>camel_case, snakeCase, PascalCase, InValid_Case # El \u00faltimo estilo no est\u00e1 estandarizado\n</code></pre></p> </li> <li> <p>Se deben emplear may\u00fasculas para indicar constantes.</p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificacion-de-las-variables/#convencion-utilizada-para-nombrar-variables-casing","title":"Convenci\u00f3n utilizada para nombrar variables (casing)","text":"<p>En programaci\u00f3n, el t\u00e9rmino casing se refiere a la convenci\u00f3n que se utiliza para nombrar variables, funciones y otros elementos en el c\u00f3digo fuente, cuando dicho nombre se compone de dos o m\u00e1s palabras. </p> <p>Hay varios estilos de casing comunes utilizados en programaci\u00f3n, que incluyen:</p> <ul> <li> <p>Camel Case: En este estilo, la primera letra de la primera palabra se escribe en min\u00fascula y la primera letra de las palabras siguientes se escribe en may\u00fascula, sin espacios ni guiones entre las palabras. </p> <pre><code>cosasParaHacer, edadDelAmigo, valorFinal\n</code></pre> </li> <li> <p>Pascal Case: Tambi\u00e9n conocido como Upper Camel Case, en este estilo, la primera letra de cada palabra se escribe en may\u00fascula, sin espacios ni guiones entre las palabras.</p> <pre><code>CosasParaHacer, EdadDelAmigo, ValorFinal\n</code></pre> </li> <li> <p>Snake Case: En este estilo, todas las letras se escriben en min\u00fascula y las palabras se separan mediante guiones bajos (_).</p> <pre><code>cosas_para_hacer, edad_del_amigo, valor_final\n</code></pre> </li> <li> <p>Kebab Case: Similar al Snake Case, pero las palabras se separan mediante guiones (-) en lugar de guiones bajos. </p> <pre><code>cosas-para-hacer, edad-del-amigo, valor-final\n</code></pre> <p>Presta atenci\u00f3n y cuidado!</p> <p>Los nombre de variable en Kebab Case, en algunos lenguajes son interpretados como la resta de dos o m\u00e1s variables.</p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificacion-de-las-variables/#ejemplos","title":"Ejemplos","text":"<pre><code>numero\ndia_del_mes\npinguino1\nciudad\nz\nmes\nMes (distinto al anterior \u2013 case sensitive)\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificacion-de-las-variables/#como-no-debe-llamarse-una-variable","title":"\u00bfc\u00f3mo no debe llamarse una variable?","text":"<p>Las siguientes pautas son muy importantes. \u00a1Desconocerlas puede llevar a nombrar variables de manera incorrecta!</p> <ul> <li> <p>No es conveniente utilizar nombres sin sentido sem\u00e1ntico o descriptivo     <pre><code>string a # si bien sabemos que **a** almacenar\u00e1 una cadena, \u00bfDe qu\u00e9 dato se tratar\u00e1?\n</code></pre></p> </li> <li> <p>NUNCA debe iniciar el nombre con UN N\u00daMERO, debe hacerlo con una letra o gui\u00f3n bajo     <pre><code>int numero1, _numero1, 1numero # el identificador de la \u00faltima variable es inv\u00e1lido\n</code></pre></p> </li> <li> <p>No debe ser palabra reservada (if, else, while, print, input, etc.) de la biblioteca del lenguaje</p> </li> <li> <p>No debe contener espacios     <pre><code>string mi variable no puede tener espacios # este identificador es inv\u00e1lido\n</code></pre></p> </li> <li> <p>No debe contener s\u00edmbolos especiales como guiones, puntos, comas, comillas, etc. (excepto el gui\u00f3n bajo _ )</p> </li> </ul> <p>\u00a1Â¡Para recordar!!</p> <p>Las convenciones de nombramiento pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando, as\u00ed como las directrices establecidas por la comunidad o los est\u00e1ndares de codificaci\u00f3n. </p> <p>Es recomendable consultar la documentaci\u00f3n o gu\u00edas de estilo correspondientes al lenguaje o entorno en el que est\u00e9s trabajando para seguir las mejores pr\u00e1cticas espec\u00edficas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/identificacion-de-las-variables/#ejemplos_1","title":"Ejemplos","text":"<pre><code>123\n_d\u00eda\nnumero*\nlugar de nacimiento\na\u00f1o\nprint\nint\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/resumen-sobre-el-alcance-de-las-variables/","title":"Alcance de una variable: resumen","text":"<p>Un concepto muy importante en la programaci\u00f3n es el concepto de alcance.</p> <p>El alcance define en que partes del c\u00f3digo existe y puede ser accedida una variable, ya que mientras algunas variables pueden ser accedidas en cualquier parte del programa, otras solo pueden ser utilizadas en ciertas partes del c\u00f3digo.</p> <p>Se le denomina bloque de c\u00f3digo al c\u00f3digo que se encuentra delimitado entre llaves { }. </p> <p>Los bloques de c\u00f3digo nos permiten agrupar una o m\u00e1s sentencias.</p> <p></p> <p>En el alcance global, las variables se declaran fuera de los bloques de c\u00f3digo. </p> <p>Por esto mismo, como las variables no pertenecen exclusivamente a un solo bloque pueden ser utilizadas desde cualquier parte del c\u00f3digo. </p> <p>A estas variables se les conoce como variables globales.</p> Javascript<pre><code>function bienvenida() {\n   console.log(\"\u00a1Hola, \" + nombre + \"!\")\n}\nfunction colorFavorito() {\n   console.log(\"Me llamo \" + nombre + \" y mi color favorito es el \" + color)\n}\n{ // Bloque principal (main)\n   var nombre = \"Juan\"\n   var color = \"azul\"\n   bienvenida()\n   colorFavorito()\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>\u00a1Hola, Juan!\nMe llamo Juan y mi color favorito es el azul\n</code></pre> <p>Como podemos ver en el ejemplo, ambas funciones pueden utilizar las variables nombre o color pues estas fueron definidas fuera de los bloques de c\u00f3digo.</p> <p>Cuando una variable es definida dentro de un bloque de c\u00f3digo, esta solo puede ser accedida por el c\u00f3digo dentro del mismo bloque o de los bloques contenidos dentro del bloque donde es definida la variable. </p> <p>Las variables que son definidas dentro de un bloque de c\u00f3digo se conocen como variables locales.</p> Javascript<pre><code>function sumar () {\n   let a = 10\n   if(a &gt; 5) {\n      let b = 15\n      console.log(a + b)  //Se imprime en consola 25\n   }\n   return a + b; // Error\n}\n{ // Bloque principal (main)\n   sumar()\n}\n</code></pre> Terminal (Entrada/Salida)<pre><code>25\nindex.js:7\n\n  return a + b\n             ^\nReferenceError: b is not defined\n</code></pre> <p>En este caso, obtenemos un error al ejecutar la funci\u00f3n sumar(), pues, aunque la condici\u00f3n del if se cumple y dentro del bloque de c\u00f3digo (bloque verdadero) se ejecuta la inicializaci\u00f3n de la variable b con el valor 15, esta se elimina al finalizar dicho bloque, no existiendo ya fuera de las llaves (\u00e1mbito) donde fue creada, por lo que no podemos utilizarla en la l\u00ednea de retorno (return)</p> <p>Es importante recordar que los par\u00e1metros de una funci\u00f3n se inicializan como variables locales dentro del cuerpo de la funci\u00f3n.</p> Javascript<pre><code>function ubicacion(ciudad) {\n   console.log(\"Mi ciudad favorita es: \" + ciudad)\n}\n{ // Bloque principal (main)\n   ubicacion(\"San Francisco\")\n   console.log(ciudad)  // Error\n}\n</code></pre> <p>``` js title=\"Salida Mi ciudad favorita es: San Francisco</p> <p>index.js:5   console.log(ciudad)               ^ ReferenceError: ciudad is not defined ```</p> <p>Aqu\u00ed, los argumentos que reciben estos par\u00e1metros al ser invocada la funci\u00f3n solamente existir\u00e1n mientras se ejecute dicha funci\u00f3n.</p> <p>La vida de una variable comienza cuando es declarada.</p> <p>Las variables locales son destruidas (eliminadas), y dejan de ser accesibles, cuando la ejecuci\u00f3n del programa abandona el bloque de c\u00f3digo donde han sido declaradas , mientras que las variables globales son destruidas cuando la ejecuci\u00f3n del programa termina por completo. </p> <p>Sin embargo, tambi\u00e9n es posible destruir una variable local o global en cualquier momento del ciclo de vida, con la instrucci\u00f3n de destrucci\u00f3n correspondiente.</p> <p>El t\u00e9rmino destruir hace referencia a que la direcci\u00f3n de memoria asociada a la variable pasa a estar disponible para albergar otra variable que se defina en el programa, posteriormente, y que eventualmente sobrescribir\u00e1 los bits antiguos almacenados en dicha direcci\u00f3n.</p> <p>Buenas pr\u00e1cticas</p> <p>Aunque en principio podr\u00eda parecer m\u00e1s sencillo crear a todas las variables accesibles desde cualquier \u00e1mbito para nuestro c\u00f3digo (variables globales), esto se considera una muy mala pr\u00e1ctica de programaci\u00f3n pues conforme el programa vaya creciendo esto podr\u00eda ocasionar serios problemas:</p> <ul> <li>Disminuye la legibilidad</li> <li>Su uso puede producir efectos colaterales, al producirse alteraciones no previstas de su valor en una parte del programa (un bloque de c\u00f3digo) que afectan a su uso en otra parte del programa (otro bloque de c\u00f3digo o, incluso, en el bloque principal del programa).</li> <li>Dificultan la modularidad del c\u00f3digo.</li> </ul> <p>Si bien las variables globales se justifican solamente cuando se necesitan en casi todas las partes del programa, la regla de oro es no utilizarlas.</p> <p>Es por ello que siempre debemos intentar utilizar variables locales. De esta forma no solo se pueden evitar errores o confusiones con los nombres y valores de estas variables, sino que el utilizar variables locales har\u00e1 el c\u00f3digo m\u00e1s legible pues los bloques de c\u00f3digo proporcionan una mejor organizaci\u00f3n e incluso permitir\u00e1n ahorrar espacio reservado en memoria, pues las variables dejar\u00e1n de existir en cuanto el bloque donde fueran declaradas termine de ejecutarse.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/resumen-sobre-el-identificador-de-una-variable/","title":"Identificador de una variable: resumen","text":"<p>El nombre de una variable en programaci\u00f3n debe ser descriptivo y significativo, de manera que refleje el prop\u00f3sito o contenido del valor que almacenar\u00e1 la variable. </p> <p>Cuando se nombran variables, es importante seguir algunas convenciones de nombramiento (naming convention) y conocer las restricciones de nombramiento para hacer el c\u00f3digo legible y permitir un mantenimiento \u00e1gil y simple, por ejemplo:</p> <ul> <li>Utiliza nombres que sean claros y comprensibles y evita nombres demasiado largos.</li> <li>Utiliza sustantivos para nombrar objetos y variables.</li> <li>No uses caracteres especiales como los acentuados o la \u00f1. Tampoco empieces con un n\u00famero o uses espacios.</li> <li>Elige un estilo de casing, como camel case o snake case.</li> </ul> <p>Â¡Para recordar! que las convenciones de nombramiento pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando, as\u00ed como las directrices establecidas por la comunidad o los est\u00e1ndares de codificaci\u00f3n. </p> <p>Es importante seguir una convenci\u00f3n de casing consistente en un proyecto o c\u00f3digo fuente para mejorar la legibilidad y facilitar el entendimiento del c\u00f3digo por parte de otros desarrolladores. Adem\u00e1s, algunos lenguajes de programaci\u00f3n tienen convenciones de casing espec\u00edficas recomendadas por su comunidad o est\u00e1ndares de codificaci\u00f3n.</p> <p>Es recomendable consultar la documentaci\u00f3n o gu\u00edas de estilo correspondientes al lenguaje o entorno en el que est\u00e9s trabajando para seguir las mejores pr\u00e1cticas espec\u00edficas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/resumen-sobre-el-valor-de-una-variable/","title":"Valor asignado a una variable: resumen","text":"<p>En t\u00e9rminos simples, una variable es un contenedor que puede almacenar un valor de alg\u00fan tipo de dato.</p> <p>Antes de poder almacenar un valor, una variable debe ser declarada.</p> <p>La asignaci\u00f3n de un valor a una variable se realiza mediante una sentencia de asignaci\u00f3n en el c\u00f3digo de programaci\u00f3n, en la que se especifica el nombre de la variable seguido del valor que se le quiere asignar:</p> <p>variable \u2b05 valor_asignado</p> <p>Es importante tener en cuenta que, en algunos lenguajes, el valor asignado a una variable puede ser de diferentes tipos de dato, como n\u00fameros, texto, listas, entre otros.</p> <p>Adem\u00e1s, el valor de una variable puede cambiar durante la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/resumen-sobre-tipos-de-datos/","title":"tipos de dato: resumen","text":"<p>En programaci\u00f3n, los tipos de dato de variables se refieren al tipo de valor que puede ser almacenado en una variable. Cada tipo de dato tiene sus propias caracter\u00edsticas y restricciones.</p> <p>tipos de dato elementales o b\u00e1sicos:</p> <ul> <li>Enteros (int)</li> <li>Reales (float)</li> <li>Caracteres (char)</li> <li>L\u00f3gicos o Booleanos (bool)</li> </ul> <p>Estructuras de datos o tipos de dato complejos:</p> <ul> <li>Cadenas de caracteres (string)</li> <li>Listas (list)</li> <li>Matrices (matrix)</li> <li>Tuplas (tuple)</li> <li>Arreglos (array)</li> <li>Diccionarios (dict)</li> <li>Conjuntos (set)</li> </ul> <p>Dependiendo del lenguaje de programaci\u00f3n que se est\u00e9 utilizando, pueden existir m\u00e1s o menos \u000btipos de dato disponibles.</p> <p>Adem\u00e1s, en algunos casos depender\u00e1 de la potencia de estos lenguajes poder articular l\u00f3gicas m\u00e1s complejas que involucren diferentes tipos de dato en una misma operaci\u00f3n.</p> <p>Las variables tienen un tipo de dato asociado que define el tipo de valor que pueden almacenar. A veces es necesario interpretar el tipo de dato de dicho valor como si fuera otro, para realizar ciertas operaciones o para satisfacer requisitos espec\u00edficos del programa. </p> <p>Para cambiar el tipo de dato de una variable en la mayor\u00eda de los lenguajes de programaci\u00f3n, puedes utilizar un proceso llamado casting o conversi\u00f3n de tipo. Esto implica interpretar el tipo de dato del valor de una variable como si fuera otro tipo de dato.</p> <p>Hay dos tipos principales de conversiones de tipo de dato:     * Impl\u00edcita: ocurre autom\u00e1ticamente cuando el lenguaje de programaci\u00f3n realiza la conversi\u00f3n de tipo de dato de forma impl\u00edcita para mantener la coherencia entre diferentes tipos de dato.      * Expl\u00edcita: ocurre cuando el programador especifica manualmente el tipo de conversi\u00f3n deseado, utilizando funciones o sintaxis espec\u00edficas proporcionadas por el lenguaje de programaci\u00f3n.</p> <p>Es importante tener en cuenta que, al realizar una conversi\u00f3n de tipo expl\u00edcita, debes asegurarte de que la operaci\u00f3n sea v\u00e1lida y que no se produzca una p\u00e9rdida de informaci\u00f3n o resultados inesperados.</p> <p>Es fundamental comprender los tipos de dato y las implicaciones de la conversi\u00f3n antes de aplicarla en el c\u00f3digo.</p> <p>Algunos lenguajes de programaci\u00f3n pueden permitir castings impl\u00edcitos entre tipos de dato compatibles, mientras que otros requieren castings expl\u00edcitos. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/resumen-sobre-variables/","title":"Variables: resumen","text":"<p>\u00a1Muy importante!</p> <p>Una variable es un espacio de almacenamiento (direcci\u00f3n) reservado en la memoria (RAM) de una computadora, que tiene un nombre o identificador \u00fanico asociado dentro de su \u00e1mbito o alcance, y cuyo tama\u00f1o est\u00e1 definido por el tipo de dato asociados y que contiene un valor o una referencia a un valor.</p> <p>Por lo tanto, todo dato que vaya a ser introducido a la computadora, y todo dato que vaya a ser generado o calculado a partir de otros datos para obtener alg\u00fan resultado, debe identificarse y manejarse como variable. </p> <p>Una variable posee 4 caracter\u00edsticas:</p> <ul> <li>El alcance, que determinar\u00e1 en qu\u00e9 partes del programa (regi\u00f3n del programa) la variable podr\u00e1 ser accedida o utilizada.</li> <li>El identificador o nombre, que servir\u00e1 para referenciarla a lo largo de la ejecuci\u00f3n del programa. </li> <li>El tipo de dato, que determinar\u00e1 como va a almacenar un dato para evitar errores.</li> <li>El dato o informaci\u00f3n que se almacenar\u00e1 durante la ejecuci\u00f3n del programa.</li> </ul> <p>El ciclo de vida de una variable puede variar seg\u00fan el lenguaje de programaci\u00f3n utilizado y el alcance en el que se utiliza la variable. Por ejemplo, en algunos lenguajes, las variables pueden tener un alcance limitado a una funci\u00f3n o bloque de c\u00f3digo, mientras que en otros pueden tener un alcance global en todo el programa. Este tema lo veremos m\u00e1s adelante.</p> <p>Resumiendo, es importante destacar que los detalles espec\u00edficos de la creaci\u00f3n de variables pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Algunos lenguajes tienen reglas y convenciones adicionales para la creaci\u00f3n de variables, como restricciones en los nombres o requisitos de \u00e1mbito.</p> <p>Durante la etapa de utilizaci\u00f3n de una variable, estas se utilizan en expresiones y operaciones como asignaci\u00f3n de valores, lectura de valores, modificaci\u00f3n de valores y se tiene en cuenta el alcance y el tipo de dato de la variable. Esto permite utilizar las variables para almacenar y manipular datos en el programa de acuerdo con su prop\u00f3sito y alcance.</p> <p>Por \u00faltimo, en la etapa de destrucci\u00f3n de una variable se llevan a cabo acciones para liberar los recursos asociados a ella y finalizar su existencia en el programa. Esto puede implicar la liberaci\u00f3n de memoria asignada o la finalizaci\u00f3n del \u00e1mbito en el que se encuentra. Los detalles espec\u00edficos de la destrucci\u00f3n pueden variar seg\u00fan el lenguaje de programaci\u00f3n utilizado. Algunos lenguajes tienen mecanismos adicionales de gesti\u00f3n de memoria, como destructores o m\u00e9todos especiales, que permiten ejecutar acciones personalizadas antes de la destrucci\u00f3n de una variable, como liberar otros recursos o realizar tareas de limpieza.</p> <p>\u00a1Importante!</p> <p>En la mayor\u00eda de los lenguajes de programaci\u00f3n, antes de que una variable pueda ser usada en un programa, esta debe ser declarada, incluyendo el tipo de dato que ser\u00e1n almacenados en ella. </p> <p>Declarar una variable significa crear una nueva variable en el programa, definiendo su identificador y reservando el espacio necesario en la memoria seg\u00fan el tipo de dato que almacenar\u00e1 durante la ejecuci\u00f3n del programa, pero sin asignarle valor.</p> <p>Para declarar una variable, se debe especificar su nombre, su tipo y su alcance, si aplica. </p> <p>Una vez que se ha declarado una variable, podemos asignarle un valor utilizando el operador de asignaci\u00f3n =</p> <p>Asignar un valor a una variable significa almacenar un valor en el espacio de memoria reservado para ella.</p> <p>Inicializar una variable significa declararla y, adem\u00e1s, asignarle un valor inicial.</p> <p>D (eclaraci\u00f3n) + A (signaci\u00f3n) = I (nicializaci\u00f3n)</p> Declaraci\u00f3n + Asignaci\u00f3n Inicializaci\u00f3n int edad int edad = 18 edad = 18 <p>\u00a1Â¡Para recordar!!</p> <p>Hablando de como se lee la sintaxis en un lenguaje humanizado, cualquier lectura que lleve a la correcta interpretaci\u00f3n de la instrucci\u00f3n, es v\u00e1lida. Para que ello ocurra, no puede existir ambig\u00fcedad posible. Si la lectura puede interpretarse de dos o maneras diferentes, entonces ser\u00e1 inv\u00e1lida.</p> <p>Recordemos la sintaxis:</p> Declaraci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable\n</code></pre> Asignaci\u00f3n<pre><code>nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> Inicializaci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> <p>La estructura de la sintaxis depender\u00e1 de si la acci\u00f3n es una declaraci\u00f3n, una inicializaci\u00f3n o una asignaci\u00f3n.</p> <p>Tambi\u00e9n depender\u00e1 de como se escriba en cada lenguaje particular.</p> <p>Controlar desde ac\u00e1, lo tom\u00e9 de Identificador de variable</p> <p>En t\u00e9rminos simples, una variable es un contenedor que puede almacenar un valor de alg\u00fan tipo de dato.</p> <p>Antes de poder almacenar un valor, una variable debe ser declarada.</p> <p>La asignaci\u00f3n de un valor a una variable se realiza mediante una sentencia de asignaci\u00f3n en el c\u00f3digo de programaci\u00f3n, en la que se especifica el nombre de la variable seguido del valor que se le quiere asignar:</p> <p>variable \u2b05 valor_asignado</p> <p>Es importante tener en cuenta que, en algunos lenguajes, el valor asignado a una variable puede ser de diferentes tipos de dato, como n\u00fameros, texto, listas, entre otros.</p> <p>Adem\u00e1s, el valor de una variable puede cambiar durante la ejecuci\u00f3n del programa.</p> <p>Las variables son un concepto esencial en la programaci\u00f3n. Son elementos fundamentales en la programaci\u00f3n que nos permiten almacenar y manipular valores en la memoria durante la ejecuci\u00f3n de un programa. </p> <p>Para utilizar una variable en programaci\u00f3n, primero debemos declararla o inicializarla. En este segundo caso, significa declararla y asignarle un valor utilizando el operador de asignaci\u00f3n (=)</p> <p>Tambi\u00e9n es posible actualizar el valor de una variable asign\u00e1ndole un nuevo valor utilizando el mismo operador de asignaci\u00f3n (=)</p> <p>Si sigues las convenciones de nomenclatura y comprendes los tipos de dato y el alcance de las variables, podr\u00e1s escribir c\u00f3digo que sea m\u00e1s f\u00e1cil de leer y mantener.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipos-de-datos-de-las-variables/","title":"tipos de dato de una variable","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/tipos-de-datos-de-las-variables/#introduccion","title":"Introducci\u00f3n","text":"<p>Se denomina dato a cualquier objeto manipulable por la computadora. Un dato puede ser un caracter le\u00eddo de un teclado, datos o informaci\u00f3n almacenada en un disco, pendrive o cualquier otra unidad de almacenamiento, un valor que se encuentra en la memoria central (RAM), etc.</p> <p>Los distintos tipos de dato se representan en diferentes formas en la computadora: por ejemplo, no se almacena internamente de la misma manera un n\u00famero entero que un caracter. </p> <p>Aunque los lenguajes de alto nivel permiten en alguna medida ignorar la representaci\u00f3n interna de los datos, es preciso conocer algunos conceptos m\u00ednimos.</p> <p>A nivel de m\u00e1quina todos los datos se representan utilizando una secuencia finita de bits. De este hecho ya se deduce que no todos los datos son representables en una computadora. </p> <p>La de\ufb01nici\u00f3n de un tipo de dato incluye la de\ufb01nici\u00f3n del conjunto de valores permitidos y las operaciones que se pueden llevar a cabo sobre estos datos.</p> <p>Cuando se utiliza un dato en un programa es preciso que est\u00e9 determinado su tipo para que el la computadora sepa c\u00f3mo debe tratarlo y almacenarlo. </p> <p>Dependiendo del lenguaje puede o no ser preciso declarar expresamente en el programa el tipo de cada dato. </p> <p>No todos los tipos de dato existen en todos los lenguajes de programaci\u00f3n. Hay lenguajes m\u00e1s ricos que otros en este sentido. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipos-de-datos-de-las-variables/#que-es-el-tipo-de-dato-de-una-variable","title":"\u00bfQu\u00e9 es el tipo de dato de una variable?","text":"<p>En programaci\u00f3n, el tipo de dato de una variable se refiere al tipo de valor que puede ser almacenado en ella. Cada tipo de dato tiene sus propias caracter\u00edsticas y restricciones. </p> <p>Los tipos de dato b\u00e1sicos m\u00e1s usuales son:</p> <ul> <li> <p>Enteros (int): n\u00fameros pertenecientes a un subconjunto finito de los n\u00fameros enteros. Los enteros son n\u00fameros sin decimales.</p> <pre><code>1  2  -3  0\n</code></pre> </li> <li> <p>Reales (float): n\u00fameros pertenecientes a un subconjunto finito de los n\u00fameros reales. Los n\u00fameros reales constan de una parte entera y una parte decimal, es decir, son n\u00fameros con decimales. Tambi\u00e9n se los conoce como flotantes o de punto flotante.</p> <pre><code>3.14  2.5  -0.5  5.0  0.09\n</code></pre> </li> <li> <p>Caracteres (char): son un conjunto finito de caracteres reconocidos por la computadora. Los caracteres son letras, n\u00fameros y s\u00edmbolos individuales.</p> <pre><code>alfab\u00e9ticos: A  B  C  ... Z    a  b  c ... z\nnum\u00e9ricos:   0  1  2  3  4  5  6  7  8  9  0\ns\u00edmbolos:    +  -  *  /  ^  ,  ;  &lt;  &gt;  $  @\n</code></pre> </li> <li> <p>L\u00f3gicos (bool): tambi\u00e9n conocidos como booleanos son dos valores l\u00f3gicos: verdadero (true) o falso (false).</p> <pre><code>verdadero:  1   true    (True)\nfalso:      0   false   (False)\n</code></pre> <p>Por ejemplo, tenemos el siguiente programa:</p> Python<pre><code>valor1 = True\nvalor2 = False\n\nprint (\"Valor 1: \", valor1)\nprint (\"Valor 2: \", valor2)\n\nprint (valor1, \" AND \", valor2 , \" = \", valor1 and valor2)\nprint (valor1, \" OR \", valor2 , \" = \", valor1 or valor2)\nprint (\"NOT \", valor2 , \" = \", not valor2)\n</code></pre> <p>Esta es la respuesta:</p> Terminal (Entrada/Salida)<pre><code>Valor 1:  True\nValor 2:  False\nTrue  AND  False  =  False\nTrue  OR  False  =  True\nNOT  False  =  True\n</code></pre> <p>\u00bfEntiendes todo lo que ocurre, l\u00ednea tras l\u00ednea?</p> </li> </ul>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipos-de-datos-de-las-variables/#como-determino-el-tipo-de-una-variable","title":"\u00bfC\u00f3mo determino el tipo de una variable?","text":"<p>En la mayor\u00eda de los lenguajes de programaci\u00f3n existen comandos que pueden evaluar el tipo de dato de un valor almacenado en un variable. As\u00ed, podemos evaluar y manipular las variables de manera correcta durante la ejecuci\u00f3n de un programa.</p> <p>Por ejemplo, en Python podemos hacer lo siguiente:</p> Python<pre><code>valor1 = True\nvalor2 = 12\nvalor3 = \"Hola\"\nvalor4 = 14.34\n\nprint (\"Valor 1: \", type(valor1))\nprint (\"Valor 2: \", type(valor2))\nprint (\"Valor 3: \", type(valor3))\nprint (\"Valor 4: \", type(valor4))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Valor 1:  &lt;class 'bool'&gt;\nValor 2:  &lt;class 'int'&gt;\nValor 3:  &lt;class 'str'&gt;\nValor 4:  &lt;class 'float'&gt;\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipos-de-datos-de-las-variables/#estructuras-de-datos","title":"Estructuras de datos","text":"<p>Los tipos de dato vistos anteriormente se suelen denominar elementales o b\u00e1sicos. </p> <p>Una estructura de datos o tipo de dato estructurado es un tipo de dato construido a partir de otros tipos de dato.  Podemos enumerar las siguientes estructuras:</p> <pre><code>Cadenas de caracteres (_string_)\nListas (_list_)\nMatrices (_matrix_)\nTuplas (_tuple_)\nArreglos (_array_)\nDiccionarios (_dict_)\nConjuntos (_set_)\n</code></pre> <p>Este tema es bastante largo y complejo por lo que merece una unidad de estudio aparte. Puedes acceder a la misma, haciendo clic aqu\u00ed.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/tipos-de-datos-de-las-variables/#ejercicios-de-aplicacion","title":"Ejercicios de aplicaci\u00f3n","text":"<ol> <li> <p>Escribe un programa que solicite el ingreso por teclado de datos referidos al nombre, el precio unitario y la cantidad de unidades vendidas de un producto. Luego que imprima por pantalla una salida de informaci\u00f3n formateada de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el nombre del producto: Palta\nIngrese el precio unitario del producto: 510.30\nIngrese la cantidad de unidades compradas: 3\n\nProducto: Palta\nPrecio unitario: 510.30\nCantidad: 3\n----------------------------------\nCosto total de compra: 1530.90\n</code></pre> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El costo total debe calcularse antes de realizar la impresi\u00f3n en pantalla. Presta atenci\u00f3n al tratamiento de los decimales. Estamos hablando de dinero en algunos casos.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>nombre = input(\"Ingrese el nombre del producto: \")\nprecio_unitario = float(input(\"Ingrese el precio unitario del producto: \"))\ncantidad = int(input(\"Ingrese la cantidad de unidades compradas: \"))\n\ncosto_total = precio_unitario * cantidad\n\nprint(f\"Producto: {nombre}\")\nprint(f\"Precio unitario: {format(precio_unitario, '.2f')}\")\nprint(f\"Cantidad: {cantidad}\")\nprint(\"-\"*34)\nprint(f\"Costo total de compra: {format(costo_total, '.2f')}\")\n</code></pre> <p>\u00a1Para pensar!</p> <p>\u00bfQu\u00e9 crees que hace la siguiente instrucci\u00f3n <code>format(precio_unitario, '.2f')</code>?</p> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/valor-asignado-a-una-variable/","title":"Valor asignado a una variable","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/valor-asignado-a-una-variable/#definicion","title":"Definici\u00f3n","text":"<p>En programaci\u00f3n, el valor asignado a una variable es el dato o informaci\u00f3n que se almacena en dicha variable. </p> <p>La asignaci\u00f3n de un valor a una variable se realiza mediante una sentencia de asignaci\u00f3n en el c\u00f3digo de programaci\u00f3n, en la que se especifica el nombre de la variable seguido del valor que se le quiere asignar:</p> <p>variable \u2b05 valor_asignado</p> <p>Una vez que un valor ha sido asignado a una variable, se almacena en la memoria de la computadora y se puede acceder a \u00e9l posteriormente utilizando el nombre de la variable. </p> <p>En t\u00e9rminos m\u00e1s simples, una variable es un contenedor que puede almacenar un valor de alg\u00fan tipo de dato.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/valor-asignado-a-una-variable/#ejemplos","title":"Ejemplos","text":"<p>se puede asignar el valor 10 a la variable x de la siguiente manera:</p> <p>``` py title=\"Python x = 10  # Asignaci\u00f3n del valor 10 a la variable x <pre><code>A partir del insante que se ejecuta la asignaci\u00f3n, la variable x contendr\u00e1 el valor asignado (10), que podr\u00e1 ser utilizado en otras partes del programa (por ejemplo, para realizar c\u00e1lculos, comparaciones y otras operaciones.) \n\n``` py title=\"Python\"\nx = 10  # Asignaci\u00f3n del valor 10 a la variable x\nprint (x * 2)  # Output: 20\nx = x + 10  # Se suma al valor almacenado en x el valor 10, y el resultado se almacena en x\nconsole.log(x &lt; 20)  # Output: false\n</code></pre></p> <p>\u00a1Importante!</p> <p>Hay que tener en cuenta que, en algunos lenguajes, el valor asignado a una variable puede ser de diferentes tipos de dato, como n\u00fameros, texto o listas, entre otros.</p> <p>Tambi\u00e9n hay tener en cuenta que el valor de una variable puede cambiar durante la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/valor-asignado-a-una-variable/#modificacion-del-valor-asignado-a-una-variable-durante-la-ejecucion-del-programa","title":"Modificaci\u00f3n del valor asignado a una variable durante la ejecuci\u00f3n del programa","text":"<p>Es posible que necesitemos actualizar el valor de una variable en diferentes momentos de ejecuci\u00f3n del programa.</p> <p>Para actualizar el valor de una variable, simplemente podemos asignarle un nuevo valor utilizando el operador de asignaci\u00f3n igual (=) o cualquiera de operadores de asignaci\u00f3n compuesta.</p> Javascript<pre><code>let n = 5  // Inicializaci\u00f3n (declaraci\u00f3n y asignaci\u00f3n) del valor 5 a la variable n\nn = 7      // Asignaci\u00f3n (actualizaci\u00f3n) del valor 5 a la variable n\n</code></pre> <p>En este ejemplo, se ha declarado la variable n y se le ha asignado el valor 5. (inicializaci\u00f3n)  Luego, se ha actualizado el valor de la variable n a 7. (asignaci\u00f3n)</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/valor-asignado-a-una-variable/#asignacion-multiple","title":"Asignaci\u00f3n m\u00faltiple","text":"<p>La asignaci\u00f3n m\u00faltiple, v\u00e1lido en ciertos lenguajes como Python, Javascript (ES6 y posteriores), PHP y Ruby, entre otros, es una caracter\u00edstica que permite asignar valores a varias variables al mismo tiempo en una sola l\u00ednea de c\u00f3digo. Esto se puede hacer de varias maneras.</p> <p>Asignaci\u00f3n de m\u00faltiples variables:</p> Python<pre><code>a, b, c = 1, 2, 3\n</code></pre> <p>En este c\u00f3digo, 1 se asigna a <code>a</code>, 2 se asigna a <code>b</code>, y 3 se asigna a <code>c</code>.</p> <p>Asignaci\u00f3n de una misma valor a m\u00faltiples variables:</p> Python<pre><code>a = b = c = 1\n</code></pre> <p>En este c\u00f3digo, a <code>a</code>, a <code>b</code> y a <code>c</code> se les asigna 1.</p> <p>Desempaquetado de listas o tuplas:</p> Python<pre><code>numeros = [1, 2, 3]\na, b, c = numeros\n</code></pre> <p>En este c\u00f3digo, los valores de la lista <code>numeros</code> son asignados en orden de posici\u00f3n a <code>a</code>, a <code>b</code> y a <code>c</code> respectivamente.</p> <p>La asignaci\u00f3n m\u00faltiple puede hacer que el c\u00f3digo sea m\u00e1s conciso y legible, pero tambi\u00e9n puede hacer que el c\u00f3digo sea m\u00e1s dif\u00edcil de entender si se usa de manera excesiva o en situaciones complejas.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/variables-especiales-segun-su-aplicacion/","title":"Variables especiales seg\u00fan su aplicaci\u00f3n","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/variables-especiales-segun-su-aplicacion/#acumulador","title":"Acumulador","text":"<ul> <li>Es una variable cuyo valor aumenta o disminuye en una cantidad variable cada vez que se produce un determinado suceso o acci\u00f3n.</li> <li>Debe ser inicializada.</li> </ul> Python: Se desea acumular las notas de pr\u00e1cticas de un alumno.<pre><code>suma = 0 # el valor de sum es 0\nsuma = suma + 13 # el valor de sum es 13\nsuma = suma + 10 # el valor de sum es 23\n</code></pre>"},{"location":"unidades/fundamentos-de-la-programacion/variables/variables-especiales-segun-su-aplicacion/#contador","title":"Contador","text":"<ul> <li>Es un acumulador cuyo valor aumenta o disminuye en una cantidad constante cada vez que se produce un determinado suceso o acci\u00f3n.</li> <li>Se usa para contar sucesos</li> </ul> <p>``` py title\"=Python: Contar n\u00famero de aprobados.\" aprobados = 0 # la cantidad de aprobados es 0 for nota in listado_de_notas:     if (nota &gt;= 6):         aprobados = aprobados + 1 # la cantidad de aprobados se incrementa en 1 <pre><code>## Resumen\n\n!!! success \"\u00a1Muy importante!\"\n    Una variable es un espacio de almacenamiento (direcci\u00f3n) reservado en la memoria (RAM) de una computadora, que tiene un nombre o identificador \u00fanico asociado dentro de su \u00e1mbito o alcance, y cuyo tama\u00f1o est\u00e1 definido por el tipo de dato asociados y que contiene un valor o una referencia a un valor.\n\nPor lo tanto, todo dato que vaya a ser introducido a la computadora, y todo dato que vaya a ser generado o calculado a partir de otros datos para obtener alg\u00fan resultado, debe identificarse y manejarse como variable. \n\nUna variable posee 4 caracter\u00edsticas:\n\n* El alcance, que determinar\u00e1 en qu\u00e9 partes del programa (regi\u00f3n del programa) la variable podr\u00e1 ser accedida o utilizada.\n* El identificador o nombre, que servir\u00e1 para referenciarla a lo largo de la ejecuci\u00f3n del programa. \n* El tipo de dato, que determinar\u00e1 como va a almacenar un dato para evitar errores.\n* El dato o informaci\u00f3n que se almacenar\u00e1 durante la ejecuci\u00f3n del programa.\n\nEl ciclo de vida de una variable puede variar seg\u00fan el lenguaje de programaci\u00f3n utilizado y el alcance en el que se utiliza la variable. Por ejemplo, en algunos lenguajes, las variables pueden tener un alcance limitado a una funci\u00f3n o bloque de c\u00f3digo, mientras que en otros pueden tener un alcance global en todo el programa. Este tema lo veremos m\u00e1s adelante.\n\nResumiendo, es importante destacar que los detalles espec\u00edficos de la creaci\u00f3n de variables pueden variar seg\u00fan el lenguaje de programaci\u00f3n que est\u00e9s utilizando. Algunos lenguajes tienen reglas y convenciones adicionales para la creaci\u00f3n de variables, como restricciones en los nombres o requisitos de \u00e1mbito.\n\nDurante la etapa de utilizaci\u00f3n de una variable, estas se utilizan en expresiones y operaciones como asignaci\u00f3n de valores, lectura de valores, modificaci\u00f3n de valores y se tiene en cuenta el alcance y el tipo de dato de la variable. Esto permite utilizar las variables para almacenar y manipular datos en el programa de acuerdo con su prop\u00f3sito y alcance.\n\nPor \u00faltimo, en la etapa de destrucci\u00f3n de una variable se llevan a cabo acciones para liberar los recursos asociados a ella y finalizar su existencia en el programa. Esto puede implicar la liberaci\u00f3n de memoria asignada o la finalizaci\u00f3n del \u00e1mbito en el que se encuentra. Los detalles espec\u00edficos de la destrucci\u00f3n pueden variar seg\u00fan el lenguaje de programaci\u00f3n utilizado. Algunos lenguajes tienen mecanismos adicionales de gesti\u00f3n de memoria, como destructores o m\u00e9todos especiales, que permiten ejecutar acciones personalizadas antes de la destrucci\u00f3n de una variable, como liberar otros recursos o realizar tareas de limpieza.\n\n!!! info \"\u00a1Importante!\"\n    En la mayor\u00eda de los lenguajes de programaci\u00f3n, antes de que una variable pueda ser usada en un programa, esta debe ser declarada, incluyendo el tipo de dato que ser\u00e1n almacenados en ella. \n\nDeclarar una variable significa crear una nueva variable en el programa, definiendo su identificador y reservando el espacio necesario en la memoria seg\u00fan el tipo de dato que almacenar\u00e1 durante la ejecuci\u00f3n del programa, pero sin asignarle valor.\n\nPara declarar una variable, se debe especificar su nombre, su tipo y su alcance, si aplica. \n\nUna vez que se ha declarado una variable, podemos asignarle un valor utilizando el operador de asignaci\u00f3n =\n\nAsignar un valor a una variable significa almacenar un valor en el espacio de memoria reservado para ella.\n\nInicializar una variable significa declararla y, adem\u00e1s, asignarle un valor inicial.\n\nD (eclaraci\u00f3n) + A (signaci\u00f3n) = I (nicializaci\u00f3n)\n\n|Declaraci\u00f3n + Asignaci\u00f3n | Inicializaci\u00f3n |\n|:---:|:---:|\n| int edad | int edad = 18 |\n| edad = 18 | |\n\n!!! info \"\u00a1Â¡Para recordar!!\"\n    Hablando de como se lee la sintaxis en un lenguaje humanizado, cualquier lectura que lleve a la correcta interpretaci\u00f3n de la instrucci\u00f3n, es v\u00e1lida. Para que ello ocurra, no puede existir ambig\u00fcedad posible. Si la lectura puede interpretarse de dos o maneras diferentes, entonces ser\u00e1 inv\u00e1lida.\n\nRecordemos la sintaxis:\n\n``` title=\"Declaraci\u00f3n\"\n\nnombre_de_tipo_de_dato nombre_de_variable\n</code></pre></p> Asignaci\u00f3n<pre><code>nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> Inicializaci\u00f3n<pre><code>nombre_de_tipo_de_dato nombre_de_variable = expresi\u00f3n (asignaci\u00f3n_de_valor)\n</code></pre> <p>La estructura de la sintaxis depender\u00e1 de si la acci\u00f3n es una declaraci\u00f3n, una inicializaci\u00f3n o una asignaci\u00f3n.</p> <p>Tambi\u00e9n depender\u00e1 de como se escriba en cada lenguaje particular.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/variables/","title":"\u00bfQu\u00e9 son las variables?","text":""},{"location":"unidades/fundamentos-de-la-programacion/variables/variables/#introduccion","title":"Introducci\u00f3n","text":"<p>Las variables pueden ser consideradas como la base de la programaci\u00f3n.</p> <p>Son elementos fundamentales que permiten almacenar y manipular valores en la memoria RAM. </p> <p>Por lo tanto, son utilizadas para representar datos y estados que pueden cambiar durante la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/variables/#definicion","title":"Definici\u00f3n","text":"<p>Definici\u00f3n</p> <p>Una variable es un espacio de almacenamiento (direcci\u00f3n) reservado en la memoria (RAM) de una computadora, que tiene un nombre o identificador \u00fanico asociado dentro de su \u00e1mbito o alcance, y cuyo tama\u00f1o est\u00e1 definido por el tipo de dato asociados y que contiene un valor o una referencia a un valor.</p> <p>En programaci\u00f3n, las variables se utilizan para almacenar datos e informaci\u00f3n a los que se puede acceder, manipular y reemplazar durante la ejecuci\u00f3n de un programa. </p> <p>Por ejemplo, si est\u00e1s escribiendo un programa que pide al usuario que ingrese su edad, puedes crear una variable llamada edad que se utilizar\u00e1 para almacenar el valor ingresado por el usuario. </p> <p>Luego, podr\u00e1s realizar diferentes acciones en funci\u00f3n del valor almacenado en la variable edad.</p> <p>Dependiendo del lenguaje de programaci\u00f3n usado, tambi\u00e9n podr\u00e1s cambiar el tipo de dato que almacena. Estos valores que cambiar\u00e1n durante la ejecuci\u00f3n del programa servir\u00e1n para representar y manejar datos e informaci\u00f3n procesada.</p> <p>Por lo tanto, todo dato que vaya a ser introducido a la computadora, y todo dato que vaya a ser generado o calculado a partir de otros datos para obtener alg\u00fan resultado, debe identificarse y manejarse como variable. </p>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-alcance-de-variables/","title":"Ejercitacion alcance de variables","text":"<ol> <li> <p>Ejercicios de acceso a variables globales desde \u00e1mbitos locales:</p> <ol> <li> <p>Crear una funci\u00f3n que acceda a una variable global que inicialmente tiene almacenado el valor 10. Dentro de la funci\u00f3n imprimir el valor de la variable global.</p> Python<pre><code>var_global = 10\n\ndef acceso_global():\n    print(\"Variable global:\", var_global)\n\nacceso_global()\n</code></pre> Terminal (Entrada/Salida)<pre><code>Variable global: 10\n</code></pre> <p>En este ejercicio, la funci\u00f3n acceso_global() imprime el valor de la variable global var_global. No es necesario utilizar la palabra clave global dentro de la funci\u00f3n, ya que solo se accede a la variable global sin realizar modificaciones.</p> </li> <li> <p>Crear una funci\u00f3n que acceda a una variable global de valor 10. Dentro de la funci\u00f3n incrementar dicho valor en 5. imprimir el valor de la variable antes y despu\u00e9s de hacer la llamada a la funci\u00f3n.</p> Python<pre><code>var_global = 10\n\ndef modificar_global():\n    global var_global\n    var_global += 5\n\nprint(\"Variable global antes de la modificaci\u00f3n:\", var_global)\n\nmodificar_global()\n\nprint(\"Variable global despu\u00e9s de la modificaci\u00f3n:\", var_global)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Variable global antes de la modificaci\u00f3n: 10\nVariable global despu\u00e9s de la modificaci\u00f3n: 15\n</code></pre> <p>En este ejercicio, la funci\u00f3n modificar_global() modifica el valor de la variable global var_global al agregarle 5.  Se utiliza la palabra clave global dentro de la funci\u00f3n para indicar que se est\u00e1 accediendo a la variable global y no creando una variable local con el mismo nombre.</p> </li> <li> <p>Crear una variable global de valor 10. En una funci\u00f3n crear una variable local de igual nombre a la global pero de valor 15. Imprimir la variable antes, durante y despu\u00e9s de la llamada a la funci\u00f3n.</p> Python<pre><code>variable = 10\n\ndef imprimir_variable():\n    variable = 15\n    print(\u201dLa variable fuera de la funci\u00f3n vale:\u201d, variable)\n\nprint(\u201dLa variable fuera de la funci\u00f3n vale:\u201d, variable)\n\nimprimir_variable()\n\nprint(\u201dLa variable fuera de la funci\u00f3n vale:\u201d, variable)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La variable fuera de la funci\u00f3n vale: 10\nLa variable dentro de la funci\u00f3n vale: 15\nLa variable fuera de la funci\u00f3n vale: 10\n</code></pre> <p>En este ejercicio, la funci\u00f3n imprimir_variable() inicializa una variable local de valor 15 y luego imprime su contenido. N\u00f3tese que antes y despu\u00e9s de ello, por fuera de la funci\u00f3n, tambi\u00e9n se imprime el valor de la variable creada globalmente. Pero, </p> <p>Hay que preguntarse...</p> <p>\u00bfPor qu\u00e9 tienen diferentes valores?</p> <p>\u00bfPor qu\u00e9 no se modific\u00f3 el valor dentro de la funci\u00f3n?</p> <p>\u00bfEs la misma variable?</p> <p>\u00bfQu\u00e9 ocurre con la variable creada dentro de la funci\u00f3n?</p> </li> </ol> </li> </ol>"},{"location":"unidades/fundamentos-de-la-programacion/variables/ejercitacion/ejercitacion-introductoria-de-variables/","title":"Variables: ejercitaci\u00f3n general","text":"<p>Estos ejercicios deber\u00edan ayudarte a familiarizarte con la implementaci\u00f3n, acceso y manipulaci\u00f3n de variables en la programaci\u00f3n. \u00a1Buena suerte!</p> <ol> <li> <p>Ejercicio de instrucciones que asignan valores a variables:</p> <ol> <li> <p>\u00bfCu\u00e1l ser\u00e1 el valor que tomar\u00e1 la variable c tras la ejecuci\u00f3n de las siguientes instrucciones?</p> <pre><code>int a = 12\nint b = a\nint c = b\n</code></pre> </li> <li> <p>\u00bfCu\u00e1l es el valor de la variable aux al ejecutarse la instrucci\u00f3n 5?</p> <pre><code>int a = 10\nint b = 20\nint aux = a\na = b\nb = aux\n</code></pre> </li> <li> <p>\u00bfCu\u00e1l es el valor de n = n + 5 si n tiene el valor actual de 2 antes de la ejecuci\u00f3n de esta instrucci\u00f3n? </p> <pre><code>n = n + 5\n</code></pre> </li> </ol> </li> <li> <p>Ejercicio de declaraci\u00f3n, de inicializaci\u00f3n y de asignaci\u00f3n de variables:</p> <ol> <li>Declara dos variables enteras (int) num1 y num2. Luego as\u00edgnales los valores 8 y 5 respectivamente.</li> <li>Declara e inicializa dos variables enteras con valores diferentes.</li> <li>Declara una variable de punto flotante (float). Luego as\u00edgnale el valor 3,14.</li> <li>Declara una variable de tipo cadena (string). Luego as\u00edgnale tu nombre.</li> <li>Declara e inicializa una variable de tipo cadena (string) con el mensaje \"Hola Mundo!\u201d.</li> <li>Declara una variable l\u00f3gica o booleana (bool) e inicial\u00edzala con el valor verdadero (true).</li> <li>Declara una variable de tipo caracter (char). Luego, as\u00edgnale la letra \"S\".</li> <li>Declara una variable que almacene la altura (en metros) de una persona.</li> <li>Declara la variable esEstudiante. Luego, as\u00edgnale un valor que indique que s\u00ed es estudiante.</li> <li>Declara e inicializa una variable para el valor \"rojo\".</li> <li>Declara e inicializa una variable que almacene el valor 456 referido a una parte de mi direcci\u00f3n.</li> <li>Declara una variable almacene tus a\u00f1os. Luego, As\u00edgnaselos.</li> </ol> </li> <li> <p>Ejercicio de operaciones aritm\u00e9ticas con variables:</p> <ol> <li>Declara las variables num1 y num2. Luego as\u00edgnales los valores 20 y 5. Luego, usa operadores aritm\u00e9ticos para sumar, restar, multiplicar y dividir las dos variables imprimiendo, en cada operaci\u00f3n, los resultados en la consola.</li> <li>Asigna el valor 10 a la variable n1 y el valor 3 a la variable n2.</li> <li>Calcula la suma de n1 y n2 y as\u00edgnalo a la variable suma.</li> <li>Calcula la resta de n1 y n2 y as\u00edgnalo a la variable resta.</li> <li>Calcula el producto de n1 y n2 y as\u00edgnalo a la variable producto.</li> <li>Calcula la divisi\u00f3n de n1 entre n2 y as\u00edgnalo a la variable division.</li> <li>Imprime los valores de las variables suma, resta, producto y division.</li> </ol> </li> <li> <p>Ejercicio de concatenaci\u00f3n de variables:</p> <ol> <li>Crea una variable llamada nombre y as\u00edgnale tu nombre.</li> <li>Crea una variable llamada apellido y as\u00edgnale tu apellido.</li> <li>Crea una variable llamada nombre_completo y concatena las variables nombre y apellido.</li> <li>Imprime el valor de la variable nombre_completo.</li> </ol> </li> <li> <p>Ejercicio de conversi\u00f3n de tipos de dato:</p> <ol> <li>Crea una variable llamada numero y as\u00edgnale el valor 10.</li> <li>Crea una variable llamada texto y as\u00edgnale el valor \"20\".</li> <li>Convierte la variable texto a un tipo de dato entero y as\u00edgnalo a la variable numero2.</li> <li>Calcula la suma de las variables numero y numero2 y as\u00edgnalo a la variable suma.</li> <li>Imprime el valor de la variable suma.</li> </ol> </li> <li> <p>Ejercicios generales:</p> <ol> <li>Inicializa una variable entera. Luego, actual\u00edzala con otro valor 3 unidades mayor.</li> <li>Inicializa una variable con tu estatura. Luego, cambia su valor a la mitad.</li> <li>Declara una variable llamada saludo y as\u00edgnale un valor de cadena que represente un saludo. Luego, concatena la variable con otra que contenga tu nombre, para crear un saludo personalizado e impr\u00edmelo en la consola.</li> <li>Declara una variable booleana. Luego, as\u00edgnale un valor de verdad. Luego, cambia su valor a partir del valor asignado previamente.</li> </ol> </li> </ol>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/","title":"Implementaci\u00f3n subyacente","text":""},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#introduccion","title":"Introducci\u00f3n","text":"<p>La implementaci\u00f3n subyacente se refiere a la forma en que se lleva a cabo o se realiza una determinada acci\u00f3n o proceso en un programa.</p> <p>Es la parte interna o detr\u00e1s de escena que permite que una funcionalidad o caracter\u00edstica se ejecute correctamente.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#definicion","title":"Definici\u00f3n","text":"subyacente<pre><code>Que subyace.\n</code></pre> subayer<pre><code>Yacer o estar debajo de algo.\nDicho de una cosa: Estar oculta tras otra.\n</code></pre> <p>En el contexto del desarrollo de software, la implementaci\u00f3n subyacente se refiere al c\u00f3digo fuente y la l\u00f3gica que se utiliza para construir una funcionalidad espec\u00edfica. </p> <p>Puede variar en diferentes aspectos de la programaci\u00f3n como algoritmos generales o espec\u00edficos como los de aprendizaje autom\u00e1tico, estructuras de datos, bibliotecas, o cualquier otro componente necesario para lograr el resultado deseado.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#como-se-puede-aplicar-la-implementacion-subyacente-en-un-programa","title":"\u00bfC\u00f3mo se puede aplicar la implementaci\u00f3n subyacente en un programa?","text":"<p>\u00bfC\u00f3mo la implementaci\u00f3n subyacente puede variar en diferentes aspectos de la programaci\u00f3n, como algoritmos, estructuras de datos, comunicaci\u00f3n en red y algoritmos de aprendizaje autom\u00e1tico?</p> <ol> <li>Implementaci\u00f3n subyacente de un algoritmo de ordenamiento:<ul> <li>Ordenamiento de burbuja: usa comparaciones y swaps repetidos para ordenar una lista de elementos.</li> <li>Ordenamiento por inserci\u00f3n: recorre una lista de elementos y los inserta en la posici\u00f3n correcta dentro de una sub lista ordenada.</li> </ul> </li> <li>Implementaci\u00f3n subyacente de una estructura de datos:<ul> <li>Lista enlazada: usa nodos enlazados para almacenar elementos en secuencia, donde cada nodo contiene un valor y una referencia al siguiente nodo.</li> <li>\u00c1rbol binario: usa nodos con referencias a un m\u00e1ximo de dos hijos para almacenar elementos jer\u00e1rquicamente.</li> </ul> </li> <li>Implementaci\u00f3n subyacente de un algoritmo de aprendizaje autom\u00e1tico e inteligencia artificial:<ul> <li>Regresi\u00f3n lineal: usa una combinaci\u00f3n lineal de caracter\u00edsticas para predecir una variable continua.</li> <li>\u00c1rbol de decisi\u00f3n: divide repetidamente el conjunto de datos en funci\u00f3n de caracter\u00edsticas para realizar predicciones basadas en reglas de decisi\u00f3n.</li> <li>Redes neuronales: c\u00f3mo se definen, conectan y actualizan las neuronas para realizar tareas de aprendizaje autom\u00e1tico y reconocimiento de patrones.</li> </ul> </li> <li>Implementaci\u00f3n subyacente de una funci\u00f3n criptogr\u00e1fica:<ul> <li>C\u00e1lculos matem\u00e1ticos: se refiere a c\u00f3mo se realizan los c\u00e1lculos matem\u00e1ticos necesarios para la encriptaci\u00f3n</li> </ul> </li> </ol> <p>No te preocupes por toda esta terminolog\u00eda. Es solo para que veas que la implementaci\u00f3n subyacente existe en todo programa, de las maneras m\u00e1s diversas. Ya iremos aprendiendo muchas de ellas a lo largo de la materia.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#ejemplos-de-implementacion-subyacente-con-funciones","title":"Ejemplos de implementaci\u00f3n subyacente con funciones","text":"<p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente en Python utilizando una funci\u00f3n para calcular la suma de dos n\u00fameros:</p> Python<pre><code>def suma(num_a, num_b):\n    return num_a + num_b\n\n# Ejemplo de uso\na = 5\nb = 10\nprint(\"La suma de\", a, \"y\", b, \"es:\", suma(a, b))\n</code></pre> <p>En este ejemplo, la funci\u00f3n suma() es la implementaci\u00f3n subyacente. Utiliza el operador + para sumar los valores de num_a y num_b. Luego retorna el resultado.</p> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>La suma de 5 y 10 es: 15\n</code></pre> <p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente en Python utilizando una funci\u00f3n para calcular el promedio de una lista de n\u00fameros:</p> <p>Python<pre><code>def calcular_promedio(datos):\n    suma = 0\n    cantidad = len(datos)\n    for num in datos:\n        suma += num\n    promedio = suma / cantidad\n    return promedio\n\n# Ejemplo de uso\nnumeros = [5, 10, 15, 20]\npromedio = calcular_promedio(numeros)\nprint(\"El promedio es:\", promedio)\n</code></pre> En este ejemplo, la funci\u00f3n calcular_promedio() es la implementaci\u00f3n subyacente. Toma una lista de n\u00fameros como entrada y utiliza un bucle para iterar sobre cada n\u00famero de la lista. Luego, acumula la suma de todos los n\u00fameros y divide esta suma por la cantidad de n\u00fameros para obtener el promedio.</p> <p>La implementaci\u00f3n subyacente tambi\u00e9n incluye la declaraci\u00f3n de variables, como suma para almacenar la suma parcial de los n\u00fameros y cantidad para contar cu\u00e1ntos n\u00fameros hay en la lista. Finalmente, se retorna el promedio calculado.</p> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>El promedio es: 12.5\n</code></pre> <p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente en Python de una funci\u00f3n recursiva de c\u00e1lculo factorial:</p> Python<pre><code>def factorial(n):\n    if n &lt;= 1: \n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Ejemplo de uso\nn = 6\nprint(\"El factorial de\", n, \"es:\", factorial(n))\n</code></pre> <p>En este ejemplo, la funci\u00f3n factorial() es la implementaci\u00f3n subyacente. Utiliza recursi\u00f3n para calcular el factorial de un n\u00famero n. Se multiplica n por el factorial del n\u00famero anterior (n - 1) hasta llegar a 1. Luego retorna el resultado.</p> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>El factorial de 6 es: 720\n</code></pre> <p>Estos son solo ejemplos b\u00e1sicos, pero muestra c\u00f3mo la implementaci\u00f3n subyacente se refiere al c\u00f3digo real y a la l\u00f3gica que se utiliza para llevar a cabo una tarea espec\u00edfica.</p>"},{"location":"unidades/implementacion-subyacente/introduccion-a-la-implementacion-subyacente/#ejemplos-de-implementacion-subyacente-y-abstraccion-para-la-representacion-y-estructuras-de-datos","title":"Ejemplos de implementaci\u00f3n subyacente y abstracci\u00f3n para la representaci\u00f3n y estructuras de datos","text":"<p>A partir de la implementaci\u00f3n subyacente y aplicando el concepto de abstracci\u00f3n se puede trabajar con la representaci\u00f3n y estructuras de datos, de manera abstracta y eficiente, definiendo tipos de dato personalizados que encapsulen los datos y las operaciones relacionadas con ellos, sin pensar en c\u00f3mo debe ser la l\u00f3gica de trabajo.</p> <p>Aqu\u00ed tienes un ejemplo de una estructura de datos abstracta, en este caso una pila, junto con su implementaci\u00f3n subyacente en Python.</p> <p>La clase Pila define una estructura de datos abstracta que representa una pila. La implementaci\u00f3n subyacente utiliza una lista (self.items) para almacenar los elementos de la pila. La clase proporciona m\u00e9todos para realizar operaciones en la pila, como apilar(), desapilar(), esta_vacia() y tamano().</p> <p>La implementaci\u00f3n subyacente utiliza la lista para agregar elementos al final de la pila (apilar()), eliminar elementos del final de la pila (desapilar()), verificar si la pila est\u00e1 vac\u00eda (esta_vacia()), y obtener el tama\u00f1o actual de la pila (tamano()).</p> Python<pre><code>class Pila:\n    def __init__(self):\n        self.items = []\n\n    def esta_vacia(self):\n        return len(self.items) == 0\n\n    def apilar(self, elemento):\n        self.items.append(elemento)\n\n    def desapilar(self):\n        if self.esta_vacia():\n            return None\n        return self.items.pop()\n\n    def tamano(self):\n        return len(self.items)\n\npila = Pila() # Ejemplo de uso\npila.apilar(1)\npila.apilar(2)\nprint(\"Tama\u00f1o de la pila:\", pila.tamano())\nelemento = pila.desapilar()\nprint(\"Elemento desapilado:\", elemento)\nprint(\"\u00bfLa pila est\u00e1 vac\u00eda?\", pila.esta_vacia())\n</code></pre> <p>Al ejecutar este c\u00f3digo, obtendr\u00e1s la salida:</p> <pre><code>Tama\u00f1o de la pila: 3\nElemento desapilado: 3\n\u00bfLa pila est\u00e1 vac\u00eda? False\n</code></pre> <p>La clase Pila proporciona una abstracci\u00f3n para trabajar con una pila, ocultando los detalles de implementaci\u00f3n subyacentes, como el uso de una lista para almacenar los elementos, permitiendo usar la pila de manera intuitiva y acceder a sus operaciones b\u00e1sicas sin preocuparse por la implementaci\u00f3n interna.</p> <p>Aqu\u00ed tienes un ejemplo de implementaci\u00f3n subyacente de un algoritmo de encriptaci\u00f3n en Python utilizando el cifrado de sustituci\u00f3n.</p> <p>La funci\u00f3n cifrado_sustitucion() toma un texto como entrada y utiliza un diccionario llamado clave que contiene pares de valores (caracter original, caracter encriptado). El algoritmo de encriptaci\u00f3n sustituye cada caracter del texto original por su correspondiente car\u00e1cter encriptado seg\u00fan la clave.</p> <p>La implementaci\u00f3n subyacente utiliza un bucle para iterar sobre cada caracter del texto. Si el caracter se encuentra en el diccionario clave, se agrega su valor encriptado al resultado. Si el caracter no est\u00e1 en el diccionario (como espacios, signos de puntuaci\u00f3n, etc.), se agrega directamente al resultado sin cambios.</p> Python<pre><code>def cifrado_sustitucion(texto):\n    clave = {\n        'a': 'x',\n        'b': 'y',\n        'c': 'z',\n        'd': 'a',\n        'e': 'b',\n        # Resto del alfabeto...\n    }\n\n    resultado = \"\"\n\n    for caracter in texto:\n        if caracter in clave:\n            resultado += clave[caracter]\n        else:\n            resultado += caracter\n\n    return resultado\n\n# Ejemplo de uso\ntexto_original = \"Hola, mundo!\"\ntexto_encriptado = cifrado_sustitucion(texto_original)\nprint(\"Texto encriptado:\", texto_encriptado)\n</code></pre> <p>En el ejemplo de uso, se encripta el texto original \"Hola, mundo!\" utilizando el cifrado de sustituci\u00f3n. El resultado encriptado se imprime en la consola:</p> <pre><code>Texto encriptado: Xyzb, pmtkp!\n</code></pre> <p>Es importante saber que este ejemplo de cifrado de sustituci\u00f3n tambi\u00e9n es muy simple y no se utiliza en aplicaciones reales de seguridad, por ser de muy baja confiabilidad y fortaleza contra ataques externos.</p>"},{"location":"unidades/implementacion-subyacente/resumen-sobre-implementacion-subyascente/","title":"Implementaci\u00f3n subyacente: resumen","text":""},{"location":"unidades/implementacion-subyacente/resumen-sobre-implementacion-subyascente/#resumen","title":"Resumen","text":"<p>En resumen, la implementaci\u00f3n subyacente se refiere a la parte pr\u00e1ctica y concreta que permite que algo funcione, en contraste con las descripciones te\u00f3ricas o conceptuales de una idea o proceso.</p> <p>En el contexto del desarrollo de software, la implementaci\u00f3n subyacente se refiere al c\u00f3digo fuente y la l\u00f3gica que se utiliza para construir una funcionalidad espec\u00edfica. </p> <p>Se refiere a la forma en que se lleva a cabo o se realiza una determinada acci\u00f3n o proceso en un programa.</p> <p>Es la parte interna o detr\u00e1s de escena que permite que una funcionalidad o caracter\u00edstica se ejecute correctamente.</p> <p>Puede variar en diferentes aspectos de la programaci\u00f3n como algoritmos generales o espec\u00edficos como los de aprendizaje autom\u00e1tico, estructuras de datos, bibliotecas, o cualquier otro componente necesario para lograr el resultado deseado.</p> <p>A partir de la implementaci\u00f3n subyacente y aplicando el concepto de abstracci\u00f3n se puede trabajar con la representaci\u00f3n y estructuras de datos, de manera abstracta y eficiente, definiendo tipos de dato personalizados que encapsulen los datos y las operaciones relacionadas con ellos, sin pensar en c\u00f3mo debe ser la l\u00f3gica de trabajo.</p>"},{"location":"unidades/introduccion-a-la-programacion/resumen-sobre-introduccion-a-la-programacion/","title":"Introducci\u00f3n a la programaci\u00f3n: resumen","text":""},{"location":"unidades/introduccion-a-la-programacion/resumen-sobre-introduccion-a-la-programacion/#que-es-la-programacion","title":"\u00bfQ\u00fae es la programaci\u00f3n?","text":"<p>A trav\u00e9s del estudio de la programaci\u00f3n, se adquieren conocimientos y habilidades que permiten a las personas crear software, aplicaciones y soluciones tecnol\u00f3gicas que pueden impactar en diferentes \u00e1reas de la sociedad moderna.</p> <p>La programaci\u00f3n es accesible: aunque puede parecer intimidante al principio, la programaci\u00f3n es una habilidad que puede ser aprendida por cualquier persona. Existen numerosos recursos, cursos en l\u00ednea y herramientas que facilitan el proceso de aprendizaje.</p> <p>Pensamiento l\u00f3gico y resoluci\u00f3n de problemas: la programaci\u00f3n fomenta el desarrollo del pensamiento l\u00f3gico y la capacidad de resolver problemas de manera estructurada. Estas habilidades son \u00fatiles no solo en el campo de la programaci\u00f3n, sino tambi\u00e9n en otras \u00e1reas de la vida.</p> <p>Creatividad y capacidad de innovaci\u00f3n: la programaci\u00f3n permite materializar ideas y convertirlas en soluciones concretas. A medida que se adquieren m\u00e1s conocimientos y experiencia en programaci\u00f3n, se desarrolla la capacidad de crear aplicaciones y programas innovadores que pueden resolver problemas o satisfacer necesidades espec\u00edficas.</p> <p>Colaboraci\u00f3n y trabajo en equipo: la programaci\u00f3n no es un esfuerzo individual. En proyectos m\u00e1s grandes, es com\u00fan trabajar en equipo colaborativamente, donde diferentes programadores contribuyen con sus habilidades y conocimientos. La colaboraci\u00f3n y la capacidad de trabajar en equipo son habilidades cruciales en el mundo laboral actual.</p> <p>Error y aprendizaje continuo: la programaci\u00f3n implica experimentar y enfrentarse a errores. Es importante entender que cometer errores es parte del proceso de aprendizaje. Los programadores aprenden a depurar y solucionar problemas, lo que les permite crecer y mejorar constantemente.</p> <p>Aplicabilidad en diversas disciplinas: la programaci\u00f3n no se limita a un solo campo de estudio o trabajo.  Es una habilidad transversal que se aplica en diferentes \u00e1reas como ingenier\u00eda, dise\u00f1o, medicina, ciencia,  finanzas, entre otros. El conocimiento de programaci\u00f3n abre puertas a diversas oportunidades laborales.</p> <p>Â¡Para recordar!</p> <p>la introducci\u00f3n a la programaci\u00f3n es una experiencia enriquecedora que desarrolla habilidades fundamentales para el siglo XXI, la era digital en la que vivimos. Adem\u00e1s de permitir la creaci\u00f3n de software y aplicaciones, fomenta el pensamiento l\u00f3gico, la resoluci\u00f3n de problemas, la creatividad y la colaboraci\u00f3n. </p> <p>Aprender a programar puede abrir un mundo de posibilidades y contribuir al desarrollo personal y profesional</p>"},{"location":"unidades/introduccion-a-la-programacion/conceptos-basicos-de-la-programacion/comenzando-a-programar/","title":"Comenzando a programar","text":""},{"location":"unidades/introduccion-a-la-programacion/conceptos-basicos-de-la-programacion/comenzando-a-programar/#introduccion","title":"Introducci\u00f3n","text":"<p>Los conceptos b\u00e1sicos de la programaci\u00f3n son fundamentales para que, con los recursos y la dedicaci\u00f3n adecuados, cualquier persona que quiera pueda aprender a programar.</p> <p>Esta es una habilidad valiosa y gratificante.</p>"},{"location":"unidades/introduccion-a-la-programacion/conceptos-basicos-de-la-programacion/comenzando-a-programar/#comenzando-a-programar","title":"Comenzando a programar","text":"<p>Info</p> <p>Para aprender a programar, es importante tener una comprensi\u00f3n s\u00f3lida de los conceptos b\u00e1sicos de cualquier lenguaje de programaci\u00f3n que incluyen variables, tipos y estructuras de datos, estructuras de control, funciones, clases y objetos.</p> <p>Estos conceptos se utilizan para crear algoritmos, empleando la l\u00f3gica de programaci\u00f3n y respetando la sintaxis particular de cada lenguaje, que permiten problemas complejos y automatizar tareas de manera eficiente.</p> <p>Como se ha dicho, los lenguajes de programaci\u00f3n m\u00e1s populares son Java, Python, JavaScript, Ruby, C++ y C#. </p> <p>Una vez que haya elegido uno, se puede comenzar a aprender a escribir c\u00f3digo y crear programas. </p> <p>\u00a1Â¡Para recordar!!</p> <p>Aprender a programar puede ser un desaf\u00edo, pero tambi\u00e9n puede ser gratificante. Puede ayudarlo a desarrollar habilidades de pensamiento cr\u00edtico, mejorar sus habilidades para resolver problemas e incluso impulsar sus perspectivas profesionales. </p> <p>Adem\u00e1s, es \u00fatil tener una experiencia pr\u00e1ctica en la creaci\u00f3n de programas, ya que la programaci\u00f3n es una habilidad pr\u00e1ctica que se desarrolla a trav\u00e9s de la pr\u00e1ctica y la experiencia.</p> <p>Por lo tanto, con los recursos y la dedicaci\u00f3n adecuados, cualquiera puede aprender a programar.</p>"},{"location":"unidades/introduccion-a-la-programacion/conceptos-basicos-de-la-programacion/conceptos-fundamentales-de-la-programacion/","title":"Conceptos fundamentales de la programaci\u00f3n","text":""},{"location":"unidades/introduccion-a-la-programacion/conceptos-basicos-de-la-programacion/conceptos-fundamentales-de-la-programacion/#teoria-de-los-lenguajes","title":"Teor\u00eda de los lenguajes","text":"<p>La teor\u00eda de los lenguajes de programaci\u00f3n es un campo de estudio que se ocupa de comprender los lenguajes de programaci\u00f3n desde una perspectiva te\u00f3rica. Se centra en el dise\u00f1o, la implementaci\u00f3n, la sem\u00e1ntica y el an\u00e1lisis de los lenguajes de programaci\u00f3n.</p> <p>Antes de sumergirte en los algoritmos, es importante tener una comprensi\u00f3n b\u00e1sica de la programaci\u00f3n. </p> <p>Aprender un lenguaje de programaci\u00f3n como Python o Java te ayudar\u00e1 a entender los conceptos fundamentales.</p> <p>Los conceptos b\u00e1sicos de programaci\u00f3n son fundamentales para cualquier persona que quiera aprender a programar. Aqu\u00ed enumeramos algunos conceptos b\u00e1sicos que todo programador debe conocer:</p> <ol> <li> <p>Lenguajes de programaci\u00f3n: son idiomas que se utilizan para comunicar instrucciones a un ordenador. Hay muchos lenguajes de programaci\u00f3n diferentes, como Python, Java, JavaScript, C++, Ruby, PHP, entre otros.</p> </li> <li> <p>Sintaxis: se refiere a las reglas gramaticales de un lenguaje de programaci\u00f3n que permiten construir programas v\u00e1lidos en ese lenguaje. Es importante aprender la sintaxis del lenguaje de programaci\u00f3n que se est\u00e1 utilizando para que el software pueda compilar correctamente. Esto incluye la estructura y la forma en que se escriben las instrucciones, las expresiones y otros elementos del c\u00f3digo.</p> </li> <li> <p>Sem\u00e1ntica: la sem\u00e1ntica se refiere al significado de los programas escritos en un lenguaje de programaci\u00f3n. Esto incluye c\u00f3mo se interpretan y ejecutan las instrucciones y c\u00f3mo se manipulan los datos.</p> </li> <li> <p>Compiladores e int\u00e9rpretes: son herramientas (sistemas de traducci\u00f3n), utilizadas para traducir el c\u00f3digo fuente escrito en un lenguaje de programaci\u00f3n a instrucciones ejecutables por la computadora. </p> </li> <li> <p>Gram\u00e1ticas y aut\u00f3matas: Las gram\u00e1ticas formales y los aut\u00f3matas son herramientas utilizadas para describir la sintaxis de los lenguajes de programaci\u00f3n. Las gram\u00e1ticas formales, como las gram\u00e1ticas libres de contexto, se utilizan para especificar las reglas de construcci\u00f3n de las expresiones y declaraciones en un lenguaje. Los aut\u00f3matas, como los aut\u00f3matas finitos o las expresiones regulares, se utilizan para reconocer y analizar la estructura de los programas.</p> </li> <li> <p>An\u00e1lisis l\u00e9xico y an\u00e1lisis sint\u00e1ctico: El an\u00e1lisis l\u00e9xico y el an\u00e1lisis sint\u00e1ctico son etapas importantes en el proceso de traducci\u00f3n de un programa. El an\u00e1lisis l\u00e9xico se encarga de dividir el c\u00f3digo fuente en unidades l\u00e9xicas, como identificadores, palabras clave y operadores. El an\u00e1lisis sint\u00e1ctico se encarga de analizar la estructura del c\u00f3digo fuente seg\u00fan las reglas de la gram\u00e1tica del lenguaje.</p> </li> <li> <p>Sem\u00e1ntica operacional y denotacional: La sem\u00e1ntica operacional describe c\u00f3mo se ejecuta un programa paso a paso, mientras que la sem\u00e1ntica denotacional describe el significado de un programa en t\u00e9rminos de funciones matem\u00e1ticas. Estas formas de sem\u00e1ntica son utilizadas para razonar sobre el comportamiento de los programas y para estudiar propiedades como la correcci\u00f3n y la eficiencia.</p> </li> <li> <p>Algoritmos: los algoritmos son conjuntos de instrucciones que se utilizan para resolver un problema espec\u00edfico. Los algoritmos son una parte importante de la programaci\u00f3n, ya que se utilizan para dise\u00f1ar soluciones, eficientes y escalables, de un problema. Al algoritmo se lo conoce como programa.</p> </li> <li> <p>Instrucciones: son comandos que le dicen a la computadora qu\u00e9 hacer. Pueden ser operaciones matem\u00e1ticas, estructuras de control de flujo (como bucles y condicionales) o llamadas a funciones.</p> </li> <li> <p>Variables: son espacios de memoria reservados para almacenar valores. Es decir, cada variable es un contenedor que almacenar\u00e1 un valor (puede ser un n\u00famero, cadena de texto, valor booleano u otro tipo de dato) que podr\u00e1 ser accedido, manipulado y modificado m\u00e1s adelante durante la ejecuci\u00f3n del programa.</p> </li> <li> <p>Estructuras de datos: las estructuras de datos son formas de organizar y almacenar datos en un programa. Algunas estructuras de datos comunes incluyen arrays, listas, colas, pilas y \u00e1rboles.</p> </li> <li> <p>tipos de dato: los tipos de dato son los diferentes tipos de valores que se pueden almacenar en una variable. Los lenguajes de programaci\u00f3n tienen sistemas de tipos de dato que los permiten clasificar en categor\u00edas como ser enteros, flotantes, cadenas de caracteres y booleanos. La teor\u00eda de los tipos de dato se ocupa de estudiar las propiedades y las reglas de cada uno de estos sistemas. </p> </li> <li> <p>Operadores: los operadores se utilizan para realizar operaciones en valores y variables. Algunos ejemplos de operadores incluyen operadores matem\u00e1ticos como suma y resta, operadores de comparaci\u00f3n como igualdad y desigualdad, y operadores l\u00f3gicos como AND y OR.</p> </li> <li> <p>Estructuras de control de flujo: las estructuras de control de flujo son sentencias utilizadas para controlar el flujo de ejecuci\u00f3n de un programa. Algunas estructuras de control comunes incluyen las sentencias condicionales if-else y los bucles for y while.</p> </li> <li> <p>Procedimientos o subrutinas: son bloques de c\u00f3digo reutilizables que realizan una tarea espec\u00edfica a partir de ser llamados desde otros bloques del programa. Pueden aceptar argumentos y realizar c\u00e1lculos. Ayudan a organizar el c\u00f3digo y a hacerlo m\u00e1s f\u00e1cil de entender y mantener.</p> </li> <li> <p>Funciones: son bloques de c\u00f3digo con las mismas caracter\u00edsticas y funcionalidades de los procedimientos pero que, adem\u00e1s, devuelven un resultado al bloque del programa que las haya llamado. </p> </li> <li> <p>Comentarios: Los comentarios son texto descriptivo que se utiliza para explicar el c\u00f3digo y hacerlo m\u00e1s legible para los programadores. Los comentarios no se ejecutan y son ignorados por la computadora.</p> </li> <li> <p>Clases: una clase es una estructura que se utiliza para definir objetos. Act\u00faa como un plano o una plantilla para crear objetos espec\u00edficos con caracter\u00edsticas y comportamientos comunes. Las clases definen su comportamiento a partir de los m\u00e9todos, la herencia y el polimorfismo.</p> </li> <li> <p>Objetos: Los objetos son instancias de una clase, y se utilizan para modelar entidades del mundo real en un programa. Los objetos contienen propiedades y m\u00e9todos que se utilizan para interactuar con ellos.</p> </li> <li> <p>M\u00e9todos: los m\u00e9todos son funciones que se definen en una clase y se utilizan para realizar acciones en los objetos de esa clase.</p> </li> </ol> <p>Estos son algunos de los muchos conceptos de programaci\u00f3n que cualquier principiante debe conocer. </p> <p>Una vez que comprendas estos conceptos y a medida que contin\u00faes aprendiendo y practicando, seguir\u00e1s descubriendo nuevos conceptos y t\u00e9cnicas que te ayudar\u00e1n a mejorar tus habilidades como programador. </p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/el-mejor-camino-para-aprender-a-programar/","title":"El mejor camino para aprender a programar","text":""},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/el-mejor-camino-para-aprender-a-programar/#cual-es-el-mejor-camino-para-aprender-a-programar","title":"\u00bfCu\u00e1l es el mejor camino para aprender a programar?","text":"<p>Aprender a programar puede ser una tarea desafiante, pero hay varios caminos que puedes tomar para que el proceso sea m\u00e1s fluido. Aqu\u00ed hay algunos pasos que se deben seguir para aprender a programar:</p> <ol> <li> <p>Elige un lenguaje de programaci\u00f3n: comienza seleccionando un lenguaje de programaci\u00f3n para aprender. Algunos lenguajes de programaci\u00f3n populares incluyen Java, Python, JavaScript, Ruby, C++ y C#. Cada idioma tiene sus propias fortalezas y debilidades, as\u00ed que elige el idioma que mejor se adapte a tus intereses y objetivos.</p> </li> <li> <p>Configura tu entorno de desarrollo: una vez que hayas elegido un lenguaje, configura tu entorno de desarrollo. Esto implica instalar el compilador o int\u00e9rprete correspondiente y un editor de texto o un entorno de desarrollo integrado (IDE) para escribir tu c\u00f3digo. Muchos lenguajes tienen herramientas y entornos espec\u00edficos para facilitar el desarrollo.</p> </li> <li> <p>Aprende la sintaxis de los conceptos b\u00e1sicos: familiar\u00edzate con la sintaxis b\u00e1sica del lenguaje de programaci\u00f3n que has elegido. Esto incluye aprender c\u00f3mo se definen las variables, las estructuras de control de flujo (como bucles y condicionales), c\u00f3mo se definen las funciones y c\u00f3mo se realiza la entrada y salida de datos. Puedes encontrar una variedad de recursos en l\u00ednea que pueden ayudarte a aprender.</p> </li> <li> <p>Practica la codificaci\u00f3n con ejemplos simples: la mejor manera de aprender a programar es practicando la codificaci\u00f3n. Comienza a escribir programas simples para poner en pr\u00e1ctica lo que has aprendido, probar tu conocimiento y desarrollar tus habilidades. Esto te ayudar\u00e1 a comprender mejor los conceptos y la sintaxis del lenguaje. Puedes comenzar con ejercicios b\u00e1sicos como imprimir \"Hola, mundo\", realizar operaciones matem\u00e1ticas simples o trabajar con estructuras de datos simples como listas o matrices. </p> </li> <li> <p>Aprende sobre estructuras de datos y algoritmos: para desarrollar habilidades s\u00f3lidas de programaci\u00f3n, es importante comprender las estructuras de datos y los algoritmos comunes. Estos son fundamentales para la resoluci\u00f3n eficiente de problemas y el desarrollo de aplicaciones robustas. Aprende sobre conceptos como arrays, listas enlazadas, pilas, colas, \u00e1rboles, algoritmos de b\u00fasqueda y ordenamiento, entre otros.</p> </li> <li> <p>Explora bibliotecas y frameworks: muchos lenguajes de programaci\u00f3n tienen bibliotecas y frameworks disponibles que proporcionan funcionalidades predefinidas para tareas espec\u00edficas. Investiga y familiar\u00edzate con las bibliotecas populares en tu lenguaje de elecci\u00f3n. Estas bibliotecas pueden facilitar tareas como el manejo de bases de datos, la creaci\u00f3n de interfaces gr\u00e1ficas de usuario, el procesamiento de im\u00e1genes, entre otras.</p> </li> <li> <p>\u00danete a una comunidad: unirse a una comunidad en l\u00ednea de programadores puede ser una excelente manera de aprender de otros y obtener comentarios sobre tu c\u00f3digo. Puedes encontrar comunidades de programaci\u00f3n en sitios como Reddit, GitHub y Stack Overflow.</p> </li> <li> <p>Participa en proyectos o crea los tuyos propios: una excelente manera de mejorar tus habilidades es participar en proyectos de diversa \u00edndole. O crea los tuyos prpios. Esto te brindar\u00e1 la oportunidad de trabajar en proyectos pr\u00e1cticos, colaborar con otros programadores y aprender de su experiencia. Es una gran manera de aplicar lo que has aprendido y mejorar tus habilidades. Comienza con proyectos peque\u00f1os y avanza hacia proyectos m\u00e1s complejos.</p> </li> <li> <p>Contin\u00faa aprendiendo: la programaci\u00f3n es un campo en constante evoluci\u00f3n, por lo que es importante seguir aprendiendo y mantenerse actualizado con las \u00faltimas tendencias y tecnolog\u00edas. Lee libros, asiste a conferencias y toma cursos para continuar desarrollando tus habilidades. </p> </li> </ol> <p>\u00a1Â¡Para recordar!!</p> <p>Aprender a programar es un proceso de aprendizaje continuo que requiere tiempo y pr\u00e1ctica. </p> <p>Amplica adquirir una serie de conocimientos progresivos. </p> <p>A medida que adquieras m\u00e1s experiencia, podr\u00e1s enfrentar desaf\u00edos m\u00e1s complejos y ampliar tus conocimientos en \u00e1reas espec\u00edficas de inter\u00e9s.</p> <p>ANo tengas miedo de experimentar y aprender! \u00a1Y no te desanimes si encuentras desaf\u00edos complicados y obst\u00e1culos en el camino!</p> <p>Con persistencia y dedicaci\u00f3n, puedes convertirte en un programador exitoso.</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/el-mejor-camino-para-aprender-a-programar/#camino-de-aprendizaje-propuesto","title":"Camino de aprendizaje propuesto","text":"<p>Aqu\u00ed tienes un temario exhaustivo para un curso de programaci\u00f3n. Este temario cubre los conceptos fundamentales y las habilidades necesarias para convertirse en un programador competente. </p> <p>Puedes adaptarlo seg\u00fan tus necesidades y nivel de experiencia.</p> <ol> <li> <p>Introducci\u00f3n a la programaci\u00f3n</p> <ul> <li>\u00bfQu\u00e9 es la programaci\u00f3n?</li> <li>Historia de la programaci\u00f3n</li> <li>Lenguajes de programaci\u00f3n</li> </ul> </li> <li> <p>Algoritmos</p> <ul> <li>Conceptos b\u00e1sicos de algoritmos</li> <li>Algoritmos de b\u00fasqueda y ordenamiento</li> </ul> </li> <li> <p>Variables y tipos de dato</p> <ul> <li>Variables</li> <li>tipos de dato</li> <li>Operadores</li> </ul> </li> <li> <p>Estructuras de control de flujo</p> <ul> <li>If/else</li> <li>Bucles (for, while)</li> <li>Switch/case</li> </ul> </li> <li> <p>Funciones</p> <ul> <li>Declaraci\u00f3n de funciones</li> <li>Par\u00e1metros</li> <li>Retorno de valores</li> <li>Recursividad</li> </ul> </li> <li> <p>Estructuras de datos</p> <ul> <li>Tipos de estructuras de datos (listas, colas, pilas, \u00e1rboles)</li> <li>Operaciones con estructuras de datos</li> </ul> </li> <li> <p>Arrays</p> <ul> <li>Definici\u00f3n de arrays</li> <li>Operaciones con arrays (inserci\u00f3n, eliminaci\u00f3n, b\u00fasqueda, ordenamiento)</li> </ul> </li> <li> <p>Programaci\u00f3n funcional</p> <ul> <li>Funciones de orden superior</li> <li>Cierres</li> <li>Inmutabilidad</li> </ul> </li> <li> <p>Objetos y clases</p> <ul> <li>Definici\u00f3n de objetos y clases</li> <li>Propiedades y m\u00e9todos</li> <li>Herencia y polimorfismo</li> </ul> </li> <li> <p>Excepciones</p> <ul> <li>Manejo de excepciones</li> <li>Creaci\u00f3n de excepciones personalizadas</li> </ul> </li> <li> <p>Programaci\u00f3n orientada a objetos</p> <ul> <li>Encapsulamiento</li> <li>Abstracci\u00f3n</li> <li>Herencia</li> <li>Polimorfismo</li> </ul> </li> <li> <p>Programaci\u00f3n de bases de datos</p> <ul> <li>Conceptos b\u00e1sicos de bases de datos</li> <li>Lenguajes de consulta (SQL)</li> </ul> </li> <li> <p>Programaci\u00f3n de redes</p> <ul> <li>Conceptos b\u00e1sicos de redes</li> <li>Protocolos de red</li> <li>Comunicaci\u00f3n cliente-servidor</li> </ul> </li> <li> <p>Desarrollo de software</p> <ul> <li>Ciclo de vida del software</li> <li>Pruebas de software</li> <li>Control de versiones</li> </ul> </li> <li> <p>Introducci\u00f3n a la programaci\u00f3n web</p> <ul> <li>HTML</li> <li>CSS</li> <li>JavaScript</li> <li>Servidores web</li> </ul> </li> <li> <p>Desarrollo m\u00f3vil</p> <ul> <li>Plataformas m\u00f3viles</li> <li>Desarrollo nativo vs.  desarrollo h\u00edbrido</li> <li>Frameworks de desarrollo m\u00f3vil</li> </ul> </li> </ol> <p>Este es uno de los caminos de aprendizaje sugeridos, que cubre los conceptos fundamentales m\u00e1s importantes de la l\u00f3gica de programaci\u00f3n, proporcion\u00e1ndote una base s\u00f3lida para desarrollar habilidades en la creaci\u00f3n de algoritmos y resoluci\u00f3n de problemas. </p> <p>A medida que contin\u00faes aprendiendo y profundicemos en cada tema, explorando ejemplos pr\u00e1cticos para afianzar tus conocimientos, te dar\u00e1s cuenta de que hay muchos otros temas relacionados con la programaci\u00f3n que tambi\u00e9n son importantes. Pero con estos temas, tendr\u00e1s una preparaci\u00f3n excelente para seguir avanzando en el mundo de la programaci\u00f3n.</p> <p>Info</p> <p>Â¡Para recordar! que este temario es bastante extenso y puedes ajustarlo seg\u00fan la duraci\u00f3n y el enfoque del curso. </p> <p>Tambi\u00e9n puedes agregar ejercicios pr\u00e1cticos y proyectos para reforzar los conceptos te\u00f3ricos. </p> <p>\u00a1Buena suerte en tu curso de programaci\u00f3n!</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/introduccion-a-la-programacion/","title":"\u00bfQu\u00e9 es la programaci\u00f3n?","text":"<p>Rev. 23/01/2024</p> <p>Definici\u00f3n de programaci\u00f3n</p> <p>La programaci\u00f3n es el proceso de dise\u00f1ar e implementar un conjunto de instrucciones que las computadoras pueden seguir para realizar una tarea o resolver un problema.</p> <p>La programaci\u00f3n puede ser utilizada para resolver problemas, crear software y aplicaciones, procesar datos, y mucho m\u00e1s.</p> <p>De hecho, la programaci\u00f3n se utiliza en una amplia variedad de campos e industrias, incluyendo desde el desarrollo de software, la ciencia de datos, la inteligencia artificial hasta la ingenier\u00eda general y aplicada, las ciencias, la medicina, las finanzas, el entretenimiento y m\u00e1s.</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/introduccion-a-la-programacion/#que-es-programar","title":"\u00bfQu\u00e9 es programar?","text":"<p>Definici\u00f3n</p> <p>Programar es el proceso de crear un conjunto de instrucciones denominado software que le dicen a una computadora c\u00f3mo realizar una tarea.  Esto se hace utilizando lenguajes de programaci\u00f3n, que tienen su propia sintaxis y reglas.</p> <p>Programar es una habilidad fundamental en el campo de la inform\u00e1tica y la tecnolog\u00eda de la informaci\u00f3n.</p> <p>Puede ayudarte a desarrollar habilidades de pensamiento cr\u00edtico y a mejorar tus habilidades para resolver problemas.</p> <p>Aprender a programar puede ser un desaf\u00edo, pero tambi\u00e9n resultar\u00e1 muy gratificante.</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/introduccion-a-la-programacion/#el-arte-de-programar","title":"El arte de programar","text":"<p>El arte de programar se refiere a la habilidad de no solo escribir c\u00f3digo, sino tambi\u00e9n de dise\u00f1ar soluciones eficientes y efectivas a problemas complejos. Es una combinaci\u00f3n de pensamiento l\u00f3gico, creatividad y conocimiento t\u00e9cnico.</p> <p>Programar es una habilidad esencial en la era digital moderna y tiene una gran demanda, ya que es fundamental para el desarrollo de la tecnolog\u00eda moderna. Ha revolucionado la forma en que vivimos, trabajamos, nos divertimos y nos comunicamos.</p> <p>Aplicaciones de escritorio, aplicaciones m\u00f3viles, sitios web, sistemas operativos, juegos, bases de datos y otros tipos de aplicaciones y herramientas digitales que usamos en nuestra vida diaria son ejemplos pr\u00e1cticos de programas desarrollados mediante el uso de diversos lenguajes de programaci\u00f3n.</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/introduccion-a-la-programacion/#la-tarea-del-programador","title":"La tarea del programador","text":"<p>La tarea principal del programador</p> <p>La tarea principal del programador es la de resolver problemas. \u00bfY c\u00f3mo lo hace? Entre tantos procesos, pues claro: programando.</p> <p>Los lenguajes de programaci\u00f3n m\u00e1s populares son Python, JavaScript, Ruby, Java, C++ y C# y PHP entre otros. Estos lenguajes se utilizan para escribir el c\u00f3digo que le dice a una computadora lo que debe hacer.</p> <p>Elige uno, o varios y \u00a1comienza tu aventura! Nosotros abordaremos el viaje de descubrimiento con Python. Y seguramente incluiremos algo m\u00e1s por el camino.</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/introduccion-a-la-programacion/#que-es-un-programa","title":"\u00bfQu\u00e9 es un programa?","text":"<p>!!! success \"Â¡Para recordar!\" Un programa es una secuencia de instrucciones escritas en un lenguaje de programaci\u00f3n que controla el comportamiento de una computadora o de otro dispositivo electr\u00f3nico.</p> <p>Un programa es una secuencia finita de instrucciones escritas en un lenguaje de programaci\u00f3n que controla el comportamiento de una computadora o de otro dispositivo electr\u00f3nico.</p> <p>Estas instrucciones son ejecutadas por la computadora para realizar una tarea espec\u00edfica.</p> <p>Â¡Para recordar!</p> <p>Un programa puede ser algo tan simple como un script que muestra \"Hola Mundo\" en la pantalla, o tan complejo como un sistema operativo completo.</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/paradigmas/","title":"Paradigmas de la programaci\u00f3n","text":""},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/paradigmas/#que-es-un-paradigma","title":"\u00bfQu\u00e9 es un paradigma?","text":"<p>Definici\u00f3n</p> <p>Un paradigma de programaci\u00f3n es una manera o estilo de programaci\u00f3n de software. </p> <p>Se trata de un modelo formado por un conjunto de m\u00e9todos sistem\u00e1ticos aplicables en todos los niveles del dise\u00f1o de programas para resolver problemas computacionales. </p> <p>Existen varios paradigmas de programaci\u00f3n que se utilizan para desarrollar software. Cada paradigma proporciona un enfoque particular para resolver problemas y organizar el c\u00f3digo del programa. </p> <p>A continuaci\u00f3n, se presentan algunos de los paradigmas de programaci\u00f3n m\u00e1s comunes:</p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/paradigmas/#paradigma-imperativo","title":"Paradigma imperativo","text":"<p>Este es uno de los paradigmas m\u00e1s antiguos y ampliamente utilizados. Los programas consisten en una sucesi\u00f3n de instrucciones detalladas y concretas sobre c\u00f3mo se deben ejecutar las tareas. </p> <p>Los lenguajes de programaci\u00f3n imperativos suelen utilizar variables, asignaciones, bucles y estructuras condicionales para controlar el flujo de ejecuci\u00f3n. As\u00ed, el desarrollador describe en el c\u00f3digo, paso por paso, todo lo que har\u00e1 su programa.</p> <p>Algunos lenguajes basados en el paradigma imperativo son Pascal, COBOL, FORTRAN, C y C++ Otros enfoques subordinados al paradigma de programaci\u00f3n imperativa son:</p> <ul> <li> <p>Programaci\u00f3n estructurada: es un tipo de programaci\u00f3n imperativa donde el control de flujo se define mediante bucles anidados, condicionales y subrutinas, en lugar de a trav\u00e9s de GOTO; y se enfoca en la organizaci\u00f3n del c\u00f3digo en estructuras l\u00f3gicas claras. Este paradigma busca mejorar la legibilidad y mantenibilidad del c\u00f3digo.</p> </li> <li> <p>Programaci\u00f3n procedimental: consiste en basarse en un n\u00famero muy bajo de expresiones repetidas, englobarlas todas en un procedimiento o funci\u00f3n y llamarlo cada vez que tenga que ejecutarse.</p> </li> <li> <p>Programaci\u00f3n modular: consiste en dividir un programa en m\u00f3dulos o subprogramas con el fin de hacerlo m\u00e1s manejable y legible. Se trata de una evoluci\u00f3n de la programaci\u00f3n estructurada para resolver problemas de programaci\u00f3n m\u00e1s complejos.</p> </li> </ul>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/paradigmas/#paradigma-declarativo","title":"Paradigma declarativo","text":"<p>Este paradigma no necesita definir algoritmos puesto que describe el problema en lugar de encontrar una soluci\u00f3n al mismo. Este paradigma utiliza el principio del razonamiento l\u00f3gico para responder a las preguntas o cuestiones consultadas.</p> <p>Este paradigma a su vez se divide en dos:</p> <ul> <li> <p>Programaci\u00f3n L\u00f3gica: se basa en la l\u00f3gica formal y en la resoluci\u00f3n de problemas mediante la deducci\u00f3n l\u00f3gica. Los programas l\u00f3gicos est\u00e1n compuestos por reglas y hechos, y se utiliza la inferencia l\u00f3gica para derivar conclusiones. El lenguaje de programaci\u00f3n Prolog es uno de los m\u00e1s conocidos.</p> </li> <li> <p>Programaci\u00f3n funcional: el \u00e9nfasis de la programaci\u00f3n funcional est\u00e1 en la evaluaci\u00f3n de expresiones y en la aplicaci\u00f3n de funciones matem\u00e1ticas. Se basa en el concepto de funciones puras, que no tienen efectos secundarios y siempre producen el mismo resultado para los mismos datos de entrada. La programaci\u00f3n funcional evita el uso de estados mutables y bucles, y se enfoca en la inmutabilidad de los datos. Los lenguajes de programaci\u00f3n Lisp, Scala, Java, Kotlin son los m\u00e1s conocidos.</p> </li> </ul>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/paradigmas/#ejemplo-de-paradigma-imperativo-vs-paradigma-declarativo","title":"Ejemplo de paradigma imperativo vs. paradigma declarativo","text":"<p>Como dijimos, el paradigma imperativo consiste en explicar muy bien c\u00f3mo funciona un algoritmo. Las instrucciones de nuestro programa deben ser bastante expl\u00edcitas. El \"c\u00f3mo\" se realiza cada paso del algoritmo debe ser muy claro.</p> <p>Por ejemplo, si queremos crear imperativamente una lista de n\u00fameros del 1 al 10, podemos declarar una lista vac\u00eda y una variable contadora y, luego, agregar el valor de la variable contadora como un elemento m\u00e1s a la lista en cada repetici\u00f3n de una estructura iterativa (c\u00edclica), mientras se va incrementando de uno en uno el valor de la variable contadora hasta llegar al 10, inclusive. </p> <p>La programaci\u00f3n declarativa, contrariamente, prioriza la claridad del resultado por encima que la claridad del paso a paso.</p> <p>Entonces, para crear una lista del 1 al 10, no definir\u00edamos expl\u00edcitamente el paso a paso de agregar un n\u00famero a la lista en cada iteraci\u00f3n del ciclo. M\u00e1s bien, utilizar\u00edamos una funci\u00f3n que agregue la cantidad de n\u00fameros que necesitemos.</p> <p>No te preocupes por tanta terminolog\u00eda, la iremos aprendiendo m\u00e1s adelante. Lo importante para resaltar es la diferencia en el c\u00f3digo escrito en cada caso. Veamos:</p> <p>Programaci\u00f3n imperativa<pre><code>int lista = []\nint contador = 1\nwhile contador &lt; 10:\n    lista.append(contador)\n    contador = contador + 1\n</code></pre> Programaci\u00f3n declarativa<pre><code>lista(range(1, 10))\n</code></pre></p>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/paradigmas/#paradigma-de-la-programacion-orientada-a-objetos","title":"Paradigma de la programaci\u00f3n orientada a objetos","text":"<p>En este modelo de paradigma se centra en la organizaci\u00f3n del c\u00f3digo para construir modelos de objetos (estructura abstracta que, de manera m\u00e1s fiable, describe un posible objeto del mundo real y su relaci\u00f3n con el resto del mundo que lo rodea a trav\u00e9s de interfaces), que son instancias de clases, que representan elementos (objetos) del problema a resolver. </p> <p>Estos objetos tienen atributos (datos) y m\u00e9todos (funciones), y se comunican entre s\u00ed a trav\u00e9s de mensajes, permitiendo separar los diferentes componentes de un programa, simplificando as\u00ed su creaci\u00f3n, depuraci\u00f3n y posteriores mejoras. </p> <p>La programaci\u00f3n orientada a objetos permite el encapsulamiento de datos y la modularidad, como caracter\u00edsticas principales, disminuye los errores y promociona la reutilizaci\u00f3n del c\u00f3digo. Es una manera especial de programar, que se acerca de alguna manera a c\u00f3mo expresar\u00edamos las cosas en la vida real.</p> <p>Ejemplos de lenguajes de programaci\u00f3n orientados a objetos ser\u00edan Java, Python o C#. La programaci\u00f3n orientada a objetos se sirve de diferentes conceptos como:</p> <ul> <li>Abstracci\u00f3n de datos</li> <li>Encapsulaci\u00f3n</li> <li>Eventos</li> <li>Modularidad</li> <li>Herencia</li> <li>Polimorfismo</li> </ul>"},{"location":"unidades/introduccion-a-la-programacion/introduccion-a-la-programacion/paradigmas/#paradigma-de-la-programacion-reactiva","title":"Paradigma de la programaci\u00f3n reactiva","text":"<p>La programaci\u00f3n reactiva es un paradigma enfocado en el trabajo con flujos de datos finitos o infinitos de manera as\u00edncrona. Se basa en escuchar lo que emite un evento o cambios en el flujo de datos, en donde los objetos reaccionan a los valores que reciben de dicho cambio. </p> <p>Las librer\u00edas m\u00e1s conocidas son Project Reactor, y RxJava. </p> <p>React/Angular usan RxJs para hacer uso de la programaci\u00f3n reactiva.</p> <p>Su concepci\u00f3n y evoluci\u00f3n ha ido ligada a la publicaci\u00f3n del Reactive Manifesto, que establec\u00eda las bases de los sistemas reactivos, los cuales deben ser:</p> <ul> <li>Responsivos: aseguran la calidad del servicio cumpliendo unos tiempos de respuesta establecidos.</li> <li>Resilientes: se mantienen responsivos incluso cuando se enfrentan a situaciones de error.</li> <li>El\u00e1sticos: se mantienen responsivos incluso ante aumentos en la carga de trabajo.</li> <li>Orientados a mensajes: minimizan el acoplamiento entre componentes al establecer interacciones basadas en el intercambio de mensajes de manera as\u00edncrona.</li> </ul> <p>La motivaci\u00f3n detr\u00e1s de este nuevo paradigma procede de la necesidad de responder a las limitaciones de escalado presentes en los modelos de desarrollo actuales, que se caracterizan por su desaprovechamiento del uso de la CPU debido a la interacci\u00f3n de entrada y salida (I/O), el sobre uso de memoria y la ineficiencia de las interacciones bloqueantes.</p> <p>Para recordar</p> <p>Los lenguajes de programaci\u00f3n adoptan uno o varios paradigmas en funci\u00f3n del tipo de \u00f3rdenes que permiten implementar como, por ejemplo, Python o JavaScript que son multiparadigmas.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/","title":"Introducci\u00f3n al Pensamiento Computacional","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#introduccion","title":"Introducci\u00f3n","text":"<p>El ser humano piensa y se comporta como tal siguiendo una secuencia l\u00f3gica de acciones. El pensamiento computacional es una habilidad fundamental en la programaci\u00f3n y en la resoluci\u00f3n de problemas en general. Se basa en la aplicaci\u00f3n de la l\u00f3gica, el razonamiento y la capacidad de descomponer problemas complejos en componentes m\u00e1s peque\u00f1os y manejables para llegar a un resultado exitoso.</p> <p>\u00a1Bienvenidos y Bienvenidas!</p> <p>\u00a1Esta materia es m\u00e1s que programaci\u00f3n de computadoras!</p> <p>Resulta que la inform\u00e1tica se trataba menos de programaci\u00f3n que de resoluci\u00f3n de problemas. De hecho, \u00a1esta materia trata sobre la resoluci\u00f3n de problemas de una manera que es extremadamente enriquecedora!  Es probable que tomes la resoluci\u00f3n de problemas que aprendas aqu\u00ed y que la apliques instant\u00e1neamente a tu trabajo m\u00e1s all\u00e1 de esta clase e incluso a tu vida en general. Sin embargo, \u00a1no ser\u00e1 f\u00e1cil! Estar\u00e1s \u201cbebiendo de la manguera\u201d del conocimiento durante cada clase. Y aunque puede haber frustraci\u00f3n por sentirse atascado o cometer errores, tambi\u00e9n habr\u00e1 una gran sensaci\u00f3n de gratificaci\u00f3n y orgullo por hacer que algo funcione o completar alguna tarea. Te sorprender\u00e1s de lo que podr\u00e1s lograr semana a semana.</p> <p>Entonces, se trata mucho m\u00e1s de que avances a nivel personal que de alcanzar alg\u00fan nivel estandarizado y generalizado a nivel colectivo. Lo que finalmente importa no es tanto d\u00f3nde terminas en relaci\u00f3n con tus compa\u00f1eros de clase, sino d\u00f3nde terminas en relaci\u00f3n contigo mismo cuando comenzaste. La consideraci\u00f3n m\u00e1s importante es que te des el tiempo que necesites para aprender a lo largo del a\u00f1o. Todo el mundo aprende de manera diferente.  Si algo no funciona bien al principio, debes saber que con el tiempo ir\u00e1s creciendo en conocimientos y mejorando tus habilidades para resolver todos los problemas que se presenten.</p> <p>A lo largo de la materia aprender\u00e1s sobre Pilas Bloques, un lenguaje de programaci\u00f3n visual. Luego, aprender\u00e1s sobre lenguaje C. Se ver\u00e1 as\u00ed:</p> C<pre><code>#include &lt;stdio.h&gt;\n\nint main(void)\n{\n    printf(\"hello, world\\n\");\n}\n</code></pre> <p>Y aunque este c\u00f3digo (escrito en un lenguaje de programaci\u00f3n en lugar de un lenguaje como el castellano) parece cr\u00edptico al principio, pueden pasar semanas o meses antes de que podamos comprender los conceptos principales de programaci\u00f3n e incluso aprender nuevos idiomas. Seguramente te est\u00e9s preguntando que es cr\u00edptico: un lenguaje cr\u00edptico en programaci\u00f3n es un tipo de lenguaje de programaci\u00f3n dise\u00f1ado para ser extremadamente dif\u00edcil de entender o leer, generalmente con el objetivo de complicar la comprensi\u00f3n del c\u00f3digo fuente por parte de otras personas. Sin embargo, es importante destacar que el uso de lenguajes cr\u00edpticos en programaci\u00f3n no es com\u00fan en el desarrollo de software convencional y no se considera una buena pr\u00e1ctica. La legibilidad y la mantenibilidad del c\u00f3digo son aspectos fundamentales en el desarrollo de software de calidad, y los lenguajes cr\u00edpticos van en contra de estos principios al dificultar la comprensi\u00f3n del c\u00f3digo por parte de otros programadores. As\u00ed que no te preocupes, con tiempo y pr\u00e1ctica ir\u00e1s sintiendo al lenguaje de programaci\u00f3n como algo menos cr\u00edptico y m\u00e1s natural, \u00a1Esa es la idea!</p> <p>Para programar, \u00a1Debes \u201chablar\u201d en lenguaje de programaci\u00f3n\u201d!</p> <p>A medida que avancen las semanas, aprender\u00e1s sobre algoritmos. Aprender\u00e1s sobre la memoria. Aprender\u00e1s sobre el c\u00f3digo con errores y las causas de los bloqueos de la computadora. Aprender\u00e1s sobre estructuras de datos. Luego, haremos la transici\u00f3n a un nuevo lenguaje de nivel superior llamado Python. Su c\u00f3digo se ver\u00e1 algo como esto:</p> Python<pre><code>print(\"hello, world\")\n</code></pre>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/introduccion-al-pensamiento-computacional/#no-temas-eres-el-programador-escribe-el-codigo-corre-el-codigo","title":"\u00a1No temas! ERES el programador. Escribe el c\u00f3digo. Corre el c\u00f3digo.","text":"<p>Como dijimos, puede haber frustraci\u00f3n por sentirse atascado o cometer errores, pero tambi\u00e9n habr\u00e1 una gran sensaci\u00f3n de gratificaci\u00f3n y orgullo por hacer que algo funcione o completar alguna tarea. De hecho, David (profesor titular de la c\u00e1tedra de Computer Science en la Universidad de Harvard) perdi\u00f3 dos puntos en su primera tarea por no seguir todas las instrucciones correctamente. De hecho, dos tercios de los estudiantes de CS50 en Harvard nunca antes hab\u00edan tomado un curso de inform\u00e1tica. Y seguramente (casi) ninguno de ustedes aqu\u00ed tampoco lo hicieron.</p> <p></p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/","title":"\u00bfQue es el pensamiento computacional?","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#que-es-el-pensamiento-computacional","title":"\u00bfQu\u00e9 es el pensamiento computacional?","text":"<p>Definici\u00f3n</p> <p>El pensamiento computacional es una forma de resolver problemas y abordar desaf\u00edos utilizando t\u00e9cnicas y conceptos fundamentales de la ciencia de la computaci\u00f3n.</p> <p>El objetivo principal es desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico que sean fundamentales para comprender y resolver problemas en el \u00e1mbito de la inform\u00e1tica. Se basa en la aplicaci\u00f3n de la l\u00f3gica, el razonamiento y la capacidad de descomponer problemas complejos en componentes m\u00e1s peque\u00f1os y manejables.</p> <p>El pensamiento computacional implica un enfoque anal\u00edtico y estructurado para resolver problemas, con \u00e9nfasis en la resoluci\u00f3n algor\u00edtmica.</p> <p>Se centra en la capacidad de dise\u00f1ar y seguir pasos o instrucciones precisas para llegar a una soluci\u00f3n.</p> <p>Esencialmente, la programaci\u00f3n de computadoras equivale a pensar en\u00a0la resoluci\u00f3n de un problema\u00a0como el proceso de tomar alguna entrada (un problema que queremos resolver) y generar alguna salida (la soluci\u00f3n a nuestro problema), resolviendo as\u00ed dicho problema. Lo que sucede entre la entrada y la salida, es lo que podr\u00edamos llamar una caja negra, que por ahora ser\u00e1 una inc\u00f3gnita que develaremos a lo largo de la materia.</p> <p>4</p> <p>Pero para comenzar, necesitaremos una forma de representar entradas y salidas, para que podamos almacenar y trabajar con informaci\u00f3n de manera estandarizada. Profundizaremos el tema, m\u00e1s adelante, en la bibliograf\u00eda \u201cRepresentaci\u00f3n de datos en la computadora\u201d.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#componentes-del-pensamiento-computacional","title":"Componentes del pensamiento computacional","text":"<p>Algunos elementos clave del pensamiento computacional que ayudan a desarrollar habilidades de resoluci\u00f3n de problemas y pensamiento l\u00f3gico en el contexto de la inform\u00e1tica son:</p> <ol> <li> <p>Resoluci\u00f3n de problemas a partir de la descomposici\u00f3n: consiste en descomponer problemas complejos en subproblemas m\u00e1s peque\u00f1os y manejables. Esto ayuda a comprender mejor el problema y permite abordar cada parte de forma individual. Se exploran t\u00e9cnicas como la divisi\u00f3n y conquista, la recursividad y el enfoque iterativo.</p> </li> <li> <p>Patrones y reconocimiento de patrones: el objetivo es identificar patrones y regularidades en los datos o en el problema en s\u00ed. Esto puede ayudar a simplificar el problema y proporcionar una base para encontrar soluciones.</p> </li> <li> <p>Abstracci\u00f3n: la abstracci\u00f3n implica la capacidad de identificar los aspectos esenciales e importantes de un problema y omitir, separar, los detalles irrelevantes y no esenciales a partir del estudio de t\u00e9cnicas de abstracci\u00f3n para simplificar la resoluci\u00f3n de problemas y crear modelos m\u00e1s manejables. Esto permite enfocarse en los conceptos clave y simplificar la comprensi\u00f3n del problema. </p> </li> <li> <p>Algoritmos: los algoritmos son la base para implementar soluciones en programaci\u00f3n a partir del dise\u00f1o de una serie de pasos o de instrucciones l\u00f3gicas que resuelven un problema de manera eficiente y sistem\u00e1tica. Es decir, son secuencias ordenadas de pasos o de instrucciones l\u00f3gicas que describen c\u00f3mo resolver un problema. Es fundamental aprender a dise\u00f1ar, analizar y mejorar algoritmos a partir de la aplicaci\u00f3n de las buenas pr\u00e1cticas de programaci\u00f3n y de la aplicaci\u00f3n de las diferentes metodolog\u00edas de las ciencias de la computaci\u00f3n.</p> </li> <li> <p>Estructuras de datos: las estructuras de datos son maneras de organizar y almacenar datos en la memoria de una computadora. Se exploran conceptos como listas, arreglos, pilas, colas y \u00e1rboles, y se estudia c\u00f3mo elegir la estructura adecuada para un problema dado.</p> </li> <li> <p>Pensamiento l\u00f3gico: el pensamiento l\u00f3gico es esencial en la programaci\u00f3n. Se aprende a formular proposiciones l\u00f3gicas, utilizar operadores l\u00f3gicos (AND, OR, NOT), construir tablas de verdad y aplicar principios de l\u00f3gica para la resoluci\u00f3n de problemas.</p> </li> <li> <p>Programaci\u00f3n: aunque la programaci\u00f3n puede ser un tema en s\u00ed mismo, en la introducci\u00f3n al pensamiento computacional se puede proporcionar una introducci\u00f3n b\u00e1sica a la programaci\u00f3n. Se pueden utilizar lenguajes de programaci\u00f3n como Python o Scratch para familiarizarse con conceptos como variables, condicionales, bucles y funciones.</p> </li> <li> <p>Paralelismo y concurrencia: a medida que los sistemas inform\u00e1ticos se vuelven cada vez m\u00e1s paralelos, es importante comprender c\u00f3mo manejar la concurrencia y los desaf\u00edos asociados. Se pueden introducir conceptos como hilos de ejecuci\u00f3n, sincronizaci\u00f3n y comunicaci\u00f3n entre procesos.</p> </li> </ol> <p>Info</p> <p>El objetivo principal del pensamiento computacional es desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico que sean fundamentales para comprender y resolver problemas en el \u00e1mbito de la inform\u00e1tica.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#aplicaciones-del-pensamiento-computacional","title":"Aplicaciones del pensamiento computacional","text":"<ul> <li> <p>Resoluci\u00f3n de problemas en la programaci\u00f3n.</p> </li> <li> <p>Resoluci\u00f3n de problemas en matem\u00e1ticas, ciencias y otras disciplinas.</p> </li> <li> <p>Dise\u00f1o de sistemas complejos.</p> </li> <li> <p>Desarrollo de soluciones innovadoras para problemas cotidianos.</p> </li> </ul>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#ejemplos-de-pensamiento-computacional","title":"Ejemplos de pensamiento computacional","text":"<ul> <li> <p>Resolver un rompecabezas o acertijo.</p> </li> <li> <p>Crear un flujo de trabajo para realizar una tarea repetitiva de manera eficiente.</p> </li> <li> <p>Analizar los datos para identificar patrones y tendencias.</p> </li> <li> <p>Desarrollar un plan para resolver un problema de programaci\u00f3n complejo.</p> </li> </ul>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#beneficios-de-pensamiento-computacional","title":"Beneficios de pensamiento computacional","text":"<ul> <li> <p>Mejora la capacidad de resoluci\u00f3n de problemas y la creatividad.</p> </li> <li> <p>Ayuda a entender mejor el funcionamiento de los sistemas complejos.</p> </li> <li> <p>Desarrolla habilidades de pensamiento cr\u00edtico y l\u00f3gico.</p> </li> <li> <p>Facilita la comunicaci\u00f3n y colaboraci\u00f3n en proyectos de equipo.</p> </li> </ul>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#herramientas-para-desarrollar-el-pensamiento-computacional","title":"Herramientas para desarrollar el pensamiento computacional","text":"<p>A continuaci\u00f3n, te presentamos algunas herramientas que pueden ayudarte a desarrollar el pensamiento computacional y mejorar tus habilidades. Estas herramientas puedes clasificarse seg\u00fan su tipo:</p> <ul> <li> <p>Juegos y acertijos que requieren pensamiento cr\u00edtico y l\u00f3gico</p> </li> <li> <p>Ejercicios de programaci\u00f3n y algoritmos</p> </li> <li> <p>T\u00e9cnicas de descomposici\u00f3n y abstracci\u00f3n</p> </li> <li> <p>Ejercicios de reconocimiento de patrones</p> </li> </ul> <p>Lenguajes de programaci\u00f3n: Aprender a programar en lenguajes como Python, Java, C++ o JavaScript es una excelente manera de desarrollar el pensamiento computacional. Estos lenguajes te permiten escribir algoritmos y solucionar problemas de manera estructurada.</p> <p>**Scratch: Es un entorno de programaci\u00f3n visual desarrollado por el MIT especialmente dise\u00f1ado para principiantes. Con Scratch, puedes arrastrar y soltar bloques de c\u00f3digo para crear historias interactivas, juegos y animaciones, lo que te ayuda a comprender los conceptos b\u00e1sicos de la programaci\u00f3n.</p> <p>Pilas Bloques: Similar a Scratch, es un entorno de programaci\u00f3n visual basado en bloques. Puedes utilizarlo para crear programas y algoritmos de manera interactiva, arrastrando y soltando bloques para formar secuencias l\u00f3gicas.</p> <p>App Inventor: Desarrollado tambi\u00e9n por el MIT, App Inventor es una herramienta que te permite crear aplicaciones m\u00f3viles para dispositivos Android sin necesidad de tener conocimientos avanzados de programaci\u00f3n. Puedes dise\u00f1ar interfaces y programar la funcionalidad de tus aplicaciones utilizando bloques de c\u00f3digo.</p> <p>Minecraft: Este juego de construcci\u00f3n y aventura puede ser utilizado como herramienta para desarrollar el pensamiento computacional. Minecraft: Education Edition incluye caracter\u00edsticas espec\u00edficas para la programaci\u00f3n, donde puedes crear y ejecutar comandos y scripts para automatizar tareas dentro del juego.</p> <p>Code.org: Es una plataforma educativa que ofrece cursos gratuitos de programaci\u00f3n y recursos para ense\u00f1ar pensamiento computacional a trav\u00e9s de juegos y actividades interactivas. Code.org est\u00e1 dirigido tanto a estudiantes como a educadores.</p> <p>Rob\u00f3tica educativa: Utilizar kits de rob\u00f3tica como LEGO Mindstorms o Arduino puede ser una excelente manera de aplicar el pensamiento computacional en la pr\u00e1ctica. Estos kits te permiten construir robots y programar su comportamiento, fomentando el pensamiento l\u00f3gico y la resoluci\u00f3n de problemas.</p> <p>Â¡Para recordar! que m\u00e1s all\u00e1 de las herramientas espec\u00edficas, desarrollar el pensamiento computacional implica adoptar una mentalidad anal\u00edtica y orientada a la resoluci\u00f3n de problemas. Es importante practicar la l\u00f3gica, el razonamiento algor\u00edtmico y la abstracci\u00f3n en diferentes contextos, tanto dentro como fuera de las herramientas mencionadas.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#ejercicios","title":"Ejercicios","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/que-es-el-pensamiento-computacional/#resumen","title":"Resumen","text":"<ul> <li> <p>El pensamiento computacional no se limita a la programaci\u00f3n o a la resoluci\u00f3n de problemas relacionados con la inform\u00e1tica. Sus principios y enfoques se pueden aplicar en diversas disciplinas y contextos, como la resoluci\u00f3n de problemas matem\u00e1ticos, la toma de decisiones, la planificaci\u00f3n y organizaci\u00f3n de tareas, la resoluci\u00f3n de problemas cient\u00edficos y muchos otros \u00e1mbitos.</p> </li> <li> <p>Los principios del pensamiento computacional pueden ser ense\u00f1ados a personas de todas las edades.</p> </li> <li> <p>Su ense\u00f1anza se centra en desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico y puede ser integrada en diferentes materias y disciplinas.</p> </li> </ul> <p>Success</p> <p>Adem\u00e1s de ser una habilidad esencial en la programaci\u00f3n, el pensamiento computacional fomenta el desarrollo de habilidades de resoluci\u00f3n de problemas, el pensamiento cr\u00edtico, la creatividad, la capacidad de abstracci\u00f3n y la capacidad de colaboraci\u00f3n y trabajo en equipo.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/resumen-sobre-pensamiento-computacional/","title":"Pensamiento computacional: resumen","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/resumen-sobre-pensamiento-computacional/#resumen","title":"Resumen","text":"<ul> <li> <p>El pensamiento computacional no se limita a la programaci\u00f3n o a la resoluci\u00f3n de problemas relacionados con la inform\u00e1tica. Sus principios y enfoques se pueden aplicar en diversas disciplinas y contextos, como la resoluci\u00f3n de problemas matem\u00e1ticos, la toma de decisiones, la planificaci\u00f3n y organizaci\u00f3n de tareas, la resoluci\u00f3n de problemas cient\u00edficos y muchos otros \u00e1mbitos.</p> </li> <li> <p>Los principios del pensamiento computacional pueden ser ense\u00f1ados a personas de todas las edades.</p> </li> <li> <p>Su ense\u00f1anza se centra en desarrollar habilidades de pensamiento cr\u00edtico y l\u00f3gico y puede ser integrada en diferentes materias y disciplinas.</p> </li> </ul> <p>Success</p> <p>Adem\u00e1s de ser una habilidad esencial en la programaci\u00f3n, el pensamiento computacional fomenta el desarrollo de habilidades de resoluci\u00f3n de problemas, el pensamiento cr\u00edtico, la creatividad, la capacidad de abstracci\u00f3n y la capacidad de colaboraci\u00f3n y trabajo en equipo.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/pensamiento-computacional/ejercitacion/ejercitacion-pensamiento-computacional/","title":"Pensamiento computacional: ejercitaci\u00f3n","text":"<p>Te proponemos algunos ejercicios para ejercitar el pensamiento computacional. Te ayudar\u00e1n a familiarizarte con los conceptos b\u00e1sicos de pensamiento computacional como secuencias, bucles, condicionales, algoritmos de b\u00fasqueda y ordenamiento. </p> <p>Resu\u00e9lvelos en tu carpeta digital, simplemente escribiendo el algoritmo paso a paso. M\u00e1s adelante, tambi\u00e9n, podr\u00e1s resolverlos utilizando un lenguaje de programaci\u00f3n.</p> <p>Â¡Para recordar! que el pensamiento computacional implica analizar los problemas descomponi\u00e9ndolos en pasos m\u00e1s peque\u00f1os, identificar patrones, utilizar estructuras de datos adecuadas y emplear la l\u00f3gica para dise\u00f1ar algoritmos para resolverlos de manera eficiente. </p> <p>\u00a1Espero que estos ejercicios te ayuden a desarrollar y a fortalecer tus habilidades de pensamiento computacional y que el proceso de aprendizaje sea divertido! </p> <p>\u00a1Buena suerte!</p> <ol> <li> <p>Problema de secuencia l\u00f3gica: Completa la siguiente secuencia de n\u00fameros: 2, 4, 6, 8, , . \u00bfCu\u00e1les son los dos n\u00fameros que faltan en la secuencia? </p> </li> <li> <p>Problema de algoritmo de suma: Dise\u00f1a un algoritmo que tome dos n\u00fameros como entrada y devuelva la suma de esos dos n\u00fameros.</p> </li> <li> <p>Problema de condicional: Escribe un programa que solicite al usuario un n\u00famero e indique si ese n\u00famero es positivo, negativo o cero.</p> </li> <li> <p>Problema de bucle: Escribe un programa que imprima los primeros 10 n\u00fameros naturales en orden ascendente.</p> </li> <li> <p>Problema de dise\u00f1o de juego con decisiones: Dise\u00f1a un juego de \"Adivina el n\u00famero\" en el que la computadora elija un n\u00famero aleatorio y el jugador deba adivinarlo. La computadora deber\u00eda dar pistas de si el n\u00famero es mayor o menor que el n\u00famero propuesto por el jugador.</p> </li> <li> <p>Mejora el juego de \"Adivina el n\u00famero\" implementando el c\u00f3digo para mostrar cantidad de intentos realizados hasta adivinar.</p> </li> <li> <p>Problema de factorial: Escribe un programa que tome un n\u00famero como entrada y calcule su factorial utilizando un bucle. El factorial de un n\u00famero entero n se representa como n! y se calcula multiplicando todos los n\u00fameros desde 1 hasta n. Luego, muestra el resultado.</p> </li> <li> <p>Problema de recursividad: Escribe una funci\u00f3n recursiva para calcular el factorial de un n\u00famero dado. </p> </li> <li> <p>Problema de dise\u00f1o de algoritmo recursivo: Dise\u00f1a una funci\u00f3n recursiva que calcule la suma de los d\u00edgitos de un n\u00famero entero dado. Por ejemplo, si el n\u00famero es 123, la suma de los d\u00edgitos ser\u00eda 1 + 2 + 3 = 6.</p> </li> <li> <p>Problema de recursividad avanzada: Escribe una funci\u00f3n recursiva para calcular el en\u00e9simo t\u00e9rmino de la secuencia de Fibonacci. La secuencia de Fibonacci comienza con 0 y 1, y cada t\u00e9rmino posterior es la suma de los dos t\u00e9rminos anteriores.</p> </li> <li> <p>Problema de b\u00fasqueda: Imagina que tienes una lista de n\u00fameros: [4, 7, 2, 9, 1, 5]. \u00bfC\u00f3mo podr\u00edas encontrar el n\u00famero m\u00e1s grande en esa lista utilizando programaci\u00f3n?</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda: Dise\u00f1a un algoritmo que busque un n\u00famero espec\u00edfico en una lista de n\u00fameros y devuelva la posici\u00f3n en la que se encuentra.</p> </li> <li> <p>Problema de algoritmo de ordenamiento con selecci\u00f3n: Dise\u00f1a un algoritmo de ordenamiento por selecci\u00f3n que ordene una lista de n\u00fameros en orden ascendente.</p> </li> <li> <p>Problema de algoritmo de ordenamiento: Dise\u00f1a un algoritmo que ordene una lista de n\u00fameros en orden ascendente utilizando el m\u00e9todo \u201cburbuja\u201d.</p> </li> <li> <p>Problema de dise\u00f1o de algoritmo: Imagina que tienes una lista de n\u00fameros y quieres eliminar los duplicados de esa lista. \u00bfC\u00f3mo dise\u00f1ar\u00edas un algoritmo eficiente para lograrlo?</p> </li> <li> <p>Problema de algoritmo de suma acumulada: Escribe un programa que tome una lista de n\u00fameros como entrada y devuelva una nueva lista donde cada elemento sea la suma acumulada de los elementos anteriores. Por ejemplo, si la entrada es [1, 2, 3, 4], la salida deber\u00eda ser [1, 3, 6, 10]</p> </li> <li> <p>Problema de optimizaci\u00f3n con algoritmos voraces: Imagina que tienes un conjunto de monedas con diferentes denominaciones (por ejemplo, [1, 5, 10, 25]) y quieres determinar la forma m\u00e1s eficiente de dar cambio para una cantidad dada. \u00bfC\u00f3mo podr\u00edas dise\u00f1ar un algoritmo voraz para lograrlo?</p> </li> <li> <p>Problema de optimizaci\u00f3n: Tienes un conjunto de n\u00fameros enteros y deseas encontrar el par de n\u00fameros cuya diferencia sea la m\u00ednima. \u00bfC\u00f3mo dise\u00f1ar\u00edas un algoritmo eficiente para encontrar ese par de n\u00fameros?</p> </li> <li> <p>Problema de dise\u00f1o de algoritmo eficiente: Tienes una lista de n\u00fameros y deseas encontrar el par de n\u00fameros cuya suma sea igual a un valor objetivo dado. \u00bfC\u00f3mo dise\u00f1ar\u00edas un algoritmo eficiente para encontrar ese par de n\u00fameros?</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda en una cadena: Dise\u00f1a un algoritmo que busque una palabra en un texto y devuelva la cantidad de veces que aparece.</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda y reemplazo en una lista: Dise\u00f1a un algoritmo que tome una lista de palabras y una palabra objetivo, y reemplace todas las ocurrencias de la palabra objetivo por otra palabra dada.</p> </li> <li> <p>Problema de recursividad con cadenas: Escribe una funci\u00f3n recursiva para invertir una cadena. Por ejemplo, si se pasa la cadena \"Hola\", la funci\u00f3n deber\u00eda devolver \"aloH\".</p> </li> <li> <p>Problema de algoritmo de clasificaci\u00f3n: Dada una lista de palabras: [\"perro\", \"gato\", \"elefante\", \"rat\u00f3n\", \"mono\"], \u00bfc\u00f3mo podr\u00edas ordenar las palabras en orden alfab\u00e9tico utilizando alg\u00fan algoritmo de clasificaci\u00f3n?</p> </li> <li> <p>Problema de algoritmo de b\u00fasqueda y reemplazo: Dada una cadena de caracteresy una palabra objetivo, escribe un algoritmo que busque todas las ocurrencias de la palabra en la cadena y las reemplace por otra palabra dada.</p> </li> </ol>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/representacion-de-datos-en-la-computadora/","title":"Representaci\u00f3n de datos en la computadora","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/representacion-de-datos-en-la-computadora/#introduccion","title":"Introducci\u00f3n","text":"<p>Unario, decimal, binario. N\u00fameros, texto, emojis, im\u00e1genes, videos y sonidos.</p> <p>Todas estas ideas son solo ceros y unos, interpretadas y utilizadas por el software que escribiremos, para interpretarlas de la manera que queramos.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/representacion-de-datos-en-la-computadora/#datos-vs-informacion","title":"Datos vs. Informaci\u00f3n","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/representacion-de-datos-en-la-computadora/#dato","title":"Dato","text":"<p>Es la representaci\u00f3n simb\u00f3lica de un hecho, atributo o caracter\u00edstica de una entidad. Por ejemplo, nota de un alumno, nombre de un docente, color de un auto, etc.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/representacion-de-datos-en-la-computadora/#informacion","title":"Informaci\u00f3n","text":"<p>Es un dato \u00fatil, procesado, que adquiere significado. Por ejemplo, El promedio final de un alumno para un curso, el n\u00famero de aprobados en un examen, el nombre de los primeros alumnos de cada especialidad por cada ciclo.</p> <p>Info</p> <p>La informaci\u00f3n se obtiene mediante el procesamiento de los datos dentro de un contexto determinado que les otorga un significado concreto y espec\u00edfico.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/representacion-de-datos-en-la-computadora/#tipos-de-datos-reconocidos-por-la-computadora","title":"tipos de dato reconocidos por la computadora","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/representacion-de-datos-en-la-computadora/#procesamiento-de-datos","title":"Procesamiento de datos","text":"<p>El procesamiento de datos puede ser:</p> <ul> <li>Manual</li> <li>Mecanizada: uso de calculadora, sumadora, etc.</li> <li>Automatizado: realizado por el procesador de la computadora, el cual ejecuta un conjunto de pasos previamente definidos (algoritmo)</li> </ul>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/resumen-sobre-representacion-de-datos/","title":"Representaci\u00f3n de datos: resumen","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/resumen-sobre-representacion-de-datos/#resumen","title":"Resumen","text":"<p>El sistema unario es un sistema de numeraci\u00f3n que emplea un \u00fanico s\u00edmbolo, como una barra o un punto, para representar el valor \u201cuno\u201d. Los dem\u00e1s n\u00fameros se expresan mediante la repetici\u00f3n de este s\u00edmbolo.</p> <p>El sistema decimal es un sistema de numeraci\u00f3n que utiliza diez s\u00edmbolos distintos, conocidos como d\u00edgitos, para representar cualquier valor. Estos d\u00edgitos son el 0, 1, 2, 3, 4, 5, 6, 7, 8 y 9. </p> <p>Las computadoras utilizan el sistema binario, con solo dos d\u00edgitos, 0 (apagado) y 1 (encendido). Cada d\u00edgito binario se llama bit (binary digit) y es la m\u00ednima unidad de informaci\u00f3n.</p> <p>Adem\u00e1s, generalmente usan ocho bits para representar un n\u00famero. Por ejemplo, el c\u00f3digo binario 00000101 es el n\u00famero 5 en decimal. Estos ocho bits se denominan byte, conocido como la m\u00ednima unidad de palabra.</p> <p>As\u00ed como los n\u00fameros son patrones binarios de unos y ceros, \u00a1las letras tambi\u00e9n se representan usando unos y ceros!</p> <p>El mapeo est\u00e1ndar, llamado c\u00f3digo ASCII o est\u00e1ndar ASCII, se cre\u00f3 para asignar caracteres espec\u00edficos (letras may\u00fasculas y min\u00fasculas, n\u00fameros, puntuaci\u00f3n y s\u00edmbolos) a n\u00fameros espec\u00edficos. Con 8 bits, o 1 byte, podemos tener 28 = 256 valores diferentes (desde 0 hasta 255, el valor m\u00e1s alto que se puede formar con 8 bits).</p> <p>Sin embargo, dado que no hab\u00eda suficientes d\u00edgitos en binario para representar todos los diversos caracteres que pod\u00edan representar los humanos, el est\u00e1ndar Unicode ampli\u00f3 la cantidad de bits que las computadoras pueden transmitir y comprender.</p> <p>Cuando recibimos un emoji , nuestra computadora en realidad solo recibe un n\u00famero en binario que luego asigna a la imagen del emoji seg\u00fan el est\u00e1ndar Unicode.</p> <p>Con bits, tambi\u00e9n podemos asignar n\u00fameros a colores. Hay muchos sistemas diferentes para representar los colores, pero el sistema m\u00e1s conocido es RGB, que representa la cantidad de rojo, verde y azul que componen a un color espec\u00edfico.</p> <p>Las im\u00e1genes son simplemente colecciones de valores RGB.</p> <p>Los videos son secuencias de muchas im\u00e1genes, que cambian varias veces por segundo para darnos la apariencia de movimiento.</p> <p>La m\u00fasica tambi\u00e9n se puede representar con bits. MIDI es uno de esos formatos que representa la m\u00fasica con n\u00fameros para cada una de las notas y su duraci\u00f3n y volumen.</p> <p>Todas estas ideas son solo ceros y unos, interpretadas y utilizadas por el software que hemos escrito para interpretarlas de la manera que queremos.</p> <p>Hay otros formatos, algunos de los cuales usan compresi\u00f3n (formas matem\u00e1ticas de representar algunos datos con menos bits), o algunos que pueden ser contenedores que almacenan varios tipos de dato juntos.</p> <p>Y dado que hay muchas empresas y grupos que desarrollan software, existen muchos formatos de archivo diferentes, cada uno con sus propias formas de representar los datos. Pero tambi\u00e9n hay organizaciones que trabajan sobre cierto consenso, como la encargada de mantener el est\u00e1ndar Unicode.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/","title":"Sistemas de representaci\u00f3n","text":""},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-numeros-sistema-unario","title":"Representando n\u00fameros: sistema unario","text":"<p>Veamos un ejemplo donde necesitemos tomar asistencia para una clase. Para contar el n\u00famero de alumnos, podr\u00edamos comenzar usando los dedos, uno a la vez. Este sistema se llama sistema unario.</p> <p>El sistema unario es un sistema de numeraci\u00f3n que emplea un \u00fanico s\u00edmbolo, como una barra o un punto, para representar el valor \u201cuno\u201d. Los dem\u00e1s n\u00fameros se expresan mediante la repetici\u00f3n de este s\u00edmbolo.</p> <p>El sistema unario es considerado uno de los sistemas de numeraci\u00f3n m\u00e1s simples, pero tambi\u00e9n el menos eficiente en t\u00e9rminos de representaci\u00f3n compacta de n\u00fameros. Esto se debe a que para representar n\u00fameros m\u00e1s grandes se requiere una cantidad cada vez mayor de s\u00edmbolos repetidos.</p> <p>Por ejemplo, para representar el n\u00famero tres en el sistema unario, se utilizar\u00edan tres repeticiones del s\u00edmbolo elegido, mientras que para el n\u00famero diez se requerir\u00edan diez repeticiones. </p> <pre><code>El n\u00famero 1 se representa con un \u00fanico s\u00edmbolo \"|\"\nEl n\u00famero 2 se representa con dos s\u00edmbolos \"||\"\nEl n\u00famero 3 se representa con tres s\u00edmbolos \"|||\"\nEl n\u00famero 4 se representa con cuatro s\u00edmbolos \"||||\"\nEl n\u00famero 5 se representa con cinco s\u00edmbolos \"|||||\"\n</code></pre> <p>Cada s\u00edmbolo adicional representa un incremento de uno en el valor num\u00e9rico. As\u00ed, el sistema unario puede volverse engorroso y poco pr\u00e1ctico para representar n\u00fameros grandes. Por lo tanto, este sistema solo se utiliza en algunas aplicaciones espec\u00edficas, como en ciertas \u00e1reas de la inform\u00e1tica te\u00f3rica y en la l\u00f3gica matem\u00e1tica, donde se utiliza para simplificar algunos problemas y demostraciones. Sin embargo, en la vida cotidiana y en la mayor\u00eda de los contextos pr\u00e1cticos, se utilizan otros sistemas de numeraci\u00f3n m\u00e1s eficientes, como el sistema decimal o el sistema binario.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-numeros-sistema-decimal","title":"Representando n\u00fameros: sistema decimal","text":"<p>Para representar n\u00fameros grandes, es preciso utilizar un sistema que posea una mayor cantidad de s\u00edmbolos distintos que representen diferentes valores de manera m\u00e1s simple y pr\u00e1ctica. </p> <p>El sistema decimal es un sistema de numeraci\u00f3n que utiliza diez s\u00edmbolos distintos, conocidos como d\u00edgitos, para representar cualquier valor. Estos d\u00edgitos son el 0, 1, 2, 3, 4, 5, 6, 7, 8 y 9. </p> <p>Este sistema se basa en el valor posicional, lo que significa que el valor de cada d\u00edgito depende de su posici\u00f3n en el n\u00famero. Utilizando lugares de valor creciente de derecha a izquierda, cada lugar tiene un valor diez veces mayor que el lugar a su derecha. Para representar cantidades mayores que nueve, se utilizan m\u00faltiplos de diez. Entonces, decimos que el n\u00famero 10 se compone de un 1 en el lugar de las decenas y un 0 en el lugar de las unidades; el n\u00famero 100 se compone de un 1 en el lugar de las centenas y ceros en los lugares de las decenas y las unidades, y as\u00ed sucesivamente. </p> <p>Por ejemplo, sabemos que el siguiente n\u00famero en decimal representa ciento veintitr\u00e9s:</p> <pre><code>123\n</code></pre> <p>Cada lugar de un d\u00edgito representa una potencia de diez, ya que hay diez d\u00edgitos posibles para cada lugar. El lugar m\u00e1s a la derecha es para 10<sup>0</sup>, el del medio 10<sup>1</sup> y el lugar m\u00e1s a la izquierda 10<sup>2</sup>:</p> <pre><code> 10^2^ 10^1^ 10^0^ \n 1     2     3 \n</code></pre> <p>El 1 est\u00e1 en el lugar de las centenas, el 2 est\u00e1 en el lugar de las decenas y 3 est\u00e1 en el lugar de las unidades. As\u00ed 123 es 10<sup>2</sup> x 1 + 10<sup>1</sup> x 2 + 10<sup>0</sup> x 3 = 100 \u00d7 1 + 10 \u00d7 2 + 1 \u00d7 3 = 100 + 20 + 3 = 123</p> <p>El sistema decimal es ampliamente utilizado en todo el mundo para realizar operaciones matem\u00e1ticas y expresar cantidades en la vida cotidiana.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-numeros-sistema-binario","title":"Representando n\u00fameros: sistema binario","text":"<p>Las computadoras funcionan con electricidad. Pueden encenderse o apagarse. Con este concepto, dentro de las computadoras modernas hay miles de millones de peque\u00f1os interruptores llamados transistores que pueden encenderse o apagarse como si fueran \u201clamparitas\u201d, para representar diferentes valores. Dado que una \u201clamparita\u201d no puede estar m\u00e1s encendida ni menos apagada, el sistema de numeraci\u00f3n de las computadoras solo puede utilizar dos s\u00edmbolos distintos para representar cualquier valor. </p> <p>Info</p> <p>Definido as\u00ed, las computadoras utilizan el sistema binario, con solo dos d\u00edgitos, 0 (apagado) y 1 (encendido).  Cada d\u00edgito binario se llama bit (binary digit) y es la m\u00ednima unidad de informaci\u00f3n.</p> <p>El patr\u00f3n para contar en binario con m\u00faltiples bits es el mismo que el patr\u00f3n en decimal con m\u00faltiples d\u00edgitos.  Por ejemplo, si imaginas usar una sola lamparita, esta puede contar de cero (apagada) a uno (encendida). Sin embargo, si tuvieras tres lamparitas, \u00a1habr\u00eda m\u00e1s opciones de combinaci\u00f3n! </p> <p>Entonces, usando tres lamparitas y si pensamos en sistema binario, lo siguiente representar\u00eda el 0 (cero):</p> <pre><code>0 0 **0**\n</code></pre> <p>Del mismo modo, lo siguiente representar\u00eda el 1 (uno):</p> <pre><code>0 0 **1**\n</code></pre> <p>No necesitamos los ceros iniciales, pero los incluiremos para ver los patrones m\u00e1s f\u00e1cilmente.</p> <p>Por esta l\u00f3gica, como no hay un d\u00edgito para el 2, necesitaremos cambiar otro d\u00edgito del patr\u00f3n para representar el siguiente n\u00famero:</p> <pre><code>0 **1** 0\n</code></pre> <p>Extendiendo esta l\u00f3gica a\u00fan m\u00e1s, \u201dagregamos 1\u201d para representar el 3:</p> <pre><code>0 1 **1**\n</code></pre> <p>Siguiendo con el patr\u00f3n, el 4 se representar\u00eda como:</p> <pre><code>**1** 0 0\n</code></pre> <p>El 5 se representar\u00eda como:</p> <pre><code>1 0 **1**\n</code></pre> <p>El 6 se representar\u00eda como:</p> <pre><code>1 **1** 0 \n</code></pre> <p>\u00a1Podr\u00edamos, de hecho, usando solo tres lamparitas contar hasta siete!</p> <pre><code>1 1 **1**\n</code></pre> <p>\u00bfC\u00f3mo puede ser que el n\u00famero binario 111 represente el n\u00famero decimal 7, o viceversa? \u00bfC\u00f3mo llegamos a esta conclusi\u00f3n?</p> <p>Dijimos que en el sistema decimal, cada lugar de un d\u00edgito representa una potencia de diez, ya que hay diez d\u00edgitos posibles para cada lugar. Esto se denomina base-10. El lugar m\u00e1s a la derecha es para 10<sup>0</sup>, el del medio 10<sup>1</sup> y el lugar m\u00e1s a la izquierda 10<sup>2</sup>:</p> <pre><code> 102 101 100 \n 1   2   3 \n</code></pre> <p>Por otro lado, en el sistema binario, cada lugar de un d\u00edgito representa una potencia de 2, ya que hay dos d\u00edgitos posibles para cada valor posicional. Esto se denomina base-2. El lugar m\u00e1s a la derecha es para 2<sup>0</sup>, el del medio 2<sup>1</sup> y el lugar m\u00e1s a la izquierda 2<sup>2</sup>:</p> <pre><code> 22 21 20 \n 4  2  1 \n</code></pre> <p>As\u00ed el 000 binario es 22 x 0 + 21 x 0 + 20 x 0 = 4 \u00d7 0 + 2 \u00d7 0 + 1 \u00d7 0 = 0 + 0 + 0 = 0 decimal Y el 111 binario es 22 x 1 + 21 x 1 + 20 x 1 = 4 \u00d7 1 + 2 \u00d7 1 + 1 \u00d7 1 = 4 + 2 + 1 = 7 decimal</p> <p>Por lo tanto, se podr\u00eda decir que se requieren tres bits (el lugar del cuatro, el lugar del dos y el lugar del uno) para representar un n\u00famero tan alto como siete. Para contar m\u00e1s de 7, necesitar\u00edamos otro bit a la izquierda para representar un valor entre el 8 y el 15. Y as\u00ed sucesivamente, para valores m\u00e1s altos.</p> <p>Info</p> <p>Las computadoras generalmente usan ocho bits para representar un n\u00famero. Por ejemplo, el c\u00f3digo o patr\u00f3n binario 00000101 es el n\u00famero 5 en decimal.  Estos ocho bits se denominan byte, conocido como la m\u00ednima unidad de palabra.</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representanto-texto-codigo-ascii","title":"Representanto texto: c\u00f3digo ASCII","text":"<p>As\u00ed como los n\u00fameros son patrones binarios de unos y ceros, \u00a1las letras tambi\u00e9n se representan usando unos y ceros!</p> <p>Para representar letras, todo lo que tenemos que hacer es decidir c\u00f3mo se asignan los n\u00fameros a las letras. </p> <p>Dado que existe una superposici\u00f3n entre los unos y los ceros que representan n\u00fameros y letras, algunas personas, hace muchos a\u00f1os, decidieron colectivamente un mapeo est\u00e1ndar de n\u00fameros a letras. La letra A, por ejemplo, es el n\u00famero 65, la B es el 66, y as\u00ed sucesivamente. En binario, la letra A es el c\u00f3digo o patr\u00f3n 01000001. Al usar este c\u00f3digo en un contexto, como el formato de archivo, diferentes programas pueden interpretar y mostrar los mismos bits como n\u00fameros o texto.</p> <p>Este mapeo est\u00e1ndar, llamado c\u00f3digo ASCII o est\u00e1ndar ASCII, se cre\u00f3 para asignar caracteres espec\u00edficos (letras may\u00fasculas y min\u00fasculas, n\u00fameros, puntuaci\u00f3n y s\u00edmbolos) a n\u00fameros espec\u00edficos.</p> <p></p> <p>\u00a1Gracias a Dios por est\u00e1ndares como ASCII que nos permiten estar de acuerdo con estos valores!</p> <p>Cuando recibimos un mensaje de texto, mape\u00e1ndolo en ASCII, obtenemos 3 patrones de bits que tienen los valores decimales 72, 73 y 33. Esos patrones se asignar\u00edan a los caracteres HI! y las secuencias de bits se ver\u00edan como 01001000, 01001001 y 00100001, 8 bits (1 byte) para cada car\u00e1cter:</p> <pre><code> H         I         !\n 72        73        33\n 01001000  01001001  00100001\n</code></pre> <p>Info</p> <p>Con 8 bits, o 1 byte, podemos tener 28 = 256 valores diferentes (desde 0 hasta 255, el valor m\u00e1s alto que se puede formar con 8 bits).</p> <p>Y es posible que ya estemos familiarizados con el uso de bytes como unidad de medida de datos, como en megabytes o gigabytes, para millones o miles de millones de bytes.</p> <p>Otros caracteres, como letras con acentos y s\u00edmbolos en otros idiomas, forman parte de un est\u00e1ndar llamado Unicode, que utiliza m\u00e1s bits que ASCII para acomodar todos estos caracteres.</p> <p>Puedes conocer m\u00e1s del c\u00f3digo de caracteres ASCII haciendo clic aqu\u00ed</p> <p>Puedes conocer m\u00e1s del est\u00e1ndar de codificaci\u00f3n UNICODE haciendo clic aqu\u00ed</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-emojis","title":"Representando emojis","text":"<p>A medida que pasa el tiempo, hay m\u00e1s y m\u00e1s formas de comunicarse a trav\u00e9s de mensajes de texto.</p> <p>Dado que no hab\u00eda suficientes d\u00edgitos en binario para representar todos los diversos caracteres que pod\u00edan representar los humanos, el est\u00e1ndar Unicode ampli\u00f3 la cantidad de bits que las computadoras pueden transmitir y comprender.</p> <p>Cuando recibimos un emoji , nuestra computadora en realidad solo recibe un n\u00famero en binario que luego asigna a la imagen del emoji seg\u00fan el est\u00e1ndar Unicode.</p> <p>Por ejemplo, el emoji de \u201ccara con mascarilla m\u00e9dica\u201d tiene solo cuatro bytes:</p> <pre><code>11110000 10011111 10011000 10110111\n</code></pre> <p></p> <p></p> <p>Hay emojis que probablemente uses todos los d\u00edas, como los que est\u00e1n aqu\u00ed representados.</p> <p>Los inform\u00e1ticos se enfrentaron a un desaf\u00edo al querer asignar varios tonos de piel a cada emoji para permitir que la comunicaci\u00f3n se personalizara a\u00fan m\u00e1s. En este caso, los creadores y colaboradores de los emojis decidieron que las partes iniciales ser\u00edan la estructura del emoji en s\u00ed, seguida del tono de la piel.</p> <p>Cada vez se agregan m\u00e1s funciones al est\u00e1ndar Unicode para representar m\u00e1s caracteres y emojis.</p> <p>Y resulta que las diferentes empresas que crean software para sus dispositivos tendr\u00e1n im\u00e1genes ligeramente diferentes que representan cada emoji, ya que solo se han estandarizado las descripciones.</p> <p>Puedes conocer m\u00e1s de los Emoji haciendo clic aqu\u00ed</p>"},{"location":"unidades/introduccion-al-pensamiento-computacional/representacion-de-datos/sistemas-de-representacion/#representando-imagenes-videos-y-sonidos","title":"Representando im\u00e1genes, videos y sonidos","text":"<p>Con bits, tambi\u00e9n podemos asignar n\u00fameros a colores. Hay muchos sistemas diferentes para representar los colores, pero el sistema m\u00e1s conocido es RGB, que representa la cantidad de rojo, verde y azul que componen a un color espec\u00edfico:</p> <p></p> <p>Por ejemplo, nuestro patr\u00f3n de bits anterior, 72, 73 y 33, que dec\u00eda HI! a trav\u00e9s de texto, indicar\u00eda la cantidad de rojo (72), verde (73) y azul (33) en un color. Y nuestros programas sabr\u00edan que esos bits se asignan a un color (lo interpretar\u00edan como un tono claro de amarillo) si abri\u00e9ramos un archivo de imagen, en lugar de recibirlos en un mensaje de texto:</p> <p></p> <p>Los puntos en nuestras pantallas se denominan p\u00edxeles, y las im\u00e1genes tambi\u00e9n se componen de muchos miles o millones de esos p\u00edxeles. </p> <p>Entonces, al usar tres bytes para representar el color de cada p\u00edxel, podemos crear im\u00e1genes. </p> <p>Podemos ver p\u00edxeles en un emoji si hacemos zoom, por ejemplo:</p> <p></p> <ul> <li> <p>Las im\u00e1genes son simplemente colecciones de valores RGB.</p> </li> <li> <p>Los videos son secuencias de muchas im\u00e1genes, que cambian varias veces por segundo para darnos la apariencia de movimiento, como lo har\u00eda un flipbook. Puedes ver un ejemplo en YouTube haciendo clic aqu\u00ed</p> </li> <li> <p>La m\u00fasica tambi\u00e9n se puede representar con bits. MIDI es uno de esos formatos que representa la m\u00fasica con n\u00fameros para cada una de las notas y su duraci\u00f3n y volumen. Puedes saber m\u00e1s sobre el est\u00e1ndar MIDI hacindo clic aqu\u00ed</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/","title":"Lenguajes de programaci\u00f3n","text":""},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#introduccion","title":"Introducci\u00f3n","text":"<p>Un lenguaje de programaci\u00f3n es un conjunto de reglas y s\u00edmbolos utilizados para escribir programas de computadora.</p> <p>Los programas escritos en un lenguaje de programaci\u00f3n son instrucciones que le dicen a una computadora qu\u00e9 hacer.</p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis y sem\u00e1ntica, que determinan c\u00f3mo se deben escribir y entender esas instrucciones.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#que-es-un-lenguaje-de-programacion","title":"\u00bfQu\u00e9 es un lenguaje de programaci\u00f3n?","text":"<p>Definici\u00f3n</p> <p>Un lenguaje de programaci\u00f3n es un lenguaje formal, artificial, formado por un conjunto de reglas gramaticales  y s\u00edmbolos que le proporcionan al programador las herramientas necesarias para poder escribir una serie de instrucciones de manera ordenada, denominado programa inform\u00e1tico, a partir de un algoritmo, con el fin de controlar el comportamiento f\u00edsico y/o l\u00f3gico de un sistema inform\u00e1tico, de manera que este pueda resolver un problema de manera eficiente, devolviendo resultados procesados a partir de una serie de datos de entrada.</p> <p>Los programas escritos en un lenguaje de programaci\u00f3n son instrucciones que le dicen a una computadora qu\u00e9 hacer. </p> <p>Cada lenguaje de programaci\u00f3n tiene su propia sintaxis y sem\u00e1ntica, que determinan c\u00f3mo se deben escribir esas instrucciones para que la computadora pueda ejecutarlas correctamente.</p> <p>Cada lenguaje de programaci\u00f3n tiene sus propias caracter\u00edsticas y prop\u00f3sitos espec\u00edficos. Algunos lenguajes est\u00e1n especializados en ciertos dominios, como el desarrollo web, el an\u00e1lisis de datos, la inteligencia artificial o la programaci\u00f3n de sistemas. Otros lenguajes son m\u00e1s generales y se pueden utilizar en una amplia gama de aplicaciones.</p> <p>Cada lenguaje tiene su propia documentaci\u00f3n, tutoriales y recursos disponibles para ayudarte a profundizar en su estudio. </p> <p>Info</p> <p>Â¡Para recordar! que la pr\u00e1ctica es fundamental para mejorar tus habilidades de programaci\u00f3n.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#teoria-de-los-lenguajes-de-programacion","title":"Teor\u00eda de los lenguajes de programaci\u00f3n","text":"<p>La teor\u00eda de los lenguajes de programaci\u00f3n es un campo de estudio que se enfoca en el dise\u00f1o, la implementaci\u00f3n, la sem\u00e1ntica y el an\u00e1lisis de los lenguajes de programaci\u00f3n. A trav\u00e9s de la teor\u00eda de los lenguajes de programaci\u00f3n, se busca comprender c\u00f3mo los lenguajes de programaci\u00f3n funcionan y c\u00f3mo se pueden desarrollar de manera efectiva.</p> <p>Algunos conceptos clave dentro de la teor\u00eda de los lenguajes de programaci\u00f3n son:</p> Sintaxis tipos de dato Teor\u00eda de la complejidad Sem\u00e1ntica Compiladores e int\u00e9rpretes Teor\u00eda de la computabilidad An\u00e1lisis l\u00e9xico y an\u00e1lisis sint\u00e1ctico <p>La teor\u00eda de los lenguajes de programaci\u00f3n es fundamental para comprender y desarrollar lenguajes de programaci\u00f3n, dise\u00f1ar compiladores e int\u00e9rpretes, y analizar y optimizar programas. </p> <p>Ayuda a los programadores a comprender los fundamentos te\u00f3ricos detr\u00e1s de los lenguajes que utilizan y proporciona herramientas para abordar problemas de programaci\u00f3n de manera m\u00e1s efectiva.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#categorias-de-los-lenguajes-de-programacion","title":"Categor\u00edas de los lenguajes de programaci\u00f3n","text":"<p>Los lenguajes de programaci\u00f3n se pueden clasificar en tres categor\u00edas principales:</p> <ul> <li> <p>Lenguajes de bajo nivel: estos lenguajes est\u00e1n m\u00e1s cerca del lenguaje de la m\u00e1quina y proporcionan un mayor control directo sobre el hardware de la computadora. Ejemplos de lenguajes de programaci\u00f3n de bajo nivel incluyen el lenguaje ensamblador y el lenguaje de m\u00e1quina. Estos lenguajes suelen ser m\u00e1s dif\u00edciles de aprender y de utilizar, pero ofrecen un mayor rendimiento y eficiencia.</p> </li> <li> <p>Lenguajes de alto nivel: estos lenguajes est\u00e1n m\u00e1s alejados del lenguaje de la m\u00e1quina y se centran en la facilidad de uso y la legibilidad del c\u00f3digo. Ejemplos de lenguajes de programaci\u00f3n de alto nivel populares incluyen Python, Java, JavaScript, C# y muchos otros. Estos lenguajes suelen ser m\u00e1s f\u00e1ciles de aprender y de utilizar, ya que est\u00e1n dise\u00f1ados para ser m\u00e1s cercanos al lenguaje humano.</p> </li> <li> <p>Lenguajes de nivel intermedio: el t\u00e9rmino \"lenguaje de nivel intermedio\" a menudo se utiliza para describir lenguajes que se encuentran entre los lenguajes de alto nivel y los lenguajes de bajo nivel. Estos lenguajes combinan caracter\u00edsticas y elementos de ambos extremos del espectro.</p> </li> </ul> <p>Atenci\u00f3n</p> <p>Es importante tener en cuenta que el nivel de un lenguaje no es una clasificaci\u00f3n absoluta y puede variar dependiendo del contexto y de las caracter\u00edsticas espec\u00edficas del lenguaje.</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#lenguajes-de-bajo-nivel","title":"Lenguajes de bajo nivel","text":"<p>Estos lenguajes suelen tener una correspondencia directa con las instrucciones del procesador y no proporcionan abstracciones de alto nivel.</p> <ul> <li> <p>Lenguaje m\u00e1quina: es el conjunto de instrucciones directamente entendibles y ejecutables por el procesador de una computadora. Estas instrucciones est\u00e1n escritas en c\u00f3digo binario (0 y 1) y representan operaciones b\u00e1sicas a nivel de hardware, como cargar datos en registros o realizar operaciones aritm\u00e9ticas. Aunque el lenguaje m\u00e1quina es el lenguaje de m\u00e1s bajo nivel, no es pr\u00e1ctico para la programaci\u00f3n manual debido a su complejidad y falta de legibilidad.</p> </li> <li> <p>Lenguaje ensamblador (assembler): Es el lenguaje de m\u00e1s cercano al lenguaje m\u00e1quina. Utiliza mnem\u00f3nicos para representar las instrucciones que entiende directamente el procesador y realizar optimizaciones a nivel de bit. Es espec\u00edfico de la arquitectura del procesador y se utiliza para programaci\u00f3n de bajo nivel, optimizaci\u00f3n y desarrollo de controladores de hardware. Cada instrucci\u00f3n ensambladora se traduce directamente a una instrucci\u00f3n de m\u00e1quina. </p> </li> <li> <p>Lenguaje C: aunque el lenguaje C es considerado un lenguaje de nivel intermedio, tambi\u00e9n puede ser considerado un lenguaje de bajo nivel en comparaci\u00f3n con lenguajes de m\u00e1s alto nivel. C proporciona un control m\u00e1s cercano al hardware y permite la manipulaci\u00f3n directa de memoria y punteros.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#lenguajes-de-alto-nivel","title":"Lenguajes de alto nivel","text":"<p>Estos lenguajes ofrecen un alto nivel de abstracci\u00f3n y se alejan de los detalles espec\u00edficos del hardware de la computadora. Est\u00e1n dise\u00f1ados para facilitar la programaci\u00f3n y permitir un enfoque m\u00e1s orientado al problema en lugar de preocuparse por la implementaci\u00f3n a nivel de m\u00e1quina.</p> <ul> <li> <p>Python: es un lenguaje ampliamente utilizado que se destaca por su sintaxis clara y legible, lo que lo hace muy accesible para principiantes. Python ofrece una amplia gama de bibliotecas y marcos de trabajo que facilitan el desarrollo r\u00e1pido de aplicaciones.</p> </li> <li> <p>Java: es un lenguaje orientado a objetos. Se enfoca en la portabilidad y la capacidad de ejecutar programas en diferentes plataformas sin tener que preocuparse por los detalles de bajo nivel. Se utiliza ampliamente en el desarrollo de aplicaciones empresariales y en el desarrollo de aplicaciones para dispositivos m\u00f3viles.</p> </li> <li> <p>C#: pronunciado \"C sharp\u201d, es un lenguaje de programaci\u00f3n orientado a objetos que se utiliza com\u00fanmente en el desarrollo de aplicaciones para Windows y el entorno .NET.</p> </li> <li> <p>JavaScript: es un lenguaje de programaci\u00f3n de alto nivel utilizado principalmente para el desarrollo Web. JavaScript permite la interactividad en los navegadores y se ha convertido en un lenguaje fundamental para el desarrollo Web front-end.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#lenguajes-de-nivel-intermedio","title":"Lenguajes de nivel intermedio","text":"<p>Estos lenguajes combinan caracter\u00edsticas y elementos de los lenguajes de bajo y de alto nivel, ofreciendo, generalmente, un equilibrio entre el control de bajo nivel y las abstracciones de alto nivel.</p> <ul> <li> <p>C: El lenguaje C se considera a menudo un lenguaje de nivel intermedio, ya que ofrece un mayor control de bajo nivel en comparaci\u00f3n con los lenguajes de alto nivel, como Python o Java. C permite la manipulaci\u00f3n directa de memoria y el uso de punteros, lo que lo convierte en una opci\u00f3n popular para tareas que requieren un control cercano al hardware.</p> </li> <li> <p>C++: C++ es una extensi\u00f3n del lenguaje C que agrega caracter\u00edsticas de programaci\u00f3n orientada a objetos. Si bien C++ ofrece un nivel de abstracci\u00f3n m\u00e1s alto que el lenguaje C, tambi\u00e9n permite el control de bajo nivel y la manipulaci\u00f3n directa de memoria y punteros, consider\u00e1ndolo un lenguaje de nivel intermedio.</p> </li> <li> <p>Pascal: Pascal es un lenguaje de programaci\u00f3n estructurado que proporciona un equilibrio entre la facilidad de uso y el control de bajo nivel. Fue dise\u00f1ado para fomentar la claridad y la legibilidad del c\u00f3digo, lo que lo hace especialmente popular en entornos educativos.</p> </li> <li> <p>Ada: Ada es un lenguaje de programaci\u00f3n de prop\u00f3sito general que se utiliza en aplicaciones cr\u00edticas, como sistemas embebidos y aeroespaciales. Combina caracter\u00edsticas de alto nivel y control de bajo nivel para garantizar la seguridad y la fiabilidad de los sistemas.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#cada-lenguaje-un-lenguaje","title":"Cada lenguaje, un lenguaje","text":"<p>Es importante comprender que cada lenguaje posee su propia sintaxis. En algunos casos, esta sentencia puede ser id\u00e9ntica, en otros casos puede variar levemente, y en otros casos ser completamente diferente:</p> <p>C++<pre><code>std::cout &lt;&lt; \"Hola Mundo!\" &lt;&lt; std::endl;\n</code></pre> Pyton<pre><code>print(\"Hola Mundo!\")\n</code></pre> Java<pre><code>System.out.println(\"Hola Mundo!\");\n</code></pre> PHP<pre><code>echo \"Hola Mundo!\";\n</code></pre> C#<pre><code>Console.WriteLine(\"Hola Mundo!\");\n</code></pre> JavaScript<pre><code>console.log(\"Hola Mundo!\");\n</code></pre> Ruby<pre><code>puts \"Hola Mundo!\u201d\n</code></pre> Go<pre><code>fmt.Println(\"Hola Mundo!\")\n</code></pre> Swift<pre><code>print(\"Hola Mundo!\")\n</code></pre> Perl<pre><code>print \"Hola Mundo!\\n\";\n</code></pre> R<pre><code>print(\"Hola Mundo!\")\n</code></pre> MATLAB<pre><code>disp('Hola Mundo!')\n</code></pre></p> <p>Estos son solo algunos ejemplos adicionales. Hay una amplia variedad de lenguajes de programaci\u00f3n, cada uno con su propia sintaxis para imprimir \"Hola Mundo!\".</p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#tipos-de-programas-segun-el-lenguaje-de-programacion","title":"Tipos de programas seg\u00fan el lenguaje de programaci\u00f3n","text":"<p>!!! warning \"secci\u00f3n en desarrollo</p> <p>Cada programa tiene un formato ejecutable que la computadora puede utilizar directamente para ejecutar las instrucciones. El mismo programa en su formato de c\u00f3digo fuente legible para humanos, del cual se derivan los programas ejecutables (por ejemplo, compilados), le permite a un programador estudiar y desarrollar sus algoritmos. </p> <p>Una colecci\u00f3n de programas de computadora y datos relacionados se conoce como software.</p> <ul> <li> <p>PROGRAMA FUENTE: tambi\u00e9n llamado c\u00f3digo fuente, es el conjunto de l\u00edneas de texto con los pasos que debe seguir la computadora para realizar una tarea. Este c\u00f3digo se escribe en un lenguaje de programaci\u00f3n que sigue uno de los paradigmas de programaci\u00f3n y que puede ser convertido en un archivo ejecutable (usualmente llamado un programa ejecutable) por un compilador y m\u00e1s tarde ejecutado por una computadora.</p> </li> <li> <p>PROGRAMA OBJETO: Programa escrito en lenguaje de m\u00e1quina. Es el que ejecuta la computadora.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#traductores-de-lenguaje-compiladores-vs-interpretes","title":"Traductores de lenguaje: compiladores vs. int\u00e9rpretes","text":"<p>Un compilador y un int\u00e9rprete son dos tipos de software usados para ejecutar programas de computadora. Traducen programas fuente a lenguaje de m\u00e1quina.</p> <p>Un compilador traduce todo el c\u00f3digo fuente de un programa en un lenguaje de programaci\u00f3n determinado a un lenguaje de bajo nivel, generalmente en forma de c\u00f3digo m\u00e1quina, que puede ser ejecutado directamente por el hardware de la computadora. El proceso de compilaci\u00f3n se realiza antes de la ejecuci\u00f3n y genera un archivo ejecutable independiente. </p> <p>El c\u00f3digo fuente se compila una sola vez, lo que puede llevar m\u00e1s tiempo, pero el programa compilado se ejecuta de manera m\u00e1s eficiente. Los ejemplos de compiladores incluyen GCC para C/C++ y Java JDK para Java.</p> <p>Por otro lado, un int\u00e9rprete lee y ejecuta el c\u00f3digo fuente de un programa l\u00ednea por l\u00ednea durante la ejecuci\u00f3n. No se genera un archivo ejecutable independiente antes de la ejecuci\u00f3n. El int\u00e9rprete traduce y ejecuta cada instrucci\u00f3n a medida que se encuentra en el c\u00f3digo fuente. Esto permite una ejecuci\u00f3n m\u00e1s r\u00e1pida del programa, pero puede llevar m\u00e1s tiempo en general, ya que la traducci\u00f3n y ejecuci\u00f3n ocurren repetidamente durante la ejecuci\u00f3n del programa. Los ejemplos de int\u00e9rpretes incluyen Python, JavaScript y Ruby.</p> <p>\u00a1Â¡Para recordar!!</p> <p>En resumen, un compilador traduce el c\u00f3digo fuente a un lenguaje de bajo nivel antes de la ejecuci\u00f3n, lo que resulta en una ejecuci\u00f3n m\u00e1s eficiente, pero lleva m\u00e1s tiempo en la fase de compilaci\u00f3n. Un int\u00e9rprete lee y ejecuta el c\u00f3digo fuente l\u00ednea por l\u00ednea durante la ejecuci\u00f3n, lo que permite una ejecuci\u00f3n m\u00e1s r\u00e1pida, pero puede llevar m\u00e1s tiempo en general.</p> <p></p>"},{"location":"unidades/lenguajes-de-programacion/lenguajes-de-programacion/#resumen","title":"Resumen","text":"<p>Warning</p> <p>Es igual al resumen de conceptos-basicos-de-la-programacion.md</p> <p>Es importante tener una comprensi\u00f3n clara de los conceptos b\u00e1sicos de la programaci\u00f3n, como variables, estructuras de control de flujo, funciones y programaci\u00f3n orientada a objetos, entre otros.  Dedica tiempo a aprender estos conceptos y aseg\u00farate de que los comprendes antes de avanzar.</p> <p>Hay muchos lenguajes de programaci\u00f3n diferentes para elegir, como Python, Java, JavaScript, C ++, entre otros. Elige un lenguaje que sea adecuado para tus objetivos y que te resulte c\u00f3modo de usar.</p> <p>Busca recursos en l\u00ednea disponibles para aprender programaci\u00f3n, como videos de tutoriales, documentaci\u00f3n y foros de programaci\u00f3n. Toma ventaja de estos recursos para profundizar tu aprendizaje.</p> <p>Busca ejercicios y desaf\u00edos en l\u00ednea para practicar lo que has aprendido. Intenta resolver los ejercicios y retos por ti mismo y luego compara tu soluci\u00f3n con la soluci\u00f3n proporcionada.</p> <p>Trabaja en proyectos. Es una excelente manera de aplicar lo que has aprendido y desarrollar tus habilidades de programaci\u00f3n. Comienza con proyectos peque\u00f1os y luego aumenta gradualmente la complejidad.</p> <p>La programaci\u00f3n requiere pr\u00e1ctica y perseverancia para dominarla. Dedica tiempo a practicar peri\u00f3dicamente y no te desanimes si encuentras obst\u00e1culos en el camino.</p>"},{"location":"unidades/lenguajes-de-programacion/python/conversion-de-tipo-de-dato-de-una-variable/","title":"Conversion de tipo de dato de una variable","text":"<p>a = int(\"3\") + 4</p> <p>b = str(3) + \"4\"</p> <p>print(a, b)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructras-de-control/","title":"Estructras de control","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructras-de-control/#for-in-range","title":"for \u2026 in range","text":"<p>En Python, el valor del paso en la funci\u00f3n range() se establece cuando se crea el objeto range, y no se puede cambiar despu\u00e9s. Por lo tanto, aunque cambies el valor de paso a 3 dentro del bucle, el bucle seguir\u00e1 incrementando n en pasos de 1.</p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/","title":"Funciones con python","text":""},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-sin-parametros","title":"Funciones sin par\u00e1metros","text":"Python<pre><code># Definici\u00f3n de funciones\n\n# Definimos una funci\u00f3n que imprime en pantalla un saludo\ndef saludar():\n    print (\"Hola, \u00bfc\u00f3mo est\u00e1s?\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n saludar()\nsaludar()\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-con-parametros","title":"Funciones con par\u00e1metros","text":"Python<pre><code># Definici\u00f3n de funciones\n\n# Definimos una funci\u00f3n que suma dos n\u00fameros pasados como argumentos desde la llamada a la funci\u00f3n\n# La funci\u00f3n posee dos par\u00e1metros, uno para cada uno de los argumentos mencionados\ndef sumar(num1, num2):\n    print(f\"La suma de los n\u00fameros enteros {num1} y {num2} es {num1 + num2}.\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n sumar():\nsumar(1, 100)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La suma de los n\u00fameros enteros 1 y 100 es 101.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#ejemplo-de-aplicacion","title":"Ejemplo de aplicaci\u00f3n","text":"<p>Teniendo en cuenta el ejemplo anterior, modificar el programa para que sume todos los n\u00fameros enteros entre 2 n\u00fameros espec\u00edficos.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Definimos una funci\u00f3n que suma todos los n\u00fameros enteros entre dos n\u00fameros pasados como argumentos desde la llamada a la funci\u00f3n\n# La funci\u00f3n posee dos par\u00e1metros, uno para cada uno de los argumentos mencionados\ndef sumar_entre(num_menor, num_mayor):\n    # Inicializamos la variable acumuladora\n    suma = 0   \n\n    for num in range(num_menor, num_mayor + 1):\n        suma += num\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n sumar_entre():\nsumar_entre(1, 100)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La suma de todos los n\u00fameros los enteros entre 1 y 100 es 5050.\n</code></pre> <p>\u00bfConoces la historia del peque\u00f1o Gauss y la suma de los n\u00fameros enteros entre 1 y 100?</p> <p>\"... Ocurri\u00f3 en la escuela de Brunswick, cierto d\u00eda de 1786, cuando Gauss contaba nueve a\u00f1os. El maestro encarg\u00f3 a sus alumnos que hiciesen como ejercicio de adici\u00f3n la suma de todos los n\u00fameros enteros desde el 1 hasta el 100, ambos inclusive. Se trataba de sumar la sucesi\u00f3n 1, 2, 3, 4, ... , 99, 100. Los alumnos, con una sola excepci\u00f3n, empezaron sumando 1 + 2; al resultado de esta suma, 3, le a\u00f1adieron el 3, lo cual les dio 6, luego 4, obteniendo 10 y as\u00ed sucesivamente. La suma de los cien sumandos (cada una de las cantidades parciales que han de acumularse o a\u00f1adirse unas a otras para formar la suma o cantidad total que se busca) por este procedimiento hab\u00eda de tener ocupados a los estudiantes por un buen rato. Sin embargo, cuentan las cr\u00f3nicas que, al poco tiempo de propuesta la tarea, cierto alumno, llamado Carl Friedrich Gauss, se present\u00f3 a su maestro con el resultado correcto: 5050.  El maestro, perplejo, le pregunt\u00f3 al peque\u00f1o c\u00f3mo se las hab\u00eda arreglado para hacer la tarea tan pronto. Gauss le explic\u00f3 que los n\u00fameros que se iban a sumar se pod\u00edan agrupar en parejas: 1 + 100, 2 + 99, 3 + 98, etc. cada una de las parejas sumando 101.  Como se formaban 50 parejas, bastaba hacer 101 \u00b7 50 = 5050. Gauss hab\u00eda descubierto por s\u00ed solo y a la edad de nueve a\u00f1os el m\u00e9todo para obtener la suma de las sucesiones aritm\u00e9ticas ...\"</p> <p>\"Gauss, un genio sobrehumano\" por Paulino Valderas Link al documento</p> <p>Este m\u00e9todo permite optimizar de manera incre\u00edble el algoritmo del programa para que sea mucho m\u00e1s eficiente en t\u00e9rminos de rapidez:</p> Python<pre><code># Definici\u00f3n de funciones\n\ndef sumar_numeros_entre(num_menor, num_mayor):\n    # Inicializamos la variable acumuladora\n    suma = 0   \n\n    for num in range(num_menor, num_mayor + 1):\n        suma += num\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\ndef sumar_sucesiones_aritmeticas(num_menor, num_mayor):\n    valor_pareja = num_menor + num_mayor\n    cant_parejas = (num_mayor - num_menor + 1) // 2\n    numero_intermedio_si_cant_numeros_es_impar = 0 # El 0 al ser neutro, es como si no existiese valor para sumar m\u00e1s adelante\n\n    # Esta estructura alternativa detecta si la cantidad de n\u00fameros es impar\n    # En caso de ser asi, el n\u00famero del medio de la serie no tendr\u00eda pareja\n    # Por lo tanto, necesita sumarse solo al conjunto de parejas\n    if (num_mayor - num_menor + 1) % 2 != 0:\n        numero_intermedio_si_cant_numeros_es_impar = (num_mayor - num_menor) // 2 + num_menor\n\n    # C\u00e1lculo seg\u00fan el algoritmo desarrollado por Gauss        \n    suma = valor_pareja * cant_parejas + numero_intermedio_si_cant_numeros_es_impar\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\n\n# Bloque principal del programa\n\n# Llamamos (invocamos) a la funci\u00f3n sumar_entre():\nsumar_numeros_entre(5, 20)\n\n# Llamamos (invocamos) a la funci\u00f3n sumar_sucesiones_aritmeticas():\nsumar_sucesiones_aritmeticas(5, 20)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La suma de todos los n\u00fameros los enteros entre 5 y 20 es 200.\nLa suma de todos los n\u00fameros los enteros entre 5 y 20 es 200.\n</code></pre> <p>Â¡Para recordar!</p> <p>Analizando ambas funciones del ejercicio anterior, podemos deducir que muchas veces la simplicidad del c\u00f3digo puede representar una ejecuci\u00f3n poco eficiente mientras que un c\u00f3digo con mayor complejidad (no siempre m\u00e1s l\u00edneas significan mayor complejidad) puede representar una ejecuci\u00f3n muy eficiente.</p> <p>Por eficiencia podemos hablar de velocidad en tiempo de ejecuci\u00f3n y/o cantidad de instrucciones ejecutadas y/o cantidad de recursos f\u00edsicos empleados (lease memoria RAM por ejemplo) entre otros par\u00e1metros.</p> <p>\u00bfPor qu\u00e9 la eficiencia de un algoritmo es muy importante?</p> <p>Podr\u00edamos hablar del tema durante horas y debatir mil cuestiones. Pero solo vamos a ir a un ejemplo concreto siguiendo con el m\u00e9todo Gauss:</p> <p>Ejecutamos ambos programas para calcular la suma de valores entre 1 y 100000</p> <p>El resultado fue determinante en cuestiones de tiempo de ejecuci\u00f3n:</p> Terminal (Entrada/Salida)<pre><code># Sin aplicar el m\u00e9todo de Gauss\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\nLa funci\u00f3n se ejecut\u00f3 en: 15.763926029205322 segundos (1705702169.002692 -&gt; 1705702184.766618)\n\n# Aplicando el m\u00e9todo de Gauss\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\nLa funci\u00f3n se ejecut\u00f3 en: 0.0 segundos (1705702184.766618 -&gt; 1705702184.766618)\n</code></pre> <p>Los dos valores entre par\u00e9ntesis representan el momento en que se inici\u00f3 y finaliz\u00f3 la ejecuci\u00f3n de la funci\u00f3n.</p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-con-parametros-opcionales","title":"Funciones con par\u00e1metros opcionales","text":"<p>Para entender el concepto de par\u00e1metro opcional, vamos a modificar el c\u00f3digo del ejemplo anterior para que:</p> <ul> <li>Se puedan ingresar los 2 n\u00fameros para realizar la suma</li> <li>Se pueda elegir, opcionalmente, si se desea conocer el tiempo que hubiera tardado la computadora en hacer el c\u00e1lculo con y sin el m\u00e9todo de Gauss</li> </ul> Python<pre><code># Importaci\u00f3n de los m\u00f3dulos necesarios para la ejecuci\u00f3n del programa\n\nimport time\n\n\n# Definici\u00f3n de funciones\n\ndef sumar_numeros_entre(num_menor, num_mayor, ver_tiempo_ejecucion = False):\n    suma = 0   \n\n    if ver_tiempo_ejecucion:\n        start_time = time.time()\n\n    for num in range(num_menor, num_mayor + 1):\n        suma += num\n\n    if ver_tiempo_ejecucion:\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(f\"La funci\u00f3n sin el m\u00e9todo de Gauss se ejecut\u00f3 en: {execution_time} segundos\\n{start_time} -&gt; {end_time} = {end_time-start_time}\")\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\ndef sumar_sucesiones_aritmeticas(num_menor, num_mayor, ver_tiempo_ejecucion = False):\n\n    if ver_tiempo_ejecucion:\n        start_time = time.time()\n\n    valor_pareja = num_menor + num_mayor\n    cant_parejas = (num_mayor - num_menor + 1) // 2\n    numero_intermedio_si_cant_numeros_es_impar = 0 \n\n    if (num_mayor - num_menor + 1) % 2 != 0:\n        numero_intermedio_si_cant_numeros_es_impar = (num_mayor - num_menor) // 2 + num_menor\n\n    suma = valor_pareja * cant_parejas + numero_intermedio_si_cant_numeros_es_impar\n\n    if ver_tiempo_ejecucion:\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(f\"La funci\u00f3n con el m\u00e9todo de Gauss se ejecut\u00f3 en: {execution_time} segundos\\n{start_time} -&gt; {end_time} = {end_time-start_time}\")\n\n    print(f\"La suma de todos los n\u00fameros los enteros entre {num_menor} y {num_mayor} es {suma}.\")\n\n\n# Bloque principal del programa\n\nnum_inicial = int(input(\"Ingrese el n\u00famero inicial de la serie: \"))\nnum_final = int(input(\"Ingrese el n\u00famero final de la serie: \"))\n\nver_tiempo_ejecucion = True if input(\"Desea ver el tiempo de ejecuci\u00f3n (s/n)? \").lower() == \"s\" else False\n\n\nif ver_tiempo_ejecucion:\n    sumar_numeros_entre(num_inicial, num_final, ver_tiempo_ejecucion)\n    sumar_sucesiones_aritmeticas(num_inicial, num_final, ver_tiempo_ejecucion)\n\nelse:\n    sumar_sucesiones_aritmeticas(num_inicial, num_final)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese el n\u00famero inicial de la serie: 1\nIngrese el n\u00famero final de la serie: 100000\nDesea ver el tiempo de ejecuci\u00f3n (s/n)? s\n\nLa funci\u00f3n sin el m\u00e9todo de Gauss se ejecut\u00f3 en: 0.0008780956268310547 segundos \n1705704419.080389 -&gt; 1705704419.081267 = 0.0008780956268310547\n\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\n\n\nLa funci\u00f3n con el m\u00e9todo de Gauss se ejecut\u00f3 en: 0.0 segundos \n1705704419.081267 -&gt; 1705704419.081267 = 0.0\n\nLa suma de todos los n\u00fameros los enteros entre 1 y 100000 es 5000050000.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-con-parametros-posicionales-o-con-parametros-identificados","title":"Funciones con par\u00e1metros posicionales o con par\u00e1metros identificados","text":"<p>Veamos el caso de un programa que saluda al usuario de manera personalizada. Podr\u00eda darse el caso donde se conoce o no se conoce el nombre del usuario para nombrarlo. Tambi\u00e9n podr\u00eda saludar en funci\u00f3n del momento del d\u00eda: ma\u00f1ana, tarde o noche. Incluso podr\u00eda evaluar si el usuario utiliza poco o mucho el programa en funci\u00f3n del tiempo transcurrido desde su \u00faltimo uso. Y alentarlo a que lo haga m\u00e1s seguido.</p> Python<pre><code># Importaci\u00f3n de los m\u00f3dulos necesarios para la ejecuci\u00f3n del programa\n\nimport datetime\nfrom os import system\n\n# Definici\u00f3n de funciones\n\ndef saludar(nombre=None, momento_dia=None, ultimo_uso=None):\n\n    if momento_dia == \"tarde\":\n        print(\"\u00a1Buenas tardes!\")\n\n    elif momento_dia == \"noche\":\n        print(\"\u00a1Buenas noches!\")\n\n    else:\n        print(\"\u00a1Buenos d\u00edas!\")\n\n    print(\"\u00bfC\u00f3mo te encuentras hoy\", f\", {nombre}\" if nombre else \"\", \"?\", sep=\"\")\n\n    if ultimo_uso:\n        tiempo_transcurrido = datetime.datetime.now() - ultimo_uso\n\n        if tiempo_transcurrido.days &gt; 30:\n            print(\"Hace mucho que no usas el programa. \u00a1Qu\u00e9 bueno verte de nuevo por aqu\u00ed!\")\n        elif tiempo_transcurrido.days &lt; 5:\n            print(\"\u00a1Gracias por usar el programa regularmente!\")\n\n\n# Bloque principal del programa\n\n# Inicializaci\u00f3n de la variable de \u00faltimo uso para la simulaci\u00f3n de \u00faltimo acceso\nultimo_uso = None\n\nsystem(\"cls\")\n\n# Ejemplo de uso de la funci\u00f3n saludar():\n\n# 1) Pasando todos los argumentos en el orden que los recibir\u00e1n los par\u00e1metros (manera tradicional):\nprint(\"\\n\\nUsuario 1:\")\nultimo_uso = datetime.datetime.now() - datetime.timedelta(days=31)\nsaludar(\"Juan\", \"tarde\", ultimo_uso) # Argumentos pasados a par\u00e1metros posicionales\n\n# 2) Pasando todos los argumentos identificando los par\u00e1metros que los recibir\u00e1n:\nprint(\"\\n\\nUsuario 2:\")\nultimo_uso = datetime.datetime.now() - datetime.timedelta(days=15)\nsaludar(nombre=\"Jos\u00e9\", ultimo_uso=ultimo_uso, momento_dia=\"noche\") # Argumentos pasados a par\u00e1metros identificados\n\n# 3) Pasando todos los argumentos de manera mezclada:\nprint(\"\\n\\nUsuario 3:\")\nultimo_uso = datetime.datetime.now() - datetime.timedelta(days=4)\nsaludar(\"Pedro\", ultimo_uso=ultimo_uso, momento_dia=\"noche\") # Lee el destacado m\u00e1s abajo para entender esta sintaxis\n\n# 4) Pasando algunos argumentos solamente:\nprint(\"\\n\\nUsuario 4:\")\nsaludar(momento_dia=\"dia\") # Lee el destacado m\u00e1s abajo para entender esta sintaxis\n</code></pre> <p>\u00a1Muy importante!</p> <p>En el ejemplo anterior, vemos que podemos mezclar el orden de los argumentos dentro de la llamada a la funci\u00f3n respecto del orden de los par\u00e1metros en la definici\u00f3n de la funci\u00f3n si indicamos su nombre. </p> <p>Pero siempre es necesario que aquellos argumentos identificados con el nombre del par\u00e1metro est\u00e9n a la derecha de los argumentos que pasar\u00e1n a los par\u00e1metros posicionales, es decir, aquellos argumentos que se indican en la llamada a la funci\u00f3n sin especificar el nombre del par\u00e1metro y que se asocian por su posici\u00f3n.</p> <p>Y si no pasas todos los argumentos porque la funci\u00f3n posee par\u00e1metros opcionales, deber\u00e1s identificar todos los argumentos a partir del primer argumento pasado que no se encuentre en la posici\u00f3n del par\u00e1metro que debe recibirlo.</p> Terminal (Entrada/Salida)<pre><code>Usuario 1:\n\u00a1Buenas tardes!\n\u00bfC\u00f3mo te encuentras hoy, Juan?\nHace mucho que no usas el programa. \u00a1Qu\u00e9 bueno verte de nuevo por ac\u00e1!\n\n\nUsuario 2:\n\u00a1Buenas noches!\n\u00bfC\u00f3mo te encuentras hoy, Jos\u00e9?\n\n\nUsuario 3:\n\u00a1Buenas noches!\n\u00bfC\u00f3mo te encuentras hoy, Pedro?\n\u00a1Gracias por usar el programa regularmente!\n\n\nUsuario 4:\n\u00a1Buenos d\u00edas!\n\u00bfC\u00f3mo te encuentras hoy?\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-que-retornan-un-valor-return","title":"Funciones que retornan un valor (return)","text":"<p>La mayor\u00eda de las funciones de un programa cumplen con la tarea de realizar alg\u00fan c\u00e1lculo y retornar el resultado obtenido para ser utilizado en el bloque principal del programa.</p> <p>Por ejemplo, podemos definir una funci\u00f3n que calcule el \u00e1rea de un triangulo en base a determinados argumentos recibidos para luego retornar el resultado obtenido:</p> Python<pre><code># Definici\u00f3n de funciones\n\ndef area_triangulo(base, altura):\n\n    area = (base * altura) / 2\n\n    return area\n\n\n# Bloque principal del programa\n\n# Solicita al usuario que ingrese las medidas del tri\u00e1ngulo\nbase = float(input(\"Ingrese la base del tri\u00e1ngulo (en cm.): \"))\naltura = float(input(\"Ingrese la altura del tri\u00e1ngulo (en cm.): \"))\n\n# Se invoca a la funci\u00f3n area_triangulo() para luego almacenar el valor retornado en la variable *area*\narea = area_triangulo(base, altura)\n\n# Imprime en pantalla el resultado obtenido\nprint(f\"\\nEl \u00e1rea de un tri\u00e1ngulo con base = {base} cm. y altura = {altura} cm. es {area} cm\u00b2.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese la base del tri\u00e1ngulo (en cm.): 10\nIngrese la altura del tri\u00e1ngulo (en cm.): 8\n\nEl \u00e1rea de un tri\u00e1ngulo con base = 10.0 cm. y altura = 8.0 cm. es 40.0 cm\u00b2.\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Â¡Para recordar! que en Python todo es un objeto. Con esto en mente, es natural que una funci\u00f3n pueda devolver cualquier objeto. Asi, como en el ejemplo anterior devuelve un valor de punto flotante, tambi\u00e9n podr\u00eda devolver un valor entero, o un valor booleano, o un caracter, o incluso una estructura de datos como una cadena de texto, una lista, un diccionario, una tupla, un conjunto o cualquier otra estructura v\u00e1lida.</p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-con-python/#funciones-que-retornan-mas-de-un-valor","title":"Funciones que retornan m\u00e1s de un valor","text":"<p>Python permite definir funciones que retornan m\u00e1s de un valor.</p> <p>Por ejemplo, definamos una funci\u00f3n que reciba una lista de n\u00fameros y devuelva el mayor y el menor de los n\u00fameros que se encuentren en ella:</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Esta funci\u00f3n recibe una lista de n\u00fameros y retorna una tupla con el mayor y el menor valor\ndef funcion_mayor_menor(lista):\n\n    if len(lista) == 0:\n        return None, None # Si la lista est\u00e1 vac\u00eda, no hay mayor ni menor valor\n\n    mayor = max(lista)\n    menor = min(lista)\n\n    # Retorna una tupla\n    if mayor == menor:\n        return None, None # Si mayor y menor son iguales, no hay mayor ni menor porque hay un solo valor o todos los valores son iguales    \n\n    else:\n        return (mayor, menor) # Tambi\u00e9n funciona sin aplicar los par\u00e9ntesis\n\n\n# Bloque principal del programa\n\n# Inicializa la lista de n\u00fameros\nnumeros = [1, 1, 2, 3, 4, 5, 5]\n\n# Se invoca a la funci\u00f3n con la lista de n\u00fameros y se recibe una tupla que es desempaquetada en 2 variables\nnum_mayor, num_menor = funcion_mayor_menor(numeros)\n\nif num_mayor and num_menor:\n    # Imprime en pantalla el resultado obtenido\n    print(f\"El mayor valor de la lista {numeros} es {num_mayor} y el menor valor es {num_menor}.\")\n\nelse:\n    print(f\"La lista {numeros} no posee mayor ni menor valor.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>El mayor valor de la lista [1, 1, 2, 3, 4, 5, 5] es 5 y el menor valor es 1.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/","title":"Funciones lambda con python","text":""},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#sintaxis","title":"sintaxis:","text":"<p>Completar esta parte</p> <p>variable = lambda par\u00e1metro_1, ... , parametro_n: return expresi\u00f3n </p>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#ejemplos-de-aplicacion-simple","title":"Ejemplos de aplicaci\u00f3n simple","text":"<p>Ejemplo 1: calcular el cuadrado de un n\u00famero.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para calcular el cuadrado de un n\u00famero\n# Retorna el cuadrado de cada n\u00famero pasado a la funci\u00f3n\ncalcular_cuadrado = lambda x: x**2\n\n\n# Bloque principal del programa\n\nvalor = 4\nprint(\"El cuadrado de\", valor, \"es\", calcular_cuadrado(valor))\n</code></pre> Terminal (Entrada/Salida)<pre><code>El cuadrado de 4 es 16\n</code></pre> <p>Ejemplo 2: determinar si un n\u00famero es par o impar.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para determinar si un n\u00famero es par o impar\n# Retorna \"par\" o \"impar\"\nvalidar_si_numero_es_par_o_impar = lambda x: \"par\" if x % 2 == 0 else \"impar\" \n\n\n# Bloque principal del programa\n\nnumero = 13\nprint(f\"El {numero} es un n\u00famero {validar_si_numero_es_par_o_impar(numero)}\")\n\nnumero = 16\nprint(f\"El {numero} es un n\u00famero {validar_si_numero_es_par_o_impar(numero)}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>El 13 es un n\u00famero impar\nEl 16 es un n\u00famero par\n</code></pre> <p>Ejemplo 3: determinar si un n\u00famero es m\u00faltiplo de otro.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para determinar si un n\u00famero es m\u00faltiplo de otro\n# Retorna \"es m\u00faltiplo\" o \"no es m\u00faltiplo\"\nvalidar_si_es_multiplo = lambda x, y: \"es m\u00faltiplo\" if x % y == 0 else \"no es m\u00faltiplo\"\n\n\n# Bloque principal del programa\n\nvalor_menor = 5 \nvalor_mayor = 15\nprint(\"El \" + str(valor_mayor) + \" \" + validar_si_es_multiplo(valor_mayor, valor_menor) + \" de \" + str(valor_menor))\n\nvalor_menor = 4 \nvalor_mayor = 19\nprint(\"El \" + str(valor_mayor) + \" \" + validar_si_es_multiplo(valor_mayor, valor_menor) + \" de \" + str(valor_menor))\n</code></pre> Terminal (Entrada/Salida)<pre><code>El 15 es m\u00faltiplo de 5\nEl 19 no es m\u00faltiplo de 4\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#ejemplos-de-aplicacion-con-map","title":"Ejemplos de aplicaci\u00f3n con map","text":"<p>Ejemplo 1: calcular el cuadrado de una lista de n\u00fameros.</p> Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para calcular el cuadrado de un n\u00famero\n# Retorna una tupla con el n\u00famero y su cuadrado\ncalcular_cuadrado = lambda x: (x, x**2) \n\n\n# Bloque principal del programa\n\n# Inicializa una lista de n\u00fameros\nlista_de_numeros = [1, 2, 3, 4, 5]\n\n# Emplea la funci\u00f3n *map* para iterar con la lista, invocando a la funci\u00f3n calcular_cuadrado() con cada elemento como argumento y al finalizar almacena los resultados de cada invocaci\u00f3n en una lista\nlista_de_cuadrados = list(map(calcular_cuadrado, lista_de_numeros))\n\n# Itera con la lista de cuadrados imprimiendo en pantalla los resultados obtenidos para cada elemento de la lista de n\u00fameros\nfor nro, cuadrado_de_nro in lista_de_cuadrados:\n    print(\"El cuadrado de\", nro, \"es\", cuadrado_de_nro)\n</code></pre> Terminal (Entrada/Salida)<pre><code>El cuadrado de 1 es 1\nEl cuadrado de 2 es 4\nEl cuadrado de 3 es 9\nEl cuadrado de 4 es 16\nEl cuadrado de 5 es 25\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/funciones-lambda-con-python/#ejemplos-de-aplicacion-con-map-y-lista-de-funciones","title":"Ejemplos de aplicaci\u00f3n con map y lista de funciones","text":"Python<pre><code># Definici\u00f3n de funciones\n\n# Funci\u00f3n lambda para calcular el cuadrado de un n\u00famero\n# Retorna el cuadrado de cada n\u00famero pasado a la funci\u00f3n\ncalcular_cuadrado = lambda x: x**2\n\n# Funci\u00f3n lambda para determinar si un n\u00famero es par o impar\n# Retorna \"par\" o \"impar\"\nvalidar_si_numero_es_par_o_impar = lambda x: \"par\" if x % 2 == 0 else \"impar\"\n\n\n# Bloque principal del programa\n\n# Se define la lista de funciones que se invocar\u00e1n\nlista_de_funciones = [calcular_cuadrado, validar_si_numero_es_par_o_impar]\n\n# Inicializa una lista de n\u00fameros\nlista_de_numeros = [1, 2, 3, 4, 5]\n\n\n# Recorro la lista de valores y aplico las funciones de la lista:\nfor elemento in lista_de_numeros:\n\n    valores = list(map(lambda x: x(elemento), lista_de_funciones))\n\n    print(f\"{elemento} es {valores[1]}, y elevado al cuadrado es {valores[0]}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>1 es impar, y elevado al cuadrado es 1\n2 es par, y elevado al cuadrado es 4\n3 es impar, y elevado al cuadrado es 9\n4 es par, y elevado al cuadrado es 16\n5 es impar, y elevado al cuadrado es 25\n</code></pre> <p>Si analizamos concretamente como resulta la estructura de datos, podemos reemplazar en nuestro c\u00f3digo inicial desde la l\u00ednea 21 por el siguiente c\u00f3digo:</p> Python<pre><code># Recorro la lista de valores y aplico las funciones de la lista:\nfor elemento in lista_de_numeros:\n\n    valores = list(map(lambda x: x(elemento), lista_de_funciones))\n\n    print(elemento, \"---&gt;\", valores)\n</code></pre> <p>Y podremos ver el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>1 ---&gt; [1, 'impar']\n2 ---&gt; [4, 'par']\n3 ---&gt; [9, 'impar']\n4 ---&gt; [16, 'par']\n5 ---&gt; [25, 'impar']\n</code></pre> <p>Por un lado, tenemos los elementos de la lista de n\u00fameros y, por otro lado, tenemos los elementos compuestos por la lista de resultados obtenidos para cada n\u00famero de la lista de n\u00fameros, almacenados en otra lista distinta.</p> <p>Es decir, los n\u00fameros y los resultados obtenidos a partir de ellos no est\u00e1n asociados o vinculados de ninguna manera. Esto puede resultar peligroso a nivel de integridad referencial de datos. Es decir, no hay una \"cadena\" que los ate de manera que no se pierdan ni se mezclen.</p> <p>Si quisi\u00e9ramos evitar este problema, deber\u00edamos vincular los elementos de ambas listas de manera ordenada en una \u00fanica lista. Para ello, podr\u00edamos escribir un c\u00f3digo con sentencias m\u00e1s complejas como las que veremos a continuaci\u00f3n y reemplazar el c\u00f3digo original a partir de la l\u00ednea 21: </p> Python<pre><code># Emplea la funci\u00f3n *map* para iterar con la lista de elementos y, en cada iteraci\u00f3n emplea otra funci\u00f3n *map* para iterar con la lista de funciones invocando a cada una  con cada elemento de la lista de elementos como argumento y al finalizar almacena el valor del elemento y los resultados de cada invocaci\u00f3n en una lista\n\n# El uso del operador de desempaquetado (unpacking operator) ( * ) permite desempaquetar la lista de elementos que genera la funci\u00f3n *map* en elementos individuales\nlista_de_valores = list(map(lambda elemento: list((elemento, *map(lambda x: x(elemento), lista_de_funciones))), lista_de_numeros))\n\n# Itera con la lista de valores imprimiendo en pantalla los resultados obtenidos para cada elemento de la lista de n\u00fameros\nfor elemento, cuadrado, paridad in lista_de_valores:\n    print(f\"{elemento} es {paridad}, y elevado al cuadrado es {cuadrado}\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>1 es impar, y elevado al cuadrado es 1\n2 es par, y elevado al cuadrado es 4\n3 es impar, y elevado al cuadrado es 9\n4 es par, y elevado al cuadrado es 16\n5 es impar, y elevado al cuadrado es 25\n</code></pre> <p>Como podemos observar, el resultado final es el mismo, pero si analizamos concretamente como resulta la estructura de datos ahora veremos que es mucho m\u00e1s ordenada y robusta en cuanto a la vinculaci\u00f3n de todos los elementos:</p> Python<pre><code>print(lista_de_valores)\n</code></pre> Terminal (Entrada/Salida)<pre><code>[[1, 1, 'impar'], [2, 4, 'par'], [3, 9, 'impar'], [4, 16, 'par'], [5, 25, 'impar']]\n</code></pre> <p>Observamos que la lista contiene elementos que son listas que contienen elementos que corresponden al n\u00famero de la lista de n\u00fameros, al cuadrado de dicho n\u00famero y al tipo de paridad de dicho n\u00famero. </p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/","title":"Variable = input(\"Mensaje para usuario\") Para que el usuario ingrese un valor en la variable","text":""},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#el-int-se-utiliza-para-darle-a-la-variable-el-valor-de-un-numero-entero-si-no-se-guarda-texto","title":"El \"int\" se utiliza para darle a la variable el valor de un n\u00famero entero, si no, se guarda texto","text":"<p>num1 = int(input(\"Ingrese el primer n\u00famero: \"))</p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#se-imprime-la-variable-la-coma-es-para-que-haya-un-espacio-sino-se-usa","title":"Se imprime la variable, la coma es para que haya un espacio, sino se usa +","text":"<p>print(\"El valor almacenado en num1 es\" , num1) </p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#evitar-el-salto-de-linea-implicito","title":"Evitar el salto de linea impl\u00edcito","text":"<p>print(\"Esta linea arranca con un print\", end=\" \") print(\"y termina con otro print\")</p> <p>print(\"Hola\", end=\" hermoso divino genial \") # Todo print tiene implicito el parametro end=\"\\n\" que imprime salto del linea al final print(\"Mundo\") </p> <p>print() print(\"Hola Mundo\") print(\"Hola\" + \" Mundo\") # Concatenacion de cadenas de caracteres print(\"Hola\", \"Mundo\") # impresion de varios argumentos. La coma, por defecto, agrega un espacio</p> <p>print(\"Hola\", end=\" \") # el parametro end, por defecto es ENTER (end=\"\\n\"), permite modificar el final de la impresion print(\"Mundo\", end=\"\\n\\n\") print(\"\\nprimer\\nparametro\") # Puedo incluir el salto de linea (\\n) dentro de mi cadena de texto</p> <p>print(\"hipo\", \"potamo\", sep=\"\") # sep es un parametro para imprimir algo el lugar de la coma (por defecto es sep=\" \") print(\"1\", \"2\", \"3\", sep=\", \") # Esto imprime 1, 2, 3</p> <p>a = 1 b = 2</p> <p>print(a + b) # imprime 3 print(str(a) + str(b)) # imprime 12. str( valor ) convierte en cadena. Se lee \"12\"</p> <p>a = \"1\" b = \"2\"</p> <p>print(int(a) + int(b)) # imprime 3. int( cadena ) convierte en entero.</p> <p>print(f\"Hola {nombre}. Tienes {edad} a\u00f1os.\") # al ejecutar, la compu hace: Hola Pablo. Tienes 45 a\u00f1os / Es es siempre que nombre sea Pablo y edad sea 45. Reemplaza las variables por su contenido dentro de la cadena de texto. NO OLVIDAR LA f ADELANTE DE LA COMILLA DE APERTURA</p>"},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#entrada-de-datos-al-programa","title":"Entrada de datos al programa","text":""},{"location":"unidades/lenguajes-de-programacion/python/instrucciones-de-entrada-y-salida-con-python/#ejercicios-de-aplicacion","title":"Ejercicios de aplicaci\u00f3n","text":"<ol> <li> <p>Escribe un programa que solicite el ingreso por teclado de datos referidos al nombre, la edad y la nacionalidad de una persona. Luego que imprima por pantalla una salida de informaci\u00f3n formateada de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Hola {nombre}! Tienes {edad} a\u00f1os. Eres de nacionalidad {nacionalidad}\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>nombre = input(\"Ingrese su nombre: \")\nedad = input(\"Ingrese su edad: \")\nnacionalidad = input(\"Ingrese su nacionalidad: \")\n\nprint(f\"Hola {nombre}! Tienes {edad} a\u00f1os. Eres de nacionalidad {nacionalidad}\")\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite el ingreso por teclado de datos referidos al nombre, la direcci\u00f3n y el tel\u00e9fono de una persona. Luego que imprima por pantalla una salida de informaci\u00f3n formateada de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Nombre: {nombre}\nDirecci\u00f3n: {direccion}\nTel\u00e9fonno: {telefono}\n</code></pre> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>La impresi\u00f3n en pantalla se debe realizar utilizando un solo comando print.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>nombre = input(\"Ingresa tu nombre: \")\ndireccion = input(\"Ingresa tu direccion: \")\ntelefono = input(\"Ingresa tu telefono: \")\n\nprint(f\"Nombre: {nombre} \\nDireccion: {direccion} \\nTelefono: {telefono}\")\n</code></pre> <p>El <code>\\n</code> en un comando print se llama \"caracter de nueva l\u00ednea\" (newline character). Se utiliza para indicar el final de una l\u00ednea y el comienzo de una nueva. Cuando se usa en una cadena dentro de un comando print, hace que todo lo que sigue se imprima en la siguiente l\u00ednea.</p> <p>Otra manera de resolver el ejercicio ser\u00eda:</p> Python<pre><code>nombre = input(\"Ingresa tu nombre: \")\ndireccion = input(\"Ingresa tu direccion: \")\ntelefono = input(\"Ingresa tu telefono: \")\n\nprint(f\"Nombre: {nombre}\", f\"Direccion: {direccion}\", f\"Telefono: {telefono}\", sep=\"\\n\")\n</code></pre> <p>El <code>\\n</code> como argumento del par\u00e1metro sep le indica al comando print que debe hacer un salto de l\u00ednea al terminar de imprimir cada uno de los argumentos suministrados.</p> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/introduccion-a-python/","title":"Introduccion a python","text":"<p>print = \"7\"</p> <p>print(print)</p>"},{"location":"unidades/lenguajes-de-programacion/python/introduccion-a-python/#uso-del-operador-en-cadenas-para-partirlas-en-mas-de-una-linea","title":"Uso del operador  en cadenas para partirlas en m\u00e1s de una l\u00ednea","text":"<p>Puedes usar el operador de continuaci\u00f3n de l\u00ednea ( \\ ) para dividir una cadena de texto en varias l\u00edneas sin interrumpir la cadena. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Esta es una cadena de texto muy larga que queremos dividir \\\nen varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\"\n\nprint(cadena)\n</code></pre> <p>Cuando ejecutes este c\u00f3digo, ver\u00e1s que la cadena se imprime como una sola l\u00ednea, a pesar de que en el c\u00f3digo fuente est\u00e1 dividida en dos l\u00edneas. Esto es porque el operador de continuaci\u00f3n de l\u00ednea ( \\ ) al final de la l\u00ednea le dice a Python que la l\u00ednea actual contin\u00faa en la siguiente l\u00ednea.</p> Terminal (Entrada/Salida)<pre><code>Esta es una cadena de texto muy larga que queremos dividir en varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\n</code></pre> <p>\u00a1Atenci\u00f3n!</p> <p>Aseg\u00farate de que no haya ning\u00fan espacio o cualquier otro car\u00e1cter despu\u00e9s del operador de continuaci\u00f3n de l\u00ednea ( \\ ), de lo contrario, Python interpretar\u00e1 el  como un car\u00e1cter literal en lugar de un indicador de continuaci\u00f3n de l\u00ednea.</p> <p>No solo con cadenas</p> <p>El operador de continuaci\u00f3n de l\u00ednea ( \\ ) tambi\u00e9n se utiliza en Python para indicar que una l\u00ednea de c\u00f3digo contin\u00faa en la siguiente l\u00ednea. Esto es \u00fatil cuando tienes una l\u00ednea de c\u00f3digo muy larga y quieres dividirla en varias l\u00edneas para mejorar la legibilidad de este.</p> Python<pre><code># Sin el operador de continuaci\u00f3n de l\u00ednea\nsuma = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n# Con el operador de continuaci\u00f3n de l\u00ednea \n# (Â¡Para recordar! que no debe posee m\u00e1s caracteres a continuaci\u00f3n)\nsuma = 1 + 2 + 3 + 4 + \\\n    5 + 6 + 7 + 8 + \\\n    9 + 10\n\nprint(suma)  # Output: 55\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/matematica-con-python/","title":"M\u00f3dulo o resto","text":"<p>print(31%5)</p>"},{"location":"unidades/lenguajes-de-programacion/python/matematica-con-python/#division-entera","title":"Divisi\u00f3n entera","text":"<p>print(31//5)</p>"},{"location":"unidades/lenguajes-de-programacion/python/matematica-con-python/#los-numeros-decimales-tienen-varios-decimales-estudiar-esto","title":"los numeros decimales tienen varios decimales // estudiar esto","text":"<p>print(0.2 + 0.1) # Devuelve 0.30000000000000004 ???</p>"},{"location":"unidades/lenguajes-de-programacion/python/modulos-en-python/","title":"Uso de m\u00f3dulos en Python","text":"Python<pre><code># Importa el m\u00f3dulo os\nimport os\n\n# Limpia la pantalla\nos.system(\"cls\")\n</code></pre> <p>Tambi\u00e9n es posible importar solamente una parte del m\u00f3dulo, para ahorrar espacio en memoria:</p> Python<pre><code># Importa la m\u00f3dulo os\nfrom os import system\n\n# Limpia la pantalla\nsystem(\"cls\")\n</code></pre> <p>Cabe aclarar que la importaci\u00f3n de m\u00f3dulos ocupa espacio en memoria. Si se puede evitar, hay que tratar de hacerlo. Por ejemplo, el siguiente c\u00f3digo cumple con la mimsa tarea a nivel visual:</p> Python<pre><code># Limpia la pantalla\nprint(\"\\033[2J\\033[1H\") \n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/","title":"Ejercicios de cadenas de caracteres","text":"<ol> <li> <p>Dada la siguiente cadena \" Hola Mundo \" escribe un programa que imprima en pantalla lo siguiente:</p> Terminal (Entrada/Salida)<pre><code>*** Hola Mundo ***\n Hola Mundo\n Hola Mundo ***\n*** Hola Mundo\nHola Mundo\n</code></pre> <p>\u00a1Presta mucha atenci\u00f3n a las salidas propuestas, sobre todo, los espacios y las alineaciones!</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> <p>Python<pre><code>cadena = \"*** Hola Mundo ***\"\n\nprint(cadena)\nprint(cadena.strip(\"*\"))\nprint(cadena.lstrip(\"*\"))\nprint(cadena.rstrip(\"*\"))\nprint(cadena.strip(\"*\").strip())\n</code></pre>     ---</p> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#para-enunciar","title":"Para enunciar:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#find-devuelve-la-posicion-de-la-primera-ocurrencia-de-un-caracter","title":"find() devuelve la posici\u00f3n de la primera ocurrencia de un caracter","text":"<p>cadena = \"Es una cadena nada de nada\" print(cadena) print(cadena.find(\"nada\"))         # devuelve la posici\u00f3n de la primera ocurrencia de \"nada\" print(cadena.find(\"nada\", 15))     # busca desde la posici\u00f3n 15 print(cadena.find(\"nada\", 0, 10))  # -1 es que no encontr\u00f3 print()</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#rfind-devuelve-la-posicion-de-la-ultima-ocurrencia-de-un-caracter","title":"rfind() devuelve la posici\u00f3n de la \u00faltima ocurrencia de un caracter","text":"<p>cadena = \"Es una cadena nada de nada\" print(cadena) print(cadena.rfind(\"nada\"))         # devuelve la posici\u00f3n de la \u00faltima ocurrencia de \"nada\" print(cadena.rfind(\"nada\", 15))     # busca desde el final hasta la posici\u00f3n 15 print(cadena.rfind(\"nada\", 10, 20)) # busca desde la posici\u00f3n 10 hasta la posici\u00f3n 20 print()</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#ejemplo-6","title":"Ejemplo 6","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_1","title":"------------------------------------------------------------","text":"<p>numero = 12 color = \"verde\" print(\"El color es: \" + color + \" y el n\u00famero es: \" + str(numero)) print( f\"El color es: {color} y el n\u00famero es: {numero}\")</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_2","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#ejemplo-7","title":"Ejemplo 7","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_3","title":"------------------------------------------------------------","text":"<p>numero = 12 color = \"verde\" print(\"El color es: \" + color + \"\\n y el n\u00famero es: \" + str(numero))</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#operador-de-escape","title":"Operador de \"escape\"","text":"<p>print('El \\'color\\' es: ' + color + '\\n y el \\'n\u00famero\\' es: ' + str(numero)) print(\"a \\t \\t \\t otros \\t espacios\") print(\"a \\t c \\t varios \\t espacios\")</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_4","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#ejemplo-8","title":"Ejemplo 8","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#-_5","title":"------------------------------------------------------------","text":"<p>print( \"C:\\nombre\\Juan\\Desktop\\Python\\Python1\\05_Strings1.py\" ) print( r\"C:\\nombre\\Juan\\Desktop\\Python\\Python1\\05_Strings1.py\" ) #Raw String color = \"verde\" print( rf\"El \\numero es color: {color}\" )</p> <p>Formato de cadenas de caracteres nombre = \"Juan\" apellido = \"Perez\" edad = 30</p> <p>print (\"Hola, {} {}, tienes {} a\u00f1os\".format(nombre, apellido, edad)) print (\"Hola, {1} {0}, tienes {2} a\u00f1os\".format(nombre, apellido, edad))</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#slicing-cadenas-y-listas","title":"Slicing (cadenas y listas)","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#get-the-characters-from-position-2-to-position-5-not-included","title":"Get the characters from position 2 to position 5 (not included):","text":"<p>b = \"Hello, World!\" print(b[2:5])</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#slice-from-the-start","title":"Slice From the Start","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#by-leaving-out-the-start-index-the-range-will-start-at-the-first-character","title":"By leaving out the start index, the range will start at the first character:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#get-the-characters-from-the-start-to-position-5-not-included","title":"Get the characters from the start to position 5 (not included):","text":"<p>b = \"Hello, World!\" print(b[:5])</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#negative-indexing","title":"Negative Indexing","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#use-negative-indexes-to-start-the-slice-from-the-end-of-the-string","title":"Use negative indexes to start the slice from the end of the string:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#example","title":"Example","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#get-the-characters","title":"Get the characters:","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#from-o-in-world-position-5","title":"From: \"o\" in \"World!\" (position -5)","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-cadenas-de-caracteres/#to-but-not-included-d-in-world-position-2","title":"To, but not included: \"d\" in \"World!\" (position -2):","text":"<p>b = \"Hello, World!\" print(b[-5:-2])</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-entrada-salida-con-python/","title":"Python: ejercicios de I/O (entrada/salida)","text":"<ol> <li> <p>Imprime en pantalla \"Hola Mundo!\"</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Imprime en pantalla \"Hola Mundo!\"\nprint(\"Hola Mundo!\")\n</code></pre> </li> </ol> </li> <li> <p>Imprime en pantalla \"Hola Mundo!\" concatenando ambas palabras y el signo al momento de la impresi\u00f3n.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Imprime en pantalla \"Hola Mundo!\"\nprint(\"Hola\" + \" \" + \"Mundo\" + \"!\")\n</code></pre> <p>Para pensar</p> <p>\u00bfSe lograr\u00eda el mismo efecto de impresi\u00f3n si en lugar del operador de concatenacion ( + ) se usara la coma ( , )?</p> <p>Es decir <code>print(\"Hola\" , \" \" , \"Mundo\" , \"!\")</code></p> </li> </ol> </li> <li> <p>Almacena en una variable la frase \"Hola Mundo!\". Luego, imprime en pantalla el contenido de la variable.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Almacena \"Hola Mundo!\" en una variable\nfrase = \"Hola Mundo!\"\n\n# Imprime en pantalla el contenido de la variable\nprint(frase)\n</code></pre> </li> </ol> </li> <li> <p>Genera una l\u00ednea en blanco en la pantalla.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>print()\n</code></pre> <p>La ejecuci\u00f3n del comando print sin argumentos -los par\u00e9ntesis vac\u00edos- imprime un salto de l\u00ednea solamente.</p> </li> </ol> </li> <li> <p>Elije dos n\u00fameros enteros diferentes. Imprime la suma entre ambos, pero haciendo el c\u00e1lculo mental primero. No puedes usar ninguna expresi\u00f3n de c\u00e1lculo en el programa.   </p> <p>La salida en pantalla debe ser como se ve en el ejemplo:</p> Terminal (Entrada/Salida)<pre><code>La suma de 4 y de 7 es 11.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Imprime en pantalla la suma de 4 y de 7\nprint(\"La suma de 4 y de 7 es 11.\")\n</code></pre> </li> </ol> </li> <li> <p>Modifica el ejercicio anterior para almacenar los n\u00fameros en dos variables distintas. Imprime la suma de ambos n\u00fameros almacenados. Ahora si puedes utilizar expresiones de c\u00e1lculo para realizar la tarea.  </p> <p>La salida en pantalla debe ser como se ve en el ejemplo:</p> Terminal (Entrada/Salida)<pre><code>La suma de 4 y de 7 es 11.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Inicializa dos variables con los valores enteros\nn1 = 4\nn2 = 7\n\n# Imprime en pantalla la suma de los valores almacenados en n1 y n2\nprint(\"La suma de\", n1, \"y de\", n2, \" es \", n1+n2, \".\")\n</code></pre> <p>\u00a1Para pensar!</p> <p>\u00bfPor qu\u00e9 siempre conviene resolver problemas como en este ejercicio y no como en el ejercicio anterior?</p> <p>\u00bfQu\u00e9 ocurrir\u00eda en cada caso si se precisan modificar los n\u00fameros?</p> </li> </ol> </li> <li> <p>Ingresa un n\u00famero entero por teclado. Impr\u00edmelo en pantalla como el siguiente ejemplo (en este caso, se ingres\u00f3 un 10):</p> Terminal (Entrada/Salida)<pre><code>El n\u00famero ingresado es 10.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Ingresar un numero por teclado y almacenarlo como entero\nn = int(input(\"Ingrese un numero: \"))\n\n# Imprime en pantalla el n\u00famero\nprint(\"El numero ingresado es\", n)\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>El comando input recibe un dato por teclado y siempre lo conviente a cadena de caracteres(str).</p> <p>Si es preciso almacenar dicho dato con otro tipo de dato, ser\u00e1 necesario convertirlo antes del almacenamiento.</p> </li> </ol> </li> <li> <p>Ingresa un n\u00famero entero por teclado. Imprime en pantalla el doble del valor ingresado.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un numero: 5\nEl doble de 5 es 10\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Ingresa un numero por teclado. \n# Lo convierte a entero. \n# Lo almacena en una variable.\nn = int(input(\"Ingrese un numero: \")) # recuerda que el comando *input* siempre devuelve una cadena de texto\n\n# Imprime en pantalla el doble del valor ingresado\nprint(\"El doble de\", n, \"es\", n*2)\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-alternativas-con-python/","title":"Python: ejercicios de estructuras alternativas","text":"<ol> <li> <p>Ingresa una cadena de caracterespor teclado. Si es \"Hola\" mostrarla en pantalla.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>cadena = input(\"Ingrese una cadena: \")\n\nif cadena == \"Hola\":\n    print(cadena)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que pida al usuario un n\u00famero entero y muestre por pantalla si es par o impar.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>numero = int(input(\"Ingrese un n\u00famero entero: \"))\n\n# El operador % realiza la divisi\u00f3n y devuelve el resto de esta\nif numero % 2 == 0:\n    print(\"El n\u00famero es par\")\n\nelse:\n    print(\"El n\u00famero es impar\")\n</code></pre> </li> </ol> </li> <li> <p>Ingresa un n\u00famero entero por teclado. Imprime en pantalla si es divisible por 5 o no.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>numero = int(input(\"Ingrese un n\u00famero: \"))\n\n# El operador % realiza la divisi\u00f3n y devuelve el resto de esta\nif numero % 5 == 0:\n    print(\"El n\u00famero ingresado es divisible por 5\")\n\nelse:\n    print(\"El n\u00famero ingresado no es divisible por 5\")  \n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que pida al usuario dos n\u00fameros y muestre por pantalla su divisi\u00f3n. </p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Si el divisor es cero  programa debe mostrar un error y no realizar la divisi\u00f3n.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>dividendo = float(input(\"Ingrese el dividendo: \"))\ndivisor = float(input(\"Ingrese el divisor: \"))\n\n# Controlar que el divisor no sea 0 evitar\u00e1 que la expresi\u00f3n `dividendo / divisor` retorne un error no esperado\nif divisor == 0:\n    print(\"Error: El divisor no puede ser cero\")\n\nelse:\n    print(dividendo / divisor)  \n</code></pre> <p>Es importante realizar control de errores que puedan sucederse durante la ejecuci\u00f3n del programa para evitar que este falle y se fuerce su finalizaci\u00f3n de manera abrupta.</p> </li> </ol> </li> <li> <p>Ingresa tu edad por teclado. Imprime en pantalla si eres mayor o menor de edad. recuerda que una persona es mayor de edad al cumplir 18 a\u00f1os.</p> </li> </ol> <p>Respeta la sintaxis de salida como muestran los ejemplos:</p> <pre><code>``` title=\"Terminal (Entrada/Salida)\"\nIngrese su edad: 21\nUsted es mayor de edad con 21 a\u00f1os.\n\nIngrese su edad: 18\nUsted es mayor de edad con 18 a\u00f1os.\n\nIngrese su edad: 5\nUsted es menor de edad con 5 a\u00f1os.\n```\n\n!!! warning \"\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n\"\n    Asumimos que el usuario siempre va a ingresar una edad v\u00e1lida.\n    Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.\n\nVer resultado (1)\n{ .annotate }\n\n1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    '''\n    Solicita el ingreso de la edad por teclado. \n    Convierte el dato devuelto por el comando input (siempre devuelve una cadena) en entero. \n    Almacena el dato convertido en la variable edad\n    '''\n    edad = int(input(\"Ingrese su edad: \"))\n\n    # Evalua si la edad ingresada corresponde a un mayor de edad o a un menor de edad\n\n    # Si la edad es mayor o igual a 18\n    if edad &gt;= 18:\n        print(\"Usted es mayor de edad con\", edad, \"a\u00f1os.\")\n\n    # Si la edad no es mayor ni igual a 18\n    else:\n        print(\"Usted es menor de edad con\", edad, \"a\u00f1os.\")\n    ```\n\n---\n</code></pre> <ol> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: El programa, luego de almacenar la edad ingresada, debe imprimir en pantalla el resultado correspondiente en el siguiente orden de evaluaci\u00f3n:</p> <ul> <li>Eres mayor de edad (si has cumplido 18 a\u00f1os)</li> <li>Eres un adulto joven (si no has cumplido 35 a\u00f1os)</li> <li>Eres un adulto mayor (si has cumplido 65 a\u00f1os)</li> <li>Eres menor de edad (si no has cumplido 18 a\u00f1os)</li> <li>Eres un adolescente (si has cumplido 13 a\u00f1os)</li> <li>Eres un ni\u00f1o (si has cumplido 2 a\u00f1os)</li> <li>Eres un beb\u00e9 (si no has cumplido 2 a\u00f1os)</li> </ul> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>edad = int(input(\"Ingrese su edad: \"))\n\nif edad &gt;= 18:\n    print(\"Eres mayor de edad\")\n    if edad &lt; 35:\n        print(\"Eres un adulto joven\")\n    elif edad &gt;= 65:\n        print(\"Eres un adulto mayor\")\nelse:\n    print(\"Eres menor de edad\")\n    if edad &gt;= 13:\n        print(\"Eres un adolescente\")\n    elif edad &gt;= 2:\n        print(\"Eres un ni\u00f1o\")\n    else:\n        print(\"Eres un beb\u00e9\")\n</code></pre> <p>Este programa primero pide al usuario que ingrese su edad.  </p> <p>Luego, verifica si la edad es mayor o igual a 18. Si es as\u00ed, imprime \"Eres mayor de edad\" y luego verifica si la edad es menor a 35 o mayor o igual a 65 para imprimir \"Eres un adulto joven\" o \"Eres un adulto mayor\" respectivamente.  </p> <p>Si la edad es menor a 18, imprime \"Eres menor de edad\" y luego verifica si la edad es mayor o igual a 13, mayor o igual a 2 o menor a 2 para imprimir \"Eres un adolescente\", \"Eres un ni\u00f1o\" o \"Eres un beb\u00e9\" respectivamente.</p> </li> </ol> </li> <li> <p>Escribe un programa que pida al usuario un n\u00famero entero.  Si el n\u00famero es mayor a 10, mostrar si es par o impar.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Â¡Para recordar! que todo programa siempre debe dar un resultado cada vez que se ejecute. No puede haber ejecuci\u00f3n sin un resultado asociado. </p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>numero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nif numero &gt; 10:\n\n    if numero % 2 == 0:\n        print(\"El n\u00famero ingresado es par\")\n\n    else:\n        print(\"El n\u00famero ingresado es impar\")\n\nelse:\n    print(\"El n\u00famero ingresado no es mayor a 10\")\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que pida al usuario un n\u00famero entero.  Si el valor ingresado es 2, 4 o 6 muestra en pantall su valor en letras.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Â¡Para recordar! que todo programa siempre debe dar un resultado cada vez que se ejecute. No puede haber ejecuci\u00f3n sin un resultado asociado. </p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>numero = int(input(\"Ingrese un n\u00famero entero: \"))\n\nif numero == 2:\n    print(\"El n\u00famero ingresado es el DOS\")\n\nelif numero == 4:\n    print(\"El n\u00famero ingresado es el CUATRO\")\n\nelif numero == 6:\n    print(\"El n\u00famero ingresado es el SEIS\")\n\nelse:\n    print(\"El n\u00famero ingresado no el es 2 ni el 4 ni el 6\")\n</code></pre> </li> </ol> </li> <li> <p>Ingresa 2 n\u00fameros por teclado. Almac\u00e9nalos en 2 variables. Luego, imprime en pantalla cada valor ingresado. Luego, imprime en pantalla si el primer n\u00famero es mayor, igual o menor que el segundo n\u00famero.</p> <p>Por ejemplo, para los valores 4 y 5 la salida ser\u00eda:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el primer n\u00famero: 4\nIngrese el segundo n\u00famero: 5\n\nEl valor almacenado en num1 es 4\nEl valor almacenado en num2 es 5\n\n4 es menor que 5\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Almacena 2 valores ingresados por teclado en 2 variables\nnum1 = int(input(\"Ingrese el primer n\u00famero: \"))\nnum2 = int(input(\"Ingrese el segundo n\u00famero: \"))\n\n# Se imprimen los valores almacenados en las variables\nprint(\"El valor almacenado en num1 es\" , num1) \nprint(\"El valor almacenado en num2 es\" , num2)\n\n# Estructura alternativa anidada\nif (num1 &gt; num2):\n    print(num1 , \"es mayor que\" , num2)\n\nelif (num2 == num1):\n    print(num1 , \"es igual a\" , num2)\n\nelse:   \n    print(num1 , \"es menor que\" , num2)    \n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese su nombre, su nacionalidad y su edad.  Si la nacionalidad es argentina y el usuario es mayor de edad, permitirle votar. Si no, indicarle el motivo por el cual no puede votar.</p> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: argentina\nIngrese su edad: 45\n\nBienvenido Pablo. Puedes pasar a votar.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: argentina \nIngrese su edad: 17\n\nLo lamento Pablo. No puedes pasar a votar porque no eres mayor de edad.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: ingles \nIngrese su edad: 56\n\nLo lamento Pablo. No puedes pasar a votar porque no eres de nacionalidad argentina.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo\nIngrese su nacionalidad: ingles\nIngrese su edad: 17\n\nLo lamento Pablo. No puedes pasar a votar porque no eres de nacionalidad argentina y no eres mayor de edad.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>nombre = input(\"Ingrese su nombre: \")\nnacionalidad = input(\"Ingrese su nacionalidad: \")\nedad = int(input(\"Ingrese su edad: \"))\n\n# La persona es argentina y es mayor de edad\nif nacionalidad == \"argentina\" and edad &gt;= 18:\n    print(f\"Bienvenido {nombre}. Puedes pasar a votar.\")\n\nelse:\n    print(f\"Lo lamento {nombre}. No puedes pasar a votar porque\", end=\" \")\n\n    # La persona no es argentina ni es mayor de edad\n    if nacionalidad != \"argentina\" and edad &lt; 18:\n        print(\"no eres de nacionalidad argentina ni eres mayor de edad.\")\n\n    # La persona no es argentina\n    elif nacionalidad != \"argentina\":\n        print(\"no eres de nacionalidad argentina.\")\n\n    # La persona no es mayor de edad\n    else:\n        print(\"no eres mayor de edad.\")\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese un texto. El Programa deber\u00e1 indicar, luego, si el texto est\u00e1 todo en may\u00fasculas o todo en min\u00fasculas.</p> <p>\u00a1Â¡Para recordar!!</p> <p>Todo programa, siempre, debe devolver un resultado.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Asumimos que el usuario siempre va a ingresar un texto v\u00e1lido. Es decir, con letras. Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>texto = input(\"Ingrese un texto: \")\n\nif texto.isupper():\n    print(\"Todo el texto est\u00e1 en may\u00fasculas.\")\nelif texto.islower():\n    print(\"Todo el texto est\u00e1 en min\u00fasculas.\")\nelse:\n    print(\"El texto est\u00e1 en may\u00fasculas y en min\u00fasculas.\")\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/","title":"Python: ejercicios de estructuras de datos","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-listas","title":"Ejercicios con listas","text":"<ol> <li> <p>Crea una lista con 8 elementos (n\u00fameros enteros del 1 al 8). Imprime en pantalla la lista. Luego, agrega 2 elementos m\u00e1s (9 y 10) al final de la lista, uno a la vez. Imprime en pantalla la lista. Luego, reemplaza el valor almacenado en el quinto elemento por -5. Imprime en pantalla la lista. Luego, elimina la posici\u00f3n 5. Almacena el valor en la variable elemento_eliminado. Imprime en pantalla la lista. Luego, vuelve a almacenar el valor 5 insert\u00e1ndolo en la posici\u00f3n 5. Esto significa que todos los elementos se correr\u00e1n una posici\u00f3n a partir de la posici\u00f3n 5. Imprime en pantalla la lista. Luego, agrega el valor almacenado en la variable elemento_eliminado al final de la lista. Imprime en pantalla la lista. Luego, elimina el elemento que contenga el valor almacenado en la variable elemento_eliminado. Imprime en pantalla la lista.</p> Terminal (Entrada/Salida)<pre><code>[1, 2, 3, 4, 5, 6, 7, 8]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, -5, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -5]\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Crea una lista con 8 elementos \nlista_de_numeros = [1, 2, 3, 4, 5, 6, 7, 8]\n\nprint(lista_de_numeros)\n\n# Agrega 2 elementos m\u00e1s al final de la lista, uno a la vez\nlista_de_numeros.append(9)\nlista_de_numeros.append(10)\n\nprint(lista_de_numeros)\n\n# Reemplaza el valor almacenado en el quinto elemento por -5\nlista_de_numeros[4] = -5\n\nprint(lista_de_numeros)\n\n# Luego, elimina la posici\u00f3n 5 almacenando el valor en la variable *elemento_eliminado*\nelemento_eliminado = lista_de_numeros.pop(4)\n\nprint(lista_de_numeros)\n\n# Almacena el valor 5 insert\u00e1ndolo en la posici\u00f3n 5 de la lista\nlista_de_numeros.insert(4, 5)\n\nprint(lista_de_numeros)\n\n# Agrega el valor almacenado en la variable *elemento_eliminado* al final de la lista  \nlista_de_numeros.append(elemento_eliminado)\n\nprint(lista_de_numeros)\n\n# Elimina el elemento que contenga el valor almacenado en la variable *elemento_eliminado*  \nlista_de_numeros.remove(elemento_eliminado)\n\nprint(lista_de_numeros)    \n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-for-in","title":"Ejercicios con for \u2026 in","text":"<ol> <li> <p>Dada la siguiente lista:</p> Python<pre><code>numeros = [4, -78, 9, 84, -7, 0, 1]\n</code></pre> <p>Imprime en pantalla cada uno de los elementos que la componen, rengl\u00f3n por rengl\u00f3n:</p> Terminal (Entrada/Salida)<pre><code>4\n-78\n9\n84\n-7\n0\n1\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>numeros = [4, -78, 9, 84, -7, 0, 1]\n\nfor numero in numeros:\n    print(numero)\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-for-in-enumerate","title":"Ejercicios con for \u2026 in enumerate","text":"<ol> <li> <p>Crea dos listas seg\u00fan el ejemplo:</p> Python<pre><code>lista_1 = [1, 2, 3, 4, 5]\n\nlista_2 = [10, 9, 8, 7, 6]\n</code></pre> <p>Luego, une ambas listas en una tercera lista llamada lista_unida. Luego, imprime la lista_unida, en una misma l\u00ednea, separados por una coma. Presta atenci\u00f3n que el \u00faltimo n\u00famero no debe tener una coma a continuaci\u00f3n.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>lista_1 = [1, 2, 3, 4, 5]\nlista_2 = [10, 9, 8, 7, 6]\n\n# Une las 2 listas con el operador de adici\u00f3n y asigna el resultado a la lista_unida\nlista_unida = lista_1 + lista_2\n\n# Imprime la lista_unida en un solo rengl\u00f3n, separando los elementos con una coma, sin incluir la coma al final\nfor index, numero in enumerate(lista_unida):\n    print(numero, end=\", \" if index &lt; (len(lista_unida) - 1) else \"\\n\")\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-while-loop","title":"Ejercicios con while \u2026 loop","text":"<ol> <li> <p>Ingresa n\u00fameros por teclado y almac\u00e9nalos en una lista. Repite la operaci\u00f3n hasta que se ingrese un 0 por teclado. El 0 no debe ser almacenado en la lista. Luego, imprime en pantalla la cantidad de elementos que posee la lista.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero o el cero para terminar el ingreso: 5\nIngrese un n\u00famero o el cero para terminar el ingreso: 7\nIngrese un n\u00famero o el cero para terminar el ingreso: 3\nIngrese un n\u00famero o el cero para terminar el ingreso: 9\nIngrese un n\u00famero o el cero para terminar el ingreso: 0\nLa lista posee 4  elementos.\nEstos son:  [5, 7, 3, 9]\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>lista = []\n\n# Limpia la pantalla\nprint(\"\\033[2J\\033[1H\")\n\n\n# Solicita el ingreso de n\u00fameros y los almacena en la lista hasta que se ingrese un 0\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero o el cero para terminar el ingreso: \"))\n    if n == 0:\n        break\n    lista.append(n)\n\n# Imprime por pantalla la longitud de la lista\nprint(\"La lista posee\", len(lista), \" elementos.\")\n\n# Imprime por pantalla los elementos almacenados en la lista\nprint(\"Estos son:\", lista)\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-con-cadenas-de-caracteres","title":"Ejercicios con cadenas de caracteres","text":"<ol> <li> <p>Ingresa tu nombre por teclado y almac\u00e9nalo en una variable. Luego imprime en pantalla si posee letras repetidas. Puedes usar otras estructuras de datos para realizar la tarea de manera m\u00e1s simple.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Pablo Andres\nSu nombre posee letras repetidas.\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese su nombre: Ramon Fidel\nSu nombre no posee letras repetidas.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Solicita el ingreso de datos por teclado y los convierte en min\u00fasculas antes de almacenarlos en la variable\nnombre = input(\"Ingrese su nombre: \").lower()\n\n# Elimina los espacios que puedan existir almacenados en la variable\nnombre = nombre.replace(\" \", \"\")\n\n# Convierte cada caracter de la cadena de caracteresen elementos de una lista \nletras = list(nombre)\n\n# set es un comando que eval\u00faa un conjunto de elementos y devuelve un conjunto de elementos \u00fanicos (elimina los duplicados)\nif (len(letras) == len(set(letras))):\n    print(\"Su nombre no posee letras repetidas.\")\nelse:\n    print(\"Su nombre posee letras repetidas.\")\n</code></pre> </li> </ol> </li> <li> <p>Ingresa una palabra por teclado. Luego imprime cuantas letras la componen. Luego imprime todas sus letras de manera ordenada alfab\u00e9ticamente. Luego imprime todas sus letras de manera ordenada alfab\u00e9ticamente inversa. Antes de empezar el ejercicio, analiza el ejemplo siguiente. Las salidas por pantalla deben ser iguales en su estructura.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese una palabra: paracaidas\nLa palabra paracaidas contiene 10 letras.\nLas letras ordenadas alfab\u00e9ticamente son a, a, a, a, c, d, i, p, r, s\nLas letras ordenadas alfab\u00e9ticamente inversoa son s, r, p, i, d, c, a, a, a, a\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>palabra = input(\"Ingrese una palabra: \")\n\nprint(\"La palabra\", palabra, \"contiene\", len(palabra), \"letras.\")\n\nletras = list(palabra)\n\n# Ordena los elementos de la lista de manera alfab\u00e9tica\nletras.sort()\n\nprint(\"Las letras ordenadas alfab\u00e9ticamente son\", ', '.join(letras))\n\n# Ordena los elementos de la lista de manera alfab\u00e9tica inversa\nletras.sort(reverse=True)\n\nprint(\"Las letras ordenadas alfab\u00e9ticamente inversoa son\", ', '.join(letras))\n</code></pre> <p>En este c\u00f3digo <code>', '.join(letras)</code> une todos los elementos de la lista en una cadena, con cada elemento separado por una coma y un espacio.</p> </li> </ol> </li> <li> <p>Inicializa una variable con la cadena de caracteres\"La mar estaba serena serena estaba la mar\". Luego imprime en pantalla cuantos caracteres tiene la cadena de texto. Luego imprime en pantalla toda la cadena de texto, en un solo rengl\u00f3n, caracter por caracter. Luego imprime en pantalla, rengl\u00f3n por rengl\u00f3n, cada una de las palabras de la cadena de texto. (Puedes utilizar otra estructura de datos que te facilite el trabajo).  </p> Terminal (Entrada/Salida)<pre><code>La cadena de caracteres\"La mar estaba serena serena estaba la mar\" tiene 41 caracteres.\n\nLa mar estaba serena serena estaba la mar\n\nLa\nmar\nestaba\nserena\nserena\nestaba\nla\nmar\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>texto = \"La mar estaba serena serena estaba la mar\"\n\n# Imprime en pantalla cuantos caracteres tiene la cadena de texto\nprint(\"La cadena de caracteres\\\"\" + texto + \"\\\" tiene\", len(texto), \"caracteres.\")\n\n# Imprime en pantalla toda la cadena de texto, en un solo rengl\u00f3n, caracter por caracter\nfor letra in texto:\n    print(letra, end=\"\")\n\n# Al finalizar el cclo, el cursor qued\u00f3 a continuaci\u00f3n de la \u00faltima letra impresa.\n# Entonces, es necesario realizar un salto de l\u00ednea para que el pr\u00f3ximo contenido que se imprima en pantalla, se haga en un rengl\u00f3n siguiente.\n\n# Emtonces, imprime en pantalla el salto de l\u00ednea\nprint()\n\n# Separa la cadena de caracteresen palabras, almacen\u00e1ndolas como elementos de la lista *palabras*\npalabras = texto.split(\" \")\n\n# Imprime en pantalla, rengl\u00f3n por rengl\u00f3n, cada una de las palabras de la cadena de texto\nfor palabra in palabras:\n    print(palabra)\n</code></pre> </li> </ol> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n agrega el c\u00f3digo necesario para que realice lo siguiente: Reemplaza todas las vocales por la letra \"a\". Imprime en pantalla la cadena de texto. Repite la operaci\u00f3n con todas las vocales.</p> Terminal (Entrada/Salida)<pre><code>\u22ee\nLa mar astaba sarana sarana astaba la mar\nLe mer estebe serene serene estebe le mer\nLi mir istibi sirini sirini istibi li mir\nLo mor ostobo sorono sorono ostobo lo mor\nLu mur ustubu surunu surunu ustubu lu mur\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>texto = \"La mar estaba serena serena estaba la mar\"\n\n# Imprime en pantalla cuantos caracteres tiene la cadena de texto\nprint(\"La cadena de caracteres\\\"\" + texto + \"\\\" tiene\", len(texto), \"caracteres.\")\n\n# Imprime en pantalla toda la cadena de texto, en un solo rengl\u00f3n, caracter por caracter\nfor letra in texto:\n    print(letra, end=\"\")\n\n# Al finalizar el cclo, el cursor qued\u00f3 a continuaci\u00f3n de la \u00faltima letra impresa.\n# Entonces, es necesario realizar un salto de l\u00ednea para que el pr\u00f3ximo contenido que se imprima en pantalla, se haga en un rengl\u00f3n siguiente.\n\n# Emtonces, imprime en pantalla el salto de l\u00ednea\nprint()\n\n# Separa la cadena de caracteresen palabras, almacen\u00e1ndolas como elementos de la lista *palabras*\npalabras = texto.split(\" \")\n\n# Imprime en pantalla, rengl\u00f3n por rengl\u00f3n, cada una de las palabras de la cadena de texto\nfor palabra in palabras:\n    print(palabra)\n\n# Reemplaza todas las vocales por la \"a\"\nfor vocal in 'aeiouAEIOU':\n    texto = texto.replace(vocal, 'a')\n\n# Imprime el texto resultante en pantalla\nprint(texto)\n\n# Reemplaza la vocal del texto (son todas la misma) por la siguiente vocal e imprime el texto resultante en pantalla\ntexto = texto.replace('a', 'e')\nprint(texto)\ntexto = texto.replace('e', 'i')\nprint(texto)\ntexto = texto.replace('i', 'o')\nprint(texto)\ntexto = texto.replace('o', 'u')\nprint(texto)\n</code></pre> <p>Podemos mejorar el c\u00f3digo implementando diccionario de mapeo (mapping dictionary) y un ciclo:</p> Python<pre><code>\u22ee\n# Reemplaza la vocal del texto (son todas la misma) por la siguiente vocal e imprime el texto resultante en pantalla\nmapping = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u'}\nfor k, v in mapping.items():\n    texto = texto.replace(k, v)\n    print(texto)\n</code></pre> <p>Aqu\u00ed, <code>k</code> representa la llave (key) y el caracter a reemplazar Y <code>v</code> representa el valor asociado (value) y el caracter de reemplazo</p> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-de-datos-con-python/#ejercicios-compuestos","title":"Ejercicios compuestos","text":"<ol> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: La impresi\u00f3n en pantalla de los elementos debe realizarse en el mismo rengl\u00f3n, separ\u00e1ndolos con un espacio y sin corchetes. Luego, se debe imprimir en pantalla la serie de n\u00fameros entre el valor del primer elemento almacenado y el valor del \u00faltimo elemento almacenado, incluy\u00e9ndolos.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero o el cero para terminar el ingreso: 4\nIngrese un n\u00famero o el cero para terminar el ingreso: -6\nIngrese un n\u00famero o el cero para terminar el ingreso: 9\nIngrese un n\u00famero o el cero para terminar el ingreso: 8\nIngrese un n\u00famero o el cero para terminar el ingreso: 0\nLa lista posee 4 elementos.\nEstos son: 4 -6 9 8 \nLos n\u00fameros entre 4 y 8, incluy\u00e9ndolos, son: 4 5 6 7 8\n</code></pre> <p>Â¡Para recordar!</p> <p>La serie de n\u00fameros podr\u00eda resultar ascendente, como en el ejemplo, o podr\u00eda resultar descendente. El programa debe funcionar correctamente en ambos sentidos.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>lista = []\n\n# Limpia la pantalla\nprint(\"\\033[2J\\033[1H\")\n\n\n# Solicita el ingreso de n\u00fameros y los almacena en la lista hasta que se ingrese un 0\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero o el cero para terminar el ingreso: \"))\n    if n == 0:\n        break\n    lista.append(n)\n\n# Imprime por pantalla la longitud de la lista\nprint(\"La lista posee\", len(lista), \"elementos.\")\n\n# Imprime por pantalla los elementos almacenados en la lista\nprint(\"Estos son:\", end=\" \")\n\nfor n in lista:\n    print(n, end=\" \")\n\nprint() # Realiza el salto de l\u00ednea luego de la impresi\u00f3n de los elementos en el ciclo anterior\n\n# Almacena el primer y el \u00faltimo elemento en dos variables \nprimer_elemento = lista[0]\nultimo_elemento = lista[-1] # len(lista)-1\n\n# La variable paso almacenar\u00e1 uno positivo o uno negativo, con el objetivo de configurar el ciclo cerrado a continuaci\u00f3n para su correcto funcionamiento.\npaso = 1 if primer_elemento &lt;= ultimo_elemento else - 1\n\n# Imprime en pantalla los n\u00fameros comprendidos entre el valor del primer elemento y el valor del \u00faltimo elemento de la lista\n\nprint(\"Los n\u00fameros entre \" + str(primer_elemento) + \" y \" + str(ultimo_elemento) + \", incluy\u00e9ndolos, son:\", end=\" \")\n\nfor n in range(primer_elemento, ultimo_elemento + paso, paso):\n    print(n, end=\" \")\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/","title":"Python: ejercicios de estructuras repetitivas","text":""},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/#ejercicios-con-for-in-range","title":"Ejercicios con for \u2026 in range","text":"<ol> <li> <p>Imprime en pantalla la secuencia de n\u00fameros desde el 1 hasta el 10, de 1 en 1, utilizando un ciclo cerrado.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>for n in range(1, 11):\n    print(n)\n</code></pre> <p>\u00bfPor qu\u00e9 aparece un 11 en el c\u00f3digo?</p> <p>Â¡Para recordar! que la sintaxis de esta estructura indica que el par\u00e1metro que representa al valor final del ciclo no lo incluye en este. Por lo tanto, como se ve en el ejercicio, el ciclo iterar\u00e1 entre el 1 y el 10. El 11 ser\u00eda el primer valor que hace falsa la condici\u00f3n que permite la iteraci\u00f3n.</p> <p>Â¡Para recordar! tambi\u00e9n que por iteraci\u00f3n entendemos que es el proceso de repetir una estructura de c\u00f3digo determinada una cierto n\u00famero de veces.</p> </li> </ol> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: Imprime en pantalla la misma secuencia, pero de 2 en 2.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>1\n3\n5\n7\n9\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>for n in range(1, 11, 2):\n    print(n)\n</code></pre> </li> </ol> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: Inicializa una variable que ser\u00e1 utilizada para controlar el paso del ciclo, con el valor 3. Imprime en pantalla la misma secuencia, utilizando el valor ingresado como paso de n\u00famero en n\u00famero.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>1\n4\n7\n10\n</code></pre> <p>Para pensar</p> <p>\u00bfQu\u00e9 nombre le dar\u00edas a la variable que ser\u00e1 utilizada para controlar el paso del ciclo?</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>paso = 3\n\nfor n in range(1, 11, paso):\n    print(n)\n</code></pre> </li> </ol> </li> <li> <p>Copia el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n modif\u00edcalo para que realice lo siguiente: Solicita el ingreso de un n\u00famero entero que le indique el paso al ciclo. Imprime en pantalla la misma secuencia, utilizando el valor ingresado como paso.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero para el paso: 3 \n\n1\n4\n7\n10\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>paso = int(input(\"Ingrese un n\u00famero para el paso: \"))\n\nfor n in range(1, 11, paso):\n    print(n)\n</code></pre> </li> </ol> </li> <li> <p>Escribe en pantalla los m\u00faltiplos de 3 entre 1 y 100. S\u00famalos y muestra la suma al finalizar el ciclo.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El valor inicial del ciclo debe ser 1 y el valor inicial debe ser 100.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Inicializa la variable acumuladora\nsuma = 0\n\nfor n in range(1, 101):\n    if n % 3 == 0:\n        print(n)    # Imprime en pantalla el m\u00faltiplo de 3\n        suma += n   # Suma el m\u00faltiplo de 3 en la variable acumuladora\n\nprint(\"La suma de los m\u00faltiplos de 3 impresos es:\", suma)\n</code></pre> </li> </ol> </li> <li> <p>Escribe en pantalla la serie de n\u00fameros enteros entre dos n\u00fameros enteros solicitados al usuario.</p> </li> </ol> <p>La salida por pantalla debe ser como el ejemplo:</p> <pre><code>``` title=\"Terminal (Entrada/Salida)\"\nEscriba el n\u00famero inicial de la serie (Debe ser el menor): 1\nEscriba el n\u00famero final de la serie (Debe ser el mayor): 9\nEscriba el n\u00famero para indicar el incremento entre cada n\u00famero de la serie (el paso del ciclo): 5\n\nImprimiendo una serie de 2 valores, entre el 1 y el 9 de 5 en 5\n\nEl valor n\u00famero 1 en un ciclo de 5 en 5 es 1\nEl valor n\u00famero 2 en un ciclo de 5 en 5 es 6\n```\n\n!!! warning \"\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n\"\n    El problema debe resolverse implementando un ciclo cerrado.\n    Asumimos que el primer valor ingresado ser\u00e1 menor o igual al segundo valor ingresado.\n    Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.\n\n!!! tip \"\u00a1Una ayudita!\"\n    Para calcular la cantidad de valores que ser\u00e1n impresos de acuerdo con el valor inicial, el valor final y el valor de paso ingresados, utiliza la siguiente expresi\u00f3n:\n\n    ``` py title=\"Python\"\n    ((valor_final - valor_inicial) // paso) + 1\n    ```\n\n    &gt; recuerda que `//` en Python es el operador de divisi\u00f3n entera. Devuelve el cociente entero, sin decimales.  \n    &gt; Si programas en otro lenguaje, deber\u00e1s utilizar el operador o comando correspondiente para conseguir el mismo resultado.\n\nVer resultado (1)\n{ .annotate }\n\n1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    valor_inicial = int(input(\"Escriba el n\u00famero inicial de la serie (Debe ser el menor): \"))\n    valor_final = int(input(\"Escriba el n\u00famero final de la serie (Debe ser el mayor): \"))\n    paso = int(input(\"Escriba el n\u00famero para indicar el incremento entre cada n\u00famero de la serie (el paso del ciclo): \"))\n\n    nro_valor = 1\n\n    print(\"Imprimiendo una serie de\", ((valor_final - valor_inicial) // paso) + 1,\"valores, entre el\", valor_inicial,\"y el\",valor_final, \"de\", paso,\"en\", paso)\n\n    for valor in range(valor_inicial, valor_final + 1, paso):\n        print(\"El valor n\u00famero\", nro_valor, \"en un ciclo de\", paso,\"en\", paso, \"es\", valor)\n        nro_valor +=1\n    ```\n\n---\n</code></pre> <ol> <li> <p>Ingresa una cadena de caracterespor teclado. Simula una l\u00ednea de texto que se desplaza de izquierda a derecha, a lo largo de 40 caracteres. Para ello, debes limpiar la pantalla antes de cada impresi\u00f3n. Y luego de imprimir cada l\u00ednea, el programa deber\u00e1 esperar 0.1 segundos antes de volver a limpiar la pantalla y e imprimir el texto un caracter corrido hacia la derecha.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese una cadena de texto: * * * Coma en lo de Charly * * *\n</code></pre> <p>Al ingresar el texto, limpia la pantalla y muestra el texto por primera vez, pegado a la izquierda del terminal</p> Terminal (Entrada/Salida)<pre><code>* * * Coma en lo de Charly * * *\n</code></pre> <p>0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto un caracter corrido hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code> * * * Coma en lo de Charly * * *\n</code></pre> <p>0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto un caracter corrido hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code>  * * * Coma en lo de Charly * * *\n</code></pre> <p>0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto un caracter corrido hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code>   * * * Coma en lo de Charly * * *\n</code></pre> <p>\u22ee</p> <p>Finalmente, 0.1 segundos m\u00e1s tarde, se limpia la pantalla y se muestra el texto corrido 40 caracteres hacia la derecha:</p> Terminal (Entrada/Salida)<pre><code>                                    * * * Coma en lo de Charly * * *\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>import os, time\n\ntexto = input(\"Ingrese una cadena de texto: \")\n\nfor cant_espacios in range(0, 41):\n    os.system(\"cls\")\n\n    print(\" \" * cant_espacios + texto)\n    time.sleep(0.1)\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/#ejercicios-con-while-loop","title":"Ejercicios con while \u2026 loop","text":"<ol> <li> <p>Imprime en pantalla la secuencia de n\u00fameros desde el 1 hasta el 10, de 1 en 1, utilizando un ciclo abierto.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> <p>``` py title=\"Python\"</p> </li> </ol> </li> <li> <p>Escribe en pantalla la serie de n\u00fameros enteros entre dos n\u00fameros enteros solicitados al usuario.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El problema debe resolverse implementando un ciclo abierto. Asumimos que el primer valor ingresado ser\u00e1 menor o igual al segundo valor ingresado. Para cualquier otro caso, se desestimar\u00e1 el resultado obtenido.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>valor_inicial = int(input(\"Escriba el n\u00famero inicial de la serie (Debe ser el menor): \"))\nvalor_final = int(input(\"Escriba el n\u00famero final de la serie (Debe ser el mayor): \"))\n\nprint(\"Imprimiendo la serie de n\u00fameros entre\", valor_inicial, \"y\", valor_final)\n\nwhile valor_inicial &lt;= valor_final:\n    print(valor_inicial)\n\n    valor_inicial += 1\n</code></pre> <p>En este caso, el nombre de la variable valor_inicial queda raro respecto de su aplicaci\u00f3n. Sin embargo, en estos casos no es necesario desperdiciar recursos en otra variable solamente para que la sem\u00e1ntica del programa quede prolija. </p> </li> </ol> </li> <li> <p>Escribe un programa que solicite al usuario que ingrese n\u00fameros enteros positivos y los muestre por pantalla hasta que ingrese un n\u00famero negativo cualquiera. Al finalizar, el programa debe informar la cantidad de n\u00fameros positivos ingresados.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Al finalizar el ingreso de n\u00fameros positivos, la respuesta que de el programa debe ser gramaticalmente correcta (singular / plural)</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Inicializa la variable acumuladora\nn_positivos = 0\n\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero positivo (o un n\u00famero negativo para finalizar el ingreso): \"))\n\n    if n &lt; 0:\n        break\n\n    print(\"El n\u00famero ingresado fue\", n)\n    n_positivos += 1\n\n# De acuerdo a la cantidad de n\u00fameros ingresaros, se muestra la respuesta gramaticalmente correcta\nif n_positivos == 0:\n    print(\"No se ingresaron n\u00fameros positivos.\")\n\nelif n_positivos == 1:\n    print(\"Se ingres\u00f3 1 n\u00famero positivo.\")\n\nelse:\n    print(\"Se ingresaron\", n_positivos, \"n\u00fameros positivos.\")\n</code></pre> </li> </ol> </li> <li> <p>Leer n\u00fameros enteros, y contar la cantidad de pares e impares que se han ingresado hasta que se ingrese un n\u00famero negativo.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Al finalizar el ingreso de n\u00fameros, la respuesta que de el programa debe ser gramaticalmente correcta (singular / plural)</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Inicializa las variables acumuladoras\npares = 0\nimpares = 0\n\nwhile True:\n    n = int(input(\"Ingrese un n\u00famero positivo (o un n\u00famero negativo para finalizar el ingreso): \"))\n\n    if n &lt; 0:\n        break\n\n    if n % 2 == 0:\n        pares += 1\n\n    else:\n        impares += 1\n\n# Imprime en pantalla cuantos n\u00fameros son pares\nif pares == 0:\n    print(\"No hay n\u00fameros pares ingresados.\")\n\nelif pares == 1:\n    print(\"1 n\u00famero ingresado es par.\")\n\nelse:    \n    print(pares, \"n\u00fameros ingresados son pares.\")\n\n# Imprime en pantalla cuantos n\u00fameros son impares\nif impares == 0:\n    print(\"No hay n\u00fameros impares ingresados.\")\n\nelif impares == 1:\n    print(\"1 n\u00famero ingresado es impar.\")\n\nelse:    \n    print(impares, \"n\u00fameros ingresados son impares.\")      \n</code></pre> </li> </ol> </li> <li> <p>Recordando el siguiente ejercicio:  </p> <p>Escribe en pantalla los m\u00faltiplos de 3 entre 1 y 100. S\u00famalos y muestra la suma al finalizar el ciclo.</p> Python<pre><code># Inicializa la variable acumuladora\nsuma = 0\n\nfor n in range(1, 101):\n    if n % 3 == 0:\n        print(n)    # Imprime en pantalla el m\u00faltiplo de 3\n        suma += n   # Suma el m\u00faltiplo de 3 en la variable acumuladora\n\nprint(\"La suma de los m\u00faltiplos de 3 impresos es:\", suma)\n</code></pre> </li> </ol> <p>El primer problema de eficiencia que se presenta aqu\u00ed es que se repite el c\u00f3digo 100 veces, solo para aprovechar un tercio de esas repeticiones.</p> <p>Podr\u00edamos, entonces, pensar en modificar el paso del ciclo para que sea de 3 en 3, pero si el ciclo debe iniciar en 1, entonces los valores ser\u00edan 1, 4, 7, 10... y ninguno ser\u00eda m\u00faltiplo de 3.</p> <pre><code>``` py title=\"Python\"\n\u22ee\nfor n in range(1, 101, 3):\n    print(n)\n\u22ee\n```\n\n&gt; Imprime el 1, 4, 7, 10 ...\n</code></pre> <p>Entonces, podr\u00edamos utilizar una variable para el paso y pensar en algo como esto:</p> <pre><code>``` py title=\"Python\"\n\u22ee\npaso = 1\n\nfor n in range(1, 101, paso):\n    if n % 3 == 0:\n        paso = 3\n        print(n) \n\u22ee\n```\n\n&gt; n va a valer 1, 2, 3, 6, 9, 12 ...\n</code></pre> <p>En la mayor\u00eda de los lenguajes, cuando n valga 3, se imprime el 3 y adem\u00e1s se modifica la variable paso para que a partir de ahora el ciclo se repita con n de 3 en 3.</p> <p>Sin embargo, en Python el valor del paso en la funci\u00f3n range() se establece cuando se crea el objeto range, y no se puede cambiar despu\u00e9s. Por lo tanto, aunque cambies el valor de paso a 3 dentro del ciclo, el ciclo seguir\u00e1 incrementando n en pasos de 1.</p> <p>Si necesitas un comportamiento donde el paso cambie durante la ejecuci\u00f3n, tendr\u00e1s que implementarlo manualmente usando un ciclo while. Entonces, refactoriza el ejercicio utilizando un ciclo abierto.</p> <pre><code>!!! warning \"\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n\"\n    El valor inicial a validar en el ciclo debe ser 1.\n\nVer resultado (1)\n{ .annotate }\n\n1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    # Inicializa la variable acumuladora\n    suma = 0\n\n    # Inicializa las variables para controlar la ejecuci\u00f3n del ciclo abierto\n    n = 1\n    paso = 1\n\n    while n &lt; 101:\n\n        if n % 3 == 0:\n            paso = 3\n            print(n)    # Imprime en pantalla el m\u00faltiplo de 3\n            suma += n   # Suma el m\u00faltiplo de 3 en la variable acumuladora\n\n        n += paso\n\n    print(\"La suma de los m\u00faltiplos de 3 impresos es:\", suma)\n    ```\n\n---\n</code></pre> <ol> <li> <p>Ingresa n\u00fameros enteros por teclado hasta que se ingrese un cero, el cual no ser\u00e1 contabilizado. Luego imprime por pantalla la cantidad de n\u00fameros ingresados. Luego imprime por pantalla la cantidad de n\u00fameros positivos ingresados. Luego imprime por pantalla la cantidad de n\u00fameros negativos ingresados. Luego imprime en pantalla cuantos n\u00fameros son pares. Luego imprime en pantalla cuantos n\u00fameros son impares. Luego imprime en pantalla en una misma l\u00ednea cuales fueron el menor y el mayor n\u00famero ingresado. Luego, si hay menor y mayor, imprime la secuencia de n\u00fameros entre el mayor y el menor, sin incluirlos, de la siguiente manera:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 8\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 4\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 0\nSe han ingresado 2 n\u00fameros.\nTodos han sido positivos. 2 en total.\n2 n\u00fameros son pares.\nNo hay n\u00fameros impares.\nEl menor valor fue el 4 y el mayor valor fue el 8\nLos n\u00fameros entre el 8 y el 4 son: 7 6 5\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 5\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 4\nIngrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): 0\nSe han ingresado 2 n\u00fameros.\nTodos han sido positivos. 2 en total.\n1 n\u00fameros son pares.\n1 n\u00fameros son impares.\nEl 4 ha sido el menor valor y el 5 ha sido el mayor valor.\nNo hay n\u00fameros entre el mayor y el menor.\n</code></pre> <p>\u00a1Atenci\u00f3n! Limitaci\u00f3n</p> <p>No est\u00e1 permitido emplear una variable para almacenar la cantidad total de n\u00fameros ingresados. No est\u00e1 permitido utilizar ninguna variable para almacenar la cantidad de n\u00fameros impares. Para imprimir la secuencia de n\u00fameros entre el mayor y el menor solo se permite implementar un ciclo abierto con la condici\u00f3n a la entrada. No se permite modificar el valor de las variables que contengan los valores de mayor y menor para imprimir la secuencia.</p> <p>Ver resultado (1)</p> <pre><code>1. :material-code-tags-check:\n\n    ``` py title=\"Python\"\n    #variables acumuladoras\n    pos = 0\n    neg = 0\n\n    pares = 0\n\n    mayor = False # Identificar inicialmente al mayor como False significa que aun no hay un mayor almacenado \n    menor = False # Identificar inicialmente al menor como False significa que aun no hay un menor almacenado \n\n    # Solicita el ingreso de numeros hasta que se ingrese el 0\n    while True:\n        n = int(input(\"Ingrese un numero o el 0 para terminar el ingreso (no se contabilizar\u00e1): \"))\n\n        # Si el numero ingresado es el 0, fuerza la salida del ciclo\n        if n == 0:\n            break\n\n        # Detecta si el numero ingresado es positivo o negativo\n        if n &gt; 0:\n            pos += 1 # pos = pos + 1\n        else:\n            neg += 1 # neg = neg + 1\n\n        # Detecta si el numero ingresado es par\n        if n % 2 == 0:    \n            pares += 1\n\n        # Detecta si el numero ingresado es el mayor\n        if not mayor: \n            mayor = n\n        elif n &gt; mayor:\n            mayor = n\n\n        # Detecta si el numero ingresado es el menor\n        if not menor:\n            menor = n \n        if n &lt; menor:\n            menor = n\n\n    # Imprime en pantalla la respuesta adecuada a la cantidad de n\u00fameros ingresados, tanto positivos como negativos\n    if pos == 0 and neg == 0:\n        print(\"No se han ingresado n\u00fameros.\")\n\n    else:    \n        print(\"Se han ingresado\", pos + neg, \"n\u00fameros.\")\n\n        if pos == 0:\n            print(\"Todos han sido negatidos.\", neg, \"en total.\")\n\n        elif neg == 0:\n            print(\"Todos han sido positivos.\", pos, \"en total.\")\n\n        else:\n            print(pos, \"han sido positivos.\")\n            print(neg, \"han sido negativos.\")\n\n        # Imprime en pantalla cuantos n\u00fameros son pares\n        if pares &gt; 0:\n            print(pares, \"n\u00fameros son pares.\")\n        else:\n            print(\"No hay n\u00fameros pares.\")\n\n        # Imprime en pantalla cuantos n\u00fameros son impares\n        if pares == pos + neg:\n            print(\"No hay n\u00fameros impares.\")\n        else:\n            print(pos + neg - pares, \"n\u00fameros son impares.\")\n\n        # Imprime en pantalla el mayor y el menor numero ingresado solo si hay m\u00e1s de un n\u00famero ingresado y no son los mismos\n        if mayor == menor:\n            print(\"No hay un valor mayor y otro valor menor ingresados porque\", end=\" \")\n            if pos + neg == 1:\n                print(\"solo se ha ingresado un n\u00famero.\")\n            else:\n                print(\"todos los n\u00fameros ingresados son iguales.\")\n        else:\n            print(\"El\", menor, \"ha sido el menor valor y el\", mayor, \"ha sido el mayor valor.\")\n\n            numero = mayor - 1\n\n            if not (numero &gt; menor):\n                print(\"No hay n\u00fameros entre el mayor y el menor.\")\n\n            else:\n                print(\"Los n\u00fameros entre el\", mayor, \"y el\", menor, \"son: \", end=\"\")\n                while numero &gt; menor:\n                    print(numero, end=\" \")\n                    numero -= 1\n    ```\n</code></pre> </li> <li> <p>Escribe un programa que solicite un n\u00famero o una palabra por teclado. Luego, que indique si es capic\u00faa (se lee igual de izquierda a derecha como de derecha a izquierda) o no. El programa debe repetirse hasta que no se ingrese ning\u00fan n\u00famero o palabra.</p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>El programa solo debe evaluar el n\u00famero o la palabra si tiene al menos 2 caracteres de longitud.</p> <p>Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): 12\n12 no es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): 1\nEl dato ingresado debe tener al menos 2 caracteres para evaluar si es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): capicua\ncapicua no es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): a\nEl dato ingresado debe tener al menos 2 caracteres para evaluar si es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): neuquen\nneuquen es capic\u00faa!\n\nIngrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo ENTER para finalizar): _\n\u22ee\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Limpia la pantalla\nprint(\"\\033[H\\033[J\")\n\nwhile True:\n    # El dato ingresado se convierte a min\u00fasculas para que la comparaci\u00f3n de caracteres sea exacta por letra y se almacena como cadena\n    dato = input(\"Ingrese el n\u00famero o la palabra para validar si es capic\u00faa (o solo presiona ENTER para finalizar): \").lower()\n\n    # Si solo se presion\u00f3 ENTER el comando *input* devolvi\u00f3 una cadena vac\u00eda forzando la finalizaci\u00f3n del ciclo\n    if dato == \"\":\n        break\n\n    # Si la cadena ingresada no posee al menos 2 caracteres, no se evaluar\u00e1 si es capic\u00faa\n    if len(dato) &lt; 2:\n        print(\"El dato ingresado debe tener al menos 2 caracteres para evaluar si es capic\u00faa!\")\n\n    else:   \n\n        #El ciclo recorrer\u00e1 la cadena almacenada, caracter por caracter, desde el extremo hacia el centro de la misma.\n        for n in range(1, len(dato) + 1):\n\n            # Si en alg\u00fan punto de la cadena almacenada el los caracteres a igual distancia de los extremos no coinciden se fuerza la salida del ciclo\n            if dato[n - 1] != dato[-n]:\n                break\n\n        # Se eval\u00faa el valor de n respecto de la longitud de la cadena\n        # Si no son iguales, significa que en alg\u00fan punto de la cadena no hubo igualdad de caracteres    \n        if n == len(dato):\n            print(dato, \"es capic\u00faa!\")\n\n        else:\n            print(dato, \"no es capic\u00faa!\")\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-estructuras-repetitivas-con-python/#inicializa-las-variables-para-controlar-la-ejecucion-del-ciclo-abierto","title":"Inicializa las variables para controlar la ejecuci\u00f3n del ciclo abierto","text":"<p>n = 1</p> <p>while n &lt;= 10:     print(n)     n += 1</p>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-funciones-con-python/","title":"Python: ejercicios de funciones","text":"<ol> <li> <p>Ingresa 2 n\u00fameros por teclado. Almac\u00e9nalos en 2 variables. Luego, imprime en pantalla cada valor ingresado. Luego, crea una funci\u00f3n con 2 par\u00e1metros que reciban los dos n\u00fameros para devolverlos intercambiados. Los valores intercambiados deben ser almacenados en las variables iniciales. Luego, imprime en pantalla los valores intercambiados.</p> <p>Por ejemplo, para los valores 4 y 5 la salida ser\u00eda:</p> Terminal (Entrada/Salida)<pre><code>Ingrese el primer n\u00famero: 4\nIngrese el segundo n\u00famero: 5\n\nEl valor almacenado en num1 es 4\nEl valor almacenado en num2 es 5\n\nAhora, el valor almacenado en num1 es 5\nAhora, el valor almacenado en num2 es 4\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones (se utiliza la palabra clave \"def\")\ndef intercambiar(numero1 , numero2):\n\n    # El comando *return* se utiliza para devolver un valores desde la funci\u00f3n hacia la l\u00ednea de c\u00f3digo que origin\u00f3 la llamada a la funci\u00f3n\n    return numero2 , numero1\n\n# Bloque principal del programa\n\n# Almacena 2 valores ingresados por teclado en 2 variables\nnum1 = int(input(\"Ingrese el primer n\u00famero: \"))\nnum2 = int(input(\"Ingrese el segundo n\u00famero: \"))\n\n# Se imprimen los valores almacenados en las variables\nprint(\"El valor almacenado en num1 es\" , num1) \nprint(\"El valor almacenado en num2 es\" , num2)\n\nnum1, num2 = intercambiar(num1, num2)   \n\nprint(\"Ahora, el valor almacenado en num1 es\" , num1) \nprint(\"Ahora, el valor almacenado en num2 es\" , num2)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que defina una funci\u00f3n que retorne por resultado un tri\u00e1ngulo es rect\u00e1ngulo o no, a partir de la longitud de sus catetos e hipotenusa. Una terna pitag\u00f3rica es una tupla ordenada de tres valores positivos <code>a</code>, <code>b</code>, <code>c</code> que se pueden asociar con las longitudes de los dos catetos y de la hipotenusa correspondiente, formando un tri\u00e1ngulo rect\u00e1ngulo.</p> <p>Por ejemplo, utilizando la siguiente lista:</p> Python<pre><code>triangulos = [(3,4,5), (5,12,13), (9,15,17), (12,35,37), (13,36,39)]\n</code></pre> <p>El programa deber\u00e1 devolver los siguientes resultados:</p> Terminal (Entrada/Salida)<pre><code>El tri\u00e1ngulo de catetos de 3 cm. y 4 cm. y de hipotenusa de 5 cm. es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 5 cm. y 12 cm. y de hipotenusa de 13 cm. es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 9 cm. y 15 cm. y de hipotenusa de 17 cm. no es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 12 cm. y 35 cm. y de hipotenusa de 37 cm. es rect\u00e1ngulo.\nEl tri\u00e1ngulo de catetos de 13 cm. y 36 cm. y de hipotenusa de 39 cm. no es rect\u00e1ngulo.\n</code></pre> <p>\u00a1Una ayudita!</p> <p>La funci\u00f3n debe contener la siguiente sentencia:</p> Python<pre><code>hipotenusa_calculada = (cateto1 ** 2 + cateto2 ** 2) ** 0.5\n</code></pre> <p>Â¡Para recordar! que <code>**</code> en Python es el operador de potencia. <code>** 2</code> equivale a potencia de 2. <code>** 0.5</code> equivale a ra\u00edz cuadrada.</p> <p><code>cateto1</code> y <code>cateto2</code> son los par\u00e1metros que recibe la funci\u00f3n. Luego del c\u00e1lculo deber\u00e1s hacer algo con <code>hipotenusa_calculada</code> y la hipotenusa que reciba la funci\u00f3n por par\u00e1metro para retornar un resultado que sirva para determinar si el tri\u00e1ngulo es o no es rect\u00e1ngulo.</p> <p>Analiza el siguiente fragmento del programa para poder completarlo correctamente.</p> Python<pre><code>\u22ee\n# Lista de tri\u00e1ngulos identificados por (cateto1, cateto2, hipotenusa) en cm.\ntriangulos = [(3,4,5), (5,12,13), (9,15,17), (12,35,37), (13,36,39)]\n\n# Se evalua la lista de triangulos\nfor cateto1, cateto2, hipotenusa in triangulos:\n    # Invocamos a la funcion area_triangulo():\n    print(f\"\\nEl tri\u00e1ngulo de catetos de {cateto1} cm. y {cateto2} cm. y de hipotenusa de {hipotenusa} cm. {\"es\" if es_triangulo_rect\u00e1ngulo(cateto1, cateto2, hipotenusa) else \"no es\"} rect\u00e1ngulo.\")\n\u22ee\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones \n\ndef es_triangulo_rect\u00e1ngulo(cateto1, cateto2, hipotenusa):\n    hipotenusa_calculada = (cateto1 ** 2 + cateto2 ** 2) ** 0.5\n\n    if hipotenusa_calculada == hipotenusa:\n        return True\n    else:\n        return False\n\n\n# Bloque principal del programa\n\n# Lista de tri\u00e1ngulos identificados por (cateto1, cateto2, hipotenusa) en cm.\ntriangulos = [(3,4,5), (5,12,13), (9,15,17), (12,35,37), (13,36,39)]\n\n# Se eval\u00faa la lista de triangulos\nfor cateto1, cateto2, hipotenusa in triangulos:\n\n    # Se invoca a la funci\u00f3n area_triangulo() dentro del argumento del comando print directamente\n    print(f\"\\nEl tri\u00e1ngulo de catetos de {cateto1} cm. y {cateto2} cm. y de hipotenusa de {hipotenusa} cm. {\"es\" if es_triangulo_rect\u00e1ngulo(cateto1, cateto2, hipotenusa) else \"no es\"} rect\u00e1ngulo.\")\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que defina una funci\u00f3n que reciba 2 listas de elementos y retorne otra lista con los elementos que se encuentran en ambas listas solamente.</p> <p>Por ejemplo, utilizando la siguientes listas:</p> Python<pre><code>lista1 = [1, 2, 3, 4, 5]\nlista2 = [4, 5, 6, 7, 8]\n</code></pre> <p>El programa deber\u00e1 devolver el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>lista_interseccion = [4, 5]\n</code></pre> <p>Y utilizando la siguientes listas:</p> Python<pre><code>lista1 = ['a', 'b', 'c', 'd', 'e']\nlista2 = ['c', 'd', 'e', 'f', 'g']\n</code></pre> <p>El programa deber\u00e1 devolver el siguiente resultado:</p> Terminal (Entrada/Salida)<pre><code>lista_interseccion = ['c', 'd', 'e']\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones \n\ndef intersectar_listas(lista1, lista2):\n\n    # Se inicializa la lista que contendr\u00e1 los elementos que se encuentren en ambas listas pasadas a la funci\u00f3n\n    lista_interseccion = []\n\n    # Se crea un conjunto de cada lista para eliminar los elementos duplicados\n    lista1 = set(lista1)\n    lista2 = set(lista2)\n\n    # elemento por elemento del conjunto de la lista1\n    for elemento in lista1: \n\n        # Se valida si el elemento se encuentra dentro del conjunto de la lista2\n        if elemento in set(lista2):\n\n            # Se agrega el elemento a la lista de elementos en com\u00fan\n            lista_interseccion.append(elemento)\n\n    # Ordena la lista alfab\u00e9ticamente y/o num\u00e9ricamente ascendente\n    lista_interseccion.sort()\n\n    # Se retorna la lista resultante   \n    return lista_interseccion\n\n\n# Bloque principal del programa\n\n# Se inicializan las listas con sus elementos\nlista1 = [1, 2, 3, 4, 5]\nlista2 = [4, 5, 6, 7, 8]\n\n# Se invoca a la funci\u00f3n pas\u00e1ndole las dos listas y se almacena la lista retornada por la funci\u00f3n en la lista de intersecci\u00f3n\nlista_interseccion = intersectar_listas(lista1, lista2)\n\n# Se imprime en pantalla la lista resultante\nprint(\"lista_interseccion =\", lista_interseccion)\n\n# Se inicializan las listas con otros elementos\nlista1 = ['a', 'b', 'c', 'd', 'e']\nlista2 = ['c', 'd', 'e', 'f', 'g']\n\n# Se invoca a la funci\u00f3n pas\u00e1ndole las dos listas y se almacena la lista retornada por la funci\u00f3n en la lista de intersecci\u00f3n\nlista_interseccion = intersectar_listas(lista1, lista2)\n\n# Se imprime en pantalla la lista resultante\nprint(\"lista_interseccion =\", lista_interseccion)\n</code></pre> <p>!!! tip \"Claramente el programa puede funcionar con elementos de tipo num\u00e9rico como alfanum\u00e9rico.</p> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/ejercitacion/ejercicios-de-listas/","title":"Ejercitaci\u00f3n de listas con Python","text":"<ol> <li> <p>Escribe un programa que solicite una palabra por teclado. Luego, convierte los caracteres de la palabra ingresada en una lista de elementos. A continuaci\u00f3n, imprime en pantalla la lista. Por \u00faltimo, imprime en pantalla todos los elementos de la lista, un elemento por rengl\u00f3n.</p> Terminal (Entrada/Salida)<pre><code>Ingrese una palabra: palabra\n['p', 'a', 'l', 'a', 'b', 'r', 'a']\np\na\nl\na\nb\nr\na\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>palabra = input(\"Ingrese una palabra: \")\nlista = list(palabra)\nprint(lista)\nfor elemento in lista:\n    print(elemento)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que cree una lista con los siguientes elementos: blanco, rojo, violeta, azul, gris, verde y amarillo.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>colores = [\"blanco\", \"rojo\", \"violeta\", \"azul\", \"gris\", \"verde\", \"amarillo\"]\n</code></pre> </li> </ol> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente: Imprime en pantalla cuantos elementos contiene la lista, con el siguiente formato y utilizando f-strings (si no Â¡Para recordar!s que son las f-strings puedes repasarlo aqu\u00ed).</p> Terminal (Entrada/Salida)<pre><code>La lista contiene 7 elementos.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>print(f\"La lista contiene {len(colores)} elementos.\")\n</code></pre> </li> </ol> </li> <li> <p>Copia aqu\u00ed el c\u00f3digo del ejercicio anterior y a contiunaci\u00f3n realiza lo siguiente:</p> <ol> <li>Agrega el color \"lila\" al final de la lista</li> <li>Agrega el color \"Celeste\" insert\u00e1ndolo en la posici\u00f3n 4 (piensa, no es un reemplazo y hablamos de ubicaci\u00f3n)</li> <li>Agrega el color \"Marr\u00f3n\" insert\u00e1ndolo luego de \"azul\" (debes encontrar la posici\u00f3n de \"azul\" primero)</li> <li>Por \u00faltimo, imprime la nueva longitud de la lista con la misma salida que el ejercicio anterior, pero empleando el m\u00e9todo format() (si no Â¡Para recordar!s el m\u00e9todo format() puedes repasarlo aqu\u00ed).</li> </ol> <p>Imprime la lista luego de cada instrucci\u00f3n para visualizar como se va modificando.</p> Terminal (Entrada/Salida)<pre><code>\u22ee\n['blanco', 'rojo', 'violeta', 'azul', 'gris', 'verde', 'amarillo', 'lila']\n['blanco', 'rojo', 'violeta', 'celeste', 'azul', 'gris', 'verde', 'amarillo', 'lila']\n['blanco', 'rojo', 'violeta', 'celeste', 'azul', 'Marr\u00f3n', 'gris', 'verde', 'amarillo', 'lila']\nLa lista contiene 10 elementos.\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>colores = [\"blanco\", \"rojo\", \"violeta\", \"azul\", \"gris\", \"verde\", \"amarillo\"]\n\nprint(f\"La lista contiene {len(colores)} elementos.\")\n\ncolores.append(\"lila\")\nprint(colores)\n\ncolores.insert(3, \"celeste\")\nprint(colores)\n\nposicion = colores.index(\"azul\")\ncolores.insert((posicion + 1), \"Marr\u00f3n\")\nprint(colores)\n\nprint(\"La lista contiene {} elementos.\".format(len(colores)))\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que sume las siguientes listas y las muestre en pantalla:</p> <p>Terminal (Entrada/Salida)<pre><code>lista1 = [ 1, 2, 3, 4, 5 ]\nlista2 = [ 6, 7, 8, 9, 10]\n</code></pre> La suma debe efectuarse de la siguiente manera:</p> <pre><code>1. Utilizando el operador de concatenaci\u00f3n.\n\n2. Utilizando el m\u00e9todo extend().\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>lista1 = [ 1, 2, 3, 4, 5 ]\nlista2 = [ 6, 7, 8, 9, 10]\n\nprint(lista1 + lista2) # Output : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nlista1.extend(lista2)\nprint(lista1) # Output : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p>Para pensar</p> <p>\u00bfCu\u00e1l es la diferencia m\u00e1s importante que observar al emplear cada manera?</p> <p>\u00bfPodemos decir que una es destructiva y la otra no? \u00bfPor qu\u00e9?</p> </li> </ol> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>lista = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</code></pre> <p>Modifica los valores pares para que sean iguales al doble de su valor.</p> Terminal (Entrada/Salida)<pre><code>lista = [ 1, 4, 3, 8, 5, 12, 7, 16, 9, 20]\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> <p>``` py title=\"Python\" lista = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p> <p>for i in range( 1, len(lista), 2):     lista[i] = 2 * lista[i]</p> <p>print(lista)     ---</p> </li> </ol> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>lista = [10, 3, 4, 9, 6, 8, 4]\n</code></pre> <p>Imprime en pantalla empleando textos formateados:</p> <ol> <li> <p>La lista.</p> </li> <li> <p>Cual es el mayor valor.</p> </li> <li> <p>Cual es el menor valor.</p> </li> <li> <p>El tercer valor.</p> </li> <li> <p>El quinto valor.</p> </li> <li> <p>La suma del segundo y del cuarto valor.</p> </li> <li> <p>La lista es una serie de valores, pero est\u00e1n desordenados. Ord\u00e9nala de manera ascendente.</p> </li> <li> <p>Cuantas veces aparece el valor 4 en la lista.</p> </li> <li> <p>Elimina los elementos duplicados utilizando el m\u00e9todo correspondiente.</p> </li> <li> <p>La lista final.</p> </li> </ol> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>lista = [10, 3, 4, 9, 6, 8, 4]\n\nprint(\"La lista es\", lista)\n\nprint(f\"El mayor valor es {max(lista)}\")\n\nprint(f\"El menor valor es {min(lista)}\")\n\nprint(f\"El tercer valor es {lista[2]}\")\n\nprint(f\"El quinto valor es {lista[4]}\")\n\nprint( f\"La suma del segundo y del cuarto valor es {lista[1] + lista[3]}\")\n\nlista.sort()\n\nprint(f\"El 4 aparece {lista.count(4)} veces en la lista\")\n\nlista.remove(4)\n\nprint(\"La lista sin duplicados es\", lista)\n</code></pre> Terminal (Entrada/Salida)<pre><code>La lista es [10, 3, 4, 9, 6, 8, 4]\nEl mayor valor es 10\nEl menor valor es 3\nEl tercer valor es 4\nEl quinto valor es 6\nLa suma del segundo y del cuarto valor es 12\nEl 4 aparece 2 veces en la lista\nLa lista es [3, 4, 6, 8, 9, 10]\n</code></pre> </li> </ol> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>colores = [ 'rojo', 'azul', 'verde', 'amarillo' ]\n</code></pre> <p>Impr\u00edmela al derecho y al rev\u00e9s sin utilizar ning\u00fan bucle ni otras variables o listas.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>print(colores)\n\ncolores.reverse()\n\nprint(colores)\n</code></pre> </li> </ol> </li> <li> <p>Dada la siguiente lista:</p> Terminal (Entrada/Salida)<pre><code>countdown = [0, 1, 2, 3, 4, 5]\n</code></pre> <p>Util\u00edzala para tomar cada valor e imprimir una cuenta regresiva.  </p> <p>\u00a1Atenci\u00f3n! Alcance y Limitaci\u00f3n</p> <p>Puedes modificar la lista a tu conveniencia pero solo un elemento a la vez. No puedes agregar elementos ni cambiar el valor de un elemento existente. Debes utilizar un ciclo abierto para controlar el funcionamiento del programa.</p> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>countdown = [0, 1, 2, 3, 4, 5]\n\nwhile len(countdown) &gt; 0:\n    num = countdown.pop()\n    print(num)\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que realice lo siguiente:</p> <ol> <li>Crear una lista de valores del 1 al 5.</li> <li>Imprimir la lista en pantalla.</li> <li>Desempaqueta la lista en variables.</li> <li> <p>Utilizando las variables, imprime la siguiente salida:</p> Terminal (Entrada/Salida) los valores entre llaves son los almacenados en las variables<pre><code>n1 vale {n1}, n2 vale {n2}, n2 vale \u2026\n</code></pre> </li> </ol> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Crea la lista\nnumeros = list(range(1, 6))\n\n# Imprime la lista\nprint(numeros)\n\n# Desempaca la lista en variables\nn1, n2, n3, n4, n5 = numeros\n\n# Imprime en pantalla\nprint(f\"n1 vale {n1}, n2 vale {n2}, n3 vale {n3}, n4 vale {n4}, n5 vale {n5}\")\n</code></pre> </li> </ol> </li> <li> <p>Escribe un programa que solicite un n\u00famero del 1 al 10. Luego, que cree una lista de la tabla de multiplicar del n\u00famero ingresado. Por \u00faltimo, que genere en pantalla una salida como la siguiente, para el n\u00famero 4 por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>Ingrese un n\u00famero entre 1 y 10: 4\n\nTabla de multiplicaci\u00f3n para 4:\n\n4 x 1 = 4\n4 x 2 = 8\n4 x 3 = 12\n4 x 4 = 16\n4 x 5 = 20\n4 x 6 = 24\n4 x 7 = 28\n4 x 8 = 32\n4 x 9 = 36\n4 x 10 = 40\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Solicita un n\u00famero al usuario entre 1 y 10\nnum = int(input(\"Ingrese un n\u00famero entre 1 y 10: \"))\n\n# Crea una lista con los m\u00faltiplos del n\u00famero ingresado\n# multiplos = [num * i for i in range(1, 11)] ser\u00eda una excelente soluci\u00f3n\nmultiplos = list(range(num, (10 * num) + 1, num))\n\n# Imprime los m\u00faltiplos de num en un formato agradable\nprint(f\"\\nTabla de multiplicaci\u00f3n para {num}:\\n\")\n\nfor i in range(1, 11):\n    print(f\"{num} x {i} = {multiplos[i-1]}\")\n</code></pre> </li> </ol> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code>\n</code></pre> </li> </ol> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/estructuras-de-datos-en-python/","title":"Estructuras de datos en python","text":"Es mutable Es ordenada Permite indexaci\u00f3n Permite rebanado Permite duplicar elementos cadena de caracteres NO SI SI SI SI Lista NO SI SI SI SI Diccionario NO SI SI SI SI Tupla NO SI SI SI SI Conjunto SI NO NO NO NO <p>Cada estructura de datos posee caracter\u00edsticas espec\u00edficas:</p> <ul> <li> <p>Es mutable: Puede cambiar su contenido luego de ser creada.</p> </li> <li> <p>Es ordenada: Los elementos de la estructura tienen un orden espec\u00edfico que se mantiene.</p> </li> <li> <p>Permite indexaci\u00f3n: Es posible acceder a cada elemento de la estructura por su \u00edndice, que comienza en 0.</p> </li> <li> <p>Permite rebanado (slicing): Es posible obtener sub grupos de elementos de una estructura utilizando la sintaxis de rebanado.</p> </li> <li> <p>Permite duplicar elementos: Una estructura puede contener caracteres duplicados.</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/","title":"Cadenas de caracteres en Python","text":"<p>Python, al igual que la mayor\u00eda de los lenguajes de programaci\u00f3n actuales, provee un tipo de dato espec\u00edfico para tratar las cadenas de caracteres (strings).</p> <p>Se trata de un tipo de dato con longitud variable, ya que deben adecuarse a la cantidad de caracteres que albergue la cadena.</p> <p>Este tipo de dato posee una buena cantidad de m\u00e9todos y propiedades que facilita su uso.</p> <p>El siguiente c\u00f3digo demuestra como es posible almacenar una cadena de caracteres en una variable. Este procedimiento se denomina inicializaci\u00f3n cuando se crea la variable por primera vez en el programa y se la almacena un primer valor; o asignaci\u00f3n cuando la variable ya existe en el programa y se le almacena un nuevo valor.</p> Python - Inicializaci\u00f3n de variables de cadena de caracteres<pre><code># Definici\u00f3n de cadenas de caracteres usando comillas dobles\ndia1 = \"Lunes\"\nvacio = \"\"\n\n# Definici\u00f3n de cadenas de caracteres usando comillas simples\ndia2 = 'Martes'\nnumero_que_no_es_numero = \"121\"\n</code></pre> <p><code>vacio</code> es una cadena de caracteres de longitud cero. <code>numero_que_no_es_numero</code> contiene n\u00fameros, pero es una cadena de caracteres porque estos n\u00fameros est\u00e1n entre comillas.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#ingreso-de-cadenas-vacias","title":"Ingreso de cadenas vac\u00edas","text":"<p>En Python, cuando el usuario presiona solo ENTER en respuesta a la funci\u00f3n <code>input()</code>, se devuelve una cadena vac\u00eda. Por lo tanto, puedes verificar si el usuario presion\u00f3 solo ENTER comprobando si dato es una cadena vac\u00eda: </p> Python<pre><code>valor_ingresado = input(\"Ingrese algo por teclado (o solo ENTER para ingresar una cadena vac\u00eda): \")\n\nif valor_ingresado == '':\n    print(\"Has ingresado una cadena vac\u00eda.\")\nelse:\n    print(\"Has ingresado\", valor_ingresado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Ingrese algo por teclado (o solo ENTER para ingresar una cadena vac\u00eda): Pablo \nHas ingresado Pablo\n\nIngrese algo por teclado (o solo ENTER para ingresar una cadena vac\u00eda): \nHas ingresado una cadena vac\u00eda.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-triple-comillas-en-cadenas-de-mas-de-una-linea","title":"Uso de triple comillas en cadenas de m\u00e1s de una l\u00ednea","text":"<p>El uso de triple comillas para crear una cadena de caracteres provee un m\u00e9todo sencillo para usar m\u00e1s de una l\u00ednea de c\u00f3digo para definir su contenido:</p> Python<pre><code># Definici\u00f3n de cadenas usando comillas dobles triples:\ncadena1 = \"\"\"En Python es posible \ndefinir cadenas de caracteres \nutilizando m\u00e1s de una l\u00ednea de c\u00f3digo\"\"\"\n\n# Definici\u00f3n de cadenas usando comillas simples triples:\ncadena2 = '''Por supuesto, se puede hacer lo mismo \nutilizando comillas simples'''\n\nprint(cadena1)\nprint(cadena2)\n</code></pre> Terminal (Entrada/Salida)<pre><code>En Python es posible\ndefinir cadenas de caracteres \nutilizando m\u00e1s de una l\u00ednea de c\u00f3digo\n\nPor supuesto, se puede hacer lo mismo \nutilizando comillas simples\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#iterar-sobre-una-cadena-de-caracteres","title":"Iterar sobre una cadena de caracteres","text":"<p>Como hemos visto anteriormente, <code>for</code> es una estructura de control que permite repetir un bloque de c\u00f3digo un n\u00famero determinado de veces. </p> <p>En Python, puedes usar un bucle for para iterar sobre cada car\u00e1cter en una cadena. Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Hola Mundo\"\n\nfor caracter in cadena:\n    print(caracter)\n</code></pre> Terminal (Entrada/Salida)<pre><code>H\no\nl\na\n\nM\nu\nn\nd\no\n</code></pre> <p>En este c\u00f3digo, <code>for caracter in cadena:</code> inicia un bucle que itera sobre cada car\u00e1cter en cadena. En cada iteraci\u00f3n del bucle, <code>caracter</code> es una cadena de un solo car\u00e1cter de <code>cadena</code>, y <code>print(caracter)</code> imprime este car\u00e1cter.  </p> <p>Por lo tanto, este c\u00f3digo imprime cada car\u00e1cter en <code>cadena</code> en una l\u00ednea separada.</p> <p>Otro ejemplo podr\u00eda ser enumerar cada caracter como se ve en la salida:</p> Terminal (Entrada/Salida)<pre><code>1\u00b0: H  /  2\u00b0: o  /  3\u00b0: l  /  4\u00b0: a  /  5\u00b0:    /  6\u00b0: M  /  7\u00b0: u  /  8\u00b0: n  /  9\u00b0: d  /  10\u00b0: o\n</code></pre> <p>Esto requiere que el programa sea m\u00e1s complejo para lograr el resultado propuesto.</p> Python<pre><code>cadena = \"Hola Mundo\"\n\n# Se utiliza para controlar como debe comportarse *print*\n# en cada iteraci\u00f3n del ciclo\npos = 1\n\n# Se utiliza para modificar el comportamiento del par\u00e1metro *end* \n# de *print* durante la ejecuci\u00f3n del ciclo\nchar_end = \"  /  \"\n\nfor caracter in cadena:\n\n    # Modifica el comportamiento del par\u00e1metro *end* \n    # si es la \u00faltima iteraci\u00f3n del ciclo\n    if pos == len(cadena):\n        char_end = \"\\n\"\n\n    print(pos, \"\u00b0: \", caracter, sep=\"\", end = char_end)\n    pos = pos + 1\n</code></pre> <p>Para pensar</p> <p>Analiza el \u00faltimo c\u00f3digo para entender como es el funcionamiento.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#acceso-a-cada-caracter-de-una-cadena-de-caracteres","title":"Acceso a cada caracter de una cadena de caracteres","text":"<p>Para entenderlo de manera muy simple, una cadena de caracteres es como una fila ordenada de caracteres donde cada caracter se ubica en una posici\u00f3n \u00fanica, uno a continuaci\u00f3n de otro, y cuyo primer valor posicional es el cero [0].</p> <p>Esta posici\u00f3n se denomina \u00edndice (index). </p> <p>Tambi\u00e9n se lo suele llamar sub\u00edndice aunque este nombre no es correcto y no debe ser adoptado para identificar posiciones.</p> <p>Asi, en Python se puede acceder a uno o a un conjunto de caracteres dentro de una cadena de caracteres simplemente con llamar el nombre de la variable de la cadena de caracteres seguido del \u00edndice de referencia:</p> Python<pre><code>cadena = \"Hola Mundo!\"\n\nprint(cadena[0])\nprint(cadena[5])\n</code></pre> Terminal (Entrada/Salida)<pre><code>H # Es el primer caracter de la cadena, identificado con el \u00edndice 0\nM # Es el sexto caracter de la cadena, identificado con el \u00edndice 5\n</code></pre> <p>Cuando el \u00edndice es negativo, las posiciones se identifican de atr\u00e1s para adelante, siendo -1 el \u00edndice del \u00faltimo caracter, siendo -2 el \u00edndice del ante \u00faltimo caracter y as\u00ed sucesivamente.</p> <p>Â¡Para recordar!</p> <p>Cuando utilizas \u00edndices negativos, la primera posici\u00f3n no es 0, es -1</p> Python<pre><code>cadena = \"Hola Mundo!\"\n\nprint(cadena[-1])\nprint(cadena[-2])\n</code></pre> Terminal (Entrada/Salida)<pre><code>! # Es el primer caracter de la cadena de atr\u00e1s para adelante, identificado con el \u00edndice -1\no # Es el segundo caracter de la cadena de atr\u00e1s para adelante, identificado con el \u00edndice -2\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#rebanadas-slicing","title":"Rebanadas (Slicing)","text":"<p>Las rebanadas o slicing en Python se utilizan para extraer una parte de la cadena de caracteres (un intervalo de posiciones de la cadena de caracteres). </p> <p>Aqu\u00ed tienes un ejemplo b\u00e1sico:</p> Python<pre><code># Crear una cadena\nmi_cadena = \"Hola Mundo\"\n\n# Obtener los caracteres del \u00edndice 5 al \u00edndice 9 (el 10 se excluye)\nsub_cadena = mi_cadena[5:10]\n\nprint(sub_cadena)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Mundo\n</code></pre> <p>En este c\u00f3digo, <code>mi_cadena[5:10]</code> crea una nueva cadena que contiene los caracteres de <code>mi_cadena</code> desde el \u00edndice 5 hasta el \u00edndice 9.  </p> <p>Adem\u00e1s, puedes omitir el \u00edndice inicial para empezar desde el principio de la cadena, o puedes omitir el \u00edndice final para ir hasta el final de la cadena. </p> <p>Tambi\u00e9n puedes usar un tercer n\u00famero para especificar el paso de la rebanada. Por ejemplo, mi_lista[::2] obtendr\u00eda todos los elementos de mi_lista con \u00edndices pares.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#ejemplos-de-aplicacion","title":"Ejemplos de aplicaci\u00f3n","text":"Python<pre><code>cadena = \"Hola Mundo!\"\n\n# Imprime los caracteres en los \u00edndices 5 y 6 (\"Mu\")\nprint(cadena[5:7])      \n\n# Imprime los caracteres en los \u00edndices -10, -9 y -8 (\"ola\")\nprint(cadena[-10:-7])   \n\n# Imprime los caracteres desde el \u00edndice 5 hasta el final (\"Mundo!\")\nprint(cadena[5:])       \n\n# Imprime los caracteres desde el inicio hasta el \u00edndice 3 (\"Hola\")\nprint(cadena[:4])      \n\n# Imprime cada segundo car\u00e1cter desde el \u00edndice 2 hasta el 10 (\"l ud\")\nprint(cadena[2:11:2])  \n\n# Imprime la cadena completa (\"Hola Mundo!\")\nprint(cadena[:])       \n\n# Imprime cada segundo car\u00e1cter de la cadena completa (\"Hl ud!\")\nprint(cadena[::2])      \n\n# Imprime la cadena en orden inverso (\"!odnuM aloH\")\nprint(cadena[::-1])  \n</code></pre> <p>Cada l\u00ednea imprime una parte diferente de la cadena, utilizando diferentes maneras de indexaci\u00f3n y segmentaci\u00f3n.</p> Terminal (Entrada/Salida)<pre><code># Son los caracteres comprendidos en el intervalo de posiciones sexta hasta s\u00e9ptima, con \u00edndices 5 al 6  \nMu      \n\n# Son los caracteres comprendidos en el intervalo de posiciones d\u00e9cima desde atr\u00e1s hasta octava desde atr\u00e1s, con \u00edndices -10 al -8 \nola     \n\n# Son los caracteres comprendidos en el intervalo de posiciones sexta hasta el final, con \u00edndices 5 en adelante \nMundo!  \n\n# Son los caracteres comprendidos en el intervalo de posiciones primera hasta cuarta, con \u00edndices 0 al 3 \nHola    \n\n# Son los caracteres comprendidos en el intervalo de posiciones tercera hasta und\u00e9cima, saltando de dos en dos, con \u00edndices 2 al 10 con paso 2\nl ud    \n\n# Son todos los caracteres de la cadena, desde el inicio hasta el final\nHola Mundo! \n\n# Son los caracteres comprendidos en toda la cadena, saltando de dos en dos, con \u00edndices desde el inicio hasta el final con paso 2\nHl ud!  \n\n# Son todos los caracteres de la cadena, desde el final hasta el inicio, es decir, la cadena invertida\n!odnuM aloH \n</code></pre> <p>Â¡Para recordar!</p> <p>El subconjunto resultante de la cadena de caracteres incluye el valor del \u00edndice de inicio, pero no el valor del \u00edndice de fin si no su valor anterior.</p> <p>Y un tercer valor permite determinar un paso, que incluso puede ser negativo.</p> <p>\u00a1Precauci\u00f3n!</p> <p>Cuando trabajas con \u00edndices, estos siempre deben ser v\u00e1lidos. Cualquier intento de acceso a una posici\u00f3n inexistente (fuera de rango) resultar\u00e1 en un error de ejecuci\u00f3n del programa.</p> Python<pre><code>print(cadena[-2:-6]) # No devuelve ninguna subcadena\nprint(cadena[-6:10]) # Output: Mundo\nprint(cadena[5:-1]) # Output: Mundo\nprint(cadena[5:15]) # Output: Mundo!\n\nprint(cadena[15]) IndexError: string index out of range\n\nprint(cadena[-16]) IndexError: string index out of range\n</code></pre> <p>Presta atenci\u00f3n que seg\u00fan el caso, utilizar un \u00edndice fuera de rango no siempre resulta en error.  </p> <p>En el primer ejemplo, la rebanada no devuelve ninguna subcadena porque los \u00edndices est\u00e1n invertidos.  </p> <p>En el cuarto ejemplo, la rebana se realiza sin problemas. Claro, independientemente que el \u00edndice de fin est\u00e9 fuera de rango, la rebanada se efectuar\u00e1 desde la sexta posici\u00f3n (\u00edndice 5) hasta la quinceava posici\u00f3n (\u00edndice 14) o hasta alcanzar el final de la cadena de caracteres, lo que ocurra primero.</p> <p>Pero en el quinto y sexto ejemplo si se produce un error de fuera de rango ya que la cadena no posee 16 caracteres.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-operadores-con-cadenas-de-caracteres","title":"Uso de operadores con cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-en-cadenas-para-partirlas-en-mas-de-una-linea","title":"Uso del operador  en cadenas para partirlas en m\u00e1s de una l\u00ednea","text":"<p>Puedes usar el operador de continuaci\u00f3n de l\u00ednea ( \\ ) para dividir una cadena de texto en varias l\u00edneas sin interrumpir la cadena. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Esta es una cadena de texto muy larga que queremos dividir \\\nen varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\"\n\nprint(cadena)\n</code></pre> <p>Cuando ejecutes este c\u00f3digo, ver\u00e1s que la cadena se imprime como una sola l\u00ednea, a pesar de que en el c\u00f3digo fuente est\u00e1 dividida en dos l\u00edneas. Esto es porque el operador de continuaci\u00f3n de l\u00ednea ( \\ ) al final de la l\u00ednea le dice a Python que la l\u00ednea actual contin\u00faa en la siguiente l\u00ednea.</p> Terminal (Entrada/Salida)<pre><code>Esta es una cadena de texto muy larga que queremos dividir en varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\n</code></pre> <p>\u00a1Atenci\u00f3n!</p> <p>Aseg\u00farate de que no haya ning\u00fan espacio o cualquier otro car\u00e1cter despu\u00e9s del operador de continuaci\u00f3n de l\u00ednea ( \\ ), de lo contrario, Python interpretar\u00e1 el  como un car\u00e1cter literal en lugar de un indicador de continuaci\u00f3n de l\u00ednea.</p> <p>No solo con cadenas</p> <p>El operador de continuaci\u00f3n de l\u00ednea ( \\ ) tambi\u00e9n se utiliza en Python para indicar que una l\u00ednea de c\u00f3digo contin\u00faa en la siguiente l\u00ednea. Esto es \u00fatil cuando tienes una l\u00ednea de c\u00f3digo muy larga y quieres dividirla en varias l\u00edneas para mejorar la legibilidad de este.</p> Python<pre><code># Sin el operador de continuaci\u00f3n de l\u00ednea\nsuma = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n# Con el operador de continuaci\u00f3n de l\u00ednea \n# (Â¡Para recordar! que no debe posee m\u00e1s caracteres a continuaci\u00f3n)\nsuma = 1 + 2 + 3 + 4 + \\\n    5 + 6 + 7 + 8 + \\\n    9 + 10\n\nprint(suma)  # Output: 55\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#replicacion-de-cadenas-de-caracteres","title":"Replicaci\u00f3n de cadenas de caracteres","text":"<p>Una cadena puede replicarse con el operador de repetici\u00f3n ( * ):</p> Python<pre><code>risa = 'ja'\ncarcajada = risa * 5 # jajajajaja\n\nasteriscos = \"*\" * 10\n\nprint(carcajada)\nprint(asteriscos)\n</code></pre> Terminal (Entrada/Salida)<pre><code>jajajajaja\n**********\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#concatenacion-de-cadenas-de-caracteres","title":"Concatenaci\u00f3n de cadenas de caracteres","text":"<p>Las cadenas de caracteres pueden concatenarse (Unir o enlazar dos o m\u00e1s cadenas) utilizando el operador de concatenaci\u00f3n ( + ):</p> Python<pre><code>mensaje =\"Buenos d\u00edas\"\nnombre = \"Pablo\"\napellido = \"Roca\"\n\nsaludo = mensaje + \" \" + nombre + \" \" + apellido\n\nprint(saludo)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Buenos d\u00edas Pablo Roca\n</code></pre> <p>Â¡Para recordar!</p> <p>La funci\u00f3n de concatenaci\u00f3n es propia de las cadenas de caracteres. El uso del operador de concatenaci\u00f3n ( + ) en otro tipo o estructura de datos podr\u00eda comportarse de diferente manera o devolver un error.</p> Python<pre><code>var1 = 3 + 5        # 8 (entero)\nvar2 = \"3\" + \"5\"    # 35 (cadena de caracteres)\nvar3 = str(3) + \"5\" # 35 (cadena de caracteres)\nvar4 = 3 + int(\"5\") # 8 (entero)\nvar5 = 3 + \"5\"      # TypeError: unsupported operand type(s) for +: 'int' and 'str'   \n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#comparacion-de-cadenas-de-caracteres","title":"Comparaci\u00f3n de cadenas de caracteres","text":"<p>Es posible comparar dos o m\u00e1s cadenas de caracteres en una expresi\u00f3n utilizando los operadores de comparaci\u00f3n:</p> Python<pre><code>cadena1 = \"caso\"\ncadena2 = \"caos\"\n\nprint(cadena1 &gt; cadena2)\nprint(cadena1 == cadena2)\nprint(cadena1 &lt; cadena2)\n</code></pre> <p>La comparaci\u00f3n no es por cantidad de caracteres sino por el caracter que se encuentra en cada posici\u00f3n de una cadena respecto del caracter que se encuentra en la misma posici\u00f3n de otra cadena:</p> Terminal (Entrada/Salida)<pre><code>True\nFalse\nFalse\n</code></pre> <p>Solo la primera comparaci\u00f3n del ejemplo anterior es verdadera: reci\u00e9n hay diferencia de caracteres en la tercera posici\u00f3n donde <code>cadena1</code> posee una <code>s</code> y <code>cadena2</code> posee una <code>o</code>, siendo la <code>s</code> mayor en valor posicional a la <code>o</code></p> <p>Lo mismo ocurre con la comparaci\u00f3n de caracteres num\u00e9ricos cuando estos son almacenados como caracteres de texto:</p> Python<pre><code>cadena1 = \"num_10\"\ncadena2 = \"num_2\"\n\nprint(cadena1 &gt; cadena2)\nprint(cadena1 == cadena2)\nprint(cadena1 &lt; cadena2)\n</code></pre> Terminal (Entrada/Salida)<pre><code>False\nFalse\nTrue\n</code></pre> <p>Solo la tercera comparaci\u00f3n del ejemplo anterior es verdadera: reci\u00e9n hay diferencia de caracteres en la quinta posici\u00f3n donde <code>cadena1</code> posee un caracter <code>1</code> y <code>cadena2</code> posee un caracter <code>2</code>, siendo el <code>1</code> menor en valor posicional al <code>2</code></p> <p>Â¡Para recordar!</p> <p>En Python, la comparaci\u00f3n es case sensitive, es decir, que distingue entre may\u00fasculas y min\u00fasculas:</p> Python<pre><code>cadena1 = \"Mundo\"\ncadena2 = \"mundo\"\nprint(cadena1 == cadena2)\n</code></pre> Terminal (Entrada/Salida)<pre><code>False\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#comprobar-si-una-subcadena-se-encuentra-o-no-dentro-de-una-cadena-de-caracteres","title":"Comprobar si una subcadena se encuentra, o no, dentro de una cadena de caracteres","text":"<p>Las subcadenas son caracteres secuenciales dentro de una cadena de caracteres.  </p> <p>Por ejemplo, la cadena \"abc\" tiene las siguientes subcadenas: \"\" , \"a\" , \"ab\" , \"abc\" , \"b\" , \"bc\" , \"c\"</p> <p>Para comprobar si una subcadena se encuentra, o no, dentro de una cadena de caracteres, se utilizan los siguientes operadores:</p> <ul> <li> <p>in: devuelve True si un valor se encuentra en la secuencia y False de lo contrario.</p> </li> <li> <p>not in: devuelve True si un valor no se encuentra en la secuencia y False de lo contrario.</p> </li> </ul> Python<pre><code>cadena = \"Hola, mundo!\"\n\nprint(\"mundo\" in cadena)  # Output: True\nprint(\"adios\" in cadena)  # Output: False\n\nprint(\"mundo\" not in cadena)  # Output: False\nprint(\"adios\" not in cadena)  # Output: True\n</code></pre> <p>M\u00e1s adelante veremos que podremos realizar estas comparaciones directamente mediante el uso de m\u00e9todos.</p> <p>''' info \"\u00a1Â¡Para recordar! que estos operadores tambi\u00e9n funcionan con otras estructuras de datos!\"</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-funciones-con-cadenas-de-caracteres","title":"Uso de funciones con cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#longitud-de-una-cadena-de-caracteres","title":"Longitud de una cadena de caracteres","text":"<p>Python posee la funci\u00f3n <code>len()</code> que retorna la longitud de una cadena de caracteres:</p> Python<pre><code>cadena = \"Hola Mundo!\"\nprint(\"La cadena de caracteres\", cadena, \"tiene\", len(cadena), \"caracteres.\")\n</code></pre> Terminal (Entrada/Salida)<pre><code>La cadena de caracteres Hola Mundo! tiene 11 caracteres.\n</code></pre> <p>Â¡Para recordar!</p> <p><code>len()</code> cuenta todos los caracteres: los 4 de 'Hola', los 5 de 'Mundo', 1 del signo de exclamaci\u00f3n y 1 del espacio, totalizando 11. Es decir, que cualquier caracter que se encuentre dentro de las comillas ser\u00e1 contado.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#minimo-y-maximo-elemento-de-una-cadena-de-caracteres","title":"M\u00ednimo y m\u00e1ximo elemento de una cadena de caracteres","text":"<p>Las funciones min() y max() tambi\u00e9n pueden ser utilizadas con cadenas:</p> <ul> <li> <p>min(): devuelve el car\u00e1cter con el valor ASCII m\u00e1s peque\u00f1o.</p> </li> <li> <p>max() devuelve el car\u00e1cter con el valor ASCII m\u00e1s grande.</p> </li> </ul> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"HolaMundo\"\n\nprint(min(cadena))  # Output: 'H'\nprint(max(cadena))  # Output: 'u'\n</code></pre> <p>En este caso, 'H' tiene el valor ASCII m\u00e1s peque\u00f1o en la cadena y 'u' tiene el valor ASCII m\u00e1s grande.  </p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-metodos-de-cadenas-de-caracteres","title":"Uso de m\u00e9todos de cadenas de caracteres","text":"<p>En general, las funciones son bloques de c\u00f3digo independientes que realizan una tarea espec\u00edfica y pueden ser llamadas por su nombre. </p> <p>Los m\u00e9todos, por otro lado, est\u00e1n asociados a un objeto espec\u00edfico (en este caso, una cadena de caracteres) y pueden modificar el estado de ese objeto o realizar una operaci\u00f3n que est\u00e1 de alguna manera relacionada con ese objeto.</p> <p>Las cadenas de caracteres en Python tienen muchos m\u00e9todos incorporados para realizar diversas operaciones. </p> <p>Aqu\u00ed est\u00e1n algunos de los m\u00e1s comunes:</p> <ul> <li> <p>format(*args, **kwargs): Realiza una operaci\u00f3n de formato de cadena. Este m\u00e9todo ser\u00e1 explicado m\u00e1s adelante cuando tratemos el tema de formateo de cadenas de caracteres.</p> </li> <li> <p>capitalize(): Convierte el primer car\u00e1cter a may\u00fasculas.</p> </li> <li> <p>title(): Devuelve una copia de la cadena convirtiendo la primera letra de cada palabra de la cadena a may\u00fasculas y el resto de las letras a min\u00fasculas. </p> Python<pre><code>cadena = \"hola MUNDO\"\n\ncadena_titulada = cadena.title()\n\nprint(cadena_titulada)  # Output: \"Hola Mundo\"\n</code></pre> <p>En este c\u00f3digo, <code>cadena.title()</code> convierte la cadena \"hola mundo\" a \"Hola Mundo\", donde la primera letra de cada palabra es may\u00fascula y todas las dem\u00e1s letras son min\u00fasculas.</p> </li> <li> <p>lower(): Devuelve una copia de la cadena convirtiendo toda la cadena a min\u00fasculas.</p> </li> <li> <p>upper(): Devuelve una copia de la cadena convirtiendo toda la cadena a may\u00fasculas.</p> </li> <li> <p>swapcase(): Devuelve una copia de la cadena invirtiendo el caso (may\u00fasculas \u27f7 min\u00fasculas) de cada car\u00e1cter.</p> Python<pre><code>cadena = \"hola Mundo\"\n\nprint(cadena.capitalize())  # Output: \"Hola mundo\"\n\nprint(cadena.lower())       # Output: \"hola mundo\"\n\nprint(cadena.upper())       # Output: \"HOLA MUNDO\"\n\nprint(cadena.swapcase())    # Output: \"HOLA mUNDO\"\n\nprint(cadena)               # Output: \"hola Mundo\"\n</code></pre> <p>Estos m\u00e9todos no modifican la cadena de caracteres original.</p> </li> <li> <p>istitle(): Comprueba si la cadena est\u00e1 formateada como t\u00edtulo.</p> </li> <li> <p>islower(): Comprueba si todos los caracteres en la cadena est\u00e1n en min\u00fasculas.</p> </li> <li> <p>isupper(): Comprueba si todos los caracteres en la cadena est\u00e1n en may\u00fasculas.</p> </li> <li> <p>isspace(): Comprueba si todos los caracteres en la cadena son espacios en blanco.</p> </li> <li> <p>isprintable(): Comprueba si todos los caracteres en la cadena son imprimibles o no.</p> Python<pre><code>cadena1 = \"Hola Mundo\"\ncadena2 = \"hola mundo\"\ncadena3 = \"HOLA MUNDO\"\n\nprint(cadena1.istitle())  # Output: True\nprint(cadena1.islower())  # Output: False\nprint(cadena1.isupper())  # Output: False\n\nprint(cadena2.istitle())  # Output: False\nprint(cadena2.islower())  # Output: True\nprint(cadena2.isupper())  # Output: False\n\nprint(cadena3.istitle())  # Output: False\nprint(cadena3.islower())  # Output: False\nprint(cadena3.isupper())  # Output: True\n\ncadena4 = \"          \"\ncadena5 = \"\"\n\nprint(cadena4.isspace())  # Output: True\nprint(cadena5.isspace())  # Output: False\n\ncadena6 = \"Hola Mundo\"\ncadena7 = \"Hola Mundo\\t\\n\"\ncadena8 = \"\\t\\n\"\n\nprint(cadena6.isprintable())  # Output: True\nprint(cadena7.isprintable())  # Output: False\nprint(cadena8.isprintable())  # Output: False\n</code></pre> <p>Existen otros m\u00e9todos para validar el contenido de una cadena de caracteres:</p> <ul> <li> <p>isascii(): Comprueba si todos los caracteres en la cadena son ASCII.</p> </li> <li> <p>isidentifier(): Comprueba si la cadena es un identificador v\u00e1lido de Python.</p> </li> </ul> </li> <li> <p>join(iterable): Si el argumento es un iterable, une los elementos de este (como una lista) en una sola cadena.</p> <p>Aqu\u00ed tienes un ejemplo de c\u00f3mo se usa join() con una lista:</p> Python<pre><code># Lista de cadenas\npalabras = [\"Hola\", \"mundo\"]\n\n# Usa join para unir las palabras con un espacio\nfrase = \" \".join(palabras)\n\nprint(frase)  # Output: Hola mundo\n</code></pre> <p>En este c\u00f3digo, <code>\" \".join(palabras)</code> une las cadenas en la lista <code>palabras</code> con un espacio entre ellas, resultando en la cadena <code>\"Hola mundo\"</code>.</p> <p>Tambi\u00e9n puedes usar otros caracteres o cadenas como separador. Por ejemplo, puedes usar <code>join()</code> para unir las cadenas con un gui\u00f3n:</p> Python<pre><code># Lista de cadenas\npalabras = [\"Hola\", \"mundo\"]\n\n# Usa join para unir las palabras con un gui\u00f3n\nfrase = \"-\".join(palabras)\n\nprint(frase)  # Output: Hola-mundo\n</code></pre> </li> <li> <p>join(cadena): Si el argumento es una cadena, devuelve una cadena que es la uni\u00f3n de cada caracter que conforma la cadena del argumento a trav\u00e9s de la cadena especificada como separador.</p> <p>Aqu\u00ed tienes un ejemplo de c\u00f3mo se usa join() con una cadena:</p> Python<pre><code># Cadena de caracteres\ncadena = \"12345\"\n\n# Usa join para unir los caracteres que conforman *cadena*\n# '-' es la cadena que utilizar\u00e1 el m\u00e9todo como separador de cada caracter durante la uni\u00f3n\ncadena_resultante = '-'.join(cadena) \n\nprint(cadena_resultante)  # Output: 1-2-3-4-5\n</code></pre> <p>En este c\u00f3digo, <code>'-'</code> es el separador que se inserta entre cada car\u00e1cter de la cadena original. El resultado es la cadena <code>\"1-2-3-4-5\"</code>.</p> </li> <li> <p>count(subcadena[, inicio[, fin]]): Se utiliza para contar el n\u00famero de veces que una subcadena aparece en la cadena. </p> Python<pre><code>cadena = \"Hola mundo, mundo. Mundo, mundo.\"\nconteo = cadena.count(\"mundo\")\nprint(conteo)  # Output: 3\n</code></pre> <p>En este c\u00f3digo, <code>cadena.count(\"mundo\")</code> cuenta el n\u00famero de veces que la subcadena \"mundo\" aparece en la variable <code>cadena</code>. En este caso, la subcadena \"mundo\" aparece tres veces (el tercer \"Mundo\" empieza con may\u00fasculas), por lo que el m\u00e9todo count() devuelve 3.</p> <p>Â¡Para recordar!</p> <p><code>count()</code> es sensible a may\u00fasculas y min\u00fasculas, por lo que \"Mundo\" y \"mundo\" se consideran diferentes.</p> <p>Tambi\u00e9n puedes especificar un rango para la b\u00fasqueda con los par\u00e1metros opcionales start y end:</p> Python<pre><code>cadena = \"Hola mundo, mundo. Mundo, mundo.\"\nprint(cadena.count(\"mundo\", 0, 14))  # Output: 1\n</code></pre> <p>En este c\u00f3digo, <code>cadena.count(\"mundo\", 0, 14)</code> cuenta cu\u00e1ntas veces la subcadena \"mundo\" aparece en la variable <code>cadena</code> entre los \u00edndices 0 y 14. En este caso, la subcadena \"mundo\" aparece una vez en ese rango, por lo que el m\u00e9todo count() devuelve 1.</p> </li> <li> <p>startswith(prefijo[, inicio[, fin]]): Comprueba si la cadena comienza con el prefijo especificado.</p> </li> <li> <p>endswith(sufijo[, inicio[, fin]]): Comprueba si la cadena termina con el sufijo especificado.</p> Python<pre><code>cadena = \"Hola mundo\"\n\n# Comprobar si la cadena comienza con \"Hola\"\nif cadena.startswith(\"Hola\"):\n    print(\"La cadena comienza con 'Hola'.\")\nelse:\n    print(\"La cadena no comienza con 'Hola'.\")\n\n# Comprobar si la cadena termina con \"mundo\"\nif cadena.endswith(\"mundo\"):\n    print(\"La cadena termina con 'mundo'.\")\nelse:\n    print(\"La cadena no termina con 'mundo'.\")\n\n# Comprobar si la subcadena \"ola\" comienza en la posici\u00f3n 1\nif cadena.startswith(\"ola\", 1):\n    print(\"La subcadena 'ola' comienza en la posici\u00f3n 1.\")\nelse:\n    print(\"La subcadena 'ola' no comienza en la posici\u00f3n 1.\")\n\n# Comprobar si la subcadena \"mun\" termina en la posici\u00f3n 7\nif cadena.endswith(\"mun\", 0, 7):\n    print(\"La subcadena 'mun' termina en la posici\u00f3n 7.\")\nelse:\n    print(\"La subcadena 'mun' no termina en la posici\u00f3n 7.\")\n</code></pre> <p>En este c\u00f3digo, <code>cadena.startswith(\"Hola\")</code> devuelve <code>True</code> si cadena comienza con \"Hola\", y <code>False</code> en caso contrario. De manera similar, <code>cadena.endswith(\"mundo\")</code> devuelve <code>True</code> si cadena termina con \"mundo\", y False en caso contrario.</p> <p>Adem\u00e1s, <code>cadena.startswith(\"ola\", 1)</code> devuelve <code>True</code> si la subcadena de cadena que comienza en la posici\u00f3n 1 comienza con \"ola\", y False en caso contrario. De manera similar, <code>cadena.endswith(\"mun\", 0, 7)</code> devuelve <code>True</code> si la subcadena de cadena que termina en la posici\u00f3n 7 termina con \"mun\", y False en caso contrario.</p> </li> <li> <p>replace(cadena_buscada, cadena_nueva[, contador]): Devuelve una copia de la cadena con las ocurrencias de la subcadena especificada en cadena_buscada reemplazadas por otra cadena especificada en cadena_nueva. Si no se especifica contador devuelve todas las ocurrencias reemplazas. Si se especifica contador, su valor representa el n\u00famero (m\u00e1ximo) de ocurrencias que ser\u00e1n reemplazadas.</p> Python<pre><code># Ejemplo de uso de replace(old, new)\ncadena = \"Hola mundo, mundo\"\nnueva_cadena = cadena.replace(\"mundo\", \"Python\")\n\nprint(nueva_cadena)  # Output: \"Hola Python, Python\"\n</code></pre> <p>En el primer ejemplo, <code>replace(\"mundo\", \"Python\")</code>reemplaza todas las apariciones de \"mundo\" por \"Python\".</p> Python<pre><code># Ejemplo de uso de replace(old, new, count)\ncadena = \"Hola mundo, mundo\"\nnueva_cadena = cadena.replace(\"mundo\", \"Python\", 1)\n\nprint(nueva_cadena)  # Output: \"Hola Python, mundo\"\n</code></pre> <p>En el segundo ejemplo, <code>replace(\"mundo\", \"Python\", 1)</code> reemplaza solo la primera aparici\u00f3n de \"mundo\" por \"Python\", porque se especific\u00f3 un conteo de 1.</p> </li> <li> <p>split(separador=None[, maxsplit=-1]): Divide la cadena en subcadenas usando  separador como la cadena delimitadora; y las devuelve como una lista de elementos. Si maxsplit no se especifica, se realizan todas las divisiones posibles. Si se especifica maxsplit, su valor representa el n\u00famero (m\u00e1ximo) de divisiones que ser\u00e1n efectuadas.</p> Python<pre><code># Ejemplo de uso de split(separador=None, maxsplit=-1)\ncadena = \"Hola mundo Python\"\nlista_palabras = cadena.split()\n\nprint(lista_palabras)  # Output: ['Hola', 'mundo', 'Python']\n</code></pre> <p>En el primer ejemplo, <code>split()</code> divide la cadena en palabras, utilizando espacios como delimitadores.</p> Python<pre><code># Ejemplo de uso de split(separador=None, maxsplit=1)\ncadena = \"Hola mundo Python\"\nlista_palabras = cadena.split(maxsplit=1)\n\nprint(lista_palabras)  # Output: ['Hola', 'mundo Python']\n</code></pre> <p>En el segundo ejemplo, <code>split(maxsplit=1)</code> divide la cadena en palabras, pero solo realiza una divisi\u00f3n porque se especific\u00f3 un <code>maxsplit</code> de 1.</p> Python<pre><code># Ejemplo de uso de split(separador)\ncadena = \"manzana,banana,fruta\"\nlista_frutas = cadena.split(\",\")\n\nprint(lista_frutas)  # Output: ['manzana', 'banana', 'fruta']\n</code></pre> <p>En el tercer ejemplo, <code>split(\",\")</code> divide la cadena en subcadenas, utilizando la coma como delimitador.</p> </li> <li> <p>rsplit(separador=None[, maxsplit=-1]): Divide una cadena en subcadenas a partir del final, usando  separador como la cadena delimitadora; y las devuelve como una lista de elementos. Si no se especifica un separador, se utilizan espacios en blanco. Si maxsplit no se especifica, se realizan todas las divisiones posibles. Si se especifica maxsplit, su valor representa el n\u00famero (m\u00e1ximo) de divisiones que ser\u00e1n efectuadas.</p> Python<pre><code># Ejemplo de uso de rsplit() sin especificar un separador\ncadena = \"Hola mundo Python\"\nlista_palabras = cadena.rsplit()\nprint(lista_palabras)  # Output: ['Hola', 'mundo', 'Python']\n</code></pre> <p>En el primer ejemplo, <code>cadena.rsplit()</code> divide la cadena en palabras, utilizando espacios en blanco como delimitadores.</p> Python<pre><code># Ejemplo de uso de rsplit() especificando un separador\ncadena = \"manzana,banana,frutilla\"\nlista_frutas = cadena.rsplit(',')\nprint(lista_frutas)  # Output: ['manzana', 'banana', 'frutilla']\n</code></pre> <p>En el segundo ejemplo, <code>cadena.rsplit(',')</code> divide la cadena en palabras, utilizando comas como delimitadores.</p> Python<pre><code># Ejemplo de uso de rsplit() especificando un separador y un maxsplit\ncadena = \"manzana,banana,frutilla\"\nlista_frutas = cadena.rsplit(',', 1)\nprint(lista_frutas)  # Output: ['manzana,banana', 'frutilla']\n</code></pre> <p>En el tercer ejemplo, <code>cadena.rsplit(',', 1)</code> divide la cadena en palabras, utilizando comas como delimitadores, pero solo realiza una divisi\u00f3n desde el final porque se especific\u00f3 un maxsplit de 1.</p> </li> <li> <p>partition(separador): Divide una cadena en una tupla de 3 elementos bas\u00e1ndose en la primera aparici\u00f3n de un separador especificado. La tupla resultante contiene la parte de la cadena antes del separador, el separador mismo, y la parte de la cadena despu\u00e9s del separador.</p> </li> <li> <p>rpartition(separador): Hace lo mismo que partition(separador), pero comienza a buscar el separador desde el final de la cadena.</p> Python<pre><code>cadena = \"hola mundo mundo\"\nresultado = cadena.partition(\" \")\n\nprint(resultado)  # Output: ('hola', ' ', 'mundo mundo')\n</code></pre> <p>En el primer ejemplo, <code>cadena.partition(\" \")</code> divide <code>cadena</code> en la primera aparici\u00f3n del espacio en blanco, que es el separador especificado. Como resultado, obtenemos la tupla <code>('hola', ' ', 'mundo mundo')</code>.</p> Python<pre><code>cadena = \"hola mundo mundo\"\nresultado = cadena.rpartition(\" \")\n\nprint(resultado)  # Output: ('hola mundo', ' ', 'mundo')\n</code></pre> <p>En el segundo ejemplo, <code>cadena.rpartition(\" \")</code> divide cadena en la \u00faltima aparici\u00f3n del espacio en blanco. Como resultado, obtenemos la tupla <code>('hola mundo', ' ', 'mundo')</code>.</p> </li> </ul> <p>Si el separador no se encuentra en la cadena, la tupla contendr\u00e1 la cadena original, seguida de dos cadenas vac\u00edas.</p> Python<pre><code>cadena = \"hola mundo\"\nresultado = cadena.partition(\" \")\n\nprint(resultado)  # Output: ('hola', ' ', 'mundo')\n</code></pre> <p>En este c\u00f3digo, <code>cadena.partition(\" \")</code> divide cadena en la primera aparici\u00f3n del espacio en blanco, que es el separador especificado. Como resultado, obtenemos la tupla <code>('hola', ' ', 'mundo')</code>.</p> <p>Y aqu\u00ed tienes un ejemplo donde el separador no se encuentra en la cadena:</p> Python<pre><code>cadena = \"hola\"\nresultado = cadena.partition(\" \")\n\nprint(resultado)  # Output: ('hola', '', '')\n</code></pre> <p>En este c\u00f3digo, como el espacio en blanco no se encuentra en cadena, <code>cadena.partition(\" \")</code> devuelve la tupla <code>('hola', '', '')</code>.</p> <ul> <li>isalnum(),</li> <li>isalpha(), </li> <li> <p>isdigit(): En Python, las cadenas tienen varios m\u00e9todos \u00fatiles para detectar tipos de dato.</p> <ul> <li> <p>isalnum(): Comprueba si todos los caracteres en la cadena son alfanum\u00e9ricos. Devuelve True si todos los caracteres en la cadena son alfanum\u00e9ricos (letras o d\u00edgitos) y hay al menos un car\u00e1cter, False en caso contrario.</p> Python<pre><code>print('abc123'.isalnum())  # Output: True\nprint('abc 123'.isalnum())  # Output: False\n</code></pre> </li> <li> <p>isalpha(): Comprueba si todos los caracteres en la cadena son alfab\u00e9ticos. Devuelve True si todos los caracteres en la cadena son letras del alfabeto y hay al menos un car\u00e1cter, False en caso contrario.</p> Python<pre><code>print('abc'.isalpha())  # Output: True\nprint('abc123'.isalpha())  # Output: False\n</code></pre> </li> <li> <p>isdigit(): Comprueba si todos los caracteres en la cadena son d\u00edgitos. Devuelve True si todos los caracteres en la cadena son d\u00edgitos y hay al menos un car\u00e1cter, False en caso contrario.</p> Python<pre><code>print('123'.isdigit())  # Output: True\nprint('abc123'.isdigit())  # Output: False\n</code></pre> <p>En el \u00faltimo ejemplo, <code>isalnum()</code> devuelve <code>False</code> porque la cadena contiene un espacio, que no es ni una letra ni un d\u00edgito.</p> </li> </ul> <p>Existen otros m\u00e9todos para validar el contenido de una cadena de caracteres:</p> <ul> <li> <p>isdecimal(): Comprueba si todos los caracteres en la cadena son decimales.</p> </li> <li> <p>isnumeric(): Comprueba si todos los caracteres en la cadena son num\u00e9ricos.</p> </li> </ul> </li> <li> <p>center(ancho[, caracter_de_relleno]),</p> </li> <li>ljust(ancho[, caracter_de_relleno]), </li> <li> <p>rjust(ancho[, caracter_de_relleno]): Alinean la cadena en un campo de un ancho especificado. Si no se especifica caracter_de_relleno, se rellenan con espacios los caracteres faltantes hasta completar el ancho de la cadena centrada.   Si se especifica caracter_de_relleno, es el caracter que rellena los espacios adicionales hasta completar el ancho hacia ambos lados de la cadena centrada.</p> <ul> <li> <p>center(ancho[, caracter_de_relleno]): Centra la cadena en un campo de un ancho especificado.  </p> Python<pre><code>cadena = \"hola mundo\"\n\ncadena_centralizada = cadena.center(20)\nprint(cadena_centralizada)  # Output: \"    hola mundo     \"\n\ncadena_centralizada_con_relleno = cadena.center(20, '*')\nprint(cadena_centralizada_con_relleno)  # Output: \"****hola mundo*****\"\n</code></pre> <p>En el primer ejemplo, <code>cadena.center(20)</code> centra la cadena \"hola mundo\" en un campo de 20 caracteres de ancho, llenando los espacios hacia ambos lados de la cadena con espacios. </p> <p>En el segundo ejemplo, <code>cadena.center(20, '*')</code> hace lo mismo, pero rellena los espacios con asteriscos en lugar de espacios.</p> </li> <li> <p>ljust(ancho[, caracter_de_relleno]): Devuelve la cadena justificada a la izquierda en un campo de un ancho especificado.</p> Python<pre><code>cadena = \"hola mundo\"\n\ncadena_justificada_izquierda = cadena.ljust(20)\nprint(cadena_justificada_izquierda)  # Output: \"hola mundo         \"\n\ncadena_justificada_izquierda_con_relleno = cadena.ljust(20, '*')\nprint(cadena_justificada_izquierda_con_relleno)  # Output: \"hola mundo*********\"\n</code></pre> </li> <li> <p>rjust(ancho[, caracter_de_relleno]): Devuelve la cadena justificada a la derecha en un campo de un ancho especificado.</p> Python<pre><code>cadena = \"hola mundo\"\n\ncadena_justificada_derecha = cadena.rjust(20)\nprint(cadena_justificada_derecha)  # Output: \"         hola mundo\"\n\ncadena_justificada_derecha_con_relleno = cadena.rjust(20, '*')\nprint(cadena_justificada_derecha_con_relleno)  # Output: \"*********hola mundo\"\n</code></pre> </li> </ul> </li> <li> <p>zfill(ancho): Devuelve una copia de la cadena rellena con ceros a la izquierda hasta alcanzar el ancho especificado. Si la cadena ya comienza con un signo ( + / - ), el relleno de ceros se realiza despu\u00e9s del signo.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"123\"\n\ncadena_con_ceros = cadena.zfill(5)\nprint(cadena_con_ceros)  # Output: \"00123\"\n</code></pre> <p>En este c\u00f3digo, <code>cadena.zfill(5)</code> agrega ceros al principio de la cadena \"123\" hasta que su longitud sea 5, resultando en \"00123\".</p> <p>Aqu\u00ed tienes otro ejemplo con un n\u00famero negativo:</p> Python<pre><code>cadena = \"-123\"\ncadena_con_ceros = cadena.zfill(5)\nprint(cadena_con_ceros)  # Output: \"-0123\"\n</code></pre> <p>En este c\u00f3digo, <code>cadena.zfill(5)</code> agrega ceros despu\u00e9s del signo '-', resultando en \"-0123\".</p> </li> <li> <p>lstrip([cadena]),</p> </li> <li>rstrip([cadena]),</li> <li> <p>strip([cadena]): Se utilizan para eliminar caracteres no deseados (espacios en blanco por defecto) de las cadenas. Tambi\u00e9n se puede especificar un conjunto de caracteres para eliminar en lugar de espacios en blanco si se indica la cadena correspondiente.</p> <ul> <li> <p>lstrip([cadena]): Devuelve una copia de la cadena luego de efectuar la eliminaci\u00f3n correspondiente de caracteres al inicio de la cadena original.</p> Python<pre><code># lstrip() elimina los espacios al principio de la cadena\ncadena = \"   hola mundo\"\ncadena_sin_espacios_izq = cadena.lstrip()\nprint(cadena_sin_espacios_izq)  # Output: \"hola mundo\"\n\n# Eliminar caracteres espec\u00edficos al principio de la cadena\ncadena = \"+++hola mundo+++\"\ncadena_sin_mas_izq = cadena.lstrip('+')\nprint(cadena_sin_mas_izq)  # Output: \"hola mundo+++\"\n</code></pre> </li> <li> <p>rstrip([cadena]): Devuelve una copia de la cadena luego de efectuar la eliminaci\u00f3n correspondiente de caracteres al final de la cadena original.</p> Python<pre><code># rstrip() elimina los espacios al final de la cadena\ncadena = \"hola mundo   \"\ncadena_sin_espacios_der = cadena.rstrip()\nprint(cadena_sin_espacios_der)  # Output: \"hola mundo\"\n\n# Eliminar caracteres espec\u00edficos al final de la cadena\ncadena_sin_mas_der = cadena.rstrip('+')\nprint(cadena_sin_mas_der)  # Output: \"+++hola mundo\"\n</code></pre> </li> <li> <p>strip([cadena]): Devuelve una copia de la cadena luego de efectuar la eliminaci\u00f3n correspondiente de caracteres al inicio y al final de la cadena original.</p> Python<pre><code># strip() elimina los espacios al principio y al final de la cadena\ncadena = \"   hola mundo   \"\ncadena_sin_espacios = cadena.strip()\nprint(cadena_sin_espacios)  # Output: \"hola mundo\"\n\n# Eliminar caracteres espec\u00edficos al principio y al final de la cadena\ncadena_sin_mas = cadena.strip('+')\nprint(cadena_sin_mas)  # Output: \"hola mundo\"\n</code></pre> </li> </ul> </li> <li> <p>find(subcadena[, inicio[, fin]]),</p> </li> <li>rfind(subcadena[, inicio[, fin]]),</li> <li>index(subcadena[, inicio[, fin]]),</li> <li> <p>rindex(subcadena[, inicio[, fin]]): Los m\u00e9todos index() / rindex() y find() / rfind() son similares ya que ambos buscan una subcadena en una cadena y devuelven el \u00edndice (la posici\u00f3n en la cadena) de la primera aparici\u00f3n de la subcadena. Sin embargo, difieren en su comportamiento cuando la subcadena no se encuentra en la cadena:</p> <ul> <li> <p>los m\u00e9todos index() y rindex() lanzan una excepci\u00f3n ValueError. Esto significa que el programa se detendr\u00e1 inesperadamente, a menos que la excepci\u00f3n se encuentre manejada por el programa para evitar la detenci\u00f3n.</p> </li> <li> <p>los m\u00e9todos find() y rfind() devuelven -1</p> </li> </ul> </li> </ul> <p>Opcionalmente, es posible indicar los \u00edndices de inicio y/o de fin de b\u00fasqueda.  </p> <pre><code>* **find(subcadena[, inicio[, fin]])**,\n* **index(subcadena[, inicio[, fin]])**: Devuelve el \u00edndice m\u00e1s bajo en la cadena donde se encuentra la subcadena. Es decir, la primera ocurrencia posible.\n\n* **rfind(subcadena[, inicio[, fin]])**,\n* **rindex(subcadena[, inicio[, fin]])**: Devuelve el \u00edndice m\u00e1s alto en la cadena donde se encuentra la subcadena. Es decir, la \u00faltima ocurrencia posible.\n\n    ``` py title=\"Python\"\n    cadena = \"Hola Mundo, Hola Python\"\n\n    # Uso de find()\n    indice = cadena.find(\"Hola\")\n    print(indice)  # Output: 0\n\n    # Uso de rfind()\n    indice = cadena.rfind(\"Hola\")\n    print(indice)  # Output: 12\n\n    # Uso de index() con \u00edndice de inicio\n    indice = cadena.index(\"Hola\", 3)\n    print(indice)  # Output: 12\n\n    # Uso de rindex() con \u00edndice de inicio y de fin\n    indice = cadena.rindex(\"Hola\", 0, 10)\n    print(indice)  # Output: 0\n\n    # Buscar una subcadena que no existe\n    indice = cadena.find(\"Java\")\n    print(indice)  # Output: -1\n\n    indice = cadena.index(\"Java\")  # Output: ValueError: substring not found  \n    print(indice) \n    ```\n\n    &gt; En el primer ejemplo, `cadena.find(\"Hola\")` devuelve 0 porque la primera ocurrencia de \"Hola\" se encuentra en el caracter 1.\n\n    &gt; En el segundo ejemplo, `cadena.rfind(\"Hola\")` devuelve 12 porque la \u00faltima aparici\u00f3n de \"Hola\" se encuentra en el caracter 13.\n\n    &gt; En el tercer ejemplo, `cadena.index(\"Hola\")` devuelve 12 porque, a partir del caracter 4, la primera ocurrencia de \"Hola\" se encuentra en el caracter 13.\n\n    &gt; En el cuarto ejemplo, `cadena.rindex(\"Hola\")` devuelve 0 porque la \u00faltima ocurrencia de \"Hola\" entre el caracter 1 y el caracter 11 se encuentra en el caracter 0.\n\n    &gt; En el quinto ejemplo, `cadena.find(\"Java\")` devuelve -1 porque \"Java\" no se encuentra en la cadena.\n\n    &gt; En el sexto ejemplo, `cadena.index(\"Java\")` devuelve la excepci\u00f3n `ValueError: substring not found` porque no se encuentra en la cadena.\n\n    !!! info \"\u00a1Para recordar!\"\n        Si esperas que la subcadena pueda no estar en la cadena y no quieres manejar una excepci\u00f3n, `find()` puede ser una mejor opci\u00f3n.\n\n        Si esperas que la subcadena siempre est\u00e9 en la cadena y quieres un error si no lo est\u00e1, `index()` puede ser una mejor opci\u00f3n.\n</code></pre> <p>Estos son solo algunos ejemplos. Python tiene muchos m\u00e1s m\u00e9todos de cadena incorporados:</p> <ul> <li> <p>casefold(): Convierte la cadena a min\u00fasculas, es similar a lower(), pero m\u00e1s agresivo porque est\u00e1 dise\u00f1ado para eliminar todas las diferencias de caso que puedan afectar la comparaci\u00f3n de cadenas.</p> </li> <li> <p>encode([encoding[, errors]]): Devuelve una versi\u00f3n codificada de la cadena como un objeto bytes.</p> </li> <li> <p>expandtabs([tabsize]): Devuelve una copia de la cadena donde todos los caracteres de tabulaci\u00f3n se reemplazan por uno o m\u00e1s espacios.</p> </li> <li> <p>format_map(mapping): Realiza una operaci\u00f3n de formato de cadena.</p> </li> <li> <p>maketrans(x[, y[, z]]): Devuelve una tabla de traducci\u00f3n utilizable para str.translate().</p> </li> <li> <p>splitlines([keepends]): Devuelve una lista de las l\u00edneas en la cadena.</p> </li> <li> <p>translate(table): Devuelve una copia de la cadena en la que cada car\u00e1cter ha sido mapeado a trav\u00e9s de la tabla de traducci\u00f3n proporcionada. La tabla de traducci\u00f3n debe ser creada con el m\u00e9todo maketrans().</p> </li> </ul>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#formateo-de-cadenas-de-caracteres","title":"Formateo de cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-metodo-format","title":"Uso del m\u00e9todo format()","text":"<p>El m\u00e9todo format(*args, **kwargs) realiza una operaci\u00f3n de formato de cadena, es decir que se utiliza para formatear una cadena insertando valores en ella. </p> <p>Aqu\u00ed tienes algunos ejemplos:</p> <ol> <li>Formateo b\u00e1sico:</li> </ol> Python<pre><code>print(\"Hola, {}!\".format(\"Mundo\"))\nprint(\"Hola, {} y {}!\".format(\"Mundo\", \"Python\"))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Mundo!\nHola, Mundo y Python!\n</code></pre> <ol> <li>Formateo con \u00edndices posicionales:</li> </ol> Python<pre><code>print(\"Hola, {0} y {1}!\".format(\"Mundo\", \"Python\"))\nprint(\"Hola, {1} y {0}!\".format(\"Mundo\", \"Python\"))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Mundo y Python!\nHola, Python y Mundo!\n</code></pre> <ol> <li>Formateo con argumentos clave:</li> </ol> Python<pre><code>print(\"Hola, {nombre}!\".format(nombre=\"Mundo\"))\nprint(\"Hola, {adjetivo} {nombre}!\".format(adjetivo=\"gran\", nombre=\"Mundo\"))\nprint(\"Hola, {adjetivo} {nombre}!\".format(nombre=\"Mundo\", adjetivo=\"gran\"))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Mundo!\nHola, gran Mundo!\nHola, gran Mundo!\n</code></pre> <ol> <li>Formateo con precisi\u00f3n para n\u00fameros de punto flotante:</li> </ol> Python<pre><code>print(\"El valor de PI aproximado es 3.14159265358979323846\u2026\")\nprint(\"El valor de PI menos aproximado es {0:.7f}\".format(3.14159265358979323846))\nprint(\"El valor de PI menos aproximado a\u00fan es {0:.4f}\".format(3.14159265358979323846))\nprint(\"El valor de PI que normalmente utilizamos en matem\u00e1ticas es {0:.2f}\".format(3.14159265358979323846))\n</code></pre> Terminal (Entrada/Salida)<pre><code>El valor de PI aproximado es 3.14159265358979323846\u2026\nEl valor de PI menos aproximado es 3.1415927\nEl valor de PI menos aproximado a\u00fan es 3.1416\nEl valor de PI que normalmente utilizamos en matem\u00e1ticas es 3.14\n</code></pre> <ol> <li>Formateo con alineaci\u00f3n: Python<pre><code>print(\"|{:&lt;10}|{:^10}|{:&gt;10}|\".format('izq', 'centro', 'der'))\n</code></pre></li> </ol> Terminal (Entrada/Salida)<pre><code>|izq       |  centro  |       der|\n</code></pre> <p>En estos ejemplos, las llaves ( {} ) se utilizan como marcadores de posici\u00f3n donde se insertar\u00e1n los valores proporcionados a format(). Los n\u00fameros, las palabras clave y las especificaciones de formato dentro de las llaves controlan qu\u00e9 valores se insertan y c\u00f3mo se formatean.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-de-f-strings","title":"Uso de f-Strings","text":"<p>Las f-strings son una caracter\u00edstica de Python que permite la interpolaci\u00f3n de cadenas de una manera m\u00e1s concisa y legible. </p> <p>Las f-strings se crean poniendo una <code>f</code> o <code>F</code> antes de la cadena y poniendo las variables que quieres interpolar entre llaves {} dentro de la cadena.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>nombre = \"Pablo\"\nedad = 45\nprint(f\"Hola, mi nombre es {nombre} y tengo {edad} a\u00f1os.\")\n</code></pre> <p>En este c\u00f3digo, <code>{nombre}</code> y <code>{edad}</code> dentro de la f-string se reemplazan por los valores de las variables <code>nombre</code> y <code>edad</code>, respectivamente. Por lo tanto, la salida de este c\u00f3digo ser\u00eda: \"Hola, mi nombre es Juan y tengo 30 a\u00f1os.\"</p> <p>Tambi\u00e9n es posible utilizar las f-strings como expresi\u00f3n para crear una cadena de caracteres y almacenarla en una variable, por ejemplo:</p> Python<pre><code>nombre = \"Pablo\"\nedad = 45\n\ncadena = f\"Hola, mi nombre es {nombre} y tengo {edad} a\u00f1os.\"\n\nprint(cadena) # Output: Hola, mi nombre es Pablo y tengo 45 a\u00f1os.\n</code></pre> <p>Las f-strings tambi\u00e9n pueden contener expresiones arbitrarias dentro de las llaves, que se evaluar\u00e1n y luego se convertir\u00e1n en una cadena. </p> <p>Por ejemplo:</p> Python<pre><code>a = 5\nb = 10\nprint(f\"La suma de {a} y {b} es {a + b}.\")\n</code></pre> <p>La salida de este c\u00f3digo ser\u00eda: \"La suma de 5 y 10 es 15.\"</p> <p>\u00a1Bienvenidas las f-strings!</p> <p>Esta sintaxis para escribir cadenas de caracteres interpoladas es una gran caracter\u00edstica de Python y debes aprovecharla.</p> <p>Te vas a ahorrar muchos dolores de cabeza a la hora de concatenar diferentes tipos de dato a la hora de mostrar informaci\u00f3n en pantalla o crear una cadena de texto para utilizarla en expresiones o almacenarla en una variable, por ejemplo.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-de-formateo","title":"Uso del operador de formateo ( % )","text":"<p>El operador de formateo de cadenas ( % ) en las cadenas de Python se utiliza para el formateo de cadenas. Es similar a la funci\u00f3n <code>printf</code> en C. </p> <p>Aqu\u00ed tienes algunos ejemplos:</p> Python<pre><code>nombre = \"Pablo\"\nprint(\"Hola, %s\" % nombre)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Pablo\n</code></pre> Python<pre><code>apellido = \"Roca\"\nprint(\"Hola, %s %s\" % (nombre, apellido))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Pablo Roca\n</code></pre> Python<pre><code>edad = 45\nprint(\"Hola, %s %s, tienes %d a\u00f1os\" % (nombre, apellido, edad))\n</code></pre> Terminal (Entrada/Salida)<pre><code>Hola, Pablo Roca, tienes 30 a\u00f1os\n</code></pre> Python<pre><code>pi = 3.14159\nprint(\"El valor de pi es aproximadamente %f\" % pi)\nprint(\"El valor de pi es aproximadamente %.2f\" % pi)\n</code></pre> Terminal (Entrada/Salida)<pre><code>El valor de pi es aproximadamente 3.141590\nEl valor de pi es aproximadamente 3.14\n</code></pre> <p>En estos ejemplos, <code>%s</code> es un marcador de posici\u00f3n para una cadena, <code>%d</code> es un marcador de posici\u00f3n para un n\u00famero entero y <code>%f</code> es un marcador de posici\u00f3n para un n\u00famero de punto flotante. Los valores despu\u00e9s del <code>%</code> se insertan en la cadena en los lugares donde est\u00e1n los marcadores de posici\u00f3n.</p> <p>\u00a1Atenci\u00f3n!</p> <p>Aunque este m\u00e9todo de formateo de cadenas todav\u00eda es v\u00e1lido en Python, se considera antiguo y se recomienda usar el m\u00e9todo <code>format()</code> o las f-strings (en Python 3.6 y versiones posteriores) para el formateo de cadenas.</p> <p>Para terminar de entender la sintaxis, analicemos una de las instrucciones de impresi\u00f3n que utiliza el antiguo estilo de formateo de cadenas.</p> Python<pre><code>print (\"Hola, %s %s, tienes %d a\u00f1os\" % (nombre, apellido, edad))\n</code></pre> <p>Aqu\u00ed est\u00e1 lo que hace cada parte:</p> <pre><code>* **print**: Esta es la funci\u00f3n de Python para imprimir texto en la consola.\n\n* **\"Hola, %s %s, tienes %d a\u00f1os\"**: Esta es la cadena que se va a imprimir. Los %s y %d son marcadores de posici\u00f3n que se reemplazar\u00e1n con los valores proporcionados despu\u00e9s del %.\n\n* **%s**: Este es un marcador de posici\u00f3n para una cadena. Se reemplazar\u00e1 con una cadena.\n\n* **%d**: Este es un marcador de posici\u00f3n para un n\u00famero entero. Se reemplazar\u00e1 con un n\u00famero entero.\n\n* **nombre**, **apellido**, **edad**: Estos son los valores que se insertar\u00e1n en la cadena en los lugares donde est\u00e1n los marcadores de posici\u00f3n.\n\nEl primer %s se reemplazar\u00e1 con el valor de nombre, el segundo %s se reemplazar\u00e1 con el valor de apellido, y el %d se reemplazar\u00e1 con el valor de edad.\n</code></pre> <p>Por lo tanto, si nombre es \"Pablo\", apellido es \"Roca\" y edad es 45, la salida de esta l\u00ednea de c\u00f3digo ser\u00eda:</p> Terminal (Entrada/Salida)<pre><code>Hola, Pablo Roca, tienes 45 a\u00f1os\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-en-cadenas-para-partirlas-en-mas-de-una-linea_1","title":"Uso del operador  en cadenas para partirlas en m\u00e1s de una l\u00ednea","text":"<p>Puedes usar el operador de continuaci\u00f3n de l\u00ednea ( \\ ) para dividir una cadena de texto en varias l\u00edneas sin interrumpir la cadena. </p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>cadena = \"Esta es una cadena de texto muy larga que queremos dividir \\\nen varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\"\n\nprint(cadena)\n</code></pre> <p>Cuando ejecutes este c\u00f3digo, ver\u00e1s que la cadena se imprime como una sola l\u00ednea, a pesar de que en el c\u00f3digo fuente est\u00e1 dividida en dos l\u00edneas. Esto es porque el operador de continuaci\u00f3n de l\u00ednea ( \\ ) al final de la l\u00ednea le dice a Python que la l\u00ednea actual contin\u00faa en la siguiente l\u00ednea.</p> Terminal (Entrada/Salida)<pre><code>Esta es una cadena de texto muy larga que queremos dividir en varias l\u00edneas para mejorar la legibilidad del c\u00f3digo.\n</code></pre> <p>\u00a1Atenci\u00f3n!</p> <p>Aseg\u00farate de que no haya ning\u00fan espacio o cualquier otro car\u00e1cter despu\u00e9s del operador de continuaci\u00f3n de l\u00ednea ( \\ ), de lo contrario, Python interpretar\u00e1 el \\ como operador de \"escape\" (lo veremos en un momento) en lugar de un indicador de continuaci\u00f3n de l\u00ednea.</p> <p>No solo con cadenas</p> <p>El operador de continuaci\u00f3n de l\u00ednea ( \\ ) tambi\u00e9n se utiliza en Python para indicar que una l\u00ednea de c\u00f3digo contin\u00faa en la siguiente l\u00ednea. Esto es \u00fatil cuando tienes una l\u00ednea de c\u00f3digo muy larga y quieres dividirla en varias l\u00edneas para mejorar la legibilidad de este.</p> Python<pre><code># Sin el operador de continuaci\u00f3n de l\u00ednea\nsuma = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n\n# Con el operador de continuaci\u00f3n de l\u00ednea \n# (Â¡Para recordar! que no debe posee m\u00e1s caracteres a continuaci\u00f3n)\nsuma = 1 + 2 + 3 + 4 + \\\n    5 + 6 + 7 + 8 + \\\n    9 + 10\n\nprint(suma)  # Output: 55\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#uso-del-operador-de-escape-en-cadenas","title":"Uso del operador de escape ( \\ ) en cadenas","text":"<p>El operador de \"escape\" ( \\ ) en las cadenas de Python se utiliza para introducir secuencias de escape, que son representaciones de caracteres especiales que no se pueden escribir de manera literal.</p> <p>Por ejemplo, <code>\\\\t</code> es una secuencia de escape que representa un car\u00e1cter de tabulaci\u00f3n.   Otras secuencias de escape comunes incluyen <code>\\\\n</code> para una nueva l\u00ednea, <code>\\\\'</code> para una comilla simple y <code>\\\\\"</code> para una comilla doble.</p> Python<pre><code>print(\"Hola\\nMundo\")  # \\n es una secuencia de escape para una nueva l\u00ednea\nprint(\"Hola\\tMundo\")  # \\t es una secuencia de escape para una tabulaci\u00f3n\nprint(\"Ella dijo: \\\"Hola Mundo\\\"\")  # \\\" es una secuencia de escape para una comilla doble\nprint('It\\'s a beautiful day')  # \\' es una secuencia de escape para una comilla simple\n</code></pre> <p>Estos c\u00f3digos imprimir\u00e1n en pantalla:</p> Terminal (Entrada/Salida)<pre><code>Hola\nMundo\nHola    Mundo\nElla dijo: \"Hola Mundo\"\nIt's a beautiful day\n</code></pre> <p>Para recordar</p> <p>Como puedes ver, el operador de escape ( \\ ) permite insertar caracteres especiales en las cadenas que de otra manera ser\u00edan dif\u00edciles o imposibles de incluir.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/cadenas-de-caracteres/uso-de-cadenas-de-caracteres-en-python/#comandos-de-escape-disponibles","title":"Comandos de \"escape\" disponibles","text":"<pre><code>Secuencia Escape    Significado\n------------------------------------------------------------------------------------\n\\newline            Ignorado\n\\\\                  Backslash (\\)\n\\'                  Comillas simple (')\n\\\"                  Comillas doble (\")\n\\a                  Bell ASCII (BEL)\n\\b                  Backspace ASCII (BS)\n\\f                  Formfeed ASCII (FF)\n\\n                  Linefeed ASCII (LF)\n\\N{name}            Car\u00e1cter llamado name en base de datos Unicode (solo Unicode)\n\\r                  Carriage Return ASCII (CR)\n\\t                  Tabulaci\u00f3n Horizontal ASCII (TAB)\n\\uxxxx              Car\u00e1cter con valor hex 16-bit xxxx (solo Unicode). Ver hex.\n\\Uxxxxxxxx          Car\u00e1cter con valor hex 32-bit xxxxxxxx (solo Unicode). Ver hex.\n\\v                  Tabulaci\u00f3n Vertical ASCII (VT)\n\\ooo                Car\u00e1cter con valor octal ooo. Ver octal.\n\\xhh                Car\u00e1cter con valor hex hh. Ver hex.\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/","title":"Creaci\u00f3n de un conjunto:","text":"<p>nombres = {\"Juan\", \"Pedro\", \"Maria\", \"Luis\"} print (nombres)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#podemos-agregar-elementos-al-conjunto","title":"Podemos agregar elementos al conjunto:","text":"<p>nombres.add(\"Ana\") print (nombres)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#desempaquetado","title":"Desempaquetado:","text":"<p>alumno1, alumno2, alumno3, alumno4, alumno5 = nombres print (alumno1) print (alumno2) print (alumno3) print (alumno4) print (alumno5)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#no-podemos-agregar-elementos-duplicados-al-conjunto","title":"NO PODEMOS agregar elementos duplicados al conjunto:","text":"<p>nombres.add(\"Ana\") # No da error, pero no se agrega. print (nombres) </p> <p>Cuidado</p> <p>En el siguiente ejemplo, al crear un set num\u00e9rico, este se crea ordenadamente. Pero al crear un set alfanum\u00e9rico, este se crea de manera desordenada.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#definicion-de-funciones","title":"Definici\u00f3n de funciones","text":"<p>def intersectar_listas(lista1, lista2):</p> <pre><code># Se inicializa la lista que contendr\u00e1 los elementos que se encuentren en ambas listas pasadas a la funci\u00f3n\nlista_interseccion = []\n\n# Se crea un conjunto de cada lista para eliminar los elementos duplicados\nlista1 = set(lista1)\nlista2 = set(lista2)\n\nprint(lista1)\nprint(lista2)\n\n# elemento por elemento del conjunto de la lista1\nfor elemento in lista1:\n\n    # Se valida si el elemento se encuentra dentro del conjunto de la lista2\n    if elemento in set(lista2):\n\n        # Se agrega el elemento a la lista de elementos en com\u00fan\n        lista_interseccion.append(elemento)\n\n# Se retorna la lista resultante   \nreturn lista_interseccion\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#bloque-principal-del-programa","title":"Bloque principal del programa","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#se-inicializan-las-listas-con-sus-elementos","title":"Se inicializan las listas con sus elementos","text":"<p>lista1 = [5, 7, 3, 4, 1] lista2 = [8, 4, 6, 7, 5]</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#se-invoca-a-la-funcion-pasandole-las-dos-listas-y-se-almacena-la-lista-retornada-por-la-funcion-en-la-lista-de-interseccion","title":"Se invoca a la funci\u00f3n pas\u00e1ndole las dos listas y se almacena la lista retornada por la funci\u00f3n en la lista de intersecci\u00f3n","text":"<p>lista_interseccion = intersectar_listas(lista1, lista2)</p> <p>print(lista_interseccion)</p> <p>lista1 = ['a', 'b', 'c', 'd', 'e'] lista2 = ['c', 'd', 'e', 'a', 'g']</p> <p>lista_interseccion = intersectar_listas(lista1, lista2)</p> <p>print(lista_interseccion)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#-","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#tip-claramente-esta-funcion-tambien-puede-trabajar-con","title":"TIP: Claramente, esta funci\u00f3n tambien puede trabajar con","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#listas-cuyos-elementos-no-sean-numericos","title":"listas cuyos elementos no sean num\u00e9ricos:","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#_1","title":"Creaci\u00f3n de un conjunto:","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#lista1-a-b-c-d-e","title":"lista1 = ['a', 'b', 'c', 'd', 'e']","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#lista2-c-d-e-f-g","title":"lista2 = ['c', 'd', 'e', 'f', 'g']","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#printfuncion_interseccionlista1-lista2","title":"print(funcion_interseccion(lista1, lista2))","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#_2","title":"Creaci\u00f3n de un conjunto:","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/conjuntos/uso-de-conjuntos-en-python/#-_1","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/","title":"Uso de diccionarios en python","text":"<ul> <li>min(iterable, *[, clave, valor_defecto]),</li> <li> <p>max(iterable, *[, clave, valor_defecto]): Se utilizan para obtener el valor m\u00ednimo y m\u00e1ximo de un iterable, una lista en este caso.</p> </li> <li> <p>clave (opcional): Una funci\u00f3n para servir como clave o criterio de ordenaci\u00f3n. La funci\u00f3n <code>min()</code> o <code>max()</code> aplicar\u00e1 esta funci\u00f3n a cada elemento del iterable y devolver\u00e1 el elemento para el cual la funci\u00f3n key devuelve el valor m\u00ednimo o m\u00e1ximo.</p> </li> <li> <p>valor_defecto (opcional): Un valor por defecto que se devuelve si el iterable est\u00e1 vac\u00edo.</p> </li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5]\n\n# Obtener el valor m\u00ednimo de una lista\nminimo = min(lista)\nprint(minimo)  # Output: 1\n\n# Obtener el valor m\u00e1ximo de una lista\nmaximo = max(lista)\nprint(maximo)  # Output: 5\n\n# \n</code></pre> <p>En este c\u00f3digo, <code>min(lista)</code> y <code>max(lista)</code> devuelven el valor m\u00ednimo y m\u00e1ximo de <code>lista</code>, respectivamente. </p> Python<pre><code># Lista de diccionarios\nlista = [{'nombre': 'Ana', 'edad': 27}, {'nombre': 'Luis', 'edad': 30}, {'nombre': 'Carlos', 'edad': 22}]\n\n\n# Obtener la persona m\u00e1s joven\npersona_mas_joven = min(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})\nprint(persona_mas_joven)  # Output: {'nombre': 'Carlos', 'edad': 22}\n\n# Obtener la persona m\u00e1s vieja\npersona_mas_vieja = max(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})\nprint(persona_mas_vieja)  # Output: {'nombre': 'Luis', 'edad': 30}\n\n\n# Intentar obtener la persona m\u00e1s joven de una lista vac\u00eda\nlista_vacia = []\npersona_mas_joven = min(lista_vacia, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})\nprint(persona_mas_joven)  # Output: {'nombre': 'N/A', 'edad': 0}\n</code></pre> <p>En este c\u00f3digo, <code>min(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})</code> devuelve la persona m\u00e1s joven de lista. Si lista estuviera vac\u00eda, devolver\u00eda el valor por defecto <code>{'nombre': 'N/A', 'edad': 0}</code>. De manera similar, <code>max(lista, key=lambda x: x['edad'], default={'nombre': 'N/A', 'edad': 0})</code> devuelve la persona m\u00e1s vieja de lista, o el valor por defecto si lista est\u00e1 vac\u00eda.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#creacion-de-un-diccionario","title":"Creaci\u00f3n de un diccionario","text":"<p>alumnos = {'Juan': 8, 'Pedro': 9, 'Maria': 10, 'Luis': 7} print(alumnos)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#se-pueden-crear-por-compresion","title":"Se pueden crear por compresi\u00f3n:","text":"<p>cuadrados = {x: x**2 for x in range(11)} print(cuadrados)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-","title":"-------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#acceso-a-los-elementos-hay-varias-maneras","title":"Acceso a los elementos. Hay varias maneras.","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-_1","title":"-------------------------------------------------------","text":"<p>print(alumnos.get(\"Juan\")) # Devuelve el valor de la clave Juan print(alumnos.get(\"Ana\"))  # Devuelve \"None\", no existe \"Ana\"</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#acceso-por-clave-usando-keys","title":"Acceso por clave, usando keys():","text":"<p>print(alumnos.keys())  # Muestra todas las claves</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#podemos-recorrer-el-diccionario-con-un-for-y-keys","title":"Podemos recorrer el diccionario con un for y keys():","text":"<p>for i in alumnos.keys():     print(i)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#items-devuelve-una-tupla-con-las-claves-y-los-valores","title":"items() devuelve una tupla con las claves y los valores:","text":"<p>for clave, valor in alumnos.items():     print(\"Alumno:\", clave, \"Nota:\", valor)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-_2","title":"------------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#python-3-diccionarios","title":"PYTHON 3 - Diccionarios","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#ejemplo-mas-elaborado","title":"Ejemplo m\u00e1s elaborado","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#-_3","title":"-----------------------------------------------------------","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#defino-la-varible-futbolistas-como-un-diccionario-no-es-necesario-declarar-que-tipo-de-dato-es","title":"Defino la varible 'futbolistas' como un diccionario. No es necesario declarar que tipo de dato es","text":"<p>futbolistas = dict()</p> <p>futbolistas = {     1 : \"Casillas\", 15 : \"Ramos\",     3 : \"Pique\", 5 : \"Puyol\",     11 : \"Capdevila\", 14 : \"Xabi Alonso\",     16 : \"Busquets\", 8 : \"Xavi Hernandez\",     18 : \"Pedrito\", 6 : \"Iniesta\",     7 : \"Villa\" }</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#recorrer-un-diccionario-imprimiendo-su-clave-valor","title":"Recorrer un diccionario, imprimiendo su clave-valor","text":"<p>for k,v in futbolistas.items():     print (\"%s -&gt; %s\" %(k,v)) </p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#vemos-cuantos-elementos-tiene-nuestro-diccionario","title":"Vemos cuantos elementos tiene nuestro diccionario","text":"<p>numElem = len(futbolistas) print (\"\\nNumero de elementos del diccionario: \", numElem)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#imprimimos-una-lista-con-las-claves-del-diccionario","title":"Imprimimos una lista con las claves del diccionario","text":"<p>keys = futbolistas.keys() print (\"\\nClaves del diccionario:\", keys)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#imprimimos-en-una-lista-los-valores-del-diccionario","title":"Imprimimos en una lista los valores del diccionario","text":"<p>values = futbolistas.values() print (\"\\nValores del diccionario:\", values)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#obtenemos-el-valor-de-un-elemento-dada-su-clave","title":"Obtenemos el valor de un elemento dada su clave","text":"<p>elem = futbolistas.get(6) print (\"\\nObtenemos el valor cuya clave es '6':\", elem)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#anadimos-un-nuevo-elemento-a-la-lista","title":"A\u00f1adimos un nuevo elemento a la lista","text":"<p>futbolistas[22] = 'Navas' print (\"\\nDiccionario tras a\u00f1adir un elemento:\", futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#insertamos-un-elemento-en-el-array-si-la-clave-ya-existe-no-inserta-el-elemento","title":"Insertamos un elemento en el array. Si la clave ya existe no inserta el elemento","text":"<p>elem2 = futbolistas.setdefault(10,'Cesc') print (\"\\nInsertamos un elemento en el diccionario. Si la clave existe no lo inserta\\nfutbolistas.setdefault(10,'Cesc'):\", elem2)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#eliminamos-un-elemento-del-diccionario-dada-su-clave","title":"Eliminamos un elemento del diccionario dada su clave","text":"<p>futbolistas.pop(22) print (\"\\nDiccionario tras eliminar el elemento '22':\",futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#hacemos-una-copia-del-diccionario","title":"Hacemos una copia del diccionario","text":"<p>futbolistasCopy = futbolistas.copy() print (\"\\nRealizamos una copia del diccionario: \\n\", futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/diccionarios/uso-de-diccionarios-en-python/#mergeamos-dos-diccionarios","title":"Mergeamos dos diccionarios","text":"<p>suplentes = {     4:'Marchena', 9:'Torres', 12:'Valdes',     13:'Mata' , 17:'Arbeloa', 19:'Llorente',     20:'Javi Martinez', 21:'Silva', 23:'Reina' }</p> <p>futbolistas.update(suplentes) print (\"\\nA\u00f1adimos los elementos de un diccionario a otro: \\n\", futbolistas)</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/","title":"Listas en Python","text":"<p>Una lista en Python es una estructura de datos que puede contener m\u00faltiples elementos, que pueden ser de diferentes tipos (por ejemplo, n\u00fameros enteros, flotantes, cadenas, etc.), aunque esto \u00faltimo es poco frecuente.  Por lo general, todos los elementos de una lista son del mismo tipo o estructura de datos.</p> Python<pre><code>mi_lista = [1, 2, \"tres\", 4.0]\n</code></pre> <p>En este ejemplo, <code>mi_lista</code> es una lista que contiene cuatro elementos: dos n\u00fameros enteros, una cadena y un n\u00famero flotante.</p> <p>Los elementos en una lista est\u00e1n ordenados en secuencia y tienen un \u00edndice definido, que comienza desde 0 para el primer elemento.</p> <p>Las listas son mutables, lo que significa que puedes cambiar sus elementos despu\u00e9s de que la lista ha sido creada. Puedes agregar, eliminar y modificar elementos en una lista en cualquier momento de la ejecuci\u00f3n del programa.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#declaracion-de-una-lista","title":"Declaraci\u00f3n de una lista","text":"<p>Las listas se crean asignando a una variable una secuencia de elementos encerrados entre corchetes ( [] )y separados por comas. </p> <p>Se puede crear una lista vac\u00eda, y las listas pueden ser elementos de otras listas. Para incluir una lista como parte de otra, basta con incluirla separada por comas de los elementos restantes.</p> <p>Aqu\u00ed tienes varios ejemplos de c\u00f3mo se ve una lista en Python:</p> Python<pre><code>numeros = [1,2,3,4,5] # Lista de n\u00fameros\ndias = [\"Lunes\", \"Martes\", \"Mi\u00e9rcoles\", \"Jueves\", \"Viernes\", \"S\u00e1bado\", \"Domingo\"] # Lista de cadenas de caracteres\nelementos = [] # Lista vac\u00eda\nmatriz = [ [1,2,3], [4,5,6] ] # lista de listas (tambi\u00e9n llamada matriz)\n</code></pre> <p>Â¡Para recordar!</p> <p>Las listas se suelen nombrar en plural. </p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#acceso-a-los-elementos-de-una-lista","title":"Acceso a los elementos de una lista","text":"<p>En Python, puedes acceder a los elementos de una lista utilizando su \u00edndice, que es la posici\u00f3n del elemento en la lista. Los \u00edndices en Python comienzan en 0, por lo que el primer elemento de la lista est\u00e1 en el \u00edndice 0, el segundo elemento est\u00e1 en el \u00edndice 1, y as\u00ed sucesivamente.</p> <p>Aqu\u00ed tienes varios ejemplos:</p> Python<pre><code># Definir la lista\nmi_lista = [1, 2, \"tres\", 4.0]\n\n# Acceder al primer elemento\nprint(mi_lista[0])  # Output: 1\n\n# Acceder al segundo elemento\nprint(mi_lista[1])  # Output: 2\n\n# Acceder al \u00faltimo elemento\nprint(mi_lista[-1])  # Output: 4.0\n</code></pre> <p>En este c\u00f3digo, <code>mi_lista[0]</code> accede al primer elemento de mi_lista, <code>mi_lista[1]</code> accede al segundo elemento, y <code>mi_lista[-1]</code> accede al \u00faltimo elemento. Los \u00edndices negativos cuentan desde el final de la lista, por lo que -1 es el \u00faltimo elemento, -2 es el pen\u00faltimo elemento, y as\u00ed sucesivamente.</p> <p>\u00a1Muy importante!</p> <p>Intentar acceder a un elemento con un \u00edndice fuera de rango generar\u00e1 un error: </p> Python<pre><code># Definir la lista\nmi_lista = [1, 2, \"tres\", 4.0]\n\n# La lista solo tiene \u00edndices 0 al 3 (4 elementos)\n# Acceder a un elemento con \u00edndice fuera de rango\nprint(mi_lista[4])\n</code></pre> Terminal (Entrada/Salida)<pre><code>Traceback (most recent call last):\nFile \"\u2026\", line 6, in &lt;module&gt;\n    print(mi_lista[4])\n        ~~~~~~~~^^^\nIndexError: list index out of range\n</code></pre>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#impresion-de-listas","title":"Impresi\u00f3n de listas","text":"<p>La impresi\u00f3n de listas en Python se refiere a mostrar en la consola o terminal los elementos de la lista.  Para imprimir una lista, puedes usar la funci\u00f3n <code>print()</code>.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>mi_lista = [1, 2, \"tres\", 4.0]\nprint(mi_lista)\n</code></pre> Terminal (Entrada/Salida)<pre><code>[1, 2, 'tres', 4.0]\n</code></pre> <p>En este c\u00f3digo, <code>print(mi_lista)</code> imprime la representaci\u00f3n de la lista <code>mi_lista</code>, que incluye los corchetes que delimitan la lista y las comas que separan los elementos.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#longitud-de-una-lista","title":"Longitud de una lista","text":"<p>La funci\u00f3n <code>len()</code> devuelve la cantidad de elementos en un objeto iterable, en este caso, una lista. </p> <p>Por lo tanto, <code>len(lista)</code> devolver\u00e1 el n\u00famero de elementos en la lista <code>lista</code>.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>mi_lista = [1, 2, 3, 4, 5]\nprint(len(mi_lista))  # Output: 5\n</code></pre> <p>En este c\u00f3digo, <code>len(mi_lista)</code> devuelve 5, porque hay cinco elementos en la lista <code>mi_lista</code>.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#iterar-sobre-una-lista","title":"Iterar sobre una lista","text":"<p>Una de las tareas m\u00e1s comunes que se realizan con listas es recorrer su contenido con el objetivo de conocer como est\u00e1 compuesta:</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#impresion-de-los-elementos-de-una-lista","title":"Impresi\u00f3n de los elementos de una lista","text":"<p>Si quieres imprimir los elementos de una lista, uno por uno, puedes hacerlo de diferentes maneras:</p> <ol> <li> <p>Emplear un bucle for \u2026 in para acceder a cada elemento:</p> <p>La estructura for \u2026 in permite acceder a cada uno de los elementos de una lista y almacenar una copia en la variable de control:</p> Python<pre><code>mi_lista = [1, 2, \"tres\", 4.0]\n\nfor elemento in mi_lista:\n    print(elemento)\n</code></pre> <p>Este c\u00f3digo imprimir\u00e1 cada elemento de la lista en una l\u00ednea separada:</p> Terminal (Entrada/Salida)<pre><code>1\n2\ntres\n4.0\n</code></pre> </li> <li> <p>Emplear un bucle for \u2026 in range o un bucle while para generar la secuencia de \u00edndices para acceder a cada elemento:</p> <p>Emplear un bucle tradicional no permite acceder directamente al elemento de la lista pero si permite generar una secuencia de \u00edndices par luego referencia cada posici\u00f3n de la lista para acceder al elemento almacenado en ella:</p> Python<pre><code>lista = [1, 2, \"tres\", 4.0]\n\nfor i in range(len(lista)):\n    print(lista[i])\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\ntres\n4.0\n</code></pre> Python<pre><code>lista = [1, 2, \"tres\", 4.0]\n\ni = 0\nwhile i &lt; len(lista):\n    print(lista[i])\n    i = i + 1\n</code></pre> Terminal (Entrada/Salida)<pre><code>1\n2\ntres\n4.0\n</code></pre> </li> </ol>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#desempaquetado-de-listas","title":"Desempaquetado de listas","text":"<p>El desempaquetado de listas, tambi\u00e9n conocido como unpacking, es un proceso que permite asignar los valores de una lista a variables individuales. </p> <p>Esto se hace utilizando la asignaci\u00f3n m\u00faltiple.</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>numeros = [1, 2, 3]\na, b, c = numeros\n\nprint(a)  # Output: 1\nprint(b)  # Output: 2\nprint(c)  # Output: 3\n</code></pre> <p>En este c\u00f3digo, <code>a, b, c = numeros</code> desempaqueta la lista <code>numeros</code> en las variables <code>a</code>, <code>b</code> y <code>c</code>. La variable <code>a</code> recibe el primer valor de la lista, <code>b</code> el segundo y <code>c</code> el tercero.</p> <p>\u00a1Muy importante!</p> <p>Hay que tener en cuenta que el n\u00famero de variables debe coincidir con el n\u00famero de elementos en la lista. Si no coinciden, Python lanzar\u00e1 un error.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#uso-de-operadores-con-cadenas-de-caracteres","title":"Uso de operadores con cadenas de caracteres","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#concatenacion-de-listas","title":"Concatenaci\u00f3n de listas","text":"<p>La concatenaci\u00f3n de listas en Python es el proceso de unir o combinar dos o m\u00e1s listas. Esto se puede hacer utilizando el operador de concatenaci\u00f3n ( + ).</p> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>lista1 = [1, 2, 3]\nlista2 = [4, 5, 6]\nlista_concatenada = lista1 + lista2\n\nprint(lista_concatenada)  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre> <p>En este c\u00f3digo, <code>lista1 + lista2</code> concatena <code>lista1</code> y <code>lista2</code> para formar una nueva lista que contiene todos los elementos de <code>lista1</code> seguidos de todos los elementos de <code>lista2</code>.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#comprobar-si-un-elemento-se-encuentra-o-no-dentro-de-una-lista","title":"Comprobar si un elemento se encuentra, o no, dentro de una lista","text":"<p>Los operadores in y not in tambi\u00e9n se pueden usar con listas en Python para verificar si un elemento est\u00e1 o no en la lista. Aqu\u00ed hay un ejemplo:</p> <ul> <li> <p>in: devuelve True si un elemento se encuentra en la lista y False de lo contrario.</p> </li> <li> <p>not in: devuelve True si un elemento no se encuentra en la lista y False de lo contrario.</p> </li> </ul> Python<pre><code>lista = [\"manzana\", \"banana\", \"cereza\"]\n\nprint(\"manzana\" in lista)  # Output: True\nprint(\"naranja\" in lista)  # Output: False\n\nprint(\"manzana\" not in lista)  # Output: False\nprint(\"naranja\" not in lista)  # Output: True\n</code></pre> <p>En este c\u00f3digo, <code>\"manzana\" in lista</code> devuelve <code>True</code> porque \"manzana\" es un elemento de la lista. Por otro lado, <code>\"naranja\" in lista</code> devuelve <code>False</code> porque \"naranja\" no es un elemento de la lista.</p> <p>De manera similar, <code>\"manzana\" not in lista</code> devuelve <code>False</code> porque \"manzana\" es un elemento de la lista, y <code>\"naranja\" not in lista</code> devuelve <code>True</code> porque \"naranja\" no es un elemento de la lista.</p> <p>M\u00e1s adelante veremos que podremos realizar estas comparaciones directamente mediante el uso de m\u00e9todos.</p> <p>''' info \"\u00a1Â¡Para recordar! que estos operadores tambi\u00e9n funcionan con otras estructuras de datos!\"</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#uso-de-funciones-con-listas","title":"Uso de funciones con listas","text":"<ul> <li>list([iterable]): Es un constructor de listas. Se utiliza para crear una lista a partir de un iterable (como una cadena, tupla, conjunto, etc.) o para crear una lista vac\u00eda si no se proporciona el par\u00e1metro iterable.</li> </ul> <p>Aqu\u00ed est\u00e1 la sintaxis b\u00e1sica:</p> Python<pre><code>list([iterable])\n</code></pre> <p>Donde iterable es opcional. Si se proporciona, list() crea una lista donde cada elemento es un elemento del iterable. Si no se proporciona iterable, list() crea una lista vac\u00eda.</p> <p>Aqu\u00ed tienes algunos ejemplos de c\u00f3mo usar list():</p> Python<pre><code># Crear una lista vac\u00eda\nlista_vacia = list()\nprint(lista_vacia)  # Output: []\n\n# Crear una lista a partir de una cadena\nlista_cadena = list(\"Hola\")\nprint(lista_cadena)  # Output: ['H', 'o', 'l', 'a']\n\n# Crear una lista a partir de una tupla\nlista_tupla = list((1, 2, 3))\nprint(lista_tupla)  # Output: [1, 2, 3]\n\n# Crear una lista a partir de un conjunto\nlista_conjunto = list({1, 2, 3})\nprint(lista_conjunto)  # Output: [1, 2, 3]\n</code></pre> <p>Â¡Para recordar! que una cadena de caracteres es una estructura de datos que alberga uno o mas elementos, en este caso, caracteres.</p> <p>A\u00fan no hemos visto en profundidad que son tuplas y conjuntos pero, por el momento y para clarificar los ejemplos, una tupla es una colecci\u00f3n de objetos que son ordenados e inmutables. Esto significa que una vez que una tupla es creada, no puedes cambiar sus elementos o su tama\u00f1o. Por lo tanto, si precisaras modificarla por alg\u00fan motivo, es necesario convertirla en una lista, aplicar las modificaciones, y luego volver a convertirla en una tupla. Un conjunto es una colecci\u00f3n de elementos que no est\u00e1n ordenados y no tienen \u00edndices y tampoco permiten elementos duplicados. Esto significa que si es preciso trabajar con \u00edndices, ordenamiento o duplicar elementos es necesario convertirlo en una lista, realizar las tareas correspondientes, y luego volver a convertirlo en un conjunto.</p> <p>\u00a1Para recordar!</p> <p><code>list()</code> crea una nueva lista. Si el iterable es mutable (como una lista o un conjunto), los cambios en el iterable utilizado para crear la lista no afectar\u00e1n a la lista creada, y viceversa.</p> <ul> <li>range([inicio,] fin[, paso]): Se utiliza para generar una secuencia de n\u00fameros. Aunque no se utiliza directamente con listas, se puede utilizar para generar listas de n\u00fameros si se combina con la funci\u00f3n list().  </li> </ul> <p>Donde:</p> <pre><code>* **inicio**: Opcional. Un n\u00famero entero que especifica en qu\u00e9 posici\u00f3n empezar. El valor predeterminado es 0.\n\n* **fin**: Requerido. Un n\u00famero entero que especifica en qu\u00e9 posici\u00f3n parar.\n\n* **paso**: Opcional. Un n\u00famero entero que especifica el incremento. El valor predeterminado es 1. Dependiendo del valor de inicio y de fin, _paso_ debe ser positivo o negativo.\n\nAqu\u00ed hay algunos ejemplos de c\u00f3mo usar range() para generar listas:\n\n``` py title=\"Python\"\n# Generar una lista de n\u00fameros del 0 al 9\nlista1 = list(range(10))\nprint(lista1)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Generar una lista de n\u00fameros del 5 al 9\nlista2 = list(range(5, 10))\nprint(lista2)  # Output: [5, 6, 7, 8, 9]\n\n# Generar una lista de n\u00fameros del 0 al 9, pero con pasos de 2\nlista3 = list(range(0, 10, 2))\nprint(lista3)  # Output: [0, 2, 4, 6, 8]\n```\n\nTambi\u00e9n puedes usar _range()_ con listas existentes para iterar sobre ellas, como hemos visto previamente:\n\n``` py title=\"Python\"\nlista = ['a', 'b', 'c', 'd', 'e']\n\n# Imprimir cada elemento de la lista usando range()\nfor i in range(len(lista)):\n    print(lista[i])\n```\n\n&gt; En este c\u00f3digo, `range(len(lista))` genera una lista de n\u00fameros del 0 al 4, que son los \u00edndices de los elementos en `lista`. Luego, en cada iteraci\u00f3n del bucle `for`, se utiliza el n\u00famero generado por `range()` como \u00edndice para acceder a cada elemento de lista.\n</code></pre> <ul> <li>sum(iterable[, inicio]): Se utiliza para sumar todos los elementos de una lista. </li> </ul> <p>Donde:</p> <ul> <li> <p>iterable: es una secuencia (como una lista, tupla, etc.) o una colecci\u00f3n (como un conjunto, diccionario, etc.) de n\u00fameros (enteros y flotantes).  </p> </li> <li> <p>inicio: es un n\u00famero opcional que se suma al resultado de sumar los elementos del iterable. Si se omite start, la suma comienza desde cero.</p> </li> </ul> <p>Aqu\u00ed tienes un ejemplo:</p> Python<pre><code>lista = [1, 2, 3, 4, 5]\nsuma = sum(lista)\nprint(suma)  # Output: 15\n\nsuma_con_inicio = sum(lista, 10)\nprint(suma_con_inicio)  # Output: 25\n</code></pre> <p>En este c\u00f3digo, <code>sum(lista)</code> suma todos los elementos de lista, y sum<code>(lista, 10)</code> suma todos los elementos de lista y luego a\u00f1ade 10 al resultado.</p> <p>\u00a1Importante!</p> <p>Es importante mencionar que <code>sum()</code> s\u00f3lo puede sumar elementos que sean n\u00fameros. Si intentas usar <code>sum()</code> en una lista que contiene elementos que no son n\u00fameros, Python lanzar\u00e1 un error.</p> <ul> <li>min(iterable, *[, clave, valor_defecto]),</li> <li> <p>max(iterable, *[, clave, valor_defecto]): Se utilizan para obtener el valor m\u00ednimo y m\u00e1ximo de un iterable, una lista en este caso.</p> <ul> <li> <p>clave (opcional): Una funci\u00f3n para servir como clave o criterio de ordenaci\u00f3n. La funci\u00f3n <code>min()</code> o <code>max()</code> aplicar\u00e1 esta funci\u00f3n a cada elemento del iterable y devolver\u00e1 el elemento para el cual la funci\u00f3n key devuelve el valor m\u00ednimo o m\u00e1ximo.</p> </li> <li> <p>valor_defecto (opcional): Un valor por defecto que se devuelve si el iterable est\u00e1 vac\u00edo.</p> </li> </ul> </li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5]\n\n# Obtener el valor m\u00ednimo de una lista\nminimo = min(lista)\nprint(minimo)  # Output: 1\n\n# Obtener el valor m\u00e1ximo de una lista\nmaximo = max(lista)\nprint(maximo)  # Output: 5 \n</code></pre> <p>En este c\u00f3digo, <code>min(lista)</code> y <code>max(lista)</code> devuelven el valor m\u00ednimo y m\u00e1ximo de <code>lista</code>, respectivamente. </p> <p>Por el momento utilizaremos ambas funciones sin aplicar los par\u00e1metros opcionales.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/listas/uso-de-listas-en-python/#uso-de-metodos-de-listas","title":"Uso de m\u00e9todos de listas","text":"<p>Los m\u00e9todos de las listas en Python son funciones incorporadas que se pueden usar para realizar diferentes operaciones en las listas. </p> <p>Algunos de los m\u00e9todos m\u00e1s comunes que poseen las listas en Python incluyen los que veremos a continuaci\u00f3n. Para ello, primero crearemos una lista:</p> Python<pre><code>lista = [1, 2, 3, 4, 5]\n</code></pre> <p>Y ahora efectuaremos una serie de procesos para ir describiendo los diferentes funcionamientos. recuerda ir siguiendo lo que ocurre con la lista, ejecuci\u00f3n tras ejecuci\u00f3n.</p> <ul> <li> <p>append(elemento): Agrega un elemento al final de la lista.</p> Python<pre><code>lista.append(6)\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Â¡Para recordar!</p> <p>El m\u00e9todo append(elemento) equivale a sumar una lista con el elemento para agregar a continuaci\u00f3n de la lista que recibir\u00e1 el elemento:</p> Python<pre><code>lista = [1, 2, 3, 4, 5]\nlista = lista + [6]\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre> </li> <li> <p>extend(): Agrega todos los elementos de una lista a otra lista.</p> Python<pre><code>lista.extend([7, 8, 9])\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>La ejecuci\u00f3n de este m\u00e9todo equivale a concatenar dos listas.</p> </li> <li> <p>insert(posicion, elemento): Inserta un elemento en una posici\u00f3n espec\u00edfica de la lista.</p> <p>Los par\u00e1metros son:</p> <ul> <li> <p>posicion: Es el \u00edndice donde se insertar\u00e1 el nuevo elemento. Los \u00edndices en Python comienzan en 0, por lo que si quieres insertar un elemento al inicio de la lista, la posici\u00f3n ser\u00eda 0.</p> </li> <li> <p>elemento: Es el valor que se insertar\u00e1 en la lista.</p> </li> </ul> Python<pre><code>lista.insert(0, 0)\nprint(lista)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> </li> <li> <p>remove(valor): Elimina la primera aparici\u00f3n de un elemento en la lista.</p> Python<pre><code>lista.remove(0)\nprint(lista)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> </li> <li> <p>pop(): Elimina y devuelve el elemento en una posici\u00f3n dada. Si no se proporciona ninguna posici\u00f3n, elimina y devuelve el \u00faltimo elemento de la lista.</p> </li> </ul> Python<pre><code>elemento = lista.pop(0)\nprint(elemento)  # Output: 1\nprint(lista)  # Output: [2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <ul> <li> <p>index(valor[, inicio[, fin]]): Devuelve el \u00edndice del primer elemento que coincide con el valor especificado.</p> <p>Donde:</p> <ul> <li>inicio (opcional): Es el \u00edndice inicial desde donde se debe comenzar la b\u00fasqueda.</li> <li>fin (opcional): Es el \u00edndice final donde se debe detener la b\u00fasqueda.</li> </ul> Python<pre><code>lista = [1, 2, 3, 4, 5, 4, 4]\n\nindice = lista.index(5)\nprint(indice)  # Output: 4\n\nindice = lista.index(4)\nprint(indice)  # Output: 3\n\nindice = lista.index(4, 4, 7)\nprint(indice)  # Output: 5\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Si el valor no se encuentra en la lista, se lanza una excepci\u00f3n <code>ValueError</code>.</p> Python<pre><code>lista = [1, 2, 3, 4, 5, 4, 4]\n\nindice = lista.index(4, 2, 3)\nprint(indice)  # Output: ValueError: 4 is not in list\n</code></pre> </li> <li> <p>count(valor): Devuelve el n\u00famero de veces que un valor espec\u00edfico aparece en la lista.</p> Python<pre><code>conteo = lista.count(5)\nprint(conteo)  # Output: 1\n</code></pre> </li> <li> <p>sort([reverse=False]): Ordena los elementos de la lista en un orden espec\u00edfico: ascendente o descendente. Tiene un par\u00e1metro opcional reverse, que por defecto es False. Si no se especifica, la lista se ordenar\u00e1 en orden ascendente. Si el par\u00e1metro reverse se establece en True, entonces la lista se ordenar\u00e1 en orden descendente.</p> Python<pre><code>lista.sort()\nprint(lista)  # Output: [2, 3, 4, 5, 6, 7, 8, 9]\n\nlista.sort(reverse=True)\nprint(lista)  # Output: [9, 8, 7, 6, 5, 4, 3, 2]\n</code></pre> </li> <li> <p>reverse(): Invierte el orden de los elementos de la lista.</p> Python<pre><code>lista.reverse()\nprint(lista)  # Output: [2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre> <p>La ejecuci\u00f3n de este m\u00e9todo equivale a ejecutar el m\u00e9todo sort(reverse=True)</p> </li> <li> <p>clear(): Se utiliza para eliminar todos los elementos de la lista. Despu\u00e9s de usar este m\u00e9todo, la lista se convierte en una lista vac\u00eda.</p> Python<pre><code>lista.clear()\nprint(lista)  # Output: []\n</code></pre> </li> </ul> <p>Estos m\u00e9todos proporcionan una forma conveniente de manipular y trabajar con listas en Python.</p> <p>\u00a1Para recordar!</p> <p>Cada uno de estos m\u00e9todos modifica la lista original y no devuelve una nueva lista, excepto el m\u00e9todo pop(), que devuelve el elemento eliminado.</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/tuplas/uso-de-tuplas-en-python/","title":"Creaci\u00f3n de una tupla","text":"<p>nombres = (\"Juan\", \"Pedro\", \"Maria\", \"Luis\") print (nombres) print(nombres[0])</p>"},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/tuplas/uso-de-tuplas-en-python/#nombres1-ana-error-no-se-puede-modificar-una-tupla","title":"nombres[1] = \"Ana\" # Error, no se puede modificar una tupla","text":""},{"location":"unidades/lenguajes-de-programacion/python/estructuras-de-datos/tuplas/uso-de-tuplas-en-python/#desempaquetado","title":"Desempaquetado:","text":"<p>alumno1, alumno2, alumno3, alumno4 = nombres print (alumno1) print (alumno2) print (alumno3) print (alumno4)</p>"},{"location":"unidades/programacion-estructurada/introduccion-a-la-programacion-estructurada/","title":"Introducci\u00f3n a la programaci\u00f3n estructurada","text":""},{"location":"unidades/programacion-estructurada/introduccion-a-la-programacion-estructurada/#tecnicas-para-el-desarrollo-de-programacion-estructurada","title":"T\u00e9cnicas para el desarrollo de programaci\u00f3n estructurada","text":"<p>Conjunto de t\u00e9cnicas para desarrollar algoritmos f\u00e1ciles de escribir, leer, verificar y modificar.</p> <ul> <li> <p>Dise\u00f1o Modular ( Top-down ): En problemas grandes y complejos: dividir el problema en subproblemas y dise\u00f1ar un subprograma para resolver cada uno de ellos.</p> </li> <li> <p>Descomposici\u00f3n del programa en recursos abstractos: Descompone una acci\u00f3n compleja en acciones simples capaces de ser ejecutadas por un computador ( instrucciones )</p> </li> <li> <p>Estructuras de control b\u00e1sicas: Un programa se escribe utilizando 3 estructuras de control:</p> <ul> <li>EC Secuenciales</li> <li>EC Selectivas</li> <li>EC Repetitivas</li> </ul> </li> </ul>"},{"location":"unidades/programacion-estructurada/ejercitacion/ejercitacion-programacion-estructurada/","title":"Ejercitaci\u00f3n sobre programaci\u00f3n estructurada","text":"<ol> <li> <p>Declara una variable llamada saludo y as\u00edgnale un valor de cadena que represente un saludo. Luego, concatena la variable con su variable nombre para crear un saludo personalizado e impr\u00edmelo en la consola. Por ejemplo:</p> Terminal (Entrada/Salida) <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> </ol> </li> <li> <p>Declara una variable llamada frutas y as\u00edgnale una matriz de tres frutas. Luego, imprime el valor de la segunda fruta en la matriz en la consola. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> </ol> </li> <li> <p>Declara una variable llamada persona y as\u00edgnale un objeto con propiedades para nombre, edad y esEstudiante. Luego, imprime el valor de la propiedad nombre en la consola. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> </ol> </li> <li> <p>Declara una variable llamada hora y as\u00edgnale el valor de la hora actual utilizando la funci\u00f3n Date(). Luego, usa declaraciones condicionales para imprimir un mensaje en la consola que diga \"Buenos d\u00edas\", \"Buenas tardes\" o \"Buenas noches\", dependiendo del valor de la variable hora. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> </ol> </li> <li> <p>Declara una variable llamada total y as\u00edgnale un valor de 0. Luego, usa un bucle para agregar los n\u00fameros del 1 al 10 a la variable y, finalmente, imprime el valor final en la consola. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> </ol> </li> <li> <p>Declara una variable llamada num y as\u00edgnale un n\u00famero aleatorio entre 1 y 10 utilizando la funci\u00f3n Math.random(). Luego, usa declaraciones condicionales para imprimir un mensaje en la consola que diga \"Demasiado alto\", \"Demasiado bajo\" o \"Correcto\", dependiendo de si el valor de num es mayor que, menor que o igual a 5. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\n\n# Bloque principal del programa\n</code></pre> <p>En esta soluci\u00f3n propuesta ...</p> </li> </ol> </li> </ol>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/","title":"Funci\u00f3n asignada a una variable","text":""},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#introduccion","title":"Introducci\u00f3n","text":"<p>Chequear esta info</p> <p>Las funciones son consideradas como un tipo de dato y pueden ser asignadas a variables de la misma manera que asignamos otros tipos de dato, como una cadena o un n\u00famero entero. Para hacerlo, simplemente escribimos el nombre de la variable, seguido del signo igual (=) y el nombre de la funci\u00f3n sin par\u00e9ntesis.</p> <p>Definici\u00f3n</p> <p>Una funci\u00f3n es un tipo de dato que representa un bloque de sentencias (o sentencia compuesta) reutilizable y aut\u00f3nomo que realiza una tarea espec\u00edfica. En t\u00e9rminos m\u00e1s generales, una funci\u00f3n es una secuencia de instrucciones que toma uno o m\u00e1s argumentos, realiza un conjunto de operaciones y devuelve un resultado.</p> <p>Toda funci\u00f3n debe contener al menos una sentencia compuesta.</p> <p>La funci\u00f3n puede tener instrucciones que realicen c\u00e1lculos, operaciones, manipulaci\u00f3n de datos, llamadas a otras funciones, entre otras acciones.</p> <p>Una funci\u00f3n se define utilizando la palabra clave def, seguida del nombre de la funci\u00f3n, par\u00e9ntesis que pueden contener los argumentos de la funci\u00f3n y dos puntos \":\". A continuaci\u00f3n, se escribe el bloque de c\u00f3digo que conforma la funci\u00f3n, indentado con espacios o tabulaciones.</p> <p>``` py title=\"Python</p>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#definicion-de-funciones","title":"Definici\u00f3n de funciones","text":"<p>def sumar(a, b):     resultado = a + b     return resultado <pre><code>Veamos ejemplo de definici\u00f3n de una funci\u00f3n en Python llamada sumar que toma dos n\u00fameros como argumentos y devuelve la suma de esos n\u00fameros:\n\n``` py title=\"Python\"\n# Definici\u00f3n de funciones\ndef sumar(a, b):\n    resultado = a + b\n    return resultado\n</code></pre></p> <p>Aqu\u00ed se define una funci\u00f3n llamada sumar que toma dos argumentos, a y b. La funci\u00f3n realiza la suma de los dos argumentos y los almacena una la variable resultado. Luego, devuelve el valor almacenado en la variable resultado. Podemos asignar esta funci\u00f3n a una variable y luego llamarla utilizando esa variable:</p> Python<pre><code># Definici\u00f3n de funciones\ndef sumar(a, b):\n    resultado = a + b\n    return resultado\n\n# Bloque principal del programa\nmi_funcion = sumar\nresultado = mi_funcion(2, 3)\nprint(resultado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>5\n</code></pre> <p>En el ejemplo anterior, asignamos la funci\u00f3n sumar a una variable llamada mi_funcion. Luego, llamamos a la funci\u00f3n utilizando la variable y pasando los argumentos 2 y 3. La funci\u00f3n devuelve la suma de los dos n\u00fameros, que se almacena en la variable resultado. Luego, se imprime el valor almacenado en la consola.</p> <p>\u00a1Importante!</p> <p>Cuando asignamos una funci\u00f3n a una variable, estamos asignando la funci\u00f3n en s\u00ed misma, no el resultado de la funci\u00f3n. Esto significa que podemos llamar a la funci\u00f3n en cualquier momento simplemente utilizando la variable a la que se ha asignado.</p> <p>Las funciones tambi\u00e9n se pueden pasar como argumentos a otras funciones. Por ejemplo, podemos definir una funci\u00f3n llamada aplicar_funcion que toma una funci\u00f3n y dos argumentos y devuelve el resultado de aplicar la funci\u00f3n a los dos argumentos:</p> <p>``` py title=\"Python</p>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#definicion-de-funciones_1","title":"Definici\u00f3n de funciones","text":"<p>def aplicar_funcion(funcion, a, b):     return funcion(a, b)</p>"},{"location":"unidades/programacion-procedimental/funciones/funcion-asignada-a-una-variable/#bloque-principal-del-programa","title":"Bloque principal del programa","text":"<p>resultado = aplicar_funcion(sumar, 2, 3) print(resultado) <pre><code>``` title=\"Terminal (Entrada/Salida)\"\n5\n</code></pre></p> <p>En el ejemplo anterior, pasamos la funci\u00f3n sumar como argumento a la funci\u00f3n aplicar_funcion. La funci\u00f3n aplicar_funcion llama a la funci\u00f3n pasada como argumento (sumar) con los dos argumentos (2 y 3) y devuelve el resultado de la funci\u00f3n (5).</p> <p>\u00a1Â¡Para recordar!!</p> <p>En resumen, en lenguajes como Python, las funciones son objetos de primera clase, lo que significa que se pueden tratar como cualquier otro tipo de dato, como n\u00fameros, cadenas o listas. Esto permite que las funciones se asignen a variables, se pasen como argumentos a otras funciones, se devuelvan como resultados de funciones y se almacenen en estructuras de datos como listas o diccionarios.</p>"},{"location":"unidades/programacion-procedimental/funciones/ejercitacion/ejercitacion-funciones/","title":"Ejercitaci\u00f3n de funciones generales","text":"<ol> <li> <p>Escribir un programa que contenga una funci\u00f3n que reciba una lista con valores num\u00e9ricos enteros como argumento para calcular y devolver el valor m\u00e1ximo de dichos n\u00fameros.</p> Javascript<pre><code>function encontrarMaximo(numeros) {\n    let maximo = numeros[0]\n\n    for (let i = 1; i &lt; numeros.length; i++) {\n        if (numeros[i] &gt; maximo) {\n            maximo = numeros[i]\n        }\n    }\n\n    return maximo\n}\n\nlet listaNumeros = [5, 15, 20, 10]\nlet resultado = encontrarMaximo(listaNumeros)\nconsole.log(\"M\u00e1ximo: \", resultado)\n</code></pre> Terminal (Entrada/Salida)<pre><code>Promedio: 20\n</code></pre> <p>En este ejercicio, la funci\u00f3n encontrarMaximo() encuentra el valor m\u00e1ximo en una lista de n\u00fameros.  La variable local maximo se utiliza para realizar el seguimiento del valor m\u00e1ximo encontrado hasta el momento.</p> </li> <li> <p>Calcular el factorial de un n\u00famero utilizando una variable local en una funci\u00f3n. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>El factorial de 5 es: 120\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\ndef factorial(n):\n    resultado = 1\n\n    for i in range(1, n + 1):\n        resultado *= i\n\n    return resultado\n\n# Bloque principal del programa\nnumero = 5\n\nresultado = factorial(numero)\n\nprint(\"El factorial de\", numero, \"es:\", resultado)\n</code></pre> <p>En esta soluci\u00f3n propuesta la funci\u00f3n factorial() calcula el factorial del n\u00famero 5 utilizando una variable local resultado para almacenar el resultado intermedio.</p> </li> </ol> </li> <li> <p>Determinar si una palabra es un pal\u00edndromo (es igual si se lee de izquierda a derecha que de derecha a izquierda) utilizando variables locales. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>anilina es un pal\u00edndromo (se escribe igual al derecho y al rev\u00e9s).\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\ndef es_palindromo(palabra):\n    palabra = palabra.lower()\n    palabra_invertida = palabra[::-1]\n\n    if palabra == palabra_invertida:\n        return True\n    else:\n        return False\n\n# Bloque principal del programa\npalabra = \u201danilina\u201d\n\nif es_palindromo(palabra):\n    print(palabra, \"es un pal\u00edndromo (se escribe igual al derecho y al rev\u00e9s).\")\nelse:\n    print(palabra, \"no es un pal\u00edndromo.\")\n</code></pre> <p>En esta soluci\u00f3n propuesta la funci\u00f3n es_palindromo() verifica si una palabra es un pal\u00edndromo utilizando una variable local palabra_invertida para almacenar la versi\u00f3n invertida de la palabra almacenada en la variable palabra.</p> <p>\u00bfPara qu\u00e9 se utiliza el m\u00e9todo <code>lower()</code>?</p> <p>\u00bfQu\u00e9 hace la instrucci\u00f3n <code>palabra[::-1]</code>?</p> </li> </ol> </li> <li> <p>Calcular la suma de los d\u00edgitos de un n\u00famero utilizando variables locales. Por ejemplo:</p> Terminal (Entrada/Salida)<pre><code>La suma de los d\u00edgitos de 12345 es: 15\n</code></pre> <p>Ver resultado (1)</p> <ol> <li> <p> </p> Python<pre><code># Definici\u00f3n de funciones\ndef suma_de_los_digitos(numero):\n    total = 0\n\n    while numero &gt; 0:\n        digito = numero % 10\n        total += digito\n        numero //= 10\n\n    return total\n\n# Bloque principal del programa\nnumero = 12345\nresultado = suma_de_los_digitos(numero)\nprint(\u201dLa suma de los d\u00edgitos de\", numero, \u201des:\", resultado)\n</code></pre> <p>En esta soluci\u00f3n propuesta la funci\u00f3n suma_de_los_digitos() calcula la suma de los d\u00edgitos de un n\u00famero utilizando una variable local total para almacenar la suma acumulada.</p> <p>\u00bfPara qu\u00e9 se utiliza el signo % ?</p> <p>\u00bfQu\u00e9 hace el operador // ?</p> </li> </ol> </li> <li> <p>Escribe una funci\u00f3n que tome dos listas como argumentos y devuelva True si tienen alg\u00fan elemento en com\u00fan, utilizando operadores booleanos.</p> </li> <li> <p>Escribe una funci\u00f3n que tome tres n\u00fameros como argumentos y devuelva True si el tercero est\u00e1 dentro del rango definido por los primeros dos n\u00fameros.</p> </li> <li> <p>Escribe una funci\u00f3n que tome una cadena de caracterescomo argumento y devuelva True si contiene al menos una letra may\u00fascula y al menos un n\u00famero. </p> </li> <li> <p>Escribe una funci\u00f3n que tome un a\u00f1o como argumento y determine si es bisiesto o no. Un a\u00f1o bisiesto es divisible entre 4, pero no entre 100, a menos que tambi\u00e9n sea divisible entre 400.</p> </li> </ol>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/","title":"Conceptos b\u00e1sicos de pseudoc\u00f3digo","text":""},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#introduccion","title":"Introducci\u00f3n","text":"<p>El pseudoc\u00f3digo es una herramienta valiosa en el desarrollo de software, ya que facilita la planificaci\u00f3n, el dise\u00f1o y la comunicaci\u00f3n de algoritmos en idioma natural antes de su implementaci\u00f3n en un lenguaje de programaci\u00f3n real.</p> <p>Definici\u00f3n</p> <p>El pseudoc\u00f3digo es una versi\u00f3n legible, en lenguaje humano natural, de un algoritmo. Es decir, que es una representaci\u00f3n de dicho algoritmo en castellano preciso (o alg\u00fan otro idioma humano). Es para ser le\u00eddo por personas, por lo tanto no se enfoca en detalles sint\u00e1cticos.</p> <p>Recordemos el problema de tratar de localizar un solo nombre en una gu\u00eda telef\u00f3nica impresa. </p> <p>El mejor algoritmo para resolverlo podr\u00eda ser abrir la gu\u00eda telef\u00f3nica por la mitad, y preguntar:</p> <p>\u201c\u00bfEl nombre que estoy buscando est\u00e1 a la izquierda o a la derecha?\u201d </p> <p>Decidir si el nombre estar\u00e1 en la mitad izquierda o derecha del libro (porque el libro est\u00e1 alfabetizado) y reducir el tama\u00f1o de nuestro problema a la mitad. </p> <p>Luego, repetir este proceso hasta encontrar nuestro nombre, dividiendo el problema por la mitad cada vez.</p> <p>La capacidad de crear pseudoc\u00f3digo es fundamental para el \u00e9xito en el proceso de creaci\u00f3n de un algoritmo.</p>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#elementos-de-un-algoritmo-empleados-en-pseudocodigo","title":"Elementos de un algoritmo empleados en pseudoc\u00f3digo","text":"<p>Como dijimos, el pseudoc\u00f3digo es una manera de escribir algoritmos de forma poco estricta (con una sintaxis relajada) o estructuras de datos poco detalladas, pero intentando acercar las ideas del algoritmo a estructuras y sintaxis parecidas a las de los lenguajes de programaci\u00f3n en los que vamos a programar el algoritmo.</p> <p>Al ser un lenguaje de especificaci\u00f3n de algoritmos, pero muy parecido a cualquier lenguaje de programaci\u00f3n por lo que luego su traducci\u00f3n a cualquiera de estos ser\u00e1 muy sencilla, y con la ventaja de no regirse por las normas de un lenguaje en particular, se centra m\u00e1s en la l\u00f3gica del problema que en su implementaci\u00f3n.</p> <p>Para dise\u00f1ar algoritmos en pseudoc\u00f3digo, se pueden utilizar los siguientes elementos, utilizando una serie de palabras claves o palabras especiales que van a ir indicando el significado y funcionamiento del algoritmo:</p> <ul> <li>tipos de dato</li> <li>Variables</li> <li>Constantes</li> <li>Operadores</li> <li>Expresiones</li> <li>Instrucciones</li> </ul>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#cual-es-la-sintaxis-de-un-algoritmo-en-pseudocodigo","title":"\u00bfCu\u00e1l es la sintaxis de un algoritmo en pseudoc\u00f3digo?","text":"<p>En programaci\u00f3n, la sintaxis completa para escribir un algoritmo en pseudoc\u00f3digo es:</p> pseudoc\u00f3digo algoritmo: &lt; nombre_del_algoritmo &gt;<pre><code>[ constantes\n     &lt;declaraciones_de_constantes&gt; ]\n[ variables\n     &lt;declaraciones_de_variables&gt; ]\n[ tipos_de_datos\n     &lt;declaraciones_de_tipos_de_datos&gt; ]\n[ funciones\n     &lt;declaraciones_de_funciones&gt; ]\n\ninicio\n   &lt;bloque_de_sentencias&gt;\nfin\n</code></pre>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#ejemplo-de-sintaxis-de-un-algoritmo-en-pseudocodigo","title":"Ejemplo de sintaxis de un algoritmo en pseudoc\u00f3digo","text":"<p>El algoritmo de un programa que pida por teclado el radio de una circunferencia y muestre por pantalla el \u00e1rea de la misma, se puede escribir como se muestra a continuaci\u00f3n:</p> pseudoc\u00f3digo algoritmo: Area de una circunferencia<pre><code>constantes\n   PI = 3.141592\n\nvariables\n   flotante area, radio\n\ninicio\n   escribir(\"Introduzca el radio: \")\n   radio \u2190 ingresar valor del radio por teclado\n   area \u2190 PI * radio ** 2\n   escribir(\"El \u00e1rea de la circunferencia es: \" + area)\nfin\n</code></pre>"},{"location":"unidades/pseudocodigo/conceptos-basicos-de-pseudocodigo/#estructura-general-de-un-algoritmo-representado-en-pseudocodigo","title":"Estructura general de un algoritmo representado en pseudoc\u00f3digo","text":"<p>Mejorar</p> <p></p> <p>\u00a1Recueda!</p> <p>Â¡Para recordar! que Inicio y Fin no tienen un equivalente en c\u00f3digo. </p> <p>La primera l\u00ednea de c\u00f3digo indica el Inicio y la \u00faltima l\u00ednea de c\u00f3digo indica el Fin del programa, aunque no tienen por qu\u00e9 ser la primera y la \u00faltima l\u00ednea en ejecutarse obligatoriamente. Esto lo vas a ir entendiendo m\u00e1s adelante cuando avancemos en las diferentes metodolog\u00edas de programaci\u00f3n.</p> <p></p>"},{"location":"unidades/pseudocodigo/resumen-de-pseudocodigo/","title":"Pseudoc\u00f3digo: resumen","text":""},{"location":"unidades/pseudocodigo/resumen-de-pseudocodigo/#resumen","title":"Resumen","text":"<p>\u00a1Â¡Para recordar!!</p> <p>El pseudoc\u00f3digo es una versi\u00f3n legible, en lenguaje humano natural, de un algoritmo. Es decir, que es una representaci\u00f3n de dicho algoritmo en castellano (o alg\u00fan otro idioma humano) y resulta fundamental para el \u00e9xito en el proceso de creaci\u00f3n de un algoritmo. Por lo tanto, es una herramienta valiosa en el desarrollo de software, ya que facilita la planificaci\u00f3n, el dise\u00f1o y la comunicaci\u00f3n de algoritmos antes de su implementaci\u00f3n en un lenguaje de programaci\u00f3n real.</p> <p>Aunque no es un lenguaje de programaci\u00f3n formal, sirve como una herramienta \u00fatil para describir el flujo de un algoritmo de manera clara y comprensible antes de ser implementado en un lenguaje de programaci\u00f3n espec\u00edfico.</p> <p>La pseudo codificaci\u00f3n es una habilidad muy importante porque te permite pensar en la l\u00f3gica del problema por adelantado y puede proporcionar informaci\u00f3n a otras personas que buscan comprender tus decisiones de codificaci\u00f3n y c\u00f3mo funciona tu c\u00f3digo.</p> <ul> <li>Existen varias razones por las que se utiliza el pseudoc\u00f3digo:</li> <li>Mejora el dise\u00f1o de algoritmos permitiendo dise\u00f1ar una soluci\u00f3n paso a paso de manera estructurada y comprensible para resolver un problema.</li> <li>Mejora la comunicaci\u00f3n y colaboraci\u00f3n entre los miembros de un equipo de desarrollo o entre un programador y un cliente.</li> <li>Sirve como documentaci\u00f3n de referencia para otros desarrolladores que trabajen en el mismo proyecto en el futuro, ayud\u00e1ndoles a comprender la l\u00f3gica y la estructura del algoritmo.</li> <li>Proporciona flexibilidad para ser utilizado como base para implementar un algoritmo en diferentes lenguajes de programaci\u00f3n, seg\u00fan las necesidades o preferencias del desarrollador.</li> <li>Es fundamental en la ense\u00f1anza y aprendizaje permitiendo centrarse en los conceptos y la l\u00f3gica detr\u00e1s de un algoritmo antes de preocuparse por la sintaxis y los detalles de un lenguaje de programaci\u00f3n en particular.</li> </ul>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/","title":"Sintaxis empleada en pseudoc\u00f3digo","text":""},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#inicio-y-fin-lineas-de-flujo-instrucciones-comentarios-entradas-y-salidas","title":"Inicio y Fin, l\u00edneas de flujo, instrucciones, comentarios, entradas y salidas","text":"Pseudoc\u00f3digo<pre><code>Inicio\nDeclarar n1 como entero\n\n# Solicita un n\u00famero ingresado por teclado\nAsignar a n1 un n\u00famero ingresado por teclado\n\n*/\nMuestra en pantalla la frase compuesta por\nun texto literal concatenado con el valor de la variable\n/*\nImprimir en pantalla \"El n\u00famero ingresado es\" + n1\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Al igual que los diagramas de flujo, todo pseudoc\u00f3digo tiene un Inicio y un Fin.</p> <p>Las l\u00edneas de flujo y los conectores no tienen un pseudoc\u00f3digo asociado. Las primeras se representan como la continuaci\u00f3n del salto de l\u00ednea que identifica el final de una instrucci\u00f3n y el comienzo de otra; y los segundos se identifican t\u00e1citamente siguiendo la lectura del pseudoc\u00f3digo.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructuras-de-control","title":"Estructuras de control","text":"<p>Al igual en los diagramas de flujos, podemos encontrar en un pseudoc\u00f3digo las siguientes estructuras de control que definen el flujo de ejecuci\u00f3n de las instrucciones a lo largo del programa:</p> <ul> <li> <p>Estructura de control secuencial</p> </li> <li> <p>Estructura de control selectiva</p> <ul> <li>Selectiva (o alternativa) simple </li> <li>Selectiva (o alternativa) doble</li> <li>Selectiva (o alternativa) doble anidada</li> <li>Selectiva (o alternativa) m\u00faltiple</li> </ul> </li> <li> <p>Estructura de control iterativa (repetitiva)</p> <ul> <li>Repetir Mientras (While) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Hasta (Until) con la expresi\u00f3n condicional a la entrada o a la salida</li> <li>Repetir Para\u2026Siguiente (For\u2026Next)</li> </ul> </li> </ul>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-simple","title":"Estructura selectiva (o alternativa) simple","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSi (EXPRESI\u00d3N_CONDICIONAL == VERDADERO) Entonces\n    BLOQUE DE SENTENCIAS QUE SE EJECUTAN SI VERDADERO\nFin Si\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>El bloque de sentencias se ejecuta solo si la expresi\u00f3n condicional es verdadera.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-doble","title":"Estructura selectiva (o alternativa) doble","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSi (EXPRESI\u00d3N_CONDICIONAL == VERDADERO) Entonces\n    BLOQUE DE SENTENCIAS QUE \n    SE EJECUTAN SI VERDADERO\nSino\n    BLOQUE DE SENTENCIAS QUE \n    SE EJECUTAN SI FALSO\nFin Si\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Si la expresi\u00f3n condicional es verdadera, se ejecuta el bloque de sentencias verdadero.</p> <p>Si la expresi\u00f3n condicional es falsa, se ejecuta el bloque de sentencias falso.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-doble-anidada","title":"Estructura selectiva (o alternativa) doble anidada","text":"<p>Corregir que el else puede ser vacio</p> <p></p> Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSi (EXPRESI\u00d3N_CONDICIONAL_1 == VERDADERO) Entonces\n    BLOQUE DE SENTENCIAS QUE \n    SE EJECUTAN SI_1 VERDADERO\nSino\n    Si (EXPRESI\u00d3N_CONDICIONAL_2 == VERDADERO) Entonces\n        BLOQUE DE SENTENCIAS QUE \n        SE EJECUTAN SI_2 VERDADERO\n    Sino\n        BLOQUE DE SENTENCIAS QUE \n        SE EJECUTAN SI_2 FALSO\n    Fin Si\nFin Si\n\u22ee\nFin\n</code></pre> <p>El bloque de sentencias resaltadas corresponde al bloque de sentencias falso de la primera estructura selectiva y contiene otra estructura selectiva.</p> <p>\u00a1Â¡Para recordar!!</p> <p>Esta estructura puede contener tantas estructuras selectivas como sea necesario. </p> <p>La regla de c\u00e1lculo para saber la cantidad de estructuras selectivas doble necesarias es:</p> <p>CANTIDAD DE ESTRUCTURAS = CANTIDAD DE BLOQUES DE SENTENCIAS DISTINTOS \u2013 1</p> <p>Y recuerda que el \u00faltimo bloque de sentencias siempre se ejecuta por el camino falso de la \u00faltima estructura selectiva doble.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-selectiva-o-alternativa-multiple","title":"Estructura selectiva (o alternativa) m\u00faltiple","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nSeg\u00fan (EXPRESI\u00d3N_CONDICIONAL)\n   Caso 1:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL == Caso 1\n   Fin Caso 1\n   Caso 2:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL == Caso 2\n   Fin Caso 2\n   \u22ee\n   Caso n:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL == Caso n\n   Fin Caso n\n\n   Caso por Defecto:\n      BLOQUE DE SENTENCIAS QUE SE EJECUTAN\n      SI EXP. CONDICIONAL != Todos los Casos\n   Fin Caso por Defecto\nFin Seg\u00fan\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Esta estructura puede contener tantos casos como sean necesarios. </p> <p>Puede caber la posibilidad que exista un bloque de sentencias por defecto (default) que se ejecute en el caso que la expresi\u00f3n condicional no valide ninguno de los casos existentes. </p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la entrada","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nRepetir Mientras (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA (UNA Y OTRA VEZ)\n    MIENTRAS LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nFin Repetir\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta no es v\u00e1lida (falso), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-mientras-while-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Mientras (While) con la condici\u00f3n a la salida","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nHacer\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA AL MENOS UNA VEZ\n    (Y LUEGO, TAL VEZ UNA Y OTRA VEZ)\n    MIENTRAS LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nRepetir Mientras (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional no sea v\u00e1lido (falso).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-entrada","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la entrada","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nRepetir Hasta (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA (UNA Y OTRA VEZ)\n    HASTA QUE LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nFin Repetir\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al principio del bucle, antes de ejecutar por primera vez el bloque de sentencias, si esta ES v\u00e1lida (verdadero), nunca ser\u00e1 ejecutado el bloque de sentencias.</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la entrada se utiliza obligatoriamente en el caso de que exista la posibilidad de que el bucle pueda no ejecutarse nunca (es decir, ejecutarse 0 veces). Pero, en caso de NO ser v\u00e1lida la expresi\u00f3n condicional, las sucesivas repeticiones depender\u00e1n del resultado de esta, en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-hasta-until-con-la-condicion-a-la-salida","title":"Estructura iterativa (o repetitiva) Hasta (Until) con la condici\u00f3n a la salida","text":"Pseudoc\u00f3digo<pre><code>Inicio\n\u22ee\nHacer\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA AL MENOS UNA VEZ\n    (Y LUEGO, TAL VEZ UNA Y OTRA VEZ)\n    HASTA QUE LA EXPRESI\u00d3N CONDICIONAL ES VERDADERA\nRepetir Hasta (EXPRESI\u00d3N_CONDICIONAL == VERDADERO)\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>Al evaluarse la expresi\u00f3n condicional al final del bucle, el bloque de sentencias se ejecuta al menos una vez, incluso aunque luego el resultado de la expresi\u00f3n condicional SI sea v\u00e1lido (verdadero).</p> <p>Por lo tanto, esta estructura con la condici\u00f3n a la salida se utiliza obligatoriamente en el caso de que el bucle deba ejecutarse, si o si, una vez. Luego, las sucesivas repeticiones depender\u00e1n del resultado de la expresi\u00f3n condicional en cada repetici\u00f3n.</p> <p>Cuando NO se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#estructura-iterativa-o-repetitiva-parasiguiente-fornext","title":"Estructura iterativa (o repetitiva) Para\u2026Siguiente (For\u2026Next)","text":"Pseudoc\u00f3digo<pre><code># Vi = Valor_inicial\n# Vc = Valor_de_control\n# EXPRESI\u00d3N_CONDICIONAL: Es una expresi\u00f3n evaluada respecto de Vc\n\nInicio\n\u22ee\nPara Vc = Vi ; EXPRESI\u00d3N_CONDICIONAL == VERDADERO ; Vc = Siguiente_Vc\n    BLOQUE DE SENTENCIAS QUE SE EJECUTA (UNA Y OTRA VEZ)\n    HASTA QUE LA EXPRESI\u00d3N CONDICIONAL ES FALSA\nSiguiente_Vc\n\u22ee\nFin\n</code></pre> <p>\u00a1Â¡Para recordar!!</p> <p>A diferencia de las estructuras anteriores donde, seg\u00fan el caso, no se ejecutaban nunca o lo hac\u00edan, si o si, al menos una vez, el esp\u00edritu de esta estructura es el de SI ejecutarse siempre, y el de hacerlo un n\u00famero conocido de veces.</p> <p>Se asigna un valor inicial a la variable de control, que debe cumplir con la expresi\u00f3n condicional que controla la cantidad de repeticiones del bloque de sentencias.</p> <p>Tras cada ejecuci\u00f3n de dicho bloque, a la variable de control se le asignar\u00e1 el siguiente valor de control y se volver\u00e1 a efectuar la validaci\u00f3n de la expresi\u00f3n condicional.</p> <p>Este procedimiento se continuar\u00e1 repitiendo hasta que el valor de la variable de control no valide la expresi\u00f3n condicional (verdadero). </p> <p>Cuando SI se conoce el n\u00famero de repeticiones del bucle, se usa esta estructura.</p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#ejemplo-de-conversion-de-diagrama-de-flujo-a-pseudocodigo","title":"Ejemplo de conversi\u00f3n de diagrama de flujo a pseudoc\u00f3digo","text":"<p>mejorar</p> <p>Mostrar el producto de n\u00fameros enteros positivos entrados por teclado hasta el ingreso de un n\u00famero negativo.</p> <p></p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#ejemplo-de-resolucion-de-un-problema-con-pseudocodigo","title":"Ejemplo de resoluci\u00f3n de un problema con pseudoc\u00f3digo","text":"<p>Completar y embellecer</p> <p>!!! question \"\u00bfC\u00f3mo podemos encontrar a una persona en la gu\u00eda telef\u00f3nica?</p> Pseudoc\u00f3digo<pre><code>Inicio\n    Recoger gu\u00eda telef\u00f3nica\n    Abrir la gu\u00eda telef\u00f3nica en el medio\n    Mira la p\u00e1gina\n    Si la persona est\u00e1 en la p\u00e1gina entonces\n       Llamar a la persona\n    Si no, si la persona est\u00e1 antes de la p\u00e1gina abierta en la gu\u00eda entonces\n       Abrir en el medio de la mitad izquierda previamente abierta\n       Ir a la l\u00ednea 3\n    Si no, si la persona est\u00e1 despu\u00e9s de la p\u00e1gina abierta en la gu\u00eda entonces\n       Abrir en el medio de la mitad derecha previamente abierta\n       Ir a la l\u00ednea 3\n    Si no\n       Indicar que la persona no se encuentra en la gu\u00eda\n    Fin Si\nFin\n</code></pre> <p>Hay que tener en cuenta que el lenguaje dentro de nuestro pseudoc\u00f3digo tiene algunas caracter\u00edsticas \u00fanicas:</p> <p>Primero, algunas de estas l\u00edneas comienzan con acciones o verbos como recoger, abrir, llamar, mirar, indicar. M\u00e1s adelante, llamaremos a estos verbos  funciones.</p> <p>Segundo, observa que algunas l\u00edneas incluyen declaraciones como Si o Si no. Estas, se denominan condicionales y representan ramas que conducen a diferentes caminos, como bifurcaciones en el flujo de ejecuci\u00f3n del programa.</p> <p>Tercero, lugar, observa c\u00f3mo hay expresiones que pueden declararse como verdaderas o falsas, como \u201csi la persona est\u00e1 antes de la p\u00e1gina abierta en la gu\u00eda\u201d. Llamamos a estas expresiones booleanas.</p> <p>Finalmente, observa la declaraci\u00f3n \u201dIr a la l\u00ednea 3\u201d. Llamamos a esta declaraci\u00f3n bucle, que permite crear ciclos, donde podemos repetir partes de nuestro programa.</p> <p>No te olvides que todo programa tiene un INICIO y un FIN.</p> <p>Con estos pasos, revisamos la p\u00e1gina del medio, decidimos qu\u00e9 hacer y repetimos el proceso. Si la persona no est\u00e1 en la p\u00e1gina y no quedan m\u00e1s p\u00e1ginas en el libro, entonces nos detenemos. Y ese \u00faltimo caso es particularmente importante de recordar: cuando los programas o el c\u00f3digo no incluyen ese caso final, puede parecer que se congelan o dejan de responder, o contin\u00faan repitiendo el mismo trabajo una y otra vez sin lograr ning\u00fan progreso.</p> <p></p>"},{"location":"unidades/pseudocodigo/sintaxis-empleada-en-pseudocodigo/#ventajas-de-escribir-primero-en-pseudocodigo","title":"Ventajas de escribir primero en pseudoc\u00f3digo","text":"<p>El pseudoc\u00f3digo es un lenguaje intermedio entre el lenguaje natural humano y el lenguaje de programaci\u00f3n real, principalmente utilizado en la etapa de dise\u00f1o y planificaci\u00f3n de algoritmos. </p> <p>Aunque no es un lenguaje de programaci\u00f3n formal, sirve como una herramienta \u00fatil para describir el flujo de un algoritmo de manera clara y comprensible antes de ser implementado en un lenguaje de programaci\u00f3n espec\u00edfico.</p> <p>Aqu\u00ed hay algunas razones por las que se utiliza el pseudoc\u00f3digo:</p> <ul> <li> <p>Dise\u00f1o de algoritmos: el pseudoc\u00f3digo permite a los desarrolladores dise\u00f1ar algoritmos paso a paso de manera estructurada y comprensible. Ayuda a visualizar el flujo de control, la secuencia de acciones y las estructuras de datos necesarias para resolver un problema.</p> </li> <li> <p>Comunicaci\u00f3n y colaboraci\u00f3n: el pseudoc\u00f3digo proporciona un medio de comunicaci\u00f3n entre los miembros de un equipo de desarrollo o entre un programador y un cliente. Al describir el algoritmo en un lenguaje m\u00e1s cercano al ingl\u00e9s u otro idioma natural, se facilita la comprensi\u00f3n y la revisi\u00f3n conjunta.</p> </li> <li> <p>Documentaci\u00f3n: el pseudoc\u00f3digo tambi\u00e9n se utiliza para documentar algoritmos. Puede servir como una referencia para otros desarrolladores que trabajen en el mismo proyecto en el futuro, ayud\u00e1ndoles a comprender la l\u00f3gica y la estructura del algoritmo.</p> </li> <li> <p>Flexibilidad: el pseudoc\u00f3digo no est\u00e1 vinculado a un lenguaje de programaci\u00f3n espec\u00edfico, lo que proporciona flexibilidad al programador. Puede ser utilizado como base para implementar un algoritmo en diferentes lenguajes de programaci\u00f3n, seg\u00fan las necesidades o preferencias del desarrollador.</p> </li> <li> <p>Ense\u00f1anza y aprendizaje: el pseudoc\u00f3digo se utiliza ampliamente en la ense\u00f1anza de programaci\u00f3n, especialmente para principiantes. Permite a los estudiantes centrarse en los conceptos y la l\u00f3gica detr\u00e1s de un algoritmo antes de preocuparse por la sintaxis y los detalles de un lenguaje de programaci\u00f3n en particular.</p> </li> </ul>"},{"location":"unidades/svcode/configuracion-de-vscode/","title":"Explicar como se configura el tabulador (Spaces: 4 - en la barra de estados abajo)","text":""},{"location":"unidades/svcode/shortcuts-en-vscode/","title":"Importante!! Si se mantiene \"alt\" se puede generar m\u00e1s de una selecci\u00f3n","text":""},{"location":"unidades/svcode/shortcuts-en-vscode/#si-se-mantiene-con-una-linea-seleccionada-y-se-aprietan-las-flechas-se-puede-mover-la-anteriormente-mencionada","title":"Si se mantiene con una l\u00ednea seleccionada y se aprietan las flechas, se puede mover la anteriormente mencionada","text":""},{"location":"unidades/svcode/shortcuts-en-vscode/#altz-permite-word-wrap-ajuste-de-linea-cuando-el-largo-del-codigo-es-mayor-que-el-ancho-de-la-pantalla-baja-el-codigo-al-siguiente-renglon","title":"ALT+Z permite Word Wrap (ajuste de linea cuando el largo del codigo es mayor que el ancho de la pantalla, baja el codigo al siguiente renglon)","text":""}]}